var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
System.register("Data/UIComponentBaseData", [], function (exports_1, context_1) {
    "use strict";
    var DirectionType, UIComponentBaseData;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            //方向类型
            (function (DirectionType) {
                DirectionType[DirectionType["Vertical"] = 0] = "Vertical";
                DirectionType[DirectionType["Horizontal"] = 1] = "Horizontal";
                DirectionType[DirectionType["UP"] = 2] = "UP";
                DirectionType[DirectionType["DOWN"] = 3] = "DOWN";
            })(DirectionType || (DirectionType = {}));
            exports_1("DirectionType", DirectionType);
            UIComponentBaseData = /** @class */ (function () {
                function UIComponentBaseData() {
                    this.index = 0;
                    this.width = 0;
                    this.height = 0;
                }
                return UIComponentBaseData;
            }());
            exports_1("UIComponentBaseData", UIComponentBaseData);
        }
    };
});
System.register("Data/CellData", ["Data/UIComponentBaseData"], function (exports_2, context_2) {
    "use strict";
    var UIComponentBaseData_1, CellData;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (UIComponentBaseData_1_1) {
                UIComponentBaseData_1 = UIComponentBaseData_1_1;
            }
        ],
        execute: function () {
            CellData = /** @class */ (function (_super) {
                __extends(CellData, _super);
                function CellData() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    //是否显示tips 默认不显示
                    _this.showTip = false;
                    //
                    _this.enabled = true;
                    return _this;
                }
                CellData.prototype.Clone = function () {
                    var data = new CellData();
                    data.width = this.width;
                    data.height = this.height;
                    data.selectIcon = this.selectIcon;
                    data.showTip = this.showTip;
                    return data;
                };
                return CellData;
            }(UIComponentBaseData_1.UIComponentBaseData));
            exports_2("CellData", CellData);
        }
    };
});
System.register("Data/Cell", [], function (exports_3, context_3) {
    "use strict";
    var Cell;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [],
        execute: function () {
            exports_3("Cell", Cell = /** @class */ (function (_super) {
                __extends(Cell, _super);
                function Cell() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.name = "Cell";
                    return _this;
                }
                Cell_1 = Cell;
                Object.defineProperty(Cell.prototype, "cellData", {
                    get: function () {
                        return this.baseData;
                    },
                    set: function (value) {
                        this.baseData = value;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Cell.prototype, "index", {
                    get: function () {
                        return this.cellData.index;
                    },
                    enumerable: false,
                    configurable: true
                });
                Cell.prototype.onPlay = function () {
                    if (this.btn == null) {
                        this.addBtn();
                    }
                    this.btn.addListener(m4m.event.UIEventEnum.PointerClick, this.pointerClickFun, this);
                    //this.btn.addListener(m4m.event.UIEventEnum.PointerDown, this.pointerClickFun, this);
                    // console.error("添加了按钮事件",this.cellData.index);
                };
                //克隆生成的UI带引用关系对象 如果默认格子需要Tips super这个方法
                Cell.prototype.setCellClass = function (value) {
                    // this.cellClass = value;
                    // this.addBtn();
                    //***因down事件会和滑动框里的事件有冲突 btn组件会吃掉往下传的dwon事件  这里特殊处理了 down的实现  实现 m4m.framework.I2DPointListener 接口
                    // this.btn.addListener(m4m.event.UIEventEnum.PointerDown, this.pointerDownFun, this);
                };
                //选中当前cell 时的fun
                Cell.prototype.selectFun = function (selectbool) {
                    if (this.baseData) {
                        if (this.baseData.selectIcon) {
                            this.baseData.selectIcon.visible = selectbool;
                        }
                        // console.log(selectbool);
                    }
                    else {
                        console.error("CellData 未赋值！");
                    }
                };
                Cell.prototype.setData = function (value) {
                    //
                };
                Cell.prototype.dispose = function () {
                    //removeListener
                    if (this.btn) {
                        this.btn.removeListener(m4m.event.UIEventEnum.PointerClick, this.pointerClickFun, this);
                        this.btn.removeListener(m4m.event.UIEventEnum.PointerDown, this.pointerClickFun, this);
                    }
                    // this.btn.removeListener(m4m.event.UIEventEnum.PointerDown, this.pointerDownFun, this);
                };
                //按钮down 状态
                Cell.prototype.pointerDownFun = function () {
                };
                Cell.prototype.onPointEvent = function (canvas, ev, oncap) {
                    //oncap==true 是捕获阶段，一般的行为，只在pop阶段处理
                    if (oncap) {
                        return;
                    }
                    var tv2 = Cell_1.helpV2;
                    tv2.x = ev.x;
                    tv2.y = ev.y;
                    var b = this.transform.ContainsCanvasPoint(tv2);
                    if (b) {
                        if (ev.type == m4m.event.PointEventEnum.PointDown) {
                            // console.error("onPointEventonPointEventonPointEventonPointEvent  PointDown");
                            this.pointerDownFun();
                        }
                    }
                };
                Cell.prototype.pointerClickFun = function () {
                    // console.error(this.index);
                    if (this.clickCallBackFun) {
                        this.clickCallBackFun(this.index);
                    }
                };
                Cell.prototype.addBtn = function () {
                    this.btn = this.transform.getComponent("button");
                    if (this.btn == null) {
                        this.btn = this.transform.addComponent("button");
                    }
                    else {
                        console.error("当前cell已加 button 组件 不需要添加！");
                    }
                };
                var Cell_1;
                Cell.helpV2 = new m4m.math.vector2();
                Cell = Cell_1 = __decorate([
                    m4m.reflect.node2DComponent
                ], Cell);
                return Cell;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Data/CheckBoxComponent", [], function (exports_4, context_4) {
    "use strict";
    var CheckBoxComponent, CheckType;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [],
        execute: function () {
            exports_4("CheckBoxComponent", CheckBoxComponent = /** @class */ (function (_super) {
                __extends(CheckBoxComponent, _super);
                function CheckBoxComponent() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.checkType = CheckType.Default;
                    //勾选状态
                    _this._checkState = false;
                    _this.iconSprStr = ".atlas.json_";
                    return _this;
                }
                CheckBoxComponent.prototype.onPlay = function () {
                    //
                    this.btn = this.transform.addComponent("button");
                    this.btn.addListener(m4m.event.UIEventEnum.PointerClick, this.btnClick_event, this);
                    this.init();
                };
                Object.defineProperty(CheckBoxComponent.prototype, "value", {
                    get: function () {
                        return this._checkState;
                    },
                    set: function (value) {
                        if (this._checkState == value) {
                            return;
                        }
                        this._checkState = value;
                        var iconState = 0;
                        if (value) {
                            iconState = 1;
                        }
                        this.init();
                        var spriteIcon = this.assetMgr.getAssetByName(this.baseName + iconState);
                        this.image.sprite = spriteIcon;
                        if (this.callBackFun) {
                            this.callBackFun(this._checkState);
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                //按钮 点击
                CheckBoxComponent.prototype.btnClick_event = function () {
                    if (this.checkType == CheckType.Default) {
                        this.value = !this._checkState;
                    }
                    else {
                        if (this._checkState == false) {
                            this.value = !this._checkState;
                        }
                    }
                };
                CheckBoxComponent.prototype.init = function () {
                    if (this.baseName == null) {
                        this.assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                        this.image = this.transform.getComponent("image2D");
                        var nameArr = this.transform.name.split("_");
                        var iconName = nameArr[0];
                        //.atlas.json
                        this.baseName = this.image["_spriteName"];
                        var index = this.baseName.indexOf(this.iconSprStr);
                        if (index != -1) {
                            var uiName = this.baseName.substring(0, index + this.iconSprStr.length);
                            this.baseName = uiName + iconName;
                            // console.error(a + iconName);
                        }
                        else {
                            console.error("CheckBoxComponent 组件取图片名出错！");
                            return;
                        }
                        var lastOne = this.baseName[this.baseName.length - 1];
                        this.baseName = isNaN(Number(lastOne)) ? this.baseName : this.baseName.substring(0, this.baseName.length - 1);
                        //默认不勾选
                        var spriteIcon = this.assetMgr.getAssetByName(this.baseName + 0);
                        this.image.sprite = spriteIcon;
                    }
                };
                CheckBoxComponent = __decorate([
                    m4m.reflect.node2DComponent
                ], CheckBoxComponent);
                return CheckBoxComponent;
            }(m4m.framework.behaviour2d)));
            (function (CheckType) {
                CheckType[CheckType["Default"] = 1] = "Default";
                CheckType[CheckType["Special"] = 2] = "Special";
            })(CheckType || (CheckType = {}));
            exports_4("CheckType", CheckType);
        }
    };
});
System.register("Data/Dictionary", [], function (exports_5, context_5) {
    "use strict";
    var Dictionary;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [],
        execute: function () {
            Dictionary = /** @class */ (function () {
                function Dictionary(init) {
                    if (init === void 0) { init = null; }
                    this._keys = new Array();
                    this._values = new Array();
                    if (init) {
                        for (var x = 0; x < init.length; x++) {
                            //this[init[x].key] = init[x].value;
                            this._keys.push(init[x].key);
                            this._values.push(init[x].value);
                        }
                    }
                }
                Dictionary.prototype.Add = function (key, value) {
                    //this[key] = value;
                    var index = this._keys.indexOf(key); //indexOf 查找会丢失精度  比如存入一个Number.MAX_VALUE 再用indexOf查找 (Number.MAX_VALUE-1)是否存在数组中  会返回存在  index不为-1
                    if (index != -1) {
                        this._values[index] = value;
                    }
                    else {
                        this._keys.push(key);
                        this._values.push(value);
                    }
                };
                Dictionary.prototype.Remove = function (key) {
                    var index = this._keys.indexOf(key);
                    if (index != -1) {
                        this._keys.splice(index, 1);
                        this._values.splice(index, 1);
                        //delete this[key];
                    }
                    else {
                        console.error(key + " The Key not in Dictionary");
                    }
                };
                Dictionary.prototype.GetValue = function (key) {
                    var index = this._keys.indexOf(key);
                    if (index != -1) {
                        return this._values[index];
                    }
                    console.error("Get:" + key + " The Key not in Dictionary");
                    return null;
                };
                Dictionary.prototype.GetKey = function (value) {
                    var index = this._values.indexOf(value);
                    if (index != -1) {
                        return this._keys[index];
                    }
                    console.error("Get:" + value + " The value not in Dictionary");
                    return null;
                };
                Object.defineProperty(Dictionary.prototype, "keys", {
                    get: function () {
                        return this._keys;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Dictionary.prototype, "values", {
                    get: function () {
                        return this._values;
                    },
                    enumerable: false,
                    configurable: true
                });
                Dictionary.prototype.ContainsKey = function (key) {
                    //if(typeof this[key] === "undefined") {
                    if (this._keys.indexOf(key) == -1) {
                        return false;
                    }
                    return true;
                };
                Object.defineProperty(Dictionary.prototype, "count", {
                    get: function () {
                        return this._keys.length;
                    },
                    enumerable: false,
                    configurable: true
                });
                Dictionary.prototype.Clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                };
                return Dictionary;
            }());
            exports_5("Dictionary", Dictionary);
        }
    };
});
System.register("Data/EventDispatcher", ["Data/Dictionary"], function (exports_6, context_6) {
    "use strict";
    var Dictionary_1, EventDispatcher;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [
            function (Dictionary_1_1) {
                Dictionary_1 = Dictionary_1_1;
            }
        ],
        execute: function () {
            EventDispatcher = /** @class */ (function () {
                function EventDispatcher() {
                    this.events = new Dictionary_1.Dictionary();
                }
                EventDispatcher.prototype.addEventListener = function (evnetType, fun) {
                    var functions;
                    if (!this.events.ContainsKey(evnetType)) {
                        this.events.Add(evnetType, new Array());
                    }
                    functions = this.events.GetValue(evnetType);
                    functions.push(fun);
                    this.events.Add(evnetType, functions);
                    // console.error(evnetType+"add回调函数的数量为"+functions.length+"      "+fun.name);
                };
                EventDispatcher.prototype.removeEventListener = function (evnetType, fun) {
                    if (!this.events.ContainsKey(evnetType)) {
                        return;
                    }
                    var functions = this.events.GetValue(evnetType);
                    var index = functions.indexOf(fun);
                    if (index != -1) {
                        functions.splice(index, 1);
                    }
                    this.events.Add(evnetType, functions);
                };
                EventDispatcher.prototype.dispatchEvent = function (evnetType) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    var functions;
                    if (!this.events.ContainsKey(evnetType)) {
                        this.events.Add(evnetType, new Array());
                    }
                    functions = this.events.GetValue(evnetType);
                    // console.error(evnetType+"回调函数的数量为"+functions.length);
                    functions.forEach(function (fun) {
                        // console.error(fun.name);
                        fun.apply(fun, args);
                    });
                };
                return EventDispatcher;
            }());
            exports_6("EventDispatcher", EventDispatcher);
        }
    };
});
System.register("Tools/ioTool", [], function (exports_7, context_7) {
    "use strict";
    var ioTool;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [],
        execute: function () {
            // tslint:disable-next-line: class-name
            ioTool = /** @class */ (function (_super) {
                __extends(ioTool, _super);
                function ioTool() {
                    return _super.call(this) || this;
                }
                ioTool.prototype.readVector3 = function () {
                    var x = this.readFloat();
                    var y = this.readFloat();
                    var z = this.readFloat();
                    return new m4m.math.vector3(x, y, z);
                };
                ioTool.prototype.readVector4 = function () {
                    var w = this.readFloat();
                    var x = this.readFloat();
                    var y = this.readFloat();
                    var z = this.readFloat();
                    return new m4m.math.vector4(w, x, y, z);
                };
                ioTool.prototype.readVector3Array = function () {
                    var arr = new Array();
                    var num = this.readByte();
                    for (var i = 0; i < num; i++) {
                        var v3 = this.readVector3();
                        arr.push(v3);
                    }
                    return arr;
                };
                ioTool.prototype.readReshsArray = function () {
                    var arr = new Array();
                    var num = this.readByte();
                    for (var i = 0; i < num; i++) {
                        var len = this.readByte();
                        var nums = new Array();
                        for (var j = 0; j < len; j++) {
                            var nn = this.readInt32();
                            nums.push(nn);
                        }
                        arr.push(nums);
                    }
                    //let str = this.readUTFBytes();
                    // console.error(str);
                    // if (!str||str=="") {
                    //    return null;
                    // }
                    // var strArr = str.split("|");
                    // for(let i=0,len=strArr.length;i<len;++i){
                    //    var newstrArr =  strArr[i].split(",");
                    //    var num = new Array<number>();
                    //    for(let j=0,len=strArr.length;j<len;++j){
                    //     var ii =Number(strArr[i]);
                    //     num.push(ii);
                    //    }
                    //    arr.push(num);
                    // }
                    return arr;
                };
                ioTool.prototype.readNumArray = function () {
                    var arr = new Array();
                    var num = this.readByte();
                    for (var i = 0; i < num; i++) {
                        //var len = this.readByte();
                        var nn = this.readInt32();
                        arr.push(nn);
                    }
                    return arr;
                };
                return ioTool;
            }(m4m.io.binTool));
            exports_7("ioTool", ioTool);
        }
    };
});
System.register("Data/Map", [], function (exports_8, context_8) {
    "use strict";
    var cMap;
    var __moduleName = context_8 && context_8.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 清空Map
             */
            // tslint:disable-next-line: class-name
            cMap = /** @class */ (function () {
                function cMap(obj) {
                    if (obj === void 0) { obj = null; }
                    /** 存放数据 */
                    this.data = {};
                    if (!obj) {
                        return;
                    }
                    for (var key in obj) {
                        this.data[key] = obj[key];
                    }
                }
                /**
                 * 清空Map
                 */
                cMap.prototype.clear = function () {
                    this.data = {};
                };
                /**
                 * 判断是否包含指定Key
                 * @param key
                 */
                cMap.prototype.has = function (key) {
                    return key in this.data;
                };
                /**
                 * 放入一个键值对
                 * @param key
                 * @param value
                 */
                cMap.prototype.set = function (key, value) {
                    this.data[key] = value;
                    return this;
                };
                /**
                 * 获取某键对应的值
                 * @param  key
                 * @return  value
                 */
                cMap.prototype.get = function (key) {
                    return this.data[key];
                };
                /**
                 * 删除一个键值对
                 * @param  key
                 */
                cMap.prototype.delete = function (key) {
                    if (this.has(key)) {
                        delete this.data[key];
                        return true;
                    }
                    return false;
                };
                /**
                 * 遍历Map,执行处理函数
                 * @param fn  回调函数 function(key,value){..}
                 */
                cMap.prototype.forEach = function (fn) {
                    if (!fn) {
                        return;
                    }
                    for (var key in this.data) {
                        fn(this.data[key], key);
                    }
                };
                /**
                 * 异步遍历Map,执行处理函数
                 * @param fn  回调函数 function(key,value){..}
                 */
                cMap.prototype.forEachAsync = function (fn) {
                    return __awaiter(this, void 0, void 0, function () {
                        var _a, _b, _c, _i, key;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    if (!fn) {
                                        return [2 /*return*/];
                                    }
                                    _a = this.data;
                                    _b = [];
                                    for (_c in _a)
                                        _b.push(_c);
                                    _i = 0;
                                    _d.label = 1;
                                case 1:
                                    if (!(_i < _b.length)) return [3 /*break*/, 4];
                                    _c = _b[_i];
                                    if (!(_c in _a)) return [3 /*break*/, 3];
                                    key = _c;
                                    return [4 /*yield*/, fn(this.data[key], key)];
                                case 2:
                                    _d.sent();
                                    _d.label = 3;
                                case 3:
                                    _i++;
                                    return [3 /*break*/, 1];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * 克隆Map,返回克隆Map
                 */
                cMap.prototype.clone = function () {
                    var newObj = new cMap();
                    for (var key in this.data) {
                        newObj.set(key, this.data[key]);
                    }
                    return newObj;
                };
                Object.defineProperty(cMap.prototype, "size", {
                    /**
                     * 获取键值对数量
                     */
                    get: function () {
                        return Object.keys(this.data).length;
                    },
                    enumerable: false,
                    configurable: true
                });
                return cMap;
            }());
            exports_8("cMap", cMap);
            //注册 excel 解析使用工具类
            if (!m4m["__ExcDate__"]) {
                m4m["__ExcDate__"] = {};
            }
            m4m["__ExcDate__"].cMap = cMap;
        }
    };
});
System.register("Data/ExcelDataBase", ["Tools/ioTool", "Data/EventDispatcher", "Data/Map"], function (exports_9, context_9) {
    "use strict";
    var ioTool_1, EventDispatcher_1, Map_1, ExcelDataBase;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [
            function (ioTool_1_1) {
                ioTool_1 = ioTool_1_1;
            },
            function (EventDispatcher_1_1) {
                EventDispatcher_1 = EventDispatcher_1_1;
            },
            function (Map_1_1) {
                Map_1 = Map_1_1;
            }
        ],
        execute: function () {
            exports_9("ExcelDataBase", ExcelDataBase = /** @class */ (function (_super) {
                __extends(ExcelDataBase, _super);
                function ExcelDataBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ExcelDataBase, "_list", {
                    get: function () {
                        var _name = this.name; //当前子类 类名
                        var _map = this._listMap[_name];
                        if (!_map) {
                            _map = this._listMap[_name] = new Map_1.cMap();
                        }
                        return _map;
                    },
                    set: function (v) {
                        var _name = this.name;
                        this._listMap[_name] = v;
                    },
                    enumerable: false,
                    configurable: true
                });
                ExcelDataBase.getDataByIDCallBack = function (id, callBack) {
                    var _this = this;
                    if (!this._list.get(id)) {
                        var url_1 = "".concat(this.excelSplitData).concat(this.name, "/").concat(this.name).concat(id, ".json");
                        if (this.loadedDic.has(url_1)) {
                            if (callBack) {
                                callBack(this._list.get(id));
                            }
                            return;
                        }
                        //加载中 
                        if (this.loadingDic.has(url_1)) {
                            //不是第一个 ，加入列表
                            var loadingList = this.loadingDic.get(url_1);
                            loadingList.push(callBack);
                            this.loadingDic.set(url_1, loadingList);
                        }
                        else {
                            this.loadingDic.set(url_1, []);
                            // console.error("加载人物表配置多次！！", url);
                            this.loadArrayBuffer(url_1)
                                .then(function (bd) {
                                _this.loadedDic.set(url_1, true);
                                var bytes = new ioTool_1.ioTool();
                                bytes.write(new Uint8Array(bd));
                                _this.parseData(bytes);
                                bytes.dispose();
                                if (callBack) {
                                    callBack(_this._list.get(id));
                                }
                                var loadingList = _this.loadingDic.get(url_1);
                                for (var i = 0; i < loadingList.length; i++) {
                                    var fun = loadingList[i];
                                    if (fun) {
                                        fun(_this._list.get(id));
                                    }
                                }
                                loadingList.length = 0;
                                _this.loadingDic.delete(url_1);
                            });
                        }
                    }
                    else {
                        if (callBack) {
                            callBack(this._list.get(id));
                        }
                    }
                };
                ExcelDataBase.getDataByID = function (id) {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, loadingList, waitFun_1, p, bd, bytes, loadingList, i, len, fun;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = "".concat(this.excelSplitData).concat(this.name, "/").concat(this.name).concat(id, ".json");
                                    if (!!this._list.get(id)) return [3 /*break*/, 2];
                                    if (this.loadedDic.has(url)) {
                                        return [2 /*return*/, this._list.get(id)];
                                    }
                                    //加载中 
                                    if (this.loadingDic.has(url)) {
                                        loadingList = this.loadingDic.get(url);
                                        p = new Promise(function (resolve) { waitFun_1 = resolve; });
                                        loadingList.push(waitFun_1);
                                        return [2 /*return*/, p];
                                    }
                                    //是 第一个加载
                                    this.loadingDic.set(url, []);
                                    return [4 /*yield*/, this.loadArrayBuffer(url)];
                                case 1:
                                    bd = _a.sent();
                                    this.loadedDic.set(url, true);
                                    bytes = new ioTool_1.ioTool();
                                    bytes.write(new Uint8Array(bd));
                                    this.parseData(bytes);
                                    bytes.dispose();
                                    //加载完毕
                                    if (this.loadingDic.has(url)) {
                                        loadingList = this.loadingDic.get(url);
                                        for (i = 0, len = loadingList.length; i < len; i++) {
                                            fun = loadingList[i];
                                            if (fun) {
                                                fun(this._list.get(id));
                                            }
                                        }
                                        loadingList.length = 0;
                                    }
                                    this.loadingDic.delete(url);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._list.get(id)];
                            }
                        });
                    });
                };
                ExcelDataBase.getAllData = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, loadingList, waitFun_2, p, bd, bytes, loadingList, i, len, fun;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = "".concat(this.excelData).concat(this.name, ".json");
                                    if (this.loadedDic.has(url)) {
                                        return [2 /*return*/, this._list];
                                    }
                                    //加载中 
                                    if (this.loadingDic.has(url)) {
                                        loadingList = this.loadingDic.get(url);
                                        p = new Promise(function (resolve) { waitFun_2 = resolve; });
                                        loadingList.push(waitFun_2);
                                        return [2 /*return*/, p];
                                    }
                                    //是 第一个加载
                                    this.loadingDic.set(url, []);
                                    return [4 /*yield*/, this.loadArrayBuffer(url)];
                                case 1:
                                    bd = _a.sent();
                                    // console.error("加载表配置多次！！********");
                                    this.loadedDic.set(url, true);
                                    bytes = new ioTool_1.ioTool();
                                    bytes.write(new Uint8Array(bd));
                                    this.parseData(bytes);
                                    bytes.dispose();
                                    //加载完毕
                                    if (this.loadingDic.has(url)) {
                                        loadingList = this.loadingDic.get(url);
                                        for (i = 0, len = loadingList.length; i < len; i++) {
                                            fun = loadingList[i];
                                            if (fun) {
                                                fun(this._list);
                                            }
                                        }
                                        loadingList.length = 0;
                                    }
                                    this.loadingDic.delete(url);
                                    return [2 /*return*/, this._list];
                            }
                        });
                    });
                };
                ExcelDataBase.getAllDataCallBack = function (callBack) {
                    var _this = this;
                    var url = "".concat(this.excelData).concat(this.name, ".json");
                    if (this.loadedDic.has(url)) {
                        if (callBack) {
                            callBack(this._list);
                        }
                        return;
                    }
                    //加载中 
                    if (this.loadingDic.has(url)) {
                        //不是第一个 ，加入列表
                        var loadingList = this.loadingDic.get(url);
                        loadingList.push(callBack);
                        this.loadingDic.set(url, loadingList);
                    }
                    else {
                        this.loadingDic.set(url, []);
                        // console.error("加载表配置多次！！33333", url, this.name);
                        this.loadArrayBuffer(url)
                            .then(function (bd) {
                            _this.loadedDic.set(url, true);
                            var bytes = new ioTool_1.ioTool();
                            bytes.write(new Uint8Array(bd));
                            _this.parseData(bytes);
                            bytes.dispose();
                            if (callBack) {
                                callBack(_this._list);
                            }
                            var loadingList = _this.loadingDic.get(url);
                            for (var i = 0; i < loadingList.length; i++) {
                                var fun = loadingList[i];
                                if (fun) {
                                    fun(_this._list);
                                }
                            }
                            loadingList.length = 0;
                            _this.loadingDic.delete(url);
                        });
                    }
                };
                ExcelDataBase.parseData = function (bytes) {
                };
                ExcelDataBase.loadArrayBuffer = function (url) {
                    return new Promise(function (resolve) {
                        m4m.io.loadArrayBuffer(url, function (bin, urlStr) {
                            resolve(bin);
                        });
                    });
                };
                ExcelDataBase.excelData = "res/ExcelData/";
                ExcelDataBase.excelSplitData = "res/ExcelDataSplit/";
                ExcelDataBase._listMap = {};
                ExcelDataBase.loadedDic = new Map_1.cMap(); // 加载完的loader
                ExcelDataBase.loadingDic = new Map_1.cMap(); // 加载中loader
                return ExcelDataBase;
            }(EventDispatcher_1.EventDispatcher)));
        }
    };
});
System.register("Tools/engineParallel/spInterface", [], function (exports_10, context_10) {
    "use strict";
    var engineParallelType, spComponentType;
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [],
        execute: function () {
            (function (engineParallelType) {
                /** 纯源引擎 */
                engineParallelType[engineParallelType["none"] = 0] = "none";
                /** 微信引擎 */
                engineParallelType[engineParallelType["wxEngine"] = 1] = "wxEngine";
                /** qq引擎 */
                engineParallelType[engineParallelType["qqEngine"] = 2] = "qqEngine";
                /** 抖音引擎 */
                engineParallelType[engineParallelType["ttEngine"] = 3] = "ttEngine";
            })(engineParallelType || (engineParallelType = {}));
            exports_10("engineParallelType", engineParallelType);
            (function (spComponentType) {
                /** 相机组件 */
                spComponentType[spComponentType["camera"] = 0] = "camera";
                /** 模型渲染组件 */
                spComponentType[spComponentType["meshRenderer"] = 1] = "meshRenderer";
                /** 蒙皮模型渲染 组件 */
                spComponentType[spComponentType["skinMeshRenderer"] = 2] = "skinMeshRenderer";
                /** 粒子系统 组件 */
                spComponentType[spComponentType["particleSystem"] = 3] = "particleSystem";
                /** 拖尾 */
                spComponentType[spComponentType["trailRenderer"] = 4] = "trailRenderer";
                /** 动画播放 */
                spComponentType[spComponentType["animPlayer"] = 5] = "animPlayer";
            })(spComponentType || (spComponentType = {}));
            exports_10("spComponentType", spComponentType);
        }
    };
});
System.register("Tools/GameInfoUtil", ["Data/Map", "Tools/miniGame"], function (exports_11, context_11) {
    "use strict";
    var Map_2, miniGame_1, GameInfoUtil;
    var __moduleName = context_11 && context_11.id;
    return {
        setters: [
            function (Map_2_1) {
                Map_2 = Map_2_1;
            },
            function (miniGame_1_1) {
                miniGame_1 = miniGame_1_1;
            }
        ],
        execute: function () {
            exports_11("GameInfoUtil", GameInfoUtil = /** @class */ (function () {
                function GameInfoUtil() {
                }
                //对比SDK 版本号
                GameInfoUtil.compareSDKVersion = function (minSDKver, needTip) {
                    if (needTip === void 0) { needTip = true; }
                    if (this.dic.has(minSDKver)) {
                        return this.dic.get(minSDKver);
                        // tslint:disable-next-line: unnecessary-else
                    }
                    else {
                        //当前SDK版本号
                        var arr = GameInfoUtil.SDKVersion.split("."); //
                        var num = Number(arr[0]) * 100 + Number(arr[1]) * 10 + Number(arr[2]);
                        //最低SDK版本号
                        var minarr = minSDKver.split("."); //
                        var minnum = Number(minarr[0]) * 100 + Number(minarr[1]) * 10 + Number(minarr[2]);
                        if (num < minnum) {
                            if (needTip) {
                                miniGame_1.miniGame.showModal({
                                    title: "提示",
                                    content: "当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。",
                                });
                            }
                            this.dic.set(minSDKver, false);
                            return false;
                        }
                        this.dic.set(minSDKver, true);
                        return true;
                    }
                };
                //***********授权以后才能取到
                /** 头像URL */
                GameInfoUtil.avatarUrl = "";
                //微信名
                GameInfoUtil.wxName = "";
                //用户所在省份
                GameInfoUtil.province = "";
                //用户所在城市
                GameInfoUtil.city = "";
                //用户性别   0未知  1 男  2女
                GameInfoUtil.gender = 0;
                GameInfoUtil.dic = new Map_2.cMap();
                return GameInfoUtil;
            }()));
        }
    };
});
System.register("Tools/miniGame", ["Tools/engineParallel/spInterface", "Tools/GameInfoUtil"], function (exports_12, context_12) {
    "use strict";
    var spInterface_1, GameInfoUtil_1, miniAPIType, miniGame, WxMiniApi, QQMiniApi, VivoMiniApi;
    var __moduleName = context_12 && context_12.id;
    return {
        setters: [
            function (spInterface_1_1) {
                spInterface_1 = spInterface_1_1;
            },
            function (GameInfoUtil_1_1) {
                GameInfoUtil_1 = GameInfoUtil_1_1;
            }
        ],
        execute: function () {
            (function (miniAPIType) {
                miniAPIType[miniAPIType["none"] = 0] = "none";
                miniAPIType[miniAPIType["wechat"] = 1] = "wechat";
                miniAPIType[miniAPIType["qq"] = 2] = "qq";
                miniAPIType[miniAPIType["tikTok"] = 3] = "tikTok";
                miniAPIType[miniAPIType["vivo"] = 4] = "vivo";
                miniAPIType[miniAPIType["oppo"] = 5] = "oppo";
            })(miniAPIType || (miniAPIType = {}));
            exports_12("miniAPIType", miniAPIType);
            exports_12("miniGame", miniGame = /** @class */ (function () {
                /**
                 *  小游戏平台API
                 */
                // tslint:disable-next-line: class-name
                function miniGame() {
                }
                /** miniGame 初始化 */
                miniGame.PreInit = function () {
                    if (m4m["__wx__"]) {
                        this.miniType = miniAPIType.wechat;
                        this.miniObj = new WxMiniApi(m4m["__wx__"]);
                    }
                    else if (m4m["__qq__"]) {
                        this.miniType = miniAPIType.qq;
                        this.miniObj = new QQMiniApi(m4m["__qq__"]);
                    }
                    else if (m4m["__TT__"]) {
                        this.miniType = miniAPIType.tikTok;
                    }
                    else if (m4m["__qg_vivo__"]) {
                        this.miniType = miniAPIType.vivo;
                        this.miniObj = new VivoMiniApi(m4m["__qg_vivo__"]);
                    }
                    else if (m4m["__qg_oppo__"]) {
                        this.miniType = miniAPIType.oppo;
                        console.error("暂未支持 oppo  API");
                    }
                    else {
                        console.warn("当前不处于小游戏环境 ");
                    }
                    //取特有API
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        this.wxSystemInfo = this.miniObj.handle.getSystemInfoSync();
                        this.LaunchOptions = this.miniObj.handle.getLaunchOptionsSync();
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    else if (this.miniType == miniAPIType.vivo) {
                        var data = this.miniObj.handle.getSystemInfoSync();
                        //向微信接口对齐
                        this.wxSystemInfo = {
                            brand: data.brand,
                            model: data.model,
                            platform: "".concat(data.platformVersionName, " ").concat(data.platformVersionCode),
                        };
                    }
                    var nullFun = function () { return null; };
                    //如果不是小游戏平台 ， 清理相关函数
                    if (this.miniType != miniAPIType.none) {
                        return;
                    }
                    for (var key in miniGame) {
                        if (typeof (miniGame[key]) === "function") {
                            miniGame[key] = nullFun;
                        }
                    }
                };
                /** 初始化 */
                miniGame.init = function (uiMgr) {
                    this.uiMgr = uiMgr;
                    //微信报错 收集上传到统计服务器
                    if (this.miniObj && this.miniObj.handle.onError) {
                        this.miniObj.handle.onError(function (res) {
                            var errM = "message:" + res.message + "__stack:" + res.stack;
                            console.error(errM);
                            //jsManager.ErrorMessageSendFun(errM);
                        });
                    }
                    m4m["_loadImgFun"] = this._loadImgFun.bind(this);
                    // m4m["refSharedCanvas"] = this.refSharedCanvas.bind(this);
                    //取特有API
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        this.ckInitSCanvas();
                        this.setfullMode();
                        // this.wxSystemInfo = this.miniObj.handle.getSystemInfoSync();
                        // this.LaunchOptions = this.miniObj.handle.getLaunchOptionsSync();
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    this.getUserInfo(null); //为了获取用户信息
                };
                /**
                 * 刷新SystemInfo
                 * @param callBackFun 结束回调
                 */
                miniGame.refreshSystemInfo = function (callBackFun) {
                    this.miniObj.handle.getSystemInfo({
                        success: function (res) {
                            miniGame.wxSystemInfo = res;
                            if (callBackFun) {
                                callBackFun(null);
                            }
                        },
                        fail: function (err) {
                            callBackFun(err);
                        },
                    });
                };
                // /** 屏幕 状态条高度（刘海屏处理）*/
                // static getStatusBarHeight() {
                //     if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                //         return this.wxSystemInfo.statusBarHeight;
                //     }
                //     return 0;
                // }
                // /** 屏幕 高度*/
                // static getScreenHeight() {
                //     if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                //         return this.wxSystemInfo.screenHeight;
                //     }
                //     return 0;
                // }
                /** 获取API 版本 */
                miniGame.getAPIVersion = function () {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        return this.wxSystemInfo.version;
                    }
                    return 0;
                };
                /** 短震动 */
                miniGame.vibrateShort = function () {
                    this.miniObj.vibrateShort();
                };
                /** 长震动 */
                miniGame.vibrateLong = function () {
                    this.miniObj.vibrateLong();
                };
                //打开
                miniGame.openMiniPrograme = function (appid, path) {
                    this.miniObj.navigateToMiniProgram({
                        appId: appid,
                        path: path,
                        extraDate: {
                            foo: "bar",
                        },
                        envVersion: "release",
                        success: function (res) {
                            //打开成功
                            console.warn("openMiniPrograme ok");
                        },
                    });
                };
                /** 刷新SharedCanvas */
                miniGame.refSharedCanvas = function () {
                    if (!this.sharedCanvas) {
                        return;
                    }
                    var sharedCanvas = this.sharedCanvas;
                    var gl = m4m.framework.sceneMgr.app.webgl;
                    var rawImg = this.uiMgr.shareCanvasImg;
                    if (!rawImg) {
                        return;
                    }
                    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); //不启用的话 ios 会出现绘制翻转bug
                    //刷新 sharedCanvas 的图片
                    var _tex = rawImg.image.glTexture;
                    gl.bindTexture(gl.TEXTURE_2D, _tex.texture);
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, sharedCanvas);
                };
                /** 设置 头像Icon跟随 或者 全屏 画板模式 */
                miniGame.setHeadFollowMode = function (isHFollow, portrailFollowMgr) {
                    if (!this.sharedCanvas) {
                        return;
                    }
                    if (isHFollow == this.uiMgr.sCanvIconMode) {
                        return;
                    }
                    console.log("setHeadFollowMode isHFollow :".concat(isHFollow));
                    this.uiMgr.sCanvIconMode = isHFollow;
                    if (isHFollow) {
                        // this.setSCanvasWH(this.fIconSize.x, this.fIconSize.y);
                        var iPixel = portrailFollowMgr.iconPixel;
                        this.setSCanvasWH(iPixel * portrailFollowMgr.iconCount, iPixel);
                        // this.setSCanvasWH(1280,720);
                    }
                    else {
                        this.setfullMode();
                    }
                };
                /** 获取用户info */
                miniGame.getUserInfo = function (callback) {
                    var _this = this;
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        return new Promise(function (resolve, reject) {
                            // tslint:disable-next-line: no-this-assignment
                            var self = _this;
                            _this.miniObj.handle.getUserInfo({
                                success: function (res) {
                                    // wxTool.userInfoRes = res;
                                    GameInfoUtil_1.GameInfoUtil.avatarUrl = res.userInfo.avatarUrl;
                                    GameInfoUtil_1.GameInfoUtil.wxName = res.userInfo.nickName;
                                    GameInfoUtil_1.GameInfoUtil.province = res.userInfo.province;
                                    GameInfoUtil_1.GameInfoUtil.city = res.userInfo.city;
                                    GameInfoUtil_1.GameInfoUtil.gender = res.userInfo.gender;
                                    self.myUserInfo = res.userInfo;
                                    if (callback) {
                                        callback();
                                    }
                                    resolve(res);
                                },
                            });
                        });
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    if (callback) {
                        callback();
                    }
                    return;
                };
                // static show_button: boolean = false;
                /** 显示用户授权按钮 */
                miniGame.showUserAuthorizeBtn = function (callback, onTapFun, onckUserInfoScope) {
                    var _this = this;
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        var l = this.wxSystemInfo;
                        var button_1 = this.miniObj.handle.createUserInfoButton({
                            type: "image",
                            // text: "",
                            image: "",
                            //resource/shouquan_btn.png
                            style: {
                                left: l.screenWidth / 2 - (100),
                                top: l.screenHeight / 2 + (l.screenHeight / 5) - 5,
                                width: 230,
                                height: 62,
                            },
                        });
                        console.log("微信授权登录的按钮显示");
                        button_1.show();
                        this.AuthorizeButton = button_1;
                        // this.show_button = true;
                        //点击授权按钮
                        button_1.onTap(function (res) {
                            //授权按钮的点击的回调
                            if (onTapFun) {
                                onTapFun();
                            }
                            var callBackFun = function (isok) { return __awaiter(_this, void 0, void 0, function () {
                                var _res;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!isok) return [3 /*break*/, 2];
                                            return [4 /*yield*/, this.getUserInfo(callback)];
                                        case 1:
                                            _res = _a.sent();
                                            //隐藏按钮
                                            button_1.hide();
                                            //摧毁按钮
                                            button_1.destroy();
                                            if (onckUserInfoScope) {
                                                onckUserInfoScope(_res);
                                            }
                                            _a.label = 2;
                                        case 2: return [2 /*return*/];
                                    }
                                });
                            }); };
                            //检查授权情况
                            _this.ckUserInfoScope(callBackFun);
                        });
                        return;
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    if (callback) {
                        callback();
                    }
                    return;
                };
                /**
                 * 创建用户信息按钮
                 * @param p 参数
                 */
                miniGame.createUserInfoButton = function (p) {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        return this.miniObj.handle.createUserInfoButton(p);
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    return {};
                };
                //检查 用户信息获取 授权是否完成
                miniGame.ckUserInfoScope = function (callback) {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        // tslint:disable-next-line: no-this-assignment
                        var self_1 = this;
                        this.miniObj.handle.getSetting({
                            withSubscriptions: true,
                            success: function (res) {
                                var isad = false;
                                if (res.authSetting) {
                                    isad = res.authSetting[self_1.scopeUif];
                                    console.log(" \u7528\u6237\u4FE1\u606F\u6388\u6743 : ".concat(isad, " "));
                                    if (res.subscriptionsSetting) {
                                        var dy = res.subscriptionsSetting["itemSettings"];
                                        if (dy) {
                                            miniGame.isSubscribe = dy[miniGame.lxstr] == "accept";
                                            miniGame.isVersionUpDateSubscribe = dy[miniGame.versionUpDateStr] == "accept";
                                            miniGame.isActivitySubscribe = dy[miniGame.flashSaleStartStr] == "accept";
                                        }
                                        // res.subscriptionsSetting["mainSwitch"];
                                        console.log("是否已订阅离线提醒  " + miniGame.isSubscribe);
                                    }
                                }
                                if (callback) {
                                    callback(isad);
                                }
                            },
                        });
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                };
                /** 触发GC */
                miniGame.triggerGC = function () {
                    this.miniObj.triggerGC();
                };
                //加载 方法
                miniGame.loadFun = function (url, callBack, fail) {
                    this.miniObj.request({
                        url: url,
                        data: {
                            y: 0,
                            x: 0,
                        },
                        header: {
                            "content-type": "application/json", // 默认值
                        },
                        success: function (res) {
                            if (res.statusCode === 200) {
                                if (callBack) {
                                    callBack(res);
                                }
                            }
                        },
                        fail: function (res) {
                            if (fail) {
                                fail();
                            }
                        },
                    });
                };
                /**
                 * http request 接口
                 * @param p 参数
                 */
                miniGame.request = function (p) {
                    this.miniObj.request(p);
                };
                /**
                 * http request 接口 , Simple 接口
                 * dataType 固定为 json
                 * 回调函数返回参 data == res.data
                 * @param method
                 * @param url
                 * @param data
                 * @param success 成功回调函数
                 * @param complete 完成回调函数
                 * @param fail 失败回调函数
                 */
                miniGame.requestSimple = function (method, url, data, success, complete, fail) {
                    this.miniObj.request({
                        data: data,
                        method: method,
                        dataType: "json",
                        url: url,
                        success: function (res) {
                            if (success) {
                                success(res.data);
                            }
                        },
                        fail: function (res) {
                            console.log("request fail:" + res.message);
                            if (fail) {
                                fail(res.data);
                            }
                        },
                        complete: function (res) {
                            if (complete) {
                                complete(res.data);
                            }
                        },
                    });
                };
                /** 保存图片到相册 */
                miniGame.saveImageToPhotosAlbum = function (filePath) {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        this.miniObj.saveImageToPhotosAlbum({
                            filePath: filePath,
                            success: function (res) {
                                //  console.log("保存成功!");
                            },
                            fail: function () {
                                //    console.log("保存失败!");
                            },
                        });
                    }
                };
                /**存个人数据*/
                miniGame.saveData = function (fName, _data, callBack, _fial) {
                    if (this.miniType == miniAPIType.none) {
                        if (_fial) {
                            _fial();
                        }
                        return;
                    }
                    this.miniObj.setStorage({
                        key: fName,
                        data: _data,
                        success: callBack,
                        fail: _fial,
                    });
                };
                /** 请求获取 保存的数据*/
                miniGame.reqData = function (fName, callBack, _fial) {
                    if (this.miniType == miniAPIType.none) {
                        if (_fial) {
                            _fial();
                        }
                        return;
                    }
                    this.miniObj.getStorage({
                        key: fName,
                        success: callBack,
                        fail: _fial,
                    });
                    return;
                };
                /**显示模态对话框*/
                miniGame.showModal = function (p) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.showModal(p);
                };
                /** 调用接口获取登录凭证 */
                miniGame.login = function (p) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.login(p);
                };
                /**
                 * 获取小游戏启动时的参数
                 */
                miniGame.getLaunchOptionsSync = function () {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        return this.miniObj.handle.getLaunchOptionsSync();
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    return {};
                };
                /**
                 * 获取转发详细信息
                 * @param p 参数
                 */
                miniGame.getShareInfo = function (p) {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        this.miniObj.handle.getShareInfo(p);
                        return;
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    return;
                };
                /**
                 * 调起客户端小游戏订阅消息界面
                 * @param p 参数
                 */
                miniGame.requestSubscribeMessage = function (p) {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        this.miniObj.handle.requestSubscribeMessage(p);
                        return;
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    return;
                };
                /**
                 *  创建内部 audio 上下文 InnerAudioContext 对象。
                 */
                miniGame.createInnerAudioContext = function () {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        return this.miniObj.createInnerAudioContext();
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    return;
                };
                /**
                 * 监听内存不足告警事件
                 * @param f 内存不足告警事件的回调函数
                 */
                miniGame.onMemoryWarning = function (f) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.onMemoryWarning(f);
                };
                /**
                 * 可以修改渲染帧率。默认渲染帧率为 60 帧每秒。修改后，requestAnimationFrame 的回调频率会发生改变。
                 * @param fps 帧率，有效范围 1 - 60。
                 */
                miniGame.setPreferredFramesPerSecond = function (fps) {
                    if (this.miniType == miniAPIType.wechat || this.miniType == miniAPIType.qq) {
                        return this.miniObj.handle.setPreferredFramesPerSecond(fps);
                    }
                    else if (this.miniType == miniAPIType.tikTok) {
                        var temp = void 0;
                    }
                    return;
                };
                /**
                 * 监听小游戏隐藏到后台事件
                 * @param f
                 */
                miniGame.onHide = function (f) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.onHide(f);
                };
                /**
                 * 监听小游戏回到前台的事件
                 * @param f
                 */
                miniGame.onShow = function (f) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.onShow(f);
                };
                /**
                 * 监听鼠标按键按下事件
                 * @param f
                 */
                miniGame.onMouseDown = function (f) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.onMouseDown(f);
                };
                /**
                 * 监听鼠标按键弹起事件
                 * @param f
                 */
                miniGame.onMouseUp = function (f) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.onMouseUp(f);
                };
                /**
                * 显示键盘
                */
                miniGame.showKeyboard = function (keyBoardObj) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.showKeyboard(keyBoardObj);
                };
                /**
                 * 监听键盘输入事件
                 * @param f
                 */
                miniGame.onKeyboardInput = function (f) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.onKeyboardInput(f);
                };
                /**
                 * 取消监听键盘输入事件
                 * @param f
                 */
                miniGame.offKeyboardInput = function (f) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.offKeyboardInput(f);
                };
                /**
                * 监听用户点击键盘 Confirm 按钮时的事件
                */
                miniGame.onKeyboardConfirm = function (keyBoardObj) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.onKeyboardConfirm(keyBoardObj);
                };
                /**
                * 取消监听用户点击键盘 Confirm 按钮时的事件
                */
                miniGame.offKeyboardConfirm = function (keyBoardObj) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.offKeyboardConfirm(keyBoardObj);
                };
                /**
                * 发起米大师支付
                */
                miniGame.requestMidasPayment = function (fun) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.requestMidasPayment(fun);
                };
                /**
                 * 隐藏键盘
                 * @param f
                 */
                miniGame.hideKeyboard = function (obj) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    this.miniObj.hideKeyboard(obj);
                };
                /**
                 * 统计 场景分析上报
                 */
                miniGame.reportUserBehaviorBranchAnalytics = function (branchId, branchDim, eventType) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    // if (!GameInfoUtil.compareSDKVersion('2.12.1', false)) {
                    //     console.error("reportUserBehaviorBranchAnalytics 当前SDK 版本过低！ " + GameInfoUtil.SDKVersion);
                    //     return;
                    // }
                    var branchDimStr = branchDim.toString();
                    // if (eventType == null) {
                    //     this.miniObj.reportUserBehaviorBranchAnalytics({
                    //         branchId: branchId,
                    //         branchDim: branchDimStr
                    //     });
                    // } else {
                    this.miniObj.reportUserBehaviorBranchAnalytics({
                        branchId: branchId,
                        branchDim: branchDimStr,
                        eventType: eventType,
                    });
                    // }
                };
                /**
                 * 获取 离屏canvas
                 * @param customID
                 */
                miniGame.getOffScreenCanvas = function (customID) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    return this.miniObj.getOffScreenCanvas(customID);
                };
                /**
                 * 加载分包
                 * @param p
                 */
                miniGame.loadSubpackage = function (p) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    var result;
                    result = this.miniObj.loadSubpackage(p);
                    return result;
                };
                /**
                 * 连接 webSocket
                 * @param p 选项
                 * @returns Socket任务对象
                 */
                miniGame.connectSocket = function (p) {
                    if (this.miniType == miniAPIType.none) {
                        return;
                    }
                    var result;
                    result = this.miniObj.connectSocket(p);
                    return result;
                };
                //---------------------------------private function---------------------------------------------------
                miniGame._loadImgFun = function (url, callBack) {
                    this.miniObj.downloadFile({
                        url: url,
                        success: function (res) {
                            // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
                            if (res.statusCode === 200) {
                                if (callBack) {
                                    callBack(res.tempFilePath);
                                }
                            }
                        },
                    });
                };
                //检查 sharedCanvas 初始化
                miniGame.ckInitSCanvas = function () {
                    if (m4m["sharedCanvas"]) {
                        return;
                    }
                    var openDataContext = this.miniObj.handle.getOpenDataContext();
                    this.sharedCanvas = m4m["sharedCanvas"] = openDataContext.canvas; //canvas
                };
                //检查 宽高设置
                miniGame.setSCanvasWH = function (w, h) {
                    this.sharedCanvas.width = Math.floor(w);
                    this.sharedCanvas.height = Math.floor(h);
                };
                miniGame.setfullMode = function () {
                    var c = this.uiMgr.overlay.canvas;
                    this.setSCanvasWH(c.pixelWidth, c.pixelHeight);
                };
                /** 引擎并行类型(m4mH5 , 微信牛肉丸 ， qq性能引擎) */
                miniGame.engineParallel = spInterface_1.engineParallelType.none;
                /** 账号凭证 */
                miniGame.token = "";
                /** 小游戏平台类型 */
                miniGame.miniType = miniAPIType.none;
                //离线功能 ID
                miniGame.lxstr = "6NxisNRDY4SEblxA_9Oqz8KiRq8Zh4xmiO0JP6nwSlc";
                //版本更新提示 ID
                miniGame.versionUpDateStr = "M3NPYUW97o6EhBjkpHVuH07Ejm2BEIC02-zM_2svU5s";
                // //限时抢购结束提醒
                // static flashSaleEndStr: string = "yYVVksMBajbNu9fnisWlAXfXNQUcpYTumfLEARGaCgc";
                //限时抢购开启提醒
                miniGame.flashSaleStartStr = "_vNQOaQCmHEbvg4x0c497PU4OzEsd-lvW2ObYOrws_I";
                //是否已订阅 活动提醒
                miniGame.isActivitySubscribe = false;
                //是否已订阅 版本更新
                miniGame.isVersionUpDateSubscribe = false;
                miniGame.isSubscribe = false;
                miniGame.scopeUif = "scope.userInfo";
                return miniGame;
            }()));
            WxMiniApi = /** @class */ (function () {
                function WxMiniApi(miniHandle) {
                    this.canvsMap = {};
                    this.handle = miniHandle;
                    //handle 同名API 直接替换
                    for (var i = 0, len = WxMiniApi.sameInterfaceList.length; i < len; i++) {
                        var key = WxMiniApi.sameInterfaceList[i];
                        if (!this.handle[key]) {
                            console.error(" miniAPI  ".concat(key, " \u6CA1\u627E\u5230"));
                            continue;
                        }
                        this[key] = this.handle[key].bind(this.handle);
                    }
                }
                WxMiniApi.prototype.requestMidasPayment = function (f) {
                };
                WxMiniApi.prototype.connectSocket = function (p) {
                    return null;
                };
                WxMiniApi.prototype.loadSubpackage = function (p) {
                    return null;
                };
                WxMiniApi.prototype.reportUserBehaviorBranchAnalytics = function (obj) {
                };
                WxMiniApi.prototype.onMouseUp = function (f) {
                };
                WxMiniApi.prototype.onMouseDown = function (f) {
                };
                WxMiniApi.prototype.onHide = function (f) {
                };
                WxMiniApi.prototype.onShow = function (f) {
                };
                WxMiniApi.prototype.onMemoryWarning = function (f) {
                };
                WxMiniApi.prototype.createInnerAudioContext = function () {
                };
                WxMiniApi.prototype.login = function (p) {
                };
                WxMiniApi.prototype.showModal = function (p) {
                };
                WxMiniApi.prototype.saveImageToPhotosAlbum = function (p) {
                };
                WxMiniApi.prototype.triggerGC = function () {
                };
                WxMiniApi.prototype.downloadFile = function (p) {
                };
                WxMiniApi.prototype.navigateToMiniProgram = function (p) {
                };
                WxMiniApi.prototype.vibrateShort = function () {
                };
                WxMiniApi.prototype.vibrateLong = function () {
                };
                WxMiniApi.prototype.request = function (p) {
                };
                WxMiniApi.prototype.getStorage = function (p) {
                };
                WxMiniApi.prototype.setStorage = function (p) {
                };
                WxMiniApi.prototype.showKeyboard = function (obj) {
                };
                WxMiniApi.prototype.onKeyboardConfirm = function (obj) {
                };
                WxMiniApi.prototype.offKeyboardConfirm = function (obj) {
                };
                WxMiniApi.prototype.onKeyboardInput = function (obj) {
                };
                WxMiniApi.prototype.offKeyboardInput = function (obj) {
                };
                WxMiniApi.prototype.hideKeyboard = function (obj) {
                };
                WxMiniApi.prototype.getOffScreenCanvas = function (customID) {
                    var canvas = this.canvsMap[customID];
                    if (!canvas) {
                        this.canvsMap[customID] = canvas = this.handle.createCanvas();
                    }
                    return canvas;
                };
                // tslint:disable-next-line: max-line-length
                WxMiniApi.sameInterfaceList = ["saveImageToPhotosAlbum", "triggerGC", "downloadFile", "navigateToMiniProgram", "vibrateShort", "vibrateLong", "request",
                    "getStorage", "setStorage", "showModal", "login", "createInnerAudioContext", "onMemoryWarning", "onHide", "onShow", "onMouseDown",
                    "onMouseUp", "reportUserBehaviorBranchAnalytics", "loadSubpackage", "connectSocket", "showKeyboard", "onKeyboardInput", "offKeyboardInput",
                    "onKeyboardConfirm", "hideKeyboard", "requestMidasPayment"];
                return WxMiniApi;
            }());
            QQMiniApi = /** @class */ (function () {
                function QQMiniApi(miniHandle) {
                    this.canvsMap = {};
                    this.handle = miniHandle;
                    //handle 同名API 直接替换
                    for (var i = 0, len = QQMiniApi.sameInterfaceList.length; i < len; i++) {
                        var key = QQMiniApi.sameInterfaceList[i];
                        if (!this.handle[key]) {
                            console.error(" miniAPI  ".concat(key, " \u6CA1\u627E\u5230"));
                            continue;
                        }
                        this[key] = this.handle[key].bind(this.handle);
                    }
                }
                QQMiniApi.prototype.requestMidasPayment = function (f) {
                };
                QQMiniApi.prototype.connectSocket = function (p) {
                    return null;
                };
                QQMiniApi.prototype.loadSubpackage = function (p) {
                    return null;
                };
                QQMiniApi.prototype.reportUserBehaviorBranchAnalytics = function (obj) {
                };
                QQMiniApi.prototype.onMouseUp = function (f) {
                };
                QQMiniApi.prototype.onMouseDown = function (f) {
                };
                QQMiniApi.prototype.onHide = function (f) {
                };
                QQMiniApi.prototype.onShow = function (f) {
                };
                QQMiniApi.prototype.onMemoryWarning = function (f) {
                };
                QQMiniApi.prototype.createInnerAudioContext = function () {
                };
                QQMiniApi.prototype.login = function (p) {
                };
                QQMiniApi.prototype.showModal = function (p) {
                };
                QQMiniApi.prototype.saveImageToPhotosAlbum = function (p) {
                };
                QQMiniApi.prototype.triggerGC = function () {
                };
                QQMiniApi.prototype.downloadFile = function (p) {
                };
                QQMiniApi.prototype.navigateToMiniProgram = function (p) {
                };
                QQMiniApi.prototype.vibrateShort = function () {
                };
                QQMiniApi.prototype.vibrateLong = function () {
                };
                QQMiniApi.prototype.request = function (p) {
                };
                QQMiniApi.prototype.getStorage = function (p) {
                };
                QQMiniApi.prototype.setStorage = function (p) {
                };
                QQMiniApi.prototype.showKeyboard = function (obj) {
                };
                QQMiniApi.prototype.onKeyboardInput = function (obj) {
                };
                QQMiniApi.prototype.onKeyboardConfirm = function (obj) {
                };
                QQMiniApi.prototype.offKeyboardConfirm = function (obj) {
                };
                QQMiniApi.prototype.offKeyboardInput = function (obj) {
                };
                QQMiniApi.prototype.hideKeyboard = function (obj) {
                };
                QQMiniApi.prototype.getOffScreenCanvas = function (customID) {
                    var canvas = this.canvsMap[customID];
                    if (!canvas) {
                        this.canvsMap[customID] = canvas = this.handle.createCanvas();
                    }
                    return canvas;
                };
                // tslint:disable-next-line: max-line-length
                QQMiniApi.sameInterfaceList = ["saveImageToPhotosAlbum", "triggerGC", "downloadFile", "navigateToMiniProgram", "vibrateShort", "vibrateLong", "request",
                    "getStorage", "setStorage", "showModal", "login", "createInnerAudioContext", "onMemoryWarning", "onHide", "onShow", "onMouseDown",
                    "onMouseUp", "reportUserBehaviorBranchAnalytics", "loadSubpackage", "connectSocket"];
                return QQMiniApi;
            }());
            VivoMiniApi = /** @class */ (function () {
                function VivoMiniApi(miniHandle) {
                    this.handle = miniHandle;
                    //handle 同名API 直接替换
                    for (var i = 0, len = VivoMiniApi.sameInterfaceList.length; i < len; i++) {
                        var key = VivoMiniApi.sameInterfaceList[i];
                        if (!this.handle[key]) {
                            console.error(" miniAPI  ".concat(key, " \u6CA1\u627E\u5230"));
                            continue;
                        }
                        this[key] = this.handle[key].bind(this.handle);
                    }
                }
                VivoMiniApi.prototype.requestMidasPayment = function (f) {
                };
                VivoMiniApi.prototype.connectSocket = function (p) {
                    return null;
                };
                VivoMiniApi.prototype.loadSubpackage = function (p) {
                    return null;
                };
                VivoMiniApi.prototype.getOffScreenCanvas = function (customID) {
                };
                VivoMiniApi.prototype.reportUserBehaviorBranchAnalytics = function (obj) {
                    //该平台无相关接口
                };
                VivoMiniApi.prototype.onMouseUp = function (f) {
                    //该平台无相关接口
                };
                VivoMiniApi.prototype.onMouseDown = function (f) {
                    //该平台无相关接口
                };
                VivoMiniApi.prototype.onHide = function (f) {
                };
                VivoMiniApi.prototype.onShow = function (f) {
                };
                VivoMiniApi.prototype.onMemoryWarning = function (f) {
                    //该平台无相关接口
                };
                VivoMiniApi.prototype.createInnerAudioContext = function () {
                };
                VivoMiniApi.prototype.login = function (p) {
                };
                VivoMiniApi.prototype.showModal = function (p) {
                    var _p = p;
                    //vivo 中的差异
                    _p.message = _p.content;
                    this.handle.showDialog(_p);
                };
                VivoMiniApi.prototype.saveImageToPhotosAlbum = function (p) {
                    var _p = p;
                    _p.uri = p.filePath;
                    this.handle.saveToPhotoAlbum(_p);
                };
                VivoMiniApi.prototype.triggerGC = function () {
                };
                VivoMiniApi.prototype.downloadFile = function (p) {
                    var _p = p;
                    this.handle.download(_p);
                };
                VivoMiniApi.prototype.navigateToMiniProgram = function (p) {
                    //该平台无相关接口
                };
                VivoMiniApi.prototype.vibrateShort = function () {
                };
                VivoMiniApi.prototype.vibrateLong = function () {
                };
                VivoMiniApi.prototype.request = function (p) {
                };
                VivoMiniApi.prototype.getStorage = function (p) {
                };
                VivoMiniApi.prototype.showKeyboard = function (obj) {
                };
                VivoMiniApi.prototype.onKeyboardConfirm = function (obj) {
                };
                VivoMiniApi.prototype.offKeyboardConfirm = function (obj) {
                };
                VivoMiniApi.prototype.onKeyboardInput = function (obj) {
                };
                VivoMiniApi.prototype.offKeyboardInput = function (obj) {
                };
                VivoMiniApi.prototype.hideKeyboard = function (obj) {
                };
                VivoMiniApi.prototype.setStorage = function (p) {
                    var _p = p;
                    _p.value = _p.data;
                    this.handle.setStorage(_p);
                };
                VivoMiniApi.sameInterfaceList = ["onHide", "onShow", "createInnerAudioContext", "login", "triggerGC", "vibrateShort", "vibrateLong",
                    "request", "getStorage"];
                return VivoMiniApi;
            }());
            miniGame["PreInit"]();
        }
    };
});
System.register("Loader/LoaderLibManager", ["Tools/miniGame"], function (exports_13, context_13) {
    "use strict";
    var miniGame_2, LoaderLibManager;
    var __moduleName = context_13 && context_13.id;
    return {
        setters: [
            function (miniGame_2_1) {
                miniGame_2 = miniGame_2_1;
            }
        ],
        execute: function () {
            LoaderLibManager = /** @class */ (function () {
                function LoaderLibManager() {
                    this.codeMap = {};
                    this.idIdx = 0;
                }
                Object.defineProperty(LoaderLibManager, "Instance", {
                    get: function () {
                        if (this.instance == null) {
                            this.instance = new LoaderLibManager();
                        }
                        return this.instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //加载js
                LoaderLibManager.prototype.addLib = function (lib, callback) {
                    var _this = this;
                    var url = lib;
                    if (this.codeMap[url]) {
                        if (this.codeMap[url].finish != true) {
                            this.codeMap[url].queue.push(callback);
                            return;
                        }
                        return callback != null ? callback(true) : null;
                    }
                    var script = document.createElement("script");
                    script.onload = function () {
                        //this.codeMap[url] = script.id;
                        // if (callback)
                        //    callback();
                        var load = _this.codeMap[url];
                        load.finish = true;
                        while (load.queue.length > 0) {
                            load.queue.shift()(true);
                        }
                    };
                    script.id = "".concat(++this.idIdx);
                    this.codeMap[url] = {
                        queue: [],
                        finish: false,
                        scriptID: script.id,
                    };
                    this.codeMap[url].queue.push(callback);
                    script.onerror = function (e) {
                        console.error(e);
                        return callback != null ? callback(false) : null;
                    };
                    script.src = url;
                    document.getElementsByTagName("head")[0]
                        .appendChild(script);
                    document.head.appendChild(script);
                };
                //移除js
                LoaderLibManager.prototype.removeLib = function (lib) {
                    var url = lib;
                    if (!this.codeMap[url]) {
                        return false;
                    }
                    var script = document.getElementById(this.codeMap[url].scriptID);
                    if (script) {
                        script.remove();
                    }
                    return true;
                };
                /**
                 * 加载 小游戏平台的分包
                 * @param packageName 分包名
                 * @param callback 回调函数
                 */
                LoaderLibManager.prototype.addSubpackage = function (packageName, callback) {
                    var data = this.codeMap[packageName];
                    if (data) {
                        if (!callback) {
                            return;
                        }
                        if (data.finish) {
                            //已经加载过了
                            callback(true);
                        }
                        else {
                            data.queue.push(callback);
                        }
                        return;
                    }
                    this.codeMap[packageName] = data = {
                        queue: [],
                        finish: false,
                    };
                    if (callback) {
                        data.queue.push(callback);
                    }
                    miniGame_2.miniGame.loadSubpackage({
                        name: packageName,
                        success: function (res) {
                            data.finish = true;
                            while (data.queue.length > 0) {
                                data.queue.shift()(true);
                            }
                        },
                        fail: function (res) {
                            while (data.queue.length > 0) {
                                data.queue.shift()(false);
                            }
                            console.error("addSubpackage fail , res : ".concat(res));
                        },
                    });
                };
                return LoaderLibManager;
            }());
            exports_13("LoaderLibManager", LoaderLibManager);
        }
    };
});
System.register("Data/ExcelDataMgr", ["Loader/LoaderLibManager", "Tools/miniGame"], function (exports_14, context_14) {
    "use strict";
    var LoaderLibManager_1, miniGame_3, ExcelDataMgr;
    var __moduleName = context_14 && context_14.id;
    return {
        setters: [
            function (LoaderLibManager_1_1) {
                LoaderLibManager_1 = LoaderLibManager_1_1;
            },
            function (miniGame_3_1) {
                miniGame_3 = miniGame_3_1;
            }
        ],
        execute: function () {
            exports_14("ExcelDataMgr", ExcelDataMgr = /** @class */ (function () {
                function ExcelDataMgr() {
                }
                /**
                 * 初始设置
                 * @param jsPath 自动加载JS 文件的路径 （例："lib/node_modules/@types/"）
                 */
                ExcelDataMgr.init = function (jsPath) {
                    this.jsPath = jsPath;
                };
                ExcelDataMgr.initAllDataClass = function (cb) {
                    var _this = this;
                    var loadFun = this.getLoadFun();
                    var className = "ExcelData";
                    loadFun(this.getLibString(className), function (isSucc) {
                        if (isSucc) {
                            _this.isInitAll = true;
                            System.init();
                            if (m4m["__consTool"]) {
                                m4m["__consTool"].init();
                            }
                            if (cb) {
                                cb();
                            }
                        }
                        else {
                            console.error("加载ExcelData出错");
                        }
                    });
                };
                ExcelDataMgr.initDataClassByName = function (className, cb) {
                    if (this.isInitAll) {
                        console.log("ExcelData配置类：" + className + "   代码已经加载完毕");
                        return;
                    }
                    // let dataClass = consTool[className];
                    var dataClass = null;
                    if (m4m["__consTool"]) {
                        dataClass = m4m["__consTool"][className];
                    }
                    if (dataClass) {
                        console.log("ExcelData配置类：" + className + "   代码已经加载完毕");
                        return;
                    }
                    var loadFun = this.getLoadFun();
                    loadFun(this.getLibString(className), function (isSucc) {
                        if (isSucc) {
                            System.init();
                            // consTool.init();
                            if (m4m["__consTool"]) {
                                m4m["__consTool"].init();
                            }
                            if (cb) {
                                cb();
                            }
                        }
                        else {
                            console.error("加载ExcelData配置类：" + className + "  出错");
                        }
                    });
                };
                ExcelDataMgr.getLoadFun = function () {
                    var result = miniGame_3.miniGame.miniType == miniGame_3.miniAPIType.none ? LoaderLibManager_1.LoaderLibManager.Instance.addLib : LoaderLibManager_1.LoaderLibManager.Instance.addSubpackage;
                    return result.bind(LoaderLibManager_1.LoaderLibManager.Instance);
                };
                ExcelDataMgr.getLibString = function (className) {
                    return miniGame_3.miniGame.miniType == miniGame_3.miniAPIType.none ? "".concat(this.jsPath).concat(className, ".js") : className;
                };
                // public static jsPath = "lib/node_modules/@types/";
                ExcelDataMgr.jsPath = "";
                ExcelDataMgr.isInitAll = false;
                return ExcelDataMgr;
            }()));
        }
    };
});
System.register("PSDUI/UiTools", [], function (exports_15, context_15) {
    "use strict";
    var UiTools;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [],
        execute: function () {
            UiTools = /** @class */ (function () {
                function UiTools() {
                }
                UiTools.cloneUi = function (old) {
                    return this.cloneUiClass(old, true);
                };
                UiTools.cloneUiClass = function (old, isFirstTran, tranName, parentTran) {
                    if (tranName === void 0) { tranName = ""; }
                    if (parentTran === void 0) { parentTran = null; }
                    var newObj = new Object();
                    if (isFirstTran && old["transform"]) {
                        newObj["transform"] = old["transform"].clone();
                    }
                    if (!isFirstTran && parentTran) {
                        for (var i = 0; i < parentTran.children.length; i++) {
                            var tran = parentTran.children[i];
                            if (tran.name == tranName) {
                                newObj["transform"] = tran;
                                break;
                            }
                        }
                    }
                    var proList = Object.getOwnPropertyNames(old);
                    for (var index = 0; index < proList.length; index++) {
                        var compName = proList[index];
                        switch (compName) {
                            case "transform":
                                break;
                            case "image":
                                newObj["image"] = newObj["transform"].getComponent("image2D");
                                break;
                            case "label":
                                newObj["label"] = newObj["transform"].getComponent("label");
                                break;
                            case "button":
                                newObj["button"] = newObj["transform"].getComponent("button");
                                break;
                            case "rawImage2D":
                                newObj["rawImage2D"] = newObj["transform"].getComponent("rawImage2D");
                                break;
                            case "progressbar":
                                newObj["progressbar"] = newObj["transform"].getComponent("progressbar");
                                break;
                            case "scrollRect":
                                newObj["scrollRect"] = newObj["transform"].getComponent("scrollRect");
                                break;
                            case "inputField":
                                newObj["inputField"] = newObj["transform"].getComponent("inputField");
                                break;
                            default:
                                newObj[compName] = this.cloneUiClass(old[compName], false, compName, newObj["transform"]);
                        }
                    }
                    return newObj;
                };
                return UiTools;
            }());
            exports_15("UiTools", UiTools);
        }
    };
});
System.register("Data/GridData", [], function (exports_16, context_16) {
    "use strict";
    var GridData;
    var __moduleName = context_16 && context_16.id;
    return {
        setters: [],
        execute: function () {
            GridData = /** @class */ (function () {
                function GridData() {
                    /***列*/
                    this.columns = 5;
                    /***行*/
                    this.rows = 5;
                    this.offsetX = 10;
                    this.offsetY = 10;
                    this.bagType = -1;
                    this.initXPlace = 0;
                    this.initYPlace = 0;
                }
                return GridData;
            }());
            exports_16("GridData", GridData);
        }
    };
});
System.register("Data/ListModel", [], function (exports_17, context_17) {
    "use strict";
    var ListModel, ListModelEventData;
    var __moduleName = context_17 && context_17.id;
    return {
        setters: [],
        execute: function () {
            /** 收缩列表容器
             * （常用包裹数据容器）
             */
            ListModel = /** @class */ (function (_super) {
                __extends(ListModel, _super);
                /**
                 * 收缩列表容器
                 * @param listName 容器名字标记
                 * @param place 所属位置标记
                 */
                function ListModel(listName, place) {
                    if (listName === void 0) { listName = ""; }
                    if (place === void 0) { place = -1; }
                    var _this = _super.call(this) || this;
                    _this._listName = "";
                    _this._place = -1;
                    _this._list = new Array();
                    _this._emptyIdxArr = [];
                    _this._max = -1;
                    _this._place = place;
                    _this._listName = listName;
                    _this.eventData = new ListModelEventData(_this, _this.listName);
                    return _this;
                }
                Object.defineProperty(ListModel.prototype, "listName", {
                    /** 容器名字 */
                    get: function () { return this._listName; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(ListModel.prototype, "place", {
                    /** 所属位置标记*/
                    get: function () { return this._place; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(ListModel.prototype, "list", {
                    /** 容器的数组 */
                    get: function () { return this._list; },
                    enumerable: false,
                    configurable: true
                });
                /** 二分插入法 */
                ListModel.insertSortWithBinarySearch = function (insertNum, arr) {
                    var low = 0;
                    var high = arr.length;
                    var mid = -1;
                    while (low <= high) {
                        mid = low + Math.floor((high - low) * 0.5);
                        if (arr[mid] > insertNum) {
                            high = mid - 1;
                        }
                        else { // 元素相同时，也插入在后面的位置
                            low = mid + 1;
                        }
                    }
                    arr.splice(mid, 0, insertNum);
                    // console.log("idx :" + mid);
                };
                Object.defineProperty(ListModel.prototype, "Max", {
                    /** 容器最大值 */
                    get: function () {
                        if (this._max != this.count) {
                            this._max = this.count;
                        }
                        return this._max;
                    },
                    set: function (value) {
                        // this._max = value;
                        // this._list.length = 0;
                        // for (var i = 0; i < this._max; i++) {
                        //     this._list.push(null);
                        // }
                        // // super.dispatchEvent(CUIEvent.MAX_CHANGE, this._max, this.bagName, this.place);
                        // this.eventData.set(-1,  null);
                        // this.Emit("MAX_CHANGE",this.eventData);
                        // tslint:disable-next-line: no-parameter-reassignment
                        if (value < 0) {
                            value = 0;
                        }
                        if (value == this._max) {
                            return;
                        }
                        var len = this._list.length;
                        if (value >= len) {
                            for (var i = len; i < value; i++) {
                                this._list.push(null);
                            }
                        }
                        else {
                            this._list.splice(value - 1);
                        }
                        this._max = this._list.length;
                        this.refreshEmptyIdxs();
                        this.eventData.set(-1, null);
                        this.Emit("MAX_CHANGE", this.eventData);
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(ListModel.prototype, "count", {
                    // /** 容器尺寸 */
                    // public get size(): number {
                    //     return this._list.length;
                    // }
                    /** 容器尺寸 */
                    get: function () {
                        return this._list.length;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(ListModel.prototype, "HaveCount", {
                    /** 存放东西的数量 */
                    get: function () {
                        // let Num1: number = 0;
                        // let len: number = this._list.length;
                        // for (let i = 0; i < len; i++) {
                        //     if (this._list[i] != null) {
                        //         Num1++;
                        //     }
                        // }
                        // return Num1;
                        return this._list.length - this._emptyIdxArr.length;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 获取指定索引位置的元素
                 * @param index 索引
                 */
                ListModel.prototype.getValue = function (index) {
                    if (index < 0 || index > this.Max - 1) {
                        console.warn("ListModel  name: ".concat(this.listName, " place :").concat(this.place, "  , on getValue index range error"));
                        return null;
                    }
                    return this._list[index];
                };
                /**
                 * 设置指定位置的元素(成功：true 失败 ： false)
                 * @param index 索引
                 * @param value 元素
                 */
                ListModel.prototype.setValue = function (index, value) {
                    if (index < 0 || index > this.Max - 1) {
                        console.warn("ListModel  name: ".concat(this.listName, " place :").concat(this.place, "  , on setValue index range error"));
                        return false;
                    }
                    // if (value == this._list[index]) {//如果是同一个对象改了数据更新 会不成功
                    //     console.warn(`ListModel  name: ${this.listName} place :${this.place}  ,on setValue 设置的数据与现有数据相同`);
                    //     return false;
                    // }
                    this._list[index] = value;
                    if (this._list[index]) {
                        this.deleteOfEmpytIdxs(index);
                    }
                    else {
                        this.insertToEmpytIdxs(index);
                    }
                    // this.refreshEmptyIdxs();
                    //抛事件
                    // super.dispatchEvent(CUIEvent.ADD, CUIEvent.ADD, index, value, this.bagName, this.place);
                    this.eventData.set(index, value);
                    this.Emit("ADD", this.eventData);
                    return true;
                };
                // /**
                //  * 扩充容器尺寸
                //  */
                // private set upDateMax(value: number) {
                //     this._max = this._list.length;
                //     if (value > this._max) {
                //         for (var i = this._max; i < value; i++) {
                //             this._list.push(null);
                //         }
                //     }
                //     else {
                //         this._list.splice(value - 1);
                //     }
                //     this._max = value;
                //     this.eventData.set(-1,  null);
                //     this.Emit("MAX_CHANGE",this.eventData);
                // }
                /**
                 * 添加到空位 (成功：true 失败 ： false)
                 * @param obj 被添加对象
                 */
                ListModel.prototype.add = function (obj) {
                    var useIndex = this.freeIndex();
                    if (useIndex == -1) {
                        return false;
                    }
                    this.setValue(useIndex, obj);
                    return true;
                };
                // /**
                //  * 获取指定索引位置的元素
                //  * @param index 索引
                //  */
                // public getAt(index: number): T {
                //     return this.list[index];
                // }
                /**
                 * 清理容器所有的元素
                 * @param reset 重置 (max 到 0)
                 */
                ListModel.prototype.clear = function (reset) {
                    if (reset === void 0) { reset = true; }
                    if (this._list.length == 0) {
                        return;
                    }
                    var eventStr = "";
                    if (reset) {
                        this._list.length = 0;
                        this._max = 0;
                        // super.dispatchEvent(CUIEvent.RESIZE, CUIEvent.RESIZE);
                        eventStr = "RESIZE";
                    }
                    else {
                        for (var i = 0; i < this.Max; i++) {
                            this._list[i] = null;
                        }
                        // super.dispatchEvent(CUIEvent.CLEAR, CUIEvent.CLEAR);
                        eventStr = "CLEAR";
                    }
                    this.refreshEmptyIdxs();
                    this.eventData.set(-1, null);
                    this.Emit(eventStr, this.eventData);
                };
                /**
                 * 删除指定位置的元素
                 * @param index 索引位置
                 */
                ListModel.prototype.RemoveAt = function (index) {
                    //  RemoveAt  会删除 不是设为null
                    if (this._list[index] == null) {
                        return;
                    }
                    var obj = this._list[index];
                    this._list[index] = null;
                    // this.refreshEmptyIdxs();
                    this.insertToEmpytIdxs(index);
                    // super.dispatchEvent(CUIEvent.REMOVE, CUIEvent.REMOVE, index, null, this.bagName, this.place);
                    this.eventData.set(index, obj);
                    this.Emit("REMOVE", this.eventData);
                    return obj;
                };
                /**
                 * 删除元素
                 * @param obj
                 * @param index
                 */
                ListModel.prototype.remove = function (obj, index) {
                    if (index === void 0) { index = -1; }
                    if (index == -1) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        index = this._list.indexOf(obj);
                    }
                    //  RemoveAt  会删除 不是设为null
                    if (this._list[index] == null) {
                        return;
                    }
                    this._list[index] = null;
                    this.insertToEmpytIdxs(index);
                    // this.refreshEmptyIdxs();
                    // super.dispatchEvent(CUIEvent.REMOVE, CUIEvent.REMOVE, index, obj, this.bagName, this.place);
                    this.eventData.set(index, obj);
                    this.Emit("REMOVE", this.eventData);
                    return obj;
                };
                /**
                 * 设置数据
                 * @param source
                 */
                ListModel.prototype.setSource = function (source, clear) {
                    if (clear === void 0) { clear = true; }
                    this.clear(clear); //清理原数据
                    for (var i = 0; i < source.length; i++) {
                        var sou = source[i];
                        this._list.push(sou);
                    }
                    this.Max = source.length;
                    this.refreshEmptyIdxs();
                };
                /**
                 * 找空格子 , 返回找到的索引值
                 */
                ListModel.prototype.freeIndex = function () {
                    // let len: number = this._list.length;
                    // for (let i = 0; i < len; i++) {
                    //     if (this._list[i] == null) {
                    //         return i;
                    //     }
                    // }
                    // return -1;
                    if (this._emptyIdxArr.length < 1) {
                        return -1;
                    }
                    return this._emptyIdxArr[0];
                };
                /**
                 * 检查是否有指定数量空格子
                 * @param num 数量
                 */
                ListModel.prototype.FindFreeNum = function (num) {
                    // let Num1: number = 0;
                    // let len: number = this._list.length;
                    // for (let i = 0; i < len; i++) {
                    //     if (this._list[i] == null) {
                    //         Num1++;
                    //         if (Num1 == num) return true;
                    //     }
                    // }
                    // return false;
                    return this._emptyIdxArr.length >= num;
                };
                /**
                 * 添加事件监听
                 * @param eventType
                 * @param listener
                 * @param thisArg
                 */
                ListModel.prototype.addListener = function (eventType, listener, thisArg) {
                    this.On(eventType, listener, thisArg);
                };
                /**
                 * 移除事件监听
                 * @param eventType
                 * @param listener
                 * @param thisArg
                 */
                ListModel.prototype.removeListener = function (eventType, listener, thisArg) {
                    this.RemoveListener(eventType, listener, thisArg);
                };
                /** 刷新空索引的数组 */
                ListModel.prototype.refreshEmptyIdxs = function () {
                    this._emptyIdxArr.length = 0;
                    for (var i = 0, len = this._list.length; i < len; i++) {
                        if (this._list[i] != null) {
                            continue;
                        }
                        this._emptyIdxArr.push(i);
                    }
                };
                //插入到空索引列表
                ListModel.prototype.insertToEmpytIdxs = function (idx) {
                    ListModel.insertSortWithBinarySearch(idx, this._emptyIdxArr);
                };
                //删除空索引列表
                ListModel.prototype.deleteOfEmpytIdxs = function (idx) {
                    var i = this._emptyIdxArr.indexOf(idx);
                    if (i == -1) {
                        return;
                    }
                    this._emptyIdxArr.splice(i, 1);
                };
                return ListModel;
            }(m4m.AEvent));
            exports_17("ListModel", ListModel);
            ListModelEventData = /** @class */ (function () {
                function ListModelEventData(dispatcher, listName) {
                    this.dispatcher = dispatcher;
                }
                ListModelEventData.prototype.set = function (index, obj) {
                    this.index = index;
                    this.obj = obj;
                };
                return ListModelEventData;
            }());
        }
    };
});
System.register("Data/Grid", ["PSDUI/UiTools"], function (exports_18, context_18) {
    "use strict";
    var UiTools_1, Grid;
    var __moduleName = context_18 && context_18.id;
    return {
        setters: [
            function (UiTools_1_1) {
                UiTools_1 = UiTools_1_1;
            }
        ],
        execute: function () {
            Grid = /** @class */ (function () {
                function Grid(base) {
                    //listModel 事件侦听 (默认不开启)
                    this.listModelEvent = false;
                    this.name = "Gird";
                    this._selectIndex = 0;
                    this._width = 0;
                    this._height = 0;
                    this.baseData = base;
                    this._list = new Array();
                    this.create();
                }
                Object.defineProperty(Grid.prototype, "visible", {
                    set: function (value) {
                        for (var i = 0; i < this._list.length; i++) {
                            var cell = this._list[i];
                            cell.transform.visible = value;
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Grid.prototype, "girdData", {
                    get: function () {
                        return this.baseData;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Grid.prototype, "SelectIndex", {
                    get: function () {
                        return this._selectIndex;
                    },
                    set: function (value) {
                        var selectCell = this._list[value];
                        if (selectCell.cellData.enabled == false) {
                            return;
                        }
                        this._selectIndex = value;
                        // console.error("选中格子 " + value);
                        for (var i = 0; i < this._list.length; i++) {
                            var cell = this._list[i];
                            var selectBool = value == cell.index;
                            cell.selectFun(selectBool);
                            if (selectBool) {
                                if (this.selectCallBackFun) {
                                    this.selectCallBackFun(cell.cellData.data, cell.cellData.index);
                                }
                            }
                        }
                        // super.dispatchEvent(new CUIEvent(CUIEvent.TAB_SELECT_CHANGE, value));
                    },
                    enumerable: false,
                    configurable: true
                });
                Grid.prototype.getCellList = function () {
                    return this._list;
                };
                Grid.prototype.create = function () {
                    //初始化gird组件的格子
                    var offsetX = this.girdData.offsetX;
                    var offsetY = this.girdData.offsetY;
                    var cellWidth = this.girdData.cellData.width;
                    var cellHeight = this.girdData.cellData.height;
                    var layoutOptX = this.girdData.cellLayoutX;
                    var layoutOptY = this.girdData.cellLayoutY;
                    var x = this.girdData.initXPlace;
                    var y = this.girdData.initYPlace;
                    if (this.downFun == null) {
                        this.downFun = this.cell_singleClickHandler.bind(this);
                    }
                    var cellName = "Cell";
                    if (this.girdData.cellName) {
                        cellName = this.girdData.cellName;
                    }
                    var index = 0;
                    for (var i = 0; i < this.girdData.rows; i++) {
                        for (var ig = 0; ig < this.girdData.columns; ig++) {
                            var cellData = this.girdData.cellData.Clone();
                            cellData.index = index;
                            // let cellTrans: m4m.framework.transform2D = this.girdData.cell.clone();
                            var cellClass = UiTools_1.UiTools.cloneUi(this.girdData.cell);
                            var cellTrans = cellClass.transform;
                            var cell = cellTrans.addComponent(cellName);
                            cell.cellData = cellData;
                            cell.clickCallBackFun = this.downFun;
                            cell.setCellClass(cellClass);
                            if (layoutOptX != null || layoutOptY != null) {
                                //
                                if (layoutOptX) {
                                    cellTrans.setLayoutValue(layoutOptX, x);
                                }
                                if (layoutOptY) {
                                    cellTrans.setLayoutValue(layoutOptY, y);
                                }
                            }
                            else {
                                //如果没有使用布局设置
                                cellTrans.localTranslate.x = x;
                                cellTrans.localTranslate.y = y;
                                cellTrans.localTranslate = cellTrans.localTranslate;
                            }
                            // console.error("添加格子 " + i);
                            this.girdData.parentTrans.addChild(cellTrans);
                            cellTrans.markDirty();
                            // let btn = cellTrans.getComponent("button") as m4m.framework.button;
                            // if (btn == null) {
                            //     btn = cellTrans.addComponent("button") as m4m.framework.button;
                            //     btn.addListener(m4m.event.UIEventEnum.PointerClick, cell.PointerClick, cell);
                            // }
                            this._list.push(cell);
                            index++;
                            x += cellWidth + offsetX;
                        }
                        x = this.girdData.initXPlace;
                        y += cellHeight + offsetY;
                    }
                    // this.width = this.girdData.columns * (cellSize + offsetX) - offsetX;
                    // this.height = y + cellSize;
                };
                Grid.prototype.setListModel = function (itemListModel) {
                    if (itemListModel == null) {
                        return;
                    }
                    if (this.listModelEvent) {
                        if (this._listModel != null) {
                            this._listModel.removeListener("ADD", this.addEventFun, this);
                            this._listModel.removeListener("REMOVE", this.removeEventFun, this);
                            this._listModel.removeListener("CLEAR", this.clearEventFun, this);
                        }
                        this._listModel = itemListModel;
                        this.addEventFun = this.AddEventHandler;
                        this._listModel.addListener("ADD", this.addEventFun, this);
                        this.removeEventFun = this.RemoveEventHandler;
                        this._listModel.addListener("REMOVE", this.removeEventFun, this);
                        this.clearEventFun = this.ClearEventHandler;
                        this._listModel.addListener("CLEAR", this.clearEventFun, this);
                    }
                    var cellWidth = this.girdData.cellData.width;
                    var offsetX = this.girdData.offsetX;
                    var cellHeight = this.girdData.cellData.height;
                    var offsetY = this.girdData.offsetY;
                    this._width = 0;
                    this._height = 0;
                    for (var i = 0; i < this._list.length; i++) {
                        if (i < itemListModel.count) {
                            var data = itemListModel.getValue(i);
                            this._list[i].setData(data);
                            // if (data) {
                            if (i < this.girdData.columns) {
                                this._width += cellWidth + offsetX;
                            }
                            if (i % this.girdData.columns == 0) {
                                this._height += cellHeight + offsetY;
                            }
                            // }
                        }
                        else {
                            this._list[i].setData(null);
                        }
                        // this._width += cellWidth + offsetX;
                    }
                };
                Grid.prototype.getWidth = function () {
                    return this._width; //- this.girdData.offsetX;
                };
                Grid.prototype.getHeight = function () {
                    return this._height; //- this.girdData.offsetY;
                };
                //加上初始位置值 的宽度  一般用于 设置 滑动区域宽
                Grid.prototype.getAddOffsetWidth = function () {
                    return this._width + this.girdData.offsetX;
                };
                //加上初始位置值 的高度  一般用于 设置 滑动区域高
                Grid.prototype.getAddOffsetHeight = function () {
                    return this._height + this.girdData.offsetY;
                };
                Grid.prototype.reshUIPosFun = function () {
                    var offsetX = this.girdData.offsetX;
                    var offsetY = this.girdData.offsetY;
                    var cellWidth = this.girdData.cellData.width;
                    var cellHeight = this.girdData.cellData.height;
                    var layoutOptX = this.girdData.cellLayoutX;
                    var layoutOptY = this.girdData.cellLayoutY;
                    var x = this.girdData.initXPlace;
                    var y = this.girdData.initYPlace;
                    var index = 0;
                    for (var i = 0; i < this.girdData.rows; i++) {
                        for (var ig = 0; ig < this.girdData.columns; ig++) {
                            var cell = this._list[index];
                            var cellTrans = cell.transform;
                            if (layoutOptX != null || layoutOptY != null) {
                                //
                                if (layoutOptX) {
                                    cellTrans.setLayoutValue(layoutOptX, x);
                                }
                                if (layoutOptY) {
                                    cellTrans.setLayoutValue(layoutOptY, y);
                                }
                            }
                            else {
                                //如果没有使用布局设置
                                cellTrans.localTranslate.x = x;
                                cellTrans.localTranslate.y = y;
                                cellTrans.localTranslate = cellTrans.localTranslate;
                            }
                            cellTrans.markDirty();
                            index++;
                            x += cellWidth + offsetX;
                        }
                        x = this.girdData.initXPlace;
                        y += cellHeight + offsetY;
                    }
                };
                Grid.prototype.dispose = function () {
                    if (this.listModelEvent) {
                        if (this._listModel != null) {
                            this._listModel.removeListener("ADD", this.addEventFun, this);
                            this._listModel.removeListener("REMOVE", this.removeEventFun, this);
                            this._listModel.removeListener("CLEAR", this.clearEventFun, this);
                        }
                    }
                    for (var i = 0; i < this._list.length; i++) {
                        var cell = this._list[i];
                        cell.dispose();
                        cell = null;
                    }
                    this._list.length = 0;
                    this._list = null;
                };
                Grid.prototype.cell_singleClickHandler = function (index) {
                    if (index < 0 || index >= this._list.length) {
                        console.error("当前点击的对象所引未取到！" + index);
                        return;
                    }
                    this.SelectIndex = index;
                };
                Grid.prototype.AddEventHandler = function (event) {
                    // console.error("AddEventHandler");
                    var index = event.index;
                    var data = event.obj;
                    if (this._list[index] != null) {
                        this._list[index].setData(data);
                    }
                };
                Grid.prototype.RemoveEventHandler = function (event) {
                    // console.error("RemoveEventHandler");
                    var index = event.index;
                    this.setNullFun(index);
                };
                Grid.prototype.setNullFun = function (index) {
                    if (this._list[index] != null) {
                        this._list[index].setData(null);
                    }
                };
                Grid.prototype.ClearEventHandler = function (event) {
                    // console.error("ClearEventHandler");
                    for (var i = 0; i < this._list.length; i++) {
                        this.setNullFun(i);
                    }
                };
                return Grid;
            }());
            exports_18("Grid", Grid);
        }
    };
});
System.register("Loader/loader", [], function (exports_19, context_19) {
    "use strict";
    var loader;
    var __moduleName = context_19 && context_19.id;
    return {
        setters: [],
        execute: function () {
            // tslint:disable-next-line: class-name
            loader = /** @class */ (function () {
                function loader(url, preName) {
                    if (preName === void 0) { preName = ""; }
                    this.preName = "";
                    this.id = -1;
                    this.url = "";
                    //优先级
                    this.priority = 0;
                    /** 加载进度 0-1 */
                    this.progress = 0;
                    /** 资源总大小 */
                    this.resSize = 0;
                    /** 加载了的资源大小 */
                    this.loadedSize = 0;
                    /* 总需要加载的文件数量*/
                    this.fileCount = 0;
                    /* 当前已经加载文件数量 */
                    this.fileLoadedCount = 0;
                    /** 加载中的时间 */
                    this.loadingTime = 0;
                    /** 等待最大时间 */
                    this.waitMaxTime = 1000 * 9;
                    this._isEnd = false;
                    this.lastckTime = Date.now();
                    /** 超时重试 次数 */
                    this.timeOutTryLoadCount = 0; //防止网络太差，调用堆积
                    this.url = url;
                    this.preName = preName;
                }
                Object.defineProperty(loader.prototype, "isEnd", {
                    /** loader已经结束 */
                    get: function () { return this._isEnd; },
                    enumerable: false,
                    configurable: true
                });
                loader.prototype.load = function () {
                    if (this._isEnd) {
                        return;
                    }
                    // console.error(`${this.url}`);
                    //downLoadFinish  回调  下载完成就触发
                    this.assetmgr.load(this.url, m4m.framework.AssetTypeEnum.Auto, this.onloading.bind(this), this.downLoadFinish.bind(this));
                };
                /**
                 * 检查超时
                 * @param currTime 当前时间
                 */
                loader.prototype.ckOfTimeOut = function (currTime) {
                    if (isNaN(currTime) || this._isEnd) {
                        return;
                    }
                    var addTime = currTime - this.lastckTime;
                    if (isNaN(addTime) || addTime < 0) {
                        addTime = 0;
                    }
                    this.loadingTime += addTime;
                    this.lastckTime = currTime;
                    var maxTime = this.waitMaxTime * Math.pow(2, this.timeOutTryLoadCount);
                    if (this.loadingTime > maxTime) {
                        this.retryLaod();
                    }
                };
                loader.prototype.downLoadFinish = function () {
                    //下载完成回调
                };
                loader.prototype.onloading = function (sta) {
                    if (this._isEnd) {
                        return;
                    } //已近完成不再回调
                    if (sta.iserror) {
                        var errStr_1 = "err by loader.onloading()\n URL:".concat(this.url, " \n");
                        sta.errs.forEach(function (error) {
                            errStr_1 += "\n ".concat(error.stack);
                        });
                        console.error("onloading \u4E0B\u8F7D\u8D44\u6E90\u9519\u8BEF\uFF01  ".concat(errStr_1));
                    }
                    if (sta.isloadFail || sta.iserror) {
                        //加载失败
                        if (this.onLoadFail != null) {
                            this.onLoadFail(this);
                        }
                        // //重试
                        // setTimeout(() => {
                        //     this.retryLaod();
                        // }, 1000);
                        return;
                    }
                    this.fileCount = sta.totaltask;
                    this.fileLoadedCount = sta.curtask;
                    this.progress = sta.progress;
                    this.resSize = sta.totalByteLength;
                    this.loadedSize = sta.curByteLength;
                    if (this.onProgress) {
                        this.onProgress(this.progress, this.fileCount, this.loadedSize);
                    }
                    if (sta.isfinish) {
                        this._isEnd = true;
                        if (this.onEnd != null) {
                            // console.error(`onEnd 加载完毕  ${this.url}`);
                            this.onEnd(this);
                        }
                    }
                };
                //重试 加载
                loader.prototype.retryLaod = function () {
                    console.error("\u8D44\u6E90\u91CD\u8BD5\u52A0\u8F7D \uFF0C\u5DF2\u7B49\u5F85\u65F6\u95F4\uFF1A ".concat(this.loadingTime, "\uFF0C \u5DF2\u7ECF\u91CD\u8BD5\u6B21\u6570 \uFF1A ").concat(this.timeOutTryLoadCount, " \uFF0Curl ").concat(this.url));
                    //检查超时之后再 重试下载
                    this.loadingTime = 0;
                    this.assetmgr.unload(this.url); //先释放之前的load
                    this.load();
                    this.timeOutTryLoadCount++;
                };
                return loader;
            }());
            exports_19("loader", loader);
        }
    };
});
System.register("Loader/loadMgr", ["Data/Map", "Loader/loader"], function (exports_20, context_20) {
    "use strict";
    var Map_3, loader_1, loadMgr;
    var __moduleName = context_20 && context_20.id;
    return {
        setters: [
            function (Map_3_1) {
                Map_3 = Map_3_1;
            },
            function (loader_1_1) {
                loader_1 = loader_1_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            loadMgr = /** @class */ (function () {
                function loadMgr() {
                    /** 并行加载最大数量 */
                    this.maxLoadingCount = 100;
                    this.endCaseDic = new Map_3.cMap(); // 客户结束回调 , [key:url,value:backFun]
                    this.loadedDic = new Map_3.cMap(); // 加载完的loader ，[key:url,value:loader]
                    this.addLoadDic = new Map_3.cMap(); // 加载loader ，[key:url,value:loader]
                    this.waitLoaders = [];
                    this.loadingLoaders = [];
                    this.index = 0;
                    this.ckTimeoutGap = 2000; //loader 超时 检查间隔时间
                    this.loopCkLoaderTimeOut();
                }
                Object.defineProperty(loadMgr, "Instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new loadMgr();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(loadMgr.prototype, "assetMgr", {
                    get: function () {
                        if (!this._assetMgr) {
                            this._assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                        }
                        return this._assetMgr;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 异步并行加载  资源列表
                 * @param urls
                 * @param priority
                 */
                loadMgr.prototype.syncLoadList = function (urls, priority) {
                    var _this = this;
                    if (priority === void 0) { priority = 0; }
                    return new Promise(function (resolve) {
                        var count = urls.length;
                        var allEnd;
                        var loadedFun = function () {
                            count--;
                            if (count <= 0) {
                                resolve(null);
                            }
                        };
                        // let waitP = new Promise((resolve) => {
                        //     allEnd = resolve;
                        // });
                        var len = urls.length;
                        for (var i = 0; i < len; i++) {
                            _this.load(urls[i], loadedFun, priority);
                        }
                    });
                };
                /**
                 * 异步加载
                 * @param url
                 * @param priority
                 */
                loadMgr.prototype.syncLoad = function (url, priority) {
                    var _this = this;
                    if (priority === void 0) { priority = 0; }
                    return new Promise(function (resolve) {
                        _this.load(url, function (_url) {
                            // console.error("异步加载资源   "+_url+"         "+TimeUtil.realtimeSinceStartup);
                            resolve(null);
                        }, priority);
                    });
                };
                /**
                 * 加载 Asset 通过 ，文件夹路径 + 资源名
                 * @param dirPath  文件夹路径
                 * @param assName   资源名
                 * @param endFun 结束回调方法
                 * @param priority 优先级
                 */
                loadMgr.prototype.loadByName = function (dirPath, assName, endFun, priority) {
                    if (priority === void 0) { priority = 0; }
                    var url = "".concat(dirPath).concat(assName, "/").concat(assName, ".assetbundle.json");
                    this.load(url, function () {
                        if (endFun) {
                            endFun(url, assName);
                        }
                    }, priority);
                };
                /**
                 * 加载 Asset to 引擎环境
                 * @argument url 资源url
                 * @argument endFun loader end 回调方法
                 * @argument priority 优先级 默认0 ，值越大越优先
                 */
                loadMgr.prototype.load = function (url, endFun, priority) {
                    if (priority === void 0) { priority = 0; }
                    if (this.loadedDic.has(url)) {
                        if (endFun) {
                            endFun(url);
                        }
                        return this.loadedDic.get(url);
                    }
                    //loader 新增判断
                    var lod;
                    var isNew = !this.addLoadDic.has(url);
                    if (isNew) {
                        lod = new loader_1.loader(url);
                        lod.priority = priority;
                        this.addLoadDic.set(url, lod);
                    }
                    else {
                        lod = this.addLoadDic.get(url);
                    }
                    //结束回调入队
                    var funArr;
                    if (!this.endCaseDic.has(url)) {
                        this.endCaseDic.set(url, []);
                    }
                    funArr = this.endCaseDic.get(url);
                    funArr.push(endFun);
                    //执行加载
                    if (isNew) {
                        this.addLoader(lod);
                    }
                    return lod;
                };
                /**
                 * 加载 并返回资源对象
                 * @param url
                 * @param priority
                 */
                loadMgr.prototype.syncLoadGain = function (url, priority) {
                    if (priority === void 0) { priority = 0; }
                    return __awaiter(this, void 0, void 0, function () {
                        var i, file;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    i = url.lastIndexOf("/");
                                    file = url.substring(i + 1);
                                    if (!file) {
                                        return [2 /*return*/];
                                    }
                                    return [4 /*yield*/, this.syncLoad(url, priority)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/, m4m.framework.sceneMgr.app.getAssetMgr()
                                            .getAssetByName(file)];
                            }
                        });
                    });
                };
                //检查超时 后 强制重新加载
                loadMgr.prototype.loopCkLoaderTimeOut = function () {
                    var _this = this;
                    setTimeout(function () {
                        //检查所有 loader
                        var len = _this.loadingLoaders.length;
                        var nowTime = Date.now();
                        for (var i = 0; i < len; i++) {
                            var l = _this.loadingLoaders[i];
                            if (l) {
                                l.ckOfTimeOut(nowTime);
                            }
                        }
                        _this.loopCkLoaderTimeOut();
                    }, this.ckTimeoutGap);
                };
                loadMgr.prototype.addLoader = function (lod) {
                    this.index++;
                    lod.id = this.index;
                    lod.assetmgr = this.assetMgr;
                    lod.onEnd = this.onLoadEndOne.bind(this);
                    // lod.onLoadFail = this.onLoadFail.bind(this);
                    this.waitLoaders.push(lod);
                    this.doLoad();
                };
                loadMgr.prototype.doLoad = function () {
                    //加满 最大加载线程
                    if (this.loadingLoaders.length > this.maxLoadingCount) {
                        //   console.error("警告！！！  当前加载列表中的数量超过 "+GameMgr.maxLoadingCount);
                        return;
                    }
                    var lod = this.getNext();
                    if (!lod) {
                        return;
                    }
                    var idx = this.waitLoaders.indexOf(lod);
                    if (idx != -1) {
                        this.waitLoaders.splice(idx, 1);
                    }
                    this.loadingLoaders.push(lod);
                    lod.load();
                    this.doLoad();
                };
                loadMgr.prototype.getNext = function () {
                    var temp = this.waitLoaders[0];
                    this.waitLoaders.forEach(function (l) {
                        if (l && l.priority > temp.priority) {
                            temp = l;
                        }
                    });
                    return temp;
                };
                loadMgr.prototype.onLoadEndOne = function (lod) {
                    var idx = this.loadingLoaders.indexOf(lod);
                    if (idx == -1) {
                        return;
                    } //没在 list 中 不执行
                    this.loadingLoaders.splice(idx, 1);
                    this.loadedDic.set(lod.url, lod);
                    this.doLoad();
                    //通知 regers
                    var backFuns;
                    if (this.endCaseDic.has(lod.url)) {
                        backFuns = this.endCaseDic.get(lod.url);
                    }
                    if (backFuns) {
                        backFuns.forEach(function (fun) {
                            if (fun) {
                                fun(lod.url, lod.preName);
                            }
                        });
                        backFuns.length = 0; //置空
                    }
                };
                // private reloadWaitTime = 300;
                //加载失败后 再次放入加载等待队列的尾部
                loadMgr.prototype.onLoadFail = function (lod) {
                    // if(!lod) return;
                    // let idx = this.loadingLoaders.indexOf(lod);
                    // if (idx == -1) return; //没在 list 中 不执行
                    // this.loadingLoaders.splice(idx, 1);
                    // console.warn(`下载资源失败  onLoadFail retry loading \n ${lod.url}`);
                    // setTimeout(() => {
                    //     this.waitLoaders.push(lod);
                    //     lod.assetmgr.unload(lod.url);
                    //     lod.load();
                    //     console.warn(`下载资源失败  已重新加入下载列表 \n ${lod.url}`);
                    // }, this.reloadWaitTime);
                };
                return loadMgr;
            }());
            exports_20("loadMgr", loadMgr);
        }
    };
});
System.register("Tools/engineParallel/m4m/gdCamera", ["Tools/engineParallel/spInterface"], function (exports_21, context_21) {
    "use strict";
    var spInterface_2, gdCamera;
    var __moduleName = context_21 && context_21.id;
    return {
        setters: [
            function (spInterface_2_1) {
                spInterface_2 = spInterface_2_1;
            }
        ],
        execute: function () {
            /** 简配 camera 组件  */
            // tslint:disable-next-line: class-name
            gdCamera = /** @class */ (function () {
                function gdCamera(rawCam, go) {
                    this.compType = spInterface_2.spComponentType.camera;
                    this.id = "".concat(go.getID(), "_").concat(this.compType);
                    this.rawHandle = rawCam;
                    this.gameObject = go;
                }
                Object.defineProperty(gdCamera.prototype, "fov", {
                    get: function () { return this.rawHandle ? this.rawHandle.fov : 0; },
                    set: function (v) { if (this.rawHandle) {
                        this.rawHandle.fov = v;
                    } },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdCamera.prototype, "far", {
                    get: function () { return this.rawHandle ? this.rawHandle.far : 0; },
                    set: function (v) { if (this.rawHandle) {
                        this.rawHandle.far = v;
                    } },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdCamera.prototype, "near", {
                    get: function () { return this.rawHandle ? this.rawHandle.near : 0; },
                    set: function (v) { if (this.rawHandle) {
                        this.rawHandle.near = v;
                    } },
                    enumerable: false,
                    configurable: true
                });
                gdCamera.prototype.dispose = function () {
                    this.rawHandle = null;
                    this.gameObject = null;
                };
                return gdCamera;
            }());
            exports_21("gdCamera", gdCamera);
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxCamera", ["Tools/engineParallel/spInterface"], function (exports_22, context_22) {
    "use strict";
    var spInterface_3, wxCamera;
    var __moduleName = context_22 && context_22.id;
    return {
        setters: [
            function (spInterface_3_1) {
                spInterface_3 = spInterface_3_1;
            }
        ],
        execute: function () {
            /** 简配 camera 组件  */
            // tslint:disable-next-line: class-name
            wxCamera = /** @class */ (function () {
                function wxCamera(raw, go) {
                    this.compType = spInterface_3.spComponentType.camera;
                    this.isWxCamera = true;
                    this.id = raw.id.toString();
                    this.rawHandle = raw;
                    this.gameObject = go;
                }
                Object.defineProperty(wxCamera.prototype, "fov", {
                    // fov: number;
                    // far: number;
                    // near: number;
                    get: function () { return this.rawHandle ? this.rawHandle.fieldOfView * 0.0174532924 : 0; },
                    set: function (v) { if (this.rawHandle) {
                        this.rawHandle.fieldOfView = v * 57.29578;
                    } },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxCamera.prototype, "far", {
                    get: function () { return this.rawHandle ? this.rawHandle.farClipPlane : 0; },
                    set: function (v) { if (this.rawHandle) {
                        this.rawHandle.farClipPlane = v;
                    } },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxCamera.prototype, "near", {
                    get: function () { return this.rawHandle ? this.rawHandle.nearClipPlane : 0; },
                    set: function (v) { if (this.rawHandle) {
                        this.rawHandle.nearClipPlane = v;
                    } },
                    enumerable: false,
                    configurable: true
                });
                wxCamera.prototype.dispose = function () {
                };
                return wxCamera;
            }());
            exports_22("wxCamera", wxCamera);
        }
    };
});
System.register("Tools/engineParallel/m4m/gdMaterialcacher", ["Tools/engineParallel/parallelEngineTool", "Tools/engineParallel/spInterface"], function (exports_23, context_23) {
    "use strict";
    var parallelEngineTool_1, spInterface_4, gdMaterialcacher;
    var __moduleName = context_23 && context_23.id;
    return {
        setters: [
            function (parallelEngineTool_1_1) {
                parallelEngineTool_1 = parallelEngineTool_1_1;
            },
            function (spInterface_4_1) {
                spInterface_4 = spInterface_4_1;
            }
        ],
        execute: function () {
            /**
             * 材质处理器
             */
            // tslint:disable-next-line: class-name
            gdMaterialcacher = /** @class */ (function () {
                function gdMaterialcacher(rawHandle) {
                    this.cacheIdCount = 0;
                    this.cacheMatsMap = {};
                    this._lastRestoreID = -1;
                    this.rawHandle = rawHandle;
                }
                gdMaterialcacher.prototype.cacheCurrMaterial = function (globalMatKey) {
                    this.cacheIdCount++;
                    var currId = this.cacheIdCount;
                    var cacheMats = [];
                    var srcMats = this.rawHandle.materials;
                    var len = srcMats.length;
                    var globalMat;
                    if (globalMatKey != null) {
                        globalMat = parallelEngineTool_1.spAPP.getGlobalMaterial(globalMatKey, false, spInterface_4.engineParallelType.none);
                    }
                    for (var i = 0; i < len; i++) {
                        var cachemat = void 0;
                        //
                        if (!globalMat) {
                            cachemat = srcMats[i].clone(); //new 材质
                        }
                        else {
                            cachemat = globalMat; //全局共享材质
                        }
                        cacheMats.push(cachemat);
                    }
                    this.cacheMatsMap[currId] = cacheMats;
                    return currId;
                };
                gdMaterialcacher.prototype.cachedCount = function () {
                    return Object.keys(this.cacheMatsMap).length;
                };
                gdMaterialcacher.prototype.restoreMaterial = function (cacheID) {
                    var cacheMats = this.cacheMatsMap[cacheID];
                    if (!cacheMats) {
                        console.warn(" cacheID ".concat(cacheID, " not find ! "));
                        return;
                    }
                    this._lastRestoreID = cacheID;
                    this.rawHandle.materials = cacheMats;
                };
                gdMaterialcacher.prototype.getLastRestoreID = function () {
                    return this._lastRestoreID;
                };
                gdMaterialcacher.prototype.dispose = function () {
                    this.rawHandle = null;
                    this.cacheMatsMap = null;
                };
                return gdMaterialcacher;
            }());
            exports_23("gdMaterialcacher", gdMaterialcacher);
        }
    };
});
System.register("Tools/engineParallel/m4m/gdMeshRenderer", ["Tools/engineParallel/spInterface", "Tools/engineParallel/m4m/gdMaterialcacher"], function (exports_24, context_24) {
    "use strict";
    var spInterface_5, gdMaterialcacher_1, gdMeshRenderer;
    var __moduleName = context_24 && context_24.id;
    return {
        setters: [
            function (spInterface_5_1) {
                spInterface_5 = spInterface_5_1;
            },
            function (gdMaterialcacher_1_1) {
                gdMaterialcacher_1 = gdMaterialcacher_1_1;
            }
        ],
        execute: function () {
            /** 简配 camera 组件  */
            // tslint:disable-next-line: class-name
            gdMeshRenderer = /** @class */ (function () {
                function gdMeshRenderer(rawCam, go) {
                    this.compType = spInterface_5.spComponentType.meshRenderer;
                    this.id = "".concat(go.getID(), "_").concat(this.compType);
                    this.rawHandle = rawCam;
                    this.gameObject = go;
                    this.matHandle = new gdMaterialcacher_1.gdMaterialcacher(rawCam);
                }
                Object.defineProperty(gdMeshRenderer, "assetMgr", {
                    get: function () {
                        if (!this._assetMgr) {
                            this._assetMgr = m4m.framework.assetMgr.Instance;
                        }
                        return this._assetMgr;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdMeshRenderer.prototype, "enableGpuInstancing", {
                    get: function () { return this.rawHandle.materials[0].enableGpuInstancing; },
                    set: function (v) { this.rawHandle.materials[0].enableGpuInstancing = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdMeshRenderer.prototype, "queue", {
                    get: function () { return this.rawHandle.queue; },
                    set: function (v) { this.rawHandle.queue = v; },
                    enumerable: false,
                    configurable: true
                });
                gdMeshRenderer.prototype.getLastRestoreID = function () {
                    throw this.matHandle.getLastRestoreID();
                };
                gdMeshRenderer.prototype.getMaterialsCount = function () {
                    return this.rawHandle.materials.length;
                };
                gdMeshRenderer.prototype.cacheCurrMaterial = function (globalMatKey) {
                    return this.matHandle.cacheCurrMaterial(globalMatKey);
                };
                gdMeshRenderer.prototype.cachedCount = function () {
                    return this.matHandle.cachedCount();
                };
                gdMeshRenderer.prototype.restoreMaterial = function (cacheID) {
                    return this.matHandle.restoreMaterial(cacheID);
                };
                gdMeshRenderer.prototype.getShaderName = function (matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    return this.rawHandle.materials[matIdx].getShader()
                        .getName();
                };
                gdMeshRenderer.prototype.getMaterialID = function (idx) {
                    if (idx === void 0) { idx = 0; }
                    if (!this.rawHandle.materials[idx]) {
                        return;
                    }
                    return this.rawHandle.materials[idx].getGUID();
                };
                gdMeshRenderer.prototype.setShader = function (shaderSrc, idx) {
                    var _this = this;
                    if (idx === void 0) { idx = 0; }
                    return new Promise(function (resolve) {
                        if (!_this.rawHandle.materials[idx]) {
                            return;
                        }
                        _this.rawHandle.materials[idx].setShader(gdMeshRenderer.assetMgr.getShader(shaderSrc));
                        resolve();
                    });
                };
                gdMeshRenderer.prototype.setMaterialFloat = function (key, value, idx) {
                    if (idx === void 0) { idx = 0; }
                    if (!this.rawHandle.materials[idx]) {
                        return;
                    }
                    this.rawHandle.materials[idx].setFloat(key, value);
                };
                gdMeshRenderer.prototype.setMaterialVector4 = function (key, value, idx) {
                    if (idx === void 0) { idx = 0; }
                    if (!this.rawHandle.materials[idx]) {
                        return;
                    }
                    this.rawHandle.materials[idx].setVector4(key, value);
                };
                gdMeshRenderer.prototype.setTexture = function (key, valueTex, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    if (!this.rawHandle.materials[matIdx]) {
                        return;
                    }
                    this.rawHandle.materials[matIdx].setTexture(key, valueTex);
                };
                gdMeshRenderer.prototype.dispose = function () {
                    this.rawHandle = null;
                    this.gameObject = null;
                };
                return gdMeshRenderer;
            }());
            exports_24("gdMeshRenderer", gdMeshRenderer);
        }
    };
});
System.register("Tools/engineParallel/m4m/gdSkinnedMeshRenderer", ["Tools/engineParallel/spInterface", "Tools/engineParallel/m4m/gdMaterialcacher"], function (exports_25, context_25) {
    "use strict";
    var spInterface_6, gdMaterialcacher_2, gdSkinnedMeshRenderer;
    var __moduleName = context_25 && context_25.id;
    return {
        setters: [
            function (spInterface_6_1) {
                spInterface_6 = spInterface_6_1;
            },
            function (gdMaterialcacher_2_1) {
                gdMaterialcacher_2 = gdMaterialcacher_2_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            gdSkinnedMeshRenderer = /** @class */ (function () {
                function gdSkinnedMeshRenderer(raw, go) {
                    this.isSkinnedMeshRenderer = true;
                    this.compType = spInterface_6.spComponentType.meshRenderer;
                    this.id = "".concat(go.getID(), "_").concat(this.compType);
                    this.rawHandle = raw;
                    this.gameObject = go;
                    this.matHandle = new gdMaterialcacher_2.gdMaterialcacher(raw);
                }
                Object.defineProperty(gdSkinnedMeshRenderer, "assetMgr", {
                    get: function () {
                        if (!this._assetMgr) {
                            this._assetMgr = m4m.framework.assetMgr.Instance;
                        }
                        return this._assetMgr;
                    },
                    enumerable: false,
                    configurable: true
                });
                gdSkinnedMeshRenderer.prototype.getLastRestoreID = function () {
                    return this.matHandle.getLastRestoreID();
                };
                gdSkinnedMeshRenderer.prototype.getMaterialID = function (matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    if (!this.rawHandle.materials[matIdx]) {
                        return;
                    }
                    return this.rawHandle.materials[matIdx].getGUID();
                };
                gdSkinnedMeshRenderer.prototype.getMaterialsCount = function () {
                    return this.rawHandle.materials.length;
                };
                gdSkinnedMeshRenderer.prototype.setMaterialFloat = function (key, value, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    if (!this.rawHandle.materials[matIdx]) {
                        return;
                    }
                    this.rawHandle.materials[matIdx].setFloat(key, value);
                };
                gdSkinnedMeshRenderer.prototype.setMaterialVector4 = function (key, value, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    if (!this.rawHandle.materials[matIdx]) {
                        return;
                    }
                    this.rawHandle.materials[matIdx].setVector4(key, value);
                };
                gdSkinnedMeshRenderer.prototype.setTexture = function (key, valueTex, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    if (!this.rawHandle.materials[matIdx]) {
                        return;
                    }
                    this.rawHandle.materials[matIdx].setTexture(key, valueTex);
                };
                gdSkinnedMeshRenderer.prototype.getShaderName = function (matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    return this.rawHandle.materials[matIdx].getShader()
                        .getName();
                };
                gdSkinnedMeshRenderer.prototype.setShader = function (shaderSrc, idx) {
                    var _this = this;
                    if (idx === void 0) { idx = 0; }
                    return new Promise(function (resolve) {
                        if (!_this.rawHandle.materials[idx]) {
                            return;
                        }
                        _this.rawHandle.materials[idx].setShader(gdSkinnedMeshRenderer.assetMgr.getShader(shaderSrc));
                        resolve();
                    });
                    // if(!this.rawHandle.materials[matIdx]) return;
                    // this.rawHandle.materials[matIdx].setShader( gdSkinnedMeshRenderer.assetMgr.getShader(shaderSrc));
                };
                gdSkinnedMeshRenderer.prototype.cacheCurrMaterial = function (globalMatKey) {
                    return this.matHandle.cacheCurrMaterial(globalMatKey);
                };
                gdSkinnedMeshRenderer.prototype.restoreMaterial = function (cacheID) {
                    return this.matHandle.restoreMaterial(cacheID);
                };
                gdSkinnedMeshRenderer.prototype.cachedCount = function () {
                    return this.matHandle.cachedCount();
                };
                gdSkinnedMeshRenderer.prototype.dispose = function () {
                    this.matHandle.dispose();
                    this.rawHandle = null;
                    this.gameObject = null;
                };
                return gdSkinnedMeshRenderer;
            }());
            exports_25("gdSkinnedMeshRenderer", gdSkinnedMeshRenderer);
        }
    };
});
System.register("Tools/engineParallel/m4m/gdParticleSystem", ["Tools/engineParallel/spInterface"], function (exports_26, context_26) {
    "use strict";
    var spInterface_7, gdParticleSystem;
    var __moduleName = context_26 && context_26.id;
    return {
        setters: [
            function (spInterface_7_1) {
                spInterface_7 = spInterface_7_1;
            }
        ],
        execute: function () {
            /** 简配 camera 组件  */
            // tslint:disable-next-line: class-name
            gdParticleSystem = /** @class */ (function () {
                function gdParticleSystem(raw, go) {
                    this.compType = spInterface_7.spComponentType.particleSystem;
                    this.id = "".concat(go.getID(), "_").concat(this.compType);
                    this.rawHandle = raw;
                    this.gameObject = go;
                }
                gdParticleSystem.prototype.setColor = function (_color) {
                    this.rawHandle.changeColor(_color);
                };
                gdParticleSystem.prototype.getLastRestoreID = function () {
                    throw new Error("Method not implemented.");
                };
                Object.defineProperty(gdParticleSystem.prototype, "beloop", {
                    get: function () { return this.rawHandle.data.beloop; },
                    set: function (v) { this.rawHandle.data.beloop = v; },
                    enumerable: false,
                    configurable: true
                });
                gdParticleSystem.prototype.stop = function () {
                    this.rawHandle.stop();
                };
                gdParticleSystem.prototype.play = function (onPlayEnd) {
                    this.rawHandle.play(onPlayEnd);
                };
                gdParticleSystem.prototype.getMaterialID = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.getMaterialsCount = function () {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.setMaterialFloat = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.setMaterialVector4 = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.setTexture = function (key, valueTex, matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.getShaderName = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.setShader = function (shaderSrc, matIdx) {
                    return null;
                };
                gdParticleSystem.prototype.cachedCount = function () {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.cacheCurrMaterial = function (globalMatKey) {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.restoreMaterial = function (cacheID) {
                    throw new Error("Method not implemented.");
                };
                gdParticleSystem.prototype.dispose = function () {
                    this.rawHandle.remove();
                    this.gameObject = null;
                    this.rawHandle = null;
                };
                return gdParticleSystem;
            }());
            exports_26("gdParticleSystem", gdParticleSystem);
        }
    };
});
System.register("Tools/engineParallel/m4m/gdTrailRenderer", ["Tools/engineParallel/spInterface"], function (exports_27, context_27) {
    "use strict";
    var spInterface_8, gdTrailRenderer;
    var __moduleName = context_27 && context_27.id;
    return {
        setters: [
            function (spInterface_8_1) {
                spInterface_8 = spInterface_8_1;
            }
        ],
        execute: function () {
            /** 简配 TrailRenderer 组件  */
            // tslint:disable-next-line: class-name
            gdTrailRenderer = /** @class */ (function () {
                function gdTrailRenderer(raw, go) {
                    this.compType = spInterface_8.spComponentType.trailRenderer;
                    this.id = "".concat(go.getID(), "_").concat(this.compType);
                    this.rawHandle = raw;
                    this.gameObject = go;
                }
                gdTrailRenderer.prototype.getLastRestoreID = function () {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.setSpeed = function (speed) {
                    this.rawHandle.setspeed(speed);
                };
                gdTrailRenderer.prototype.setWidth = function (width) {
                    this.rawHandle.setWidth(width);
                };
                Object.defineProperty(gdTrailRenderer.prototype, "color", {
                    get: function () { return this.rawHandle.color; },
                    set: function (v) { this.rawHandle.color = v; },
                    enumerable: false,
                    configurable: true
                });
                gdTrailRenderer.prototype.stop = function () {
                    this.rawHandle.stop();
                };
                gdTrailRenderer.prototype.play = function () {
                    this.rawHandle.play();
                };
                gdTrailRenderer.prototype.getMaterialID = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.getMaterialsCount = function () {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.setMaterialFloat = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.setMaterialVector4 = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.setTexture = function (key, valueTex, matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.getShaderName = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.setShader = function (shaderSrc, matIdx) {
                    return null;
                };
                gdTrailRenderer.prototype.cachedCount = function () {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.cacheCurrMaterial = function (globalMatKey) {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.restoreMaterial = function (cacheID) {
                    throw new Error("Method not implemented.");
                };
                gdTrailRenderer.prototype.dispose = function () {
                    this.rawHandle.remove();
                    this.gameObject = null;
                    this.rawHandle = null;
                };
                return gdTrailRenderer;
            }());
            exports_27("gdTrailRenderer", gdTrailRenderer);
        }
    };
});
System.register("Tools/engineParallel/m4m/gdAnimPlayer", ["Tools/engineParallel/spInterface"], function (exports_28, context_28) {
    "use strict";
    var spInterface_9, gdAnimPlayer;
    var __moduleName = context_28 && context_28.id;
    return {
        setters: [
            function (spInterface_9_1) {
                spInterface_9 = spInterface_9_1;
            }
        ],
        execute: function () {
            /** m4m录制帧蒙皮动画组件 ISpAnimPlayer 封装  */
            // tslint:disable-next-line: class-name
            gdAnimPlayer = /** @class */ (function () {
                function gdAnimPlayer(raw, go) {
                    this.compType = spInterface_9.spComponentType.animPlayer;
                    this.id = "".concat(go.getID(), "_").concat(this.compType);
                    this.rawHandle = raw;
                    this.gameObject = go;
                }
                gdAnimPlayer.prototype.stop = function () {
                    this.rawHandle.stop();
                };
                gdAnimPlayer.prototype.playAnimByName = function (clipName, onPlayend, blendTime, endframe, speed, beRevert) {
                    this.rawHandle.playCross(clipName, blendTime, onPlayend, speed, beRevert);
                };
                gdAnimPlayer.prototype.dispose = function () {
                    this.rawHandle = null;
                    this.gameObject = null;
                };
                return gdAnimPlayer;
            }());
            exports_28("gdAnimPlayer", gdAnimPlayer);
        }
    };
});
System.register("Data/ReuseArray", [], function (exports_29, context_29) {
    "use strict";
    var ReuseArray;
    var __moduleName = context_29 && context_29.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 复用数组 ，用于频繁重复创建数组容器的场景(减少GC消耗)
             */
            ReuseArray = /** @class */ (function () {
                function ReuseArray() {
                    this.arr = [];
                    this.buoy = -1;
                }
                /** 获取 Array 对象 */
                ReuseArray.prototype.getArray = function () {
                    return this.arr;
                };
                Object.defineProperty(ReuseArray.prototype, "length", {
                    /** 获取当前长度 */
                    get: function () { return this.buoy + 1; },
                    set: function (val) { this.buoy = val - 1; },
                    enumerable: false,
                    configurable: true
                });
                ReuseArray.prototype.push = function (val) {
                    this.buoy++;
                    this.arr[this.buoy] = val;
                };
                /** 获取指定索引的值 */
                ReuseArray.prototype.get = function (index) {
                    if (index > this.buoy) {
                        return null;
                    }
                    return this.arr[index];
                };
                /** 数组所有值置为null  */
                ReuseArray.prototype.clear = function () {
                    var len = this.arr.length;
                    for (var i = 0; i < len; i++) {
                        if (this.arr[i] == null && i >= this.buoy) {
                            break;
                        }
                        this.arr[i] = null;
                    }
                    this.buoy = -1;
                };
                return ReuseArray;
            }());
            exports_29("ReuseArray", ReuseArray);
        }
    };
});
System.register("Time/TimeUtil", [], function (exports_30, context_30) {
    "use strict";
    var TimeUtil;
    var __moduleName = context_30 && context_30.id;
    return {
        setters: [],
        execute: function () {
            exports_30("TimeUtil", TimeUtil = /** @class */ (function () {
                function TimeUtil() {
                }
                TimeUtil.init = function (app, FrameRate) {
                    var _this = this;
                    if (FrameRate === void 0) { FrameRate = 60; }
                    this.app = app;
                    //update delta 注册;
                    var arrLen = 240;
                    var tGap = 1 / FrameRate;
                    for (var i = 0; i < arrLen; i++) {
                        this.timeSection += tGap;
                        this.ftimeSection += tGap;
                        this.timeArr.push(tGap);
                        this.fTimeArr.push(tGap);
                    }
                    //物理的 delta
                    var phy = m4m.framework.physics2D;
                    var lastTotalTime = app.getTotalTime();
                    if (phy) {
                        var timing_1 = phy.matterEngine.timing;
                        phy.addEventListener(m4m.event.Physic2dEventEnum.afterUpdate, function () {
                            var currTime = timing_1.timestamp;
                            if (_this.lastFixedT == -1) {
                                _this.lastFixedT = currTime;
                                return;
                            }
                            _this._fixedDeltaTime = (currTime - _this.lastFixedT) * 0.001;
                            _this.lastFixedT = currTime;
                            //计算 物理平滑更新后 ，时间长度的修正 比率
                            var nowTotalTime = app.getTotalTime();
                            var dt = nowTotalTime - lastTotalTime;
                            lastTotalTime = nowTotalTime;
                            if (timing_1.timeScale > 0) {
                                var fdt = _this._fixedDeltaTime;
                                dt = dt > 0.1 ? 0.1 : dt; //避免卡帧 
                                fdt = fdt > 0.1 ? 0.1 : fdt;
                                _this.timeSection += dt;
                                _this.timeArr.push(dt);
                                _this.timeSection -= _this.timeArr.shift();
                                _this.ftimeSection += fdt;
                                _this.fTimeArr.push(fdt);
                                _this.ftimeSection -= _this.fTimeArr.shift();
                                var correctRatio = _this.timeSection / _this.ftimeSection;
                                _this._fixedDeltaTime *= correctRatio;
                                // tslint:disable-next-line: max-line-length
                                // console.error(`TimeRate : ${correctRatio} , time : ${this.timeSection} , fTime :${this.ftimeSection} , fps ${Math.pow(this._fixedDeltaTime, -1 ) } `);
                            }
                        }, this);
                    }
                    //realDT
                    var oldUpdate = app["update"].bind(app);
                    app["update"] = function (dt) {
                        oldUpdate(dt);
                        _this.update();
                    };
                };
                Object.defineProperty(TimeUtil, "appStartupTime", {
                    /** 游戏启动时的世间  (单位 毫秒)*/
                    get: function () { return this._appStartupTime; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "realtimeSinceStartup", {
                    /** 从游戏启动到现在的真实时间 (单位 毫秒)*/
                    get: function () {
                        return Date.now() - this.appStartupTime;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "stepGapTime", {
                    /** 当前间隔时间 (单位 毫秒)*/
                    get: function () {
                        var result = Date.now() - this._lastStepTime;
                        this._lastStepTime = Date.now();
                        return result;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "time", {
                    /**
                     * 获取当前时间 (单位 毫秒)
                     */
                    get: function () {
                        return Date.now();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "deltaTime", {
                    /**
                     * 完成最后一帧所用的时间（单位 秒）
                     */
                    get: function () {
                        return this.app.deltaTime;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "fixedDeltaTime", {
                    /**
                     * 物理和其他固定帧速率更新的时间间隔（单位 秒）。
                     */
                    get: function () {
                        // return this.app.deltaTime;
                        return TimeUtil._fixedDeltaTime * this._timeScale;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "timeScale", {
                    /** 全局时间缩放 */
                    get: function () { return this._timeScale; },
                    set: function (v) {
                        if (v == null || isNaN(v)) {
                            return;
                        }
                        this._timeScale = v;
                        this.app.timeScale = v;
                        this._inverseTimeScale = Math.pow(v, -1);
                        if (v == 0) {
                            this._inverseTimeScale = 0;
                        } //避免计算无穷大
                        if (!m4m.framework.physics2D) {
                            return;
                        }
                        var Phy = m4m.framework.physics2D.matterEngine;
                        // Phy.timing.timeScale = v;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "inverseTimeScale", {
                    /** 时间缩放值的逆值 */
                    get: function () { return this._inverseTimeScale; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TimeUtil, "realDeltaTime", {
                    /** 真实不受 时间缩放影响的 DeltaTime */
                    get: function () {
                        return this._realDeltaTime;
                    },
                    enumerable: false,
                    configurable: true
                });
                TimeUtil.update = function () {
                    this._realDeltaTime = (Date.now() - this.lastTime) * 0.001;
                    this.lastTime = Date.now();
                };
                TimeUtil._appStartupTime = Date.now();
                TimeUtil.timeArr = []; //真实时间数组
                TimeUtil.fTimeArr = []; //物理时间数组
                TimeUtil.timeSection = 0; //真实时间段
                TimeUtil.ftimeSection = 0; //物理时间段
                TimeUtil._lastStepTime = Date.now();
                TimeUtil.lastFixedT = -1;
                TimeUtil._fixedDeltaTime = 0;
                TimeUtil._timeScale = 1;
                TimeUtil._inverseTimeScale = 1;
                TimeUtil._realDeltaTime = -1;
                TimeUtil.lastTime = Date.now();
                return TimeUtil;
            }()));
        }
    };
});
System.register("Tools/engineParallel/AnimTimeEventHandle", ["Data/Map"], function (exports_31, context_31) {
    "use strict";
    var Map_4, AnimTimeEventHandle, AnimTimeEventNode;
    var __moduleName = context_31 && context_31.id;
    return {
        setters: [
            function (Map_4_1) {
                Map_4 = Map_4_1;
            }
        ],
        execute: function () {
            /**
             * 动画时间轴事件控制器
             */
            AnimTimeEventHandle = /** @class */ (function () {
                function AnimTimeEventHandle() {
                    this.clipTimeEventDic = new Map_4.cMap(); //动画片段时间轴事件 [key:clipName , value: animTimeData]
                    this.updateDic = new Map_4.cMap(); //注册update的 node
                }
                /** 注册update */
                AnimTimeEventHandle.prototype.regUpdata = function (p, nodeID) {
                    if (!p) {
                        return false;
                    }
                    this.updateDic.set(nodeID, p);
                    // this.activeUpdate();
                    return true;
                };
                /** 注销update */
                AnimTimeEventHandle.prototype.unregUpdate = function (p, nodeID) {
                    if (!p) {
                        return;
                    }
                    this.updateDic.delete(nodeID);
                };
                return AnimTimeEventHandle;
            }());
            exports_31("AnimTimeEventHandle", AnimTimeEventHandle);
            AnimTimeEventNode = /** @class */ (function () {
                function AnimTimeEventNode(playerObj) {
                    this._currHasTimeEvent = false;
                    this._lastTimeEvnetPoint = 0;
                    this._playerObj = playerObj;
                }
                AnimTimeEventNode.prototype.dispose = function () {
                    this._playerObj = null;
                    this._timeEventActObj = null;
                };
                Object.defineProperty(AnimTimeEventNode.prototype, "playerObj", {
                    get: function () { return this._playerObj; },
                    enumerable: false,
                    configurable: true
                });
                /**
                * 注册 动画时间轴事件 回调响应对象
                * @param eventActObj      动画时间事件 回调触发对象
                */
                AnimTimeEventNode.prototype.regTimeEventCallbackObj = function (eventActObj) {
                    this._timeEventActObj = eventActObj;
                };
                /**
                 * 设置 动画时间轴事件 参数
                 * @param simpleClipName    动画片段名
                 * @param timePoint         事件时间点
                 * @param _actFunName       行为方法名
                 * @param val               事件传递的参数
                 */
                AnimTimeEventNode.prototype.setTimeEvent = function (handel, clipName, timePoint, _actFunName, val) {
                    var _c = handel.clipTimeEventDic.get(clipName);
                    if (!_c) {
                        _c = {};
                        handel.clipTimeEventDic.set(clipName, _c);
                    }
                    var key = "".concat(timePoint);
                    if (!_c[key]) {
                        _c[key] = {};
                    }
                    _c[key] = { actFunName: _actFunName, value: val };
                };
                /**
                 * 检查clip是否需要注册
                 * @param handel
                 * @param clipName  片段名
                 * @param nodeID    动画播放器节点ID
                 */
                AnimTimeEventNode.prototype.ckRegUpdate = function (handel, clipName, nodeID) {
                    //重置计时
                    this._lastTimeEvnetPoint = 0;
                    //检查 是否需要注册 update监听
                    var aData = handel.clipTimeEventDic.get(clipName);
                    var needReg = aData != null && this._timeEventActObj != null;
                    var availReg = false;
                    if (needReg) {
                        availReg = handel.regUpdata(this, nodeID);
                        this._currHasTimeEvent = true;
                    }
                    else {
                        handel.unregUpdate(this, nodeID);
                        this._currHasTimeEvent = false;
                    }
                    //
                    return availReg;
                };
                /**
                 * 检查 时间轴事件update 检测
                 * @param handel
                 * @param clipName
                 * @param currClipTime 当前片段的播放时间
                 * @param currClipTotalTime 当前片段的总播放时长
                 * @returns
                 */
                AnimTimeEventNode.prototype.ckTimeEventUpdate = function (handel, clipName, currClipTime, currClipTotalTime) {
                    if (!this._currHasTimeEvent || !this._timeEventActObj) {
                        return;
                    }
                    // let ap = this.aplayer;
                    // if (!ap) { return; }
                    // let clip = ap.currentAniclip;
                    // if (!clip) { return; }
                    // let cName = clip.getName();
                    var adata = handel.clipTimeEventDic.get(clipName);
                    if (!adata) {
                        this._currHasTimeEvent = false;
                        return;
                    }
                    //检查当前帧
                    var lastTime = this._lastTimeEvnetPoint;
                    var currTime = currClipTime;
                    var isBackRound = lastTime > currTime;
                    //区间判断
                    if (isBackRound) {
                        this.ckTimeEventRange(lastTime, currClipTotalTime, adata);
                        lastTime = 0;
                    }
                    this.ckTimeEventRange(lastTime, currTime, adata);
                    this._lastTimeEvnetPoint = currTime;
                };
                /** 检查 时间轴事件通过范围 */
                AnimTimeEventNode.prototype.ckTimeEventRange = function (left, right, _data) {
                    //检查当前帧
                    //区间判断
                    for (var time in _data) {
                        var _t = Number(time);
                        var temp = _data[time];
                        if (_t >= left && _t < right) {
                            var fun = this._timeEventActObj[temp.actFunName];
                            if (fun) {
                                fun.call(this._timeEventActObj, temp.value); //触发回调函数
                            }
                        }
                    }
                };
                return AnimTimeEventNode;
            }());
            exports_31("AnimTimeEventNode", AnimTimeEventNode);
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxAnimPlayer", ["Data/ReuseArray", "Time/TimeUtil", "Tools/engineParallel/AnimTimeEventHandle"], function (exports_32, context_32) {
    "use strict";
    var ReuseArray_1, TimeUtil_1, AnimTimeEventHandle_1, wxAnimPlayer;
    var __moduleName = context_32 && context_32.id;
    return {
        setters: [
            function (ReuseArray_1_1) {
                ReuseArray_1 = ReuseArray_1_1;
            },
            function (TimeUtil_1_1) {
                TimeUtil_1 = TimeUtil_1_1;
            },
            function (AnimTimeEventHandle_1_1) {
                AnimTimeEventHandle_1 = AnimTimeEventHandle_1_1;
            }
        ],
        execute: function () {
            exports_32("wxAnimPlayer", wxAnimPlayer = /** @class */ (function () {
                function wxAnimPlayer(raw, go) {
                    this.animTimeEventNode = new AnimTimeEventHandle_1.AnimTimeEventNode(this);
                    this._isPlaying = true;
                    this.stateInfoMap = {};
                    this.clipTimeLenMap = {};
                    this.currClipName = "";
                    this.id = raw.id.toString();
                    this.rawHandle = raw;
                    this.gameObject = go;
                }
                wxAnimPlayer.update = function (dt) {
                    this.TimeEventUpdate(dt);
                    this.chcekPlayend(dt);
                };
                wxAnimPlayer.TimeEventUpdate = function (dt) {
                    var eventHD = wxAnimPlayer.animTimeEventHD;
                    eventHD.updateDic.forEach(function (n) {
                        var p = n.playerObj;
                        var ap = p.rawHandle;
                        if (!ap) {
                            return;
                        }
                        var clip = ap.getCurrentAnimatorState().motion;
                        if (!clip) {
                            return;
                        }
                        var resId = clip.resourceID;
                        n.ckTimeEventUpdate(eventHD, resId, p.getCurrClipTime(), p.currClipTotalTime());
                    });
                };
                wxAnimPlayer.chcekPlayend = function (dt) {
                    var _a;
                    for (var nodeID in this.waitePlayEndMap) {
                        this.removeArr.length = 0;
                        var idMap = this.waitePlayEndMap[nodeID];
                        for (var clipName in idMap) {
                            var info = (_a = idMap[clipName], _a[0]), callBack = _a[1];
                            this.calcNormalizedTime(info);
                            if (info.normalizedTime >= info.ckEndNormalizedTime) {
                                this.removeArr.push(nodeID);
                                callBack(); //动画播放完毕 回调函数
                            }
                        }
                        for (var i = 0, len = this.removeArr.length; i < len; i++) {
                            delete this.waitePlayEndMap[this.removeArr.get(i)];
                        }
                    }
                };
                wxAnimPlayer.calcNormalizedTime = function (info) {
                    info.normalizedTime = (TimeUtil_1.TimeUtil.time - info.startTime) * 0.001 / info.length;
                };
                wxAnimPlayer.prototype.getCurrClipName = function () {
                    return this.currClipName;
                };
                wxAnimPlayer.prototype.stop = function () {
                    this.rawHandle.speed = 0;
                    this._isPlaying = false;
                };
                wxAnimPlayer.prototype.playAnimByName = function (simpleClipName, onPlayend, blendTime, endframe, speed, beRevert) {
                    if (!this.rawHandle) {
                        return;
                    }
                    this.ensureStateInit();
                    this._playAnimByName(simpleClipName, onPlayend, blendTime, endframe, speed, beRevert);
                };
                wxAnimPlayer.prototype.currClipTotalTime = function () {
                    return this.getClipTotalTime(this.currClipName);
                };
                wxAnimPlayer.prototype.getClipTotalTime = function (simpleClipName) {
                    var time = this.clipTimeLenMap[simpleClipName];
                    return time == null ? 0 : time;
                };
                wxAnimPlayer.prototype.setCurrClipNormalizedTime = function (normalLizedTime) {
                    var info = this.stateInfoMap[this.currClipName];
                    if (!info) {
                        return;
                    }
                    info.startTime = -info.normalizedTime * info.length * 1000 + TimeUtil_1.TimeUtil.time; //startTime 修改
                    info.normalizedTime = normalLizedTime;
                };
                wxAnimPlayer.prototype.getCurrClipNormalizedTime = function () {
                    var info = this.stateInfoMap[this.currClipName];
                    if (!info) {
                        return 0;
                    }
                    wxAnimPlayer.calcNormalizedTime(info);
                    return info.normalizedTime;
                };
                wxAnimPlayer.prototype.isPlay = function () {
                    if (!this._isPlaying) {
                        return false;
                    }
                    var info = this.stateInfoMap[this.currClipName];
                    if (info) {
                        wxAnimPlayer.calcNormalizedTime(info);
                        this.rawHandle.getCurrentAnimatorStateInfo(0, info);
                        this._isPlaying = info.normalizedTime < 0.999999;
                    }
                    return this._isPlaying;
                };
                wxAnimPlayer.prototype.hasClip = function (simpleClipName) {
                    return this.rawHandle.hasState(0, simpleClipName);
                };
                wxAnimPlayer.prototype.dispose = function () {
                    if (this.animTimeEventNode) {
                        this.animTimeEventNode.dispose();
                    }
                    this.clearPlayEndFuns();
                    // throw new Error("Method not implemented.");
                    this.stateInfoMap = null;
                    this.clipTimeLenMap = null;
                    this.rawHandle = null;
                    this.gameObject = null;
                    this.animTimeEventNode = null;
                };
                wxAnimPlayer.prototype.reset = function () {
                    this.clearPlayEndFuns();
                };
                wxAnimPlayer.prototype.regTimeEventCallbackObj = function (eventActObj) {
                    this.animTimeEventNode.regTimeEventCallbackObj(eventActObj);
                };
                wxAnimPlayer.prototype.setTimeEvent = function (simpleClipName, timePoint, _actFunName, val) {
                    var sta = this.tryGetState(simpleClipName);
                    if (!sta) {
                        return;
                    }
                    var _clip = sta.motion;
                    if (!_clip) {
                        return;
                    }
                    var resId = _clip.resourceID;
                    this.animTimeEventNode.setTimeEvent(wxAnimPlayer.animTimeEventHD, resId, timePoint, _actFunName, val);
                };
                /**
                 * 获取 当前在播放动画到的时间点
                 */
                wxAnimPlayer.prototype.getCurrClipTime = function () {
                    var ap = this.rawHandle;
                    if (!ap) {
                        return 0;
                    }
                    var info = this.stateInfoMap[this.currClipName];
                    if (!info) {
                        return 0;
                    }
                    var timePoint = (TimeUtil_1.TimeUtil.time - info.startTime) * 0.001;
                    timePoint %= info.length;
                    return timePoint;
                };
                wxAnimPlayer.prototype.addPlayEndFun = function (nodeID, clipName, callBackFun, info) {
                    var idMap = wxAnimPlayer.waitePlayEndMap[nodeID];
                    if (!idMap) {
                        idMap = wxAnimPlayer.waitePlayEndMap[nodeID] = {};
                    }
                    idMap[clipName] = [info, callBackFun];
                };
                //确保 播放动画前 ，stata 被初始化了 （微信组件问题 ， 初始化完全需要 awake 和 update 过）
                wxAnimPlayer.prototype.ensureStateInit = function () {
                    // let tag = "__EnsureStateTag__" ;
                    // if(this.rawHandle[tag]) return;
                    // this.rawHandle[tag] = true;
                    var hasAwaked = this.rawHandle["_binding"] != null;
                    if (!hasAwaked) {
                        var oldOnAwake = this.rawHandle["_onAwake"];
                        // let has_onAwake = false;
                        // let wFun = this.rawHandle["_onAwake"] = ()=>{
                        //     if(has_onAwake) return;
                        //     has_onAwake = true;
                        //     old_onAwake.apply(this.rawHandle);
                        // }
                        // //init
                        // wFun();
                        oldOnAwake.apply(this.rawHandle);
                    }
                    // this.rawHandle["_onUpdate"](0);
                };
                wxAnimPlayer.prototype.tryGetState = function (clipName) {
                    if (!this.rawHandle) {
                        return;
                    }
                    var stateTag = "__stateTag__";
                    var stateMap = this.rawHandle[stateTag];
                    if (!stateMap) {
                        stateMap = this.rawHandle[stateTag] = {};
                        var contr = this.rawHandle.controller;
                        var layer = contr.layers[0];
                        var stateM = layer.stateMachine;
                        for (var i = 0, len = stateM.states.length; i < len; i++) {
                            var state = stateM.states[i];
                            stateMap[state.name] = state;
                        }
                    }
                    var st = stateMap[clipName];
                    if (!st) {
                        console.error(" animator \u4E2D \u4E0D\u5B58\u5728 ".concat(clipName, "!!!"));
                    }
                    return st;
                };
                wxAnimPlayer.prototype._playAnimByName = function (clipName, onPlayend, blendTime, endframe, speed, beRevert) {
                    // let sta = this.rawHandle.getCurrentAnimatorState();
                    var sta = this.tryGetState(clipName);
                    var frameRate = sta.motion["frameRate"];
                    var frameLength = sta.motion["frameLength"];
                    var endNormalizedTime = 1;
                    //endframe 功能
                    if (endframe != null && frameLength) {
                        var _endframe = endframe % frameLength;
                        endNormalizedTime = _endframe / frameLength;
                    }
                    this.rawHandle.play(clipName, 0);
                    this.rawHandle["_onUpdate"](0); // wx 必须update 才能保证 state 正常
                    // console.error(`wxAnimPlayer.playAnimByName ${clipName}`);
                    // window["__he"] = this.rawHandle;
                    this.currClipName = clipName;
                    this._isPlaying = true;
                    this.rawHandle.speed = speed != null ? speed : 1;
                    if (!sta) {
                        console.error("getCurrentAnimatorState() \u83B7\u53D6state \u5BF9\u8C61\u4E3Anull , Animator \u7EC4\u4EF6\u5E76\u672A\u521D\u59CB\u5316\u5B8C\u5168\uFF01");
                    }
                    sta.mirror = beRevert == true;
                    var info = this.stateInfoMap[clipName];
                    if (!info) {
                        info = this.rawHandle.getCurrentAnimatorStateInfo(0, {});
                        this.stateInfoMap[clipName] = info;
                    }
                    info.normalizedTime = 0;
                    info.startTime = TimeUtil_1.TimeUtil.time;
                    info.ckEndNormalizedTime = endNormalizedTime;
                    //clip time lenght
                    if (this.clipTimeLenMap[clipName] == null) {
                        var currClip = sta.motion;
                        this.clipTimeLenMap[clipName] = currClip.length;
                    }
                    //检查 upadte 注册
                    // this.ckRegUpdate(clipName);
                    if (sta && sta.motion) {
                        var _clip = sta.motion;
                        var resId = _clip.resourceID;
                        // let aData = wxAnimPlayer.clipTimeEventDic.get(resId);
                        // needReg = aData != null;
                        var availReg = this.animTimeEventNode.ckRegUpdate(wxAnimPlayer.animTimeEventHD, resId, this.id);
                    }
                    if (onPlayend) {
                        this.addPlayEndFun(this.id, clipName, onPlayend, info);
                    }
                };
                wxAnimPlayer.prototype.clearPlayEndFuns = function () {
                    var idMap = wxAnimPlayer.waitePlayEndMap[this.id];
                    if (!idMap) {
                        return;
                    }
                    for (var nodeID in idMap) {
                        delete idMap[nodeID];
                    }
                    delete wxAnimPlayer.waitePlayEndMap[this.id];
                };
                wxAnimPlayer.waitePlayEndMap = {};
                wxAnimPlayer.removeArr = new ReuseArray_1.ReuseArray();
                wxAnimPlayer.animTimeEventHD = new AnimTimeEventHandle_1.AnimTimeEventHandle(); //动画时间轴事件HD
                return wxAnimPlayer;
            }()));
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxMaterialcacher", ["engine", "Tools/engineParallel/parallelEngineTool", "Tools/engineParallel/spInterface"], function (exports_33, context_33) {
    "use strict";
    var engine_1, parallelEngineTool_2, spInterface_10, wxMaterialcacher;
    var __moduleName = context_33 && context_33.id;
    return {
        setters: [
            function (engine_1_1) {
                engine_1 = engine_1_1;
            },
            function (parallelEngineTool_2_1) {
                parallelEngineTool_2 = parallelEngineTool_2_1;
            },
            function (spInterface_10_1) {
                spInterface_10 = spInterface_10_1;
            }
        ],
        execute: function () {
            exports_33("wxMaterialcacher", wxMaterialcacher = /** @class */ (function () {
                function wxMaterialcacher(rawHandle) {
                    this.cacheIdCount = 0;
                    this.cacheMatsMap = {};
                    this._lastRestoreID = -1;
                    this.rawHandle = rawHandle;
                }
                Object.defineProperty(wxMaterialcacher, "shaderName2IDMap", {
                    get: function () {
                        if (!this._shaderName2IDMap) {
                            for (var i = 0, len = this.addSuffixList.length; i < len; i++) {
                                this.addSuffixMap[this.addSuffixList[i]] = true;
                            }
                            this._shaderName2IDMap = {};
                            this._shaderm4mName2WxNameMap = {};
                            for (var i = 0, len = this.m4mShaderNames.length; i < len; i++) {
                                var key = this.m4mShaderNames[i];
                                var idx = key.lastIndexOf(".shader.json");
                                var shName = key.substring(0, idx);
                                var otherSuffix = this.addSuffixMap[shName] ? ".shader" : "";
                                // this._shaderName2IDMap[key] = GameMgr.shaderPath_WXEngine + shName + otherSuffix + ".effect";   //ID
                                this._shaderName2IDMap[key] = this.wxShaderPath + shName + otherSuffix + ".effect"; //ID
                                this._shaderm4mName2WxNameMap[key] = shName; //名字
                            }
                        }
                        return this._shaderName2IDMap;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxMaterialcacher, "wxShaderNameMap", {
                    get: function () {
                        if (!this._wxShaderNameMap) {
                            this._wxShaderNameMap = {};
                            var map = this.shaderName2IDMap;
                            if (map) {
                                for (var key in this._shaderm4mName2WxNameMap) {
                                    this._wxShaderNameMap[this._shaderm4mName2WxNameMap[key]] = key;
                                }
                            }
                        }
                        return this._wxShaderNameMap;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 初始化
                 * @param m4mShaderNames shader 名字
                 * @param wxShaderPath  微信shader路径
                 * @param addSuffixList wxShader ID 名需要增加 .shader 后缀的列表
                 */
                wxMaterialcacher.init = function (m4mShaderNames, wxShaderPath, addSuffixList) {
                    this.m4mShaderNames = m4mShaderNames;
                    this.wxShaderPath = wxShaderPath;
                    this.addSuffixList = addSuffixList;
                };
                wxMaterialcacher.prototype.getMaterialID = function (matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    var currMat = this.rawHandle.getSharedMaterialAtIndex(matIdx);
                    if (!currMat) {
                        return;
                    }
                    return currMat.id;
                };
                wxMaterialcacher.prototype.setMaterialFloat = function (key, value, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    var currMat = this.rawHandle.getSharedMaterialAtIndex(matIdx);
                    if (!currMat) {
                        return;
                    }
                    currMat.setFloat(key, value);
                };
                wxMaterialcacher.prototype.setMaterialVector4 = function (key, value, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    var currMat = this.rawHandle.getSharedMaterialAtIndex(matIdx);
                    if (!currMat) {
                        return;
                    }
                    var v4 = new engine_1.default.Vector4();
                    v4.x = value.x;
                    v4.y = value.y;
                    v4.z = value.z;
                    v4.w = value.w;
                    currMat.setVector(key, v4);
                };
                wxMaterialcacher.prototype.setTexture = function (key, valueTex, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    if (!(valueTex instanceof engine_1.default.Texture2D)) {
                        console.error(" \u7EB9\u7406[".concat(key, "] \u8D44\u6E90\u9519\u8BEF , \u7EB9\u7406\u5BF9\u8C61\u4E0D\u662F engine.Texture2D \u7C7B\u578B\uFF01\uFF01"));
                    }
                    var currMat = this.rawHandle.getSharedMaterialAtIndex(matIdx);
                    if (!currMat) {
                        return;
                    }
                    currMat.setTexture(key, valueTex);
                };
                wxMaterialcacher.prototype.getShaderName = function (matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    var currMat = this.rawHandle.getSharedMaterialAtIndex(matIdx);
                    if (!currMat) {
                        return;
                    }
                    return wxMaterialcacher.wxShaderNameMap[currMat.effect.name];
                };
                wxMaterialcacher.prototype.setShader = function (shaderID, matIdx) {
                    var _this = this;
                    if (matIdx === void 0) { matIdx = 0; }
                    return new Promise(function (resolve, reject) {
                        var wxShaderID = wxMaterialcacher.shaderName2IDMap[shaderID];
                        var currMat = _this.rawHandle.getSharedMaterialAtIndex(matIdx);
                        if (!currMat) {
                            return;
                        }
                        engine_1.default.loader.load(wxShaderID).promise
                            .then(function (effect) {
                            if (!effect) {
                                reject();
                                return;
                            }
                            //同名贴图切换过来
                            var imgMap;
                            if (currMat.effect) {
                                var tempMap = currMat.effect["_shaderImageIndexMap"];
                                if (tempMap) {
                                    imgMap = {};
                                    for (var key in tempMap) {
                                        imgMap[key] = currMat.getTexture(key);
                                    }
                                }
                            }
                            currMat.effect = effect;
                            if (imgMap) {
                                for (var key in imgMap) {
                                    currMat.setTexture(key, imgMap[key]);
                                }
                            }
                            resolve();
                        });
                    });
                };
                wxMaterialcacher.prototype.cacheCurrMaterial = function (globalMatKey) {
                    this.cacheIdCount++;
                    var currId = this.cacheIdCount;
                    var cacheMats = [];
                    // let srcMats = this.rawHandle.materials; 
                    var srcMats = [];
                    var matCount = this.rawHandle.materialCount;
                    for (var i = 0; i < matCount; i++) {
                        srcMats.push(this.rawHandle.getSharedMaterialAtIndex(i));
                    }
                    var len = srcMats.length;
                    var globalMat;
                    if (globalMatKey != null) {
                        globalMat = parallelEngineTool_2.spAPP.getGlobalMaterial(globalMatKey, false, spInterface_10.engineParallelType.wxEngine);
                    }
                    for (var i = 0; i < len; i++) {
                        var cachemat = void 0;
                        //
                        if (!globalMat) {
                            cachemat = srcMats[i].clone(); //new 材质
                        }
                        else {
                            cachemat = globalMat; //全局共享材质
                        }
                        cacheMats.push(cachemat);
                    }
                    this.cacheMatsMap[currId] = cacheMats;
                    return currId;
                };
                wxMaterialcacher.prototype.cachedCount = function () {
                    return Object.keys(this.cacheMatsMap).length;
                };
                wxMaterialcacher.prototype.restoreMaterial = function (cacheID) {
                    var cacheMats = this.cacheMatsMap[cacheID];
                    if (!cacheMats) {
                        console.warn(" cacheID ".concat(cacheID, " not find ! "));
                        return;
                    }
                    this._lastRestoreID = cacheID;
                    for (var i = 0, len = cacheMats.length; i < len; i++) {
                        this.rawHandle.setMaterialAtIndex(cacheMats[i], i);
                    }
                };
                wxMaterialcacher.prototype.getLastRestoreID = function () {
                    return this._lastRestoreID;
                };
                wxMaterialcacher.prototype.dispose = function () {
                    this.rawHandle = null;
                    this.cacheMatsMap = null;
                };
                wxMaterialcacher.m4mShaderNames = [];
                wxMaterialcacher.addSuffixList = [];
                wxMaterialcacher.addSuffixMap = {};
                return wxMaterialcacher;
            }()));
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxMeshRenderer", ["Tools/engineParallel/spInterface", "Tools/engineParallel/wxEngine/wxMaterialcacher"], function (exports_34, context_34) {
    "use strict";
    var spInterface_11, wxMaterialcacher_1, wxMeshRenderer;
    var __moduleName = context_34 && context_34.id;
    return {
        setters: [
            function (spInterface_11_1) {
                spInterface_11 = spInterface_11_1;
            },
            function (wxMaterialcacher_1_1) {
                wxMaterialcacher_1 = wxMaterialcacher_1_1;
            }
        ],
        execute: function () {
            /** 简配 gdMeshRenderer 组件  */
            // tslint:disable-next-line: class-name
            wxMeshRenderer = /** @class */ (function () {
                function wxMeshRenderer(raw, go) {
                    this.compType = spInterface_11.spComponentType.skinMeshRenderer;
                    this.queue = 0;
                    this.id = raw.id.toString();
                    this.rawHandle = raw;
                    this.gameObject = go;
                    this.matHandle = new wxMaterialcacher_1.wxMaterialcacher(raw);
                }
                wxMeshRenderer.prototype.getLastRestoreID = function () {
                    return this.matHandle.getLastRestoreID();
                };
                wxMeshRenderer.prototype.getMaterialsCount = function () {
                    return this.rawHandle.materialCount;
                };
                wxMeshRenderer.prototype.getMaterialID = function (matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    return this.matHandle.getMaterialID(matIdx);
                };
                wxMeshRenderer.prototype.setMaterialFloat = function (key, value, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    this.matHandle.setMaterialFloat(key, value, matIdx);
                };
                wxMeshRenderer.prototype.setMaterialVector4 = function (key, value, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    this.matHandle.setMaterialVector4(key, value, matIdx);
                };
                wxMeshRenderer.prototype.setTexture = function (key, valueTex, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    this.matHandle.setTexture(key, valueTex, matIdx);
                };
                wxMeshRenderer.prototype.getShaderName = function (matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    return this.matHandle.getShaderName(matIdx);
                };
                wxMeshRenderer.prototype.setShader = function (shaderID, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    return this.matHandle.setShader(shaderID, matIdx);
                };
                wxMeshRenderer.prototype.cachedCount = function () {
                    return this.matHandle.cachedCount();
                };
                wxMeshRenderer.prototype.cacheCurrMaterial = function (globalMatKey) {
                    return this.matHandle.cacheCurrMaterial(globalMatKey);
                };
                wxMeshRenderer.prototype.restoreMaterial = function (cacheID) {
                    this.matHandle.restoreMaterial(cacheID);
                };
                wxMeshRenderer.prototype.dispose = function () {
                    this.matHandle.dispose();
                    this.rawHandle = null;
                    this.gameObject = null;
                };
                return wxMeshRenderer;
            }());
            exports_34("wxMeshRenderer", wxMeshRenderer);
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxSkinnedMeshRenderer", ["Tools/engineParallel/wxEngine/wxMeshRenderer"], function (exports_35, context_35) {
    "use strict";
    var wxMeshRenderer_1, wxSkinnedMeshRenderer;
    var __moduleName = context_35 && context_35.id;
    return {
        setters: [
            function (wxMeshRenderer_1_1) {
                wxMeshRenderer_1 = wxMeshRenderer_1_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            wxSkinnedMeshRenderer = /** @class */ (function (_super) {
                __extends(wxSkinnedMeshRenderer, _super);
                function wxSkinnedMeshRenderer() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.isSkinnedMeshRenderer = true;
                    return _this;
                }
                return wxSkinnedMeshRenderer;
            }(wxMeshRenderer_1.wxMeshRenderer));
            exports_35("wxSkinnedMeshRenderer", wxSkinnedMeshRenderer);
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxParticleSystemt", ["Tools/engineParallel/spInterface"], function (exports_36, context_36) {
    "use strict";
    var spInterface_12, wxParticleSystemt;
    var __moduleName = context_36 && context_36.id;
    return {
        setters: [
            function (spInterface_12_1) {
                spInterface_12 = spInterface_12_1;
            }
        ],
        execute: function () {
            /** 简配 camera 组件  */
            // tslint:disable-next-line: class-name
            wxParticleSystemt = /** @class */ (function () {
                function wxParticleSystemt(raw, go) {
                    this.compType = spInterface_12.spComponentType.particleSystem;
                    this.id = raw.id.toString();
                    this.rawHandle = raw;
                    this.gameObject = go;
                }
                wxParticleSystemt.prototype.setColor = function (_color) {
                    //设置
                    // let _c = this.rawHandle.common.startColor;
                };
                wxParticleSystemt.prototype.getLastRestoreID = function () {
                    throw new Error("Method not implemented.");
                };
                Object.defineProperty(wxParticleSystemt.prototype, "beloop", {
                    get: function () { return this.rawHandle.emitter.looping; },
                    set: function (v) { this.rawHandle.emitter.looping = v; },
                    enumerable: false,
                    configurable: true
                });
                wxParticleSystemt.prototype.stop = function () {
                    this.rawHandle.emitter.start = false;
                };
                wxParticleSystemt.prototype.play = function (onPlayEnd) {
                    // this.rawHandle.play(onPlayEnd);
                    this.rawHandle.emitter.start = true;
                };
                wxParticleSystemt.prototype.getMaterialID = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.getMaterialsCount = function () {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.setMaterialFloat = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.setMaterialVector4 = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.setTexture = function (key, valueTex, matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.getShaderName = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.setShader = function (shaderSrc, matIdx) {
                    return null;
                    // throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.cachedCount = function () {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.cacheCurrMaterial = function (globalMatKey) {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.restoreMaterial = function (cacheID) {
                    throw new Error("Method not implemented.");
                };
                wxParticleSystemt.prototype.dispose = function () {
                    this.gameObject = null;
                    this.rawHandle = null;
                };
                return wxParticleSystemt;
            }());
            exports_36("wxParticleSystemt", wxParticleSystemt);
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxTrailRenderer", ["Tools/engineParallel/wxEngine/wxMaterialcacher"], function (exports_37, context_37) {
    "use strict";
    var wxMaterialcacher_2, wxTrailRenderer;
    var __moduleName = context_37 && context_37.id;
    return {
        setters: [
            function (wxMaterialcacher_2_1) {
                wxMaterialcacher_2 = wxMaterialcacher_2_1;
            }
        ],
        execute: function () {
            /** 简配 gdMeshRenderer 组件  */
            // tslint:disable-next-line: class-name
            wxTrailRenderer = /** @class */ (function () {
                function wxTrailRenderer(raw, go) {
                    this.id = raw.id.toString();
                    this.rawHandle = raw;
                    this.gameObject = go;
                    this.matHandle = new wxMaterialcacher_2.wxMaterialcacher(raw);
                }
                wxTrailRenderer.prototype.getLastRestoreID = function () {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.play = function () {
                    this.rawHandle.active = true;
                };
                wxTrailRenderer.prototype.stop = function () {
                    this.rawHandle.active = false;
                };
                wxTrailRenderer.prototype.setSpeed = function (speed) {
                };
                wxTrailRenderer.prototype.setWidth = function (Width) {
                };
                wxTrailRenderer.prototype.getMaterialID = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.getMaterialsCount = function () {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.setMaterialFloat = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.setMaterialVector4 = function (key, value, matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.setTexture = function (key, valueTex, matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.getShaderName = function (matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.setShader = function (shaderSrc, matIdx) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.cachedCount = function () {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.cacheCurrMaterial = function (globalMatKey) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.restoreMaterial = function (cacheID) {
                    throw new Error("Method not implemented.");
                };
                wxTrailRenderer.prototype.dispose = function () {
                    throw new Error("Method not implemented.");
                };
                return wxTrailRenderer;
            }());
            exports_37("wxTrailRenderer", wxTrailRenderer);
        }
    };
});
System.register("Tools/gameMathUtil", [], function (exports_38, context_38) {
    "use strict";
    var gameMathUtil;
    var __moduleName = context_38 && context_38.id;
    return {
        setters: [],
        execute: function () {
            exports_38("gameMathUtil", gameMathUtil = /** @class */ (function () {
                /**
                 * 游戏 辅助工具类
                 */
                // tslint:disable-next-line: class-name
                function gameMathUtil() {
                }
                //----------------------------------------------------------------------------
                // game functions
                //----------------------------------------------------------------------------
                /** 计算墙面反射  , 返回 新的角度*/
                gameMathUtil.calcReboundWall = function (bulletAngle, wallBody, hitPoint) {
                    if (!hitPoint || !wallBody) {
                        return bulletAngle;
                    }
                    var bound = wallBody.bounds;
                    var wHalf = (bound.max.x - bound.min.x) * 0.5;
                    var hHalf = (bound.max.y - bound.min.y) * 0.5;
                    var cPos = wallBody.position;
                    if (hitPoint.y <= -hHalf + cPos.y) {
                        return 180 - bulletAngle;
                    }
                    else if (hitPoint.x >= wHalf + cPos.x) {
                        return 0 - bulletAngle;
                    }
                    else if (hitPoint.y >= hHalf + cPos.y) {
                        return 180 - bulletAngle;
                    }
                    return 0 - bulletAngle;
                };
                //----------------------------------------------------------------------------
                // other functions
                //----------------------------------------------------------------------------
                //----------------------------------------------------------------------------
                // Angle functions
                //----------------------------------------------------------------------------
                /**
                 * 计算角度 通过 二维向量
                 * @param x 向量x
                 * @param y 向量y
                 * @param isRadian angle 是否是弧度
                 */
                gameMathUtil.calcAngleByVec = function (x, y, isRadian) {
                    if (isRadian === void 0) { isRadian = false; }
                    var r = y > 0 ? this.TwoPi - Math.acos(x) : Math.acos(x);
                    if (!isRadian) {
                        return r * this.toDeg;
                    }
                    return r;
                };
                /**
                 * 计算二维向量 通过 指定角度
                 * @param angle 向量x
                 * @param out 向量y
                 * @param isRadian angle 是否是弧度
                 */
                gameMathUtil.calcVec2ByAngle = function (angle, out, isRadian) {
                    if (isRadian === void 0) { isRadian = false; }
                    if (!out) {
                        return;
                    }
                    out.x = Math.cos(isRadian ? angle : angle * this.toRadian);
                    out.y = -Math.sin(isRadian ? angle : angle * this.toRadian);
                };
                /**
                 * Get an angle into -180 to +180 range
                 */
                gameMathUtil.FixAnglePlusMinusDegrees = function (ang) {
                    var _ang = ang;
                    while (_ang >= 180) {
                        _ang -= 360;
                    }
                    while (_ang < -180) {
                        _ang += 360;
                    }
                    return _ang;
                };
                /**
                 * Get an angle into 0-360 range
                 */
                gameMathUtil.FixAngleDegrees = function (ang) {
                    // Is this really the best way to do this?
                    var _ang = ang;
                    while (_ang >= 360) {
                        _ang -= 360;
                    }
                    while (_ang < 0) {
                        _ang += 360;
                    }
                    return _ang;
                };
                /** As above, in radians */
                gameMathUtil.FixAngleRadians = function (ang) {
                    var _ang = ang;
                    while (_ang >= this.TwoPi) {
                        _ang -= this.TwoPi;
                    }
                    while (_ang < 0) {
                        _ang += this.TwoPi;
                    }
                    return _ang;
                };
                /** As above, in radians */
                gameMathUtil.FixAnglePlusMinusRadians = function (ang) {
                    var _ang = ang;
                    while (_ang >= Math.PI) {
                        _ang -= this.TwoPi;
                    }
                    while (_ang < -Math.PI) {
                        _ang += this.TwoPi;
                    }
                    return _ang;
                };
                gameMathUtil.MoveTowardsAngle = function (current, target, maxDelta) {
                    var _target = target;
                    var num = this.DeltaAngle(current, _target);
                    if ((-maxDelta < num) && (num < maxDelta)) {
                        return _target;
                    }
                    _target = current + num;
                    return this.MoveToward(current, _target, maxDelta);
                };
                gameMathUtil.MoveToward = function (current, target, maxDelta) {
                    if (Math.abs(target - current) <= maxDelta) {
                        return target;
                    }
                    return (current + (Math.sign(target - current) * maxDelta));
                };
                gameMathUtil.DeltaAngle = function (current, target) {
                    var num = this.Repeat(target - current, 360);
                    if (num > 180) {
                        num -= 360;
                    }
                    return num;
                };
                gameMathUtil.Repeat = function (t, length) {
                    return (t - (Math.floor(t / length) * length));
                };
                gameMathUtil.ToAngleDegreesXY = function (v) {
                    return Math.atan2(v.y, v.x) * 57.29578;
                };
                /** 角度 angle sin */
                gameMathUtil.sin = function (angle) {
                    return Math.sin(angle * Math.PI / 180);
                };
                /** 角度 angle cos*/
                gameMathUtil.cos = function (angle) {
                    return Math.cos(angle * Math.PI / 180);
                };
                /**
                 * 获取指定向量的角度值
                 * @param x 向量x值
                 * @param y 向量y值
                 * @param isRadian 是否是弧度制
                 */
                gameMathUtil.getAngle = function (x, y, isRadian) {
                    if (isRadian === void 0) { isRadian = false; }
                    return Math.atan2(y, x) * (isRadian ? 1 : 57.29578);
                };
                //----------------------------------------------------------------------------
                // Blending and damping functions (混合和阻尼功能 )
                //----------------------------------------------------------------------------
                /**
                 * Remap a value from one range (in0 -> in1, CLAMPED) to a different range (out0 -> out1).
                 * Use this to interpolate between 2 values (out0, out1) based on where some other number (value) sits
                 * between two other values (in0, in1).
                 */
                gameMathUtil.Remap = function (value, in0, in1, out0, out1) {
                    var num = in1 - in0;
                    var num2 = (value - in0) / num;
                    num2 = Math.max(0, Math.min(1, num2));
                    return m4m.math.numberLerp(out0, out1, num2);
                    // return out0 + (out1 - out0) * num2;
                };
                //----------------------------------------------------------------------------
                // Random functions（随机功能）
                //----------------------------------------------------------------------------
                // RandRange function that returns an int between rmin and rmax inclusive, compatible with the old skool engine convention.
                // Unity's Random.Range is not inclusive of the max value.
                // public static RandRange(int rmin, int rmax)
                // {
                // 	return (rmin==rmax) ? rmin : Random.Range(rmin, rmax+1);
                // }
                // Float version, this just calls the Unity one, just there for consistency so you can call Util.RandRange on either ints or floats
                /** 获取随机数 ， isInteger 为true 是返回 整数 (注：rmax 值是取不到的 ) */
                gameMathUtil.RandRange = function (rmin, rmax, isInteger) {
                    if (isInteger === void 0) { isInteger = false; }
                    var randNum = m4m.math.numberLerp(rmin, rmax, Math.random());
                    return !isInteger ? randNum : Math.floor(randNum);
                };
                // return a random float between 0 and 1 inclusive
                // update: is this necessary?  think Random.value does this
                gameMathUtil.Rand01 = function () {
                    return Math.random();
                };
                gameMathUtil.RandMinus1To1 = function () {
                    return this.RandRange(-1, 1);
                };
                gameMathUtil.RandAngleDegrees = function () {
                    var r = this.RandRange(0, 360);
                    return (r == 360) ? 0 : r;
                };
                gameMathUtil.RandAngleRadians = function () {
                    var r = this.RandRange(0, this.TwoPi);
                    return (r == this.TwoPi) ? 0 : r;
                };
                gameMathUtil.RandBool = function () {
                    return Math.random() < 0.5;
                };
                /**
                 * 噪音缩放系数
                 * @param noiseRange 波动噪音范围（不能为负数数）
                 */
                gameMathUtil.noiseScale = function (noiseRange) {
                    var halfNum = noiseRange * 0.5;
                    return gameMathUtil.RandRange(1 - halfNum, halfNum + 1);
                };
                /** 单位圆内随机 */
                gameMathUtil.RandInsideUnitCircle = function (out) {
                    var x = Math.random() * 2 - 1;
                    var y = Math.sqrt(1 - x * x);
                    y *= (Math.random() * 2 - 1);
                    m4m.math.vec3Set(out, x, y, 0);
                };
                /** 单位球内随机 */
                gameMathUtil.RandInsideUnitSphere = function (out) {
                    var x = Math.random() * 2 - 1;
                    var y = Math.random() * 2 - 1;
                    var z = Math.random() * 2 - 1;
                    m4m.math.vec3Set(out, x, y, z);
                };
                /** 单位圆上的随机 */
                gameMathUtil.RandOnUnitCircle = function (out) {
                    this.RandInUnitSquare(out);
                    m4m.math.vec2Normalize(out, out);
                };
                /** 单位正方形内的随机 */
                gameMathUtil.RandInUnitSquare = function (out) {
                    var x = Math.random() * 2 - 1;
                    var y = Math.random() * 2 - 1;
                    out.x = x;
                    out.y = y;
                };
                /** 单位正方形上的随机 */
                gameMathUtil.RandOnUnitSquare = function (out) {
                    var onX = this.RandBool();
                    if (onX) {
                        out.x = this.RandBool() ? 1 : -1;
                        out.y = Math.random() * 2 - 1;
                    }
                    else {
                        out.y = this.RandBool() ? 1 : -1;
                        out.x = Math.random() * 2 - 1;
                    }
                };
                /** 单位球面上随机 */
                gameMathUtil.RandOnUnitSphere = function (out) {
                    var x = Math.random() * 2 - 1;
                    var y = Math.random() * 2 - 1;
                    var z = Math.random() * 2 - 1;
                    out.x = x;
                    out.y = y;
                    out.z = z;
                    m4m.math.vec3Normalize(out, out);
                };
                //反差值
                gameMathUtil.InverseLerp = function (a, b, c) {
                    if ((c - a) / (b - a) <= 0) {
                        return 0;
                    }
                    return (c - a) / (b - a);
                };
                //圆点到接点
                gameMathUtil.DotFacingPoint = function (objectPos, objectVel, targetPos) {
                    var dirToTarget = m4m.poolv3();
                    m4m.math.vec3Subtract(targetPos, objectPos, dirToTarget);
                    m4m.math.vec3Normalize(dirToTarget, dirToTarget);
                    var dirVel = m4m.poolv3();
                    m4m.math.vec3Normalize(objectVel, dirVel);
                    var dot = m4m.math.vec3Dot(dirToTarget, dirVel);
                    m4m.poolv3_del(dirToTarget);
                    m4m.poolv3_del(dirVel);
                    return dot;
                };
                //两个坐标距离的平方（比较用）
                gameMathUtil.vec3DisSqr = function (a, b) {
                    var x = a.x - b.x;
                    var y = a.y - b.y;
                    var z = a.z - b.z;
                    return x * x + y * y + z * z;
                };
                //两个坐标距离的平方（比较用）
                gameMathUtil.vec2DisSqr = function (a, b) {
                    var x = a.x - b.x;
                    var y = a.y - b.y;
                    return x * x + y * y;
                };
                //v2长度平方（比较用）
                gameMathUtil.vec2SqrLength = function (src) {
                    return src.x * src.x + src.y * src.y;
                };
                // 其大裁剪为maxLength。 
                gameMathUtil.vec3ClampMagnitude = function (src, maxLength, outV3) {
                    if (m4m.math.vec3SqrLength(src) > (maxLength * maxLength)) {
                        m4m.math.vec3Normalize(src, outV3);
                        m4m.math.vec3ScaleByNum(outV3, maxLength, outV3);
                    }
                };
                /** Ivec2 接口克隆 */
                gameMathUtil.Ivec2Clone = function (src, out) {
                    out.x = src.x;
                    out.y = src.y;
                };
                /** Ivec3 接口克隆 */
                gameMathUtil.Ivec3Clone = function (src, out) {
                    out.x = src.x;
                    out.y = src.y;
                    out.z = src.z;
                };
                /** Iquat 接口克隆 */
                gameMathUtil.IquatClone = function (src, out) {
                    out.x = src.x;
                    out.y = src.y;
                    out.z = src.z;
                    out.w = src.w;
                };
                //----------------------------------------------------------------------------
                // Vector/math functions（向量方法）
                //----------------------------------------------------------------------------
                /**
                 * 将transform 的世界方向向量 ， 转换到 本地 方向向量
                 * @param targetTran transform对象
                 * @param srcDir 世界方向向量
                 * @param outDir 本地方向向量
                 */
                gameMathUtil.InverseTransformDirection = function (targetTran, srcDir, outDir) {
                    var p = targetTran.parent;
                    if (!p || !p.parent) {
                        m4m.math.vec3Clone(srcDir, outDir);
                    }
                    else {
                        //targetTran.wpos => 0,0,0
                        var tmtx = this.helpMtx;
                        var tarLocalTran = this.helpVec3;
                        var pWorldMtx = targetTran.parent.getWorldMatrix();
                        m4m.math.matrixInverse(pWorldMtx, tmtx);
                        m4m.math.matrixTransformVector3(this.vector3Zero, tmtx, tarLocalTran);
                        var localMtx = this.helpMtx1;
                        m4m.math.matrixClone(targetTran.getLocalMatrix(), localMtx);
                        localMtx.rawData[12] = tarLocalTran.x;
                        localMtx.rawData[13] = tarLocalTran.y;
                        localMtx.rawData[14] = tarLocalTran.z;
                        localMtx.rawData[15] = 1;
                        //srcPoint.wpos => add to targetTran
                        var worldMtx = this.helpMtx2;
                        m4m.math.matrixMultiply(pWorldMtx, localMtx, worldMtx);
                        var _tmtx = this.helpMtx3;
                        m4m.math.matrixInverse(worldMtx, _tmtx);
                        m4m.math.matrixTransformVector3(srcDir, _tmtx, outDir);
                    }
                    m4m.math.vec3Normalize(outDir, outDir);
                };
                // Function to calculate the launch direction for a projectile so it will try to intercept a moving target.
                // Does not currently solve this properly, just gives an improved direction versus aiming straight at the target.
                // This is nicked from Grabatron.  Adapted for 2D XY only, using Vector3.
                // tslint:disable-next-line: max-line-length
                gameMathUtil.GetInterceptDirectionXY = function (from, speed, destPos, destVel, outV3) {
                    // FGAssert.Assert(speed > 0.0f);
                    // only interested in 2D XY pos
                    from.z = 0;
                    destPos.z = 0;
                    destVel.z = 0;
                    // figure out time taken if we shoot straight at target point
                    var t = 1 / m4m.math.vec3Distance(destPos, from);
                    // see where the target would end up if it moved for that much time without changing speed/dir
                    var _destVel = gameMathUtil.helpVec3;
                    var guessPos = gameMathUtil.helpVec3v1;
                    m4m.math.vec3ScaleByNum(destVel, t, _destVel);
                    m4m.math.vec3Add(destPos, _destVel, guessPos);
                    // aim at that point instead
                    m4m.math.vec3Subtract(guessPos, from, outV3);
                    m4m.math.vec3Normalize(outV3, outV3);
                };
                // Thing to get a curve between 3 points.  todo: improve to work with arbitrary array of points, or whatever.
                gameMathUtil.GetSimpleSplinePoint = function (p0, p1, p2, t, outV3) {
                    var p1Double = gameMathUtil.helpVec3;
                    m4m.math.vec3ScaleByNum(p1, 2, p1Double);
                    var p0P2Add = gameMathUtil.helpVec3v1;
                    m4m.math.vec3Add(p0, p2, p0P2Add);
                    // tslint:disable-next-line: max-line-length
                    m4m.math.vec3ScaleByNum(p0P2Add, 0.5, p0P2Add); // get control point to use instead of p1, so curve will pass through p1 instead of just getting dragged part way towards it
                    var pc = gameMathUtil.helpVec3v2;
                    m4m.math.vec3Subtract(p1Double, p0P2Add, pc);
                    var lp0 = gameMathUtil.helpVec3v3;
                    var lp1 = gameMathUtil.helpVec3v4;
                    m4m.math.vec3SLerp(p0, pc, t, lp0); // get lerped point between start and control point
                    m4m.math.vec3SLerp(pc, p2, t, lp1); // get lerped point between control point and end
                    m4m.math.vec3SLerp(lp0, lp1, t, outV3); // get final lerped point between those two
                    // tslint:disable-next-line: max-line-length
                    // Vector3 pc = p1 * 2.0 - ( p0 + p2 )*0.5;	// get control point to use instead of p1, so curve will pass through p1 instead of just getting dragged part way towards it
                    // Vector3 lp0 = Vector3.Lerp(p0, pc, t);	// get lerped point between start and control point
                    // Vector3 lp1 = Vector3.Lerp(pc, p2, t);	// get lerped point between control point and end
                    // return Vector3.Lerp(lp0, lp1, t);		// get final lerped point between those two
                };
                gameMathUtil.rotateByAxis = function (trans, axis, speed) {
                    m4m.math.quatFromAxisAngle(axis, speed, this.helpQuat);
                    m4m.math.quatMultiply(trans.localRotate, this.helpQuat, trans.localRotate);
                };
                //----------------------------------------------------------------------------
                // Unity GameObject/Component helper functions 
                //----------------------------------------------------------------------------
                // tslint:disable-next-line: max-line-length
                // convert stats for gameplay accessories from percentage increase, to value to scale by (e.g. for something to increase by +5%, convert stat from 5 to 1.05)
                gameMathUtil.ScaleFromPerc = function (f) {
                    return (f * 0.01) + 1;
                };
                gameMathUtil.ScaleFromPercClamped = function (f) {
                    return m4m.math.floatClamp(f * 0.01, -1, 1) + 1;
                };
                //----------------------------------------------------------------------------
                // Helpers for serialization / parsing
                //----------------------------------------------------------------------------
                //----------------------------------------------------------------------------
                // Helpers for rotation
                //----------------------------------------------------------------------------
                /**
                 * Rotates a rotation from towards to.
                 * @param from
                 * @param to
                 * @param maxDegreesDelta
                 * @param out result
                 */
                gameMathUtil.quatRotateTowards = function (from, to, maxDegreesDelta, out) {
                    var num = this.quatAngle(from, to);
                    if (num == 0) {
                        return to;
                    }
                    var t = Math.min(1, (maxDegreesDelta / num));
                    m4m.math.quatLerp(from, to, out, t);
                };
                /**
                 * The dot product between two rotations.
                 * @param a
                 * @param b
                 */
                gameMathUtil.quatDot = function (a, b) {
                    return ((((a.x * b.x) + (a.y * b.y)) + (a.z * b.z)) + (a.w * b.w));
                };
                /**
                 * Returns the angle in degrees between two rotations a and b.
                 * @param a
                 * @param b
                 */
                gameMathUtil.quatAngle = function (a, b) {
                    return ((Math.acos(Math.min(Math.abs(this.quatDot(a, b)), 1)) * 2) * 57.29578);
                };
                //----------------------------------------------------------------------------
                // Helpers for vector3
                //----------------------------------------------------------------------------
                gameMathUtil.vec3Multiplier = function (_in, v, out) {
                    out.x = _in.x * v;
                    out.y = _in.y * v;
                    out.z = _in.z * v;
                };
                //----------------------------------------------------------------------------
                // color function
                //----------------------------------------------------------------------------
                /**
                * 16进制颜色转10进制
                * @param str 16 进制rgb 颜色数据字符串（例如ffffff）
                * @param out
                */
                gameMathUtil.color16To10 = function (str, out) {
                    if (!out) {
                        return;
                    }
                    if (out instanceof m4m.math.color) {
                        out.r = parseInt(str.substring(0, 2), 16) / 255;
                        out.g = parseInt(str.substring(2, 4), 16) / 255;
                        out.b = parseInt(str.substring(4, 6), 16) / 255;
                        out.a = str.length >= 8 ? parseInt(str.substring(6, 8), 16) / 255 : 1;
                    }
                    else {
                        out.x = parseInt(str.substring(0, 2), 16) / 255;
                        out.y = parseInt(str.substring(2, 4), 16) / 255;
                        out.z = parseInt(str.substring(4, 6), 16) / 255;
                        out.w = str.length >= 8 ? parseInt(str.substring(6, 8), 16) / 255 : 1;
                    }
                };
                /** 16 进制转 rgb */
                gameMathUtil.hexToRgb = function (hex) {
                    var arr = hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (m, r, g, b) { return "#" + r + r + g + g + b + b; })
                        .substring(1)
                        .match(/.{2}/g)
                        .map(function (x) { return parseInt(x, 16); });
                    return arr;
                };
                //----------------------------------------------------------------------------
                // number function
                //----------------------------------------------------------------------------
                /**
                 * 计算数值队列的方差
                 * @param nums 数值队列
                 */
                gameMathUtil.variance = function (nums) {
                    if (!nums) {
                        return 0;
                    }
                    var totalNum = 0;
                    nums.forEach(function (num) {
                        totalNum += num;
                    });
                    var averge = totalNum / nums.length;
                    var defTotal = 0;
                    nums.forEach(function (num) {
                        var def = averge - num;
                        defTotal += def * def;
                    });
                    return defTotal / nums.length;
                };
                /**
                 * 二分插入法
                 * @param insertNum 要插入的数值
                 * @param arr 被插入的数组
                 */
                gameMathUtil.insertSortWithBinarySearch = function (insertNum, arr) {
                    var low = 0;
                    var high = arr.length;
                    var mid = -1;
                    while (low <= high) {
                        mid = low + Math.floor((high - low) * 0.5);
                        if (arr[mid] > insertNum) {
                            high = mid - 1;
                        }
                        else { // 元素相同时，也插入在后面的位置                
                            low = mid + 1;
                        }
                    }
                    arr.splice(mid, 0, insertNum);
                    // console.log("idx :" + mid);
                };
                //------------ tween -----------------
                /** 缓动方法 IN => Out
                 * p : 过程进度
                 * MaxVal : 过程的最大值
                 * mathIn : in 过程的 tween方法
                 * mathOut : out 过程的 tween方法
                */
                gameMathUtil.tweenInOut = function (p, MaxVal, methodIn, methodOut) {
                    var mth;
                    var tp;
                    if (p <= 0.5) {
                        mth = methodIn;
                        tp = p * 2;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * MaxVal / 2;
                    }
                    mth = methodOut;
                    tp = p * 2 - 1;
                    return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * MaxVal / 2 + MaxVal / 2;
                };
                //重力
                gameMathUtil.G = 9.8;
                //常量系数
                /** 变换到角度系数 */
                gameMathUtil.toDeg = 57.29578; // Rad2Deg
                /** 变换到弧度系数 */
                gameMathUtil.toRadian = 0.0174532924; // Deg2Rad
                // public constants
                gameMathUtil.TwoPi = Math.PI * 2;
                // default parameters
                gameMathUtil.mDefaultMaxDampingScale = 0.125;
                gameMathUtil.vector3Zero = new m4m.math.vector3();
                gameMathUtil.helpVec3 = new m4m.math.vector3();
                gameMathUtil.helpVec3v1 = new m4m.math.vector3();
                gameMathUtil.helpVec3v2 = new m4m.math.vector3();
                gameMathUtil.helpVec3v3 = new m4m.math.vector3();
                gameMathUtil.helpVec3v4 = new m4m.math.vector3();
                gameMathUtil.helpQuat = new m4m.math.quaternion();
                gameMathUtil.helpMtx = new m4m.math.matrix();
                gameMathUtil.helpMtx1 = new m4m.math.matrix();
                gameMathUtil.helpMtx2 = new m4m.math.matrix();
                gameMathUtil.helpMtx3 = new m4m.math.matrix();
                return gameMathUtil;
            }()));
        }
    };
});
System.register("Tools/FrameMgr", ["Data/Dictionary"], function (exports_39, context_39) {
    "use strict";
    var Dictionary_2, FrameMgr;
    var __moduleName = context_39 && context_39.id;
    return {
        setters: [
            function (Dictionary_2_1) {
                Dictionary_2 = Dictionary_2_1;
            }
        ],
        execute: function () {
            exports_39("FrameMgr", FrameMgr = /** @class */ (function () {
                function FrameMgr() {
                    this.idxs = [];
                }
                FrameMgr_1 = FrameMgr;
                FrameMgr.Add = function (callback, thisObj) {
                    if (!callback || !thisObj) {
                        return;
                    }
                    this.funDic.Add(callback, thisObj);
                    // if(this.funDic.values.indexOf(thisObj) == -1){
                    // }
                };
                FrameMgr.Remove = function (callback, thisObj) {
                    if (!callback || !thisObj) {
                        return;
                    }
                    if (this.funDic.values.indexOf(thisObj) != -1 && this.funDic.keys.indexOf(callback) != -1) {
                        this.removeDic.Add(callback, thisObj);
                    }
                };
                FrameMgr.prototype.onUpdate = function (delta) {
                    var _this = this;
                    //刪除
                    var rvalues = FrameMgr_1.removeDic.values;
                    var relen = FrameMgr_1.removeDic.count;
                    var _loop_1 = function (i) {
                        var val = rvalues[i];
                        this_1.idxs.length = 0;
                        FrameMgr_1.funDic.values.forEach(function (temp, _i) {
                            if (temp && temp == val) {
                                _this.idxs.push(_i);
                            }
                        });
                        this_1.idxs.forEach(function (idx) {
                            var k = FrameMgr_1.funDic.keys[idx];
                            if (idx != -1 && k && k == FrameMgr_1.removeDic.keys[i]) {
                                FrameMgr_1.funDic.keys.splice(idx, 1);
                                FrameMgr_1.funDic.values.splice(idx, 1);
                            }
                        });
                    };
                    var this_1 = this;
                    for (var i = 0; i < relen; i++) {
                        _loop_1(i);
                    }
                    if (relen > 0) {
                        FrameMgr_1.removeDic.Clear();
                    }
                    //更新
                    var len = FrameMgr_1.funDic.count;
                    var fkeys = FrameMgr_1.funDic.keys;
                    for (var i = 0; i < len; i++) {
                        var key = fkeys[i];
                        var value = FrameMgr_1.funDic.GetValue(key);
                        var tfname = key.name;
                        if (value) {
                            key.call(value, delta);
                        }
                    }
                };
                FrameMgr.prototype.onStart = function (app) {
                };
                FrameMgr.prototype.isClosed = function () {
                    return false;
                };
                var FrameMgr_1;
                FrameMgr.funDic = new Dictionary_2.Dictionary();
                FrameMgr.removeDic = new Dictionary_2.Dictionary();
                FrameMgr.funList = [];
                FrameMgr.removeList = [];
                FrameMgr = FrameMgr_1 = __decorate([
                    m4m.reflect.userCode
                ], FrameMgr);
                return FrameMgr;
            }()));
        }
    };
});
System.register("Tools/engineParallel/m4m/gdKeyFrameAnimPlayer", ["Tools/FrameMgr", "Tools/engineParallel/AnimTimeEventHandle", "Tools/engineParallel/spInterface"], function (exports_40, context_40) {
    "use strict";
    var FrameMgr_2, AnimTimeEventHandle_2, spInterface_13, gdKeyFrameAnimPlayer;
    var __moduleName = context_40 && context_40.id;
    return {
        setters: [
            function (FrameMgr_2_1) {
                FrameMgr_2 = FrameMgr_2_1;
            },
            function (AnimTimeEventHandle_2_1) {
                AnimTimeEventHandle_2 = AnimTimeEventHandle_2_1;
            },
            function (spInterface_13_1) {
                spInterface_13 = spInterface_13_1;
            }
        ],
        execute: function () {
            exports_40("gdKeyFrameAnimPlayer", gdKeyFrameAnimPlayer = /** @class */ (function () {
                function gdKeyFrameAnimPlayer(raw, go) {
                    this.compType = spInterface_13.spComponentType.animPlayer;
                    this.animTimeEventNode = new AnimTimeEventHandle_2.AnimTimeEventNode(this);
                    this.id = "".concat(go.getID(), "_").concat(this.compType);
                    this.rawHandle = raw;
                    this.gameObject = go;
                }
                //ISpAnimPlayerHandle API
                gdKeyFrameAnimPlayer.prototype.currClipTotalTime = function () {
                    if (!this.rawHandle) {
                        return 0;
                    }
                    var clip = this.rawHandle.getClip(this.rawHandle.currClipName);
                    if (!clip) {
                        return 0;
                    }
                    return clip.time;
                };
                gdKeyFrameAnimPlayer.prototype.getCurrClipName = function () {
                    if (!this.rawHandle) {
                        return "";
                    }
                    return this.rawHandle.currClipName;
                };
                gdKeyFrameAnimPlayer.prototype.getClipTotalTime = function (simpleClipName) {
                    if (!this.rawHandle) {
                        return 0;
                    }
                    var clip = this.rawHandle.getClip(simpleClipName);
                    if (!clip) {
                        return 0;
                    }
                    return clip.time;
                };
                gdKeyFrameAnimPlayer.prototype.setCurrClipNormalizedTime = function (normalLizedTime) {
                    if (!this.rawHandle) {
                        return;
                    }
                    var clip = this.rawHandle.getClip(this.rawHandle.currClipName);
                    if (!clip) {
                        return;
                    }
                    return this.rawHandle["_nowTime"] = clip.time * normalLizedTime;
                };
                gdKeyFrameAnimPlayer.prototype.getCurrClipNormalizedTime = function () {
                    if (!this.rawHandle) {
                        return 0;
                    }
                    var clip = this.rawHandle.getClip(this.rawHandle.currClipName);
                    if (!clip) {
                        return 0;
                    }
                    return this.rawHandle.nowTime / clip.time;
                };
                gdKeyFrameAnimPlayer.prototype.isPlay = function () {
                    if (!this.rawHandle) {
                        return;
                    }
                    return this.rawHandle.isPlaying();
                };
                gdKeyFrameAnimPlayer.prototype.hasClip = function (clipName) {
                    if (!this.rawHandle) {
                        return;
                    }
                    var clip = this.rawHandle.getClip(clipName);
                    return clip != null;
                };
                gdKeyFrameAnimPlayer.prototype.regTimeEventCallbackObj = function (eventActObj) {
                    this.animTimeEventNode.regTimeEventCallbackObj(eventActObj);
                };
                gdKeyFrameAnimPlayer.prototype.setTimeEvent = function (simpleClipName, timePoint, _actFunName, val) {
                    var realClipName = "".concat(simpleClipName).concat(gdKeyFrameAnimPlayer.suffix);
                    this.animTimeEventNode.setTimeEvent(gdKeyFrameAnimPlayer.animTimeEventHD, realClipName, timePoint, _actFunName, val);
                };
                //ISpAnimPlayer API
                gdKeyFrameAnimPlayer.prototype.stop = function () {
                    this.rawHandle.stop();
                };
                gdKeyFrameAnimPlayer.prototype.playAnimByName = function (clipName, onPlayend, blendTime, endframe, speed, beRevert) {
                    if (!clipName || !this.rawHandle) {
                        return;
                    }
                    // this.rawHandle.playCross(clipName, blendTime, onPlayend, speed, beRevert);
                    var _realClipName = "".concat(clipName).concat(gdKeyFrameAnimPlayer.suffix);
                    var clip = this.rawHandle.getClip(_realClipName);
                    if (!clip) {
                        return;
                    }
                    this.rawHandle.speed = speed;
                    var endNormalizedTime = null;
                    if (endframe != null && clip.frameCount) {
                        var _endframe = endframe % clip.frameCount;
                        endNormalizedTime = _endframe / clip.frameCount;
                    }
                    this.rawHandle.play(_realClipName, onPlayend, endNormalizedTime);
                    //
                    var id = this.rawHandle.gameObject.transform.insId.getInsID();
                    var availReg = this.animTimeEventNode.ckRegUpdate(gdKeyFrameAnimPlayer.animTimeEventHD, _realClipName, id.toString());
                    if (availReg) {
                        gdKeyFrameAnimPlayer.activeUpdate();
                    }
                };
                gdKeyFrameAnimPlayer.prototype.dispose = function () {
                    if (this.animTimeEventNode) {
                        this.animTimeEventNode.dispose();
                    }
                    this.rawHandle = null;
                    this.gameObject = null;
                    this.animTimeEventNode = null;
                };
                gdKeyFrameAnimPlayer.activeUpdate = function () {
                    if (this.hasSetUpdate) {
                        return;
                    }
                    this.hasSetUpdate = true;
                    FrameMgr_2.FrameMgr.Add(this.update, this);
                };
                gdKeyFrameAnimPlayer.update = function (dt) {
                    var eventHD = gdKeyFrameAnimPlayer.animTimeEventHD;
                    eventHD.updateDic.forEach(function (n) {
                        var p = n.playerObj;
                        var ap = p.rawHandle;
                        if (!ap) {
                            return;
                        }
                        var clip = ap.getClip(ap.currClipName);
                        if (!clip) {
                            return;
                        }
                        var cName = clip.getName();
                        n.ckTimeEventUpdate(eventHD, cName, p.rawHandle.nowTime, p.currClipTotalTime());
                    });
                };
                gdKeyFrameAnimPlayer.suffix = ".keyframeAniclip.json";
                gdKeyFrameAnimPlayer.animTimeEventHD = new AnimTimeEventHandle_2.AnimTimeEventHandle(); //动画时间轴事件HD
                gdKeyFrameAnimPlayer.hasSetUpdate = false;
                return gdKeyFrameAnimPlayer;
            }()));
        }
    };
});
System.register("Tools/engineParallel/spGameObject", ["Tools/engineParallel/spInterface", "Tools/engineParallel/m4m/gdCamera", "Tools/engineParallel/wxEngine/wxCamera", "Tools/engineParallel/m4m/gdMeshRenderer", "Tools/engineParallel/m4m/gdSkinnedMeshRenderer", "Tools/engineParallel/m4m/gdParticleSystem", "Tools/engineParallel/m4m/gdTrailRenderer", "Tools/engineParallel/m4m/gdAnimPlayer", "Tools/engineParallel/parallelEngineTool", "Tools/engineParallel/wxEngine/wxAnimPlayer", "engine", "Tools/engineParallel/wxEngine/wxMeshRenderer", "Tools/engineParallel/wxEngine/wxSkinnedMeshRenderer", "Tools/engineParallel/wxEngine/wxParticleSystemt", "Tools/engineParallel/wxEngine/wxTrailRenderer", "Tools/gameMathUtil", "Tools/engineParallel/m4m/gdKeyFrameAnimPlayer"], function (exports_41, context_41) {
    "use strict";
    var spInterface_14, gdCamera_1, wxCamera_1, gdMeshRenderer_1, gdSkinnedMeshRenderer_1, gdParticleSystem_1, gdTrailRenderer_1, gdAnimPlayer_1, parallelEngineTool_3, wxAnimPlayer_1, engine_2, wxMeshRenderer_2, wxSkinnedMeshRenderer_1, wxParticleSystemt_1, wxTrailRenderer_1, gameMathUtil_1, gdKeyFrameAnimPlayer_1, m4mGO, gdTransform, wxEngineGO, wxTransform;
    var __moduleName = context_41 && context_41.id;
    /**
         * clone 矩阵数据 通过 微信格式 到 m4m 格式
         * @param src
         * @param out
         */
    function matrixCloneFromWX(src, out) {
        var count = 0;
        for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
                out.rawData[count] = src.getValue(i, j);
                count++;
            }
        }
    }
    /**
     * clone 矩阵数据 通过 m4m 到 微信格式 格式
     * @param src
     * @param out
     */
    function matrixCloneToWX(src, out) {
        var count = 0;
        for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
                out.setValue(src.rawData[count], j, i);
                count++;
            }
        }
    }
    return {
        setters: [
            function (spInterface_14_1) {
                spInterface_14 = spInterface_14_1;
            },
            function (gdCamera_1_1) {
                gdCamera_1 = gdCamera_1_1;
            },
            function (wxCamera_1_1) {
                wxCamera_1 = wxCamera_1_1;
            },
            function (gdMeshRenderer_1_1) {
                gdMeshRenderer_1 = gdMeshRenderer_1_1;
            },
            function (gdSkinnedMeshRenderer_1_1) {
                gdSkinnedMeshRenderer_1 = gdSkinnedMeshRenderer_1_1;
            },
            function (gdParticleSystem_1_1) {
                gdParticleSystem_1 = gdParticleSystem_1_1;
            },
            function (gdTrailRenderer_1_1) {
                gdTrailRenderer_1 = gdTrailRenderer_1_1;
            },
            function (gdAnimPlayer_1_1) {
                gdAnimPlayer_1 = gdAnimPlayer_1_1;
            },
            function (parallelEngineTool_3_1) {
                parallelEngineTool_3 = parallelEngineTool_3_1;
            },
            function (wxAnimPlayer_1_1) {
                wxAnimPlayer_1 = wxAnimPlayer_1_1;
            },
            function (engine_2_1) {
                engine_2 = engine_2_1;
            },
            function (wxMeshRenderer_2_1) {
                wxMeshRenderer_2 = wxMeshRenderer_2_1;
            },
            function (wxSkinnedMeshRenderer_1_1) {
                wxSkinnedMeshRenderer_1 = wxSkinnedMeshRenderer_1_1;
            },
            function (wxParticleSystemt_1_1) {
                wxParticleSystemt_1 = wxParticleSystemt_1_1;
            },
            function (wxTrailRenderer_1_1) {
                wxTrailRenderer_1 = wxTrailRenderer_1_1;
            },
            function (gameMathUtil_1_1) {
                gameMathUtil_1 = gameMathUtil_1_1;
            },
            function (gdKeyFrameAnimPlayer_1_1) {
                gdKeyFrameAnimPlayer_1 = gdKeyFrameAnimPlayer_1_1;
            }
        ],
        execute: function () {
            exports_41("m4mGO", m4mGO = /** @class */ (function () {
                function m4mGO(rawGo, trans) {
                    /** 是否是关键帧差值播放器 */
                    this.isKeyFramePlayer = false;
                    this.componentsMap = {};
                    this.rawHandle = rawGo;
                    this.transform = trans ? trans : new gdTransform(this.rawHandle.transform, this);
                }
                Object.defineProperty(m4mGO.prototype, "layer", {
                    get: function () { return this.rawHandle.layer; },
                    set: function (v) { this.rawHandle.layer = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(m4mGO.prototype, "visible", {
                    get: function () { return this.rawHandle.visible; },
                    set: function (v) { this.rawHandle.visible = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(m4mGO.prototype, "isStatic", {
                    get: function () { return this.rawHandle.isStatic; },
                    set: function (v) { this.rawHandle.isStatic = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(m4mGO.prototype, "tag", {
                    get: function () { return this.rawHandle.tag; },
                    set: function (v) { this.rawHandle.tag = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(m4mGO.prototype, "name", {
                    get: function () { return this.rawHandle.transform.name; },
                    set: function (v) { this.rawHandle.transform.name = v; },
                    enumerable: false,
                    configurable: true
                });
                //获取raw组件类型str
                m4mGO.getRawCompStr = function (_type, isKeyFramePlayer) {
                    var result;
                    switch (_type) {
                        case spInterface_14.spComponentType.camera:
                            result = m4m.framework.camera.ClassName;
                            break;
                        case spInterface_14.spComponentType.meshRenderer:
                            result = m4m.framework.meshRenderer.ClassName;
                            break;
                        case spInterface_14.spComponentType.skinMeshRenderer:
                            result = m4m.framework.skinnedMeshRenderer.ClassName;
                            break;
                        case spInterface_14.spComponentType.particleSystem:
                            result = m4m.framework.f14EffectSystem.ClassName;
                            break;
                        case spInterface_14.spComponentType.trailRenderer:
                            result = m4m.framework.trailRender.ClassName;
                            break;
                        // tslint:disable-next-line: max-line-length
                        case spInterface_14.spComponentType.animPlayer:
                            result = isKeyFramePlayer ? m4m.framework.keyFrameAniPlayer.ClassName : m4m.framework.aniplayer.ClassName;
                            break;
                        default: result = null;
                    }
                    return result;
                };
                //获取组件唯一ID
                m4mGO.getCompID = function (comp) {
                    return "".concat(comp.gameObject.transform.insId.getInsID(), "_").concat(comp.constructor["ClassName"]);
                };
                //获取spComp 
                m4mGO.getSpCompByType = function (_type, go, rawComp) {
                    var result;
                    switch (_type) {
                        case spInterface_14.spComponentType.camera:
                            result = new gdCamera_1.gdCamera(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.meshRenderer:
                            result = new gdMeshRenderer_1.gdMeshRenderer(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.skinMeshRenderer:
                            result = new gdSkinnedMeshRenderer_1.gdSkinnedMeshRenderer(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.particleSystem:
                            result = new gdParticleSystem_1.gdParticleSystem(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.trailRenderer:
                            result = new gdTrailRenderer_1.gdTrailRenderer(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.animPlayer:
                            if (rawComp instanceof (m4m.framework.aniplayer)) {
                                result = new gdAnimPlayer_1.gdAnimPlayer(rawComp, go);
                            }
                            else if (rawComp instanceof (m4m.framework.keyFrameAniPlayer)) {
                                result = new gdKeyFrameAnimPlayer_1.gdKeyFrameAnimPlayer(rawComp, go);
                            }
                            break;
                        default: result = null;
                    }
                    return result;
                };
                m4mGO.prototype.getID = function () {
                    return this.rawHandle.transform.insId.getInsID();
                };
                m4mGO.prototype.getRootNode = function () {
                    if (!this._rootNode) {
                        var scene = this.rawHandle.getScene();
                        this._rootNode = new gdTransform(scene.getRoot(), this);
                    }
                    return this._rootNode;
                };
                m4mGO.prototype.getFirstComponent = function (_type) {
                    var rawComp = this.rawHandle.getFirstComponentInChildren(m4mGO.getRawCompStr(_type, this.isKeyFramePlayer));
                    return this.makeComp(_type, rawComp);
                };
                m4mGO.prototype.getComponents = function (_type) {
                    var rawComps = this.rawHandle.getComponentsInChildren(m4mGO.getRawCompStr(_type, this.isKeyFramePlayer));
                    var comps = [];
                    for (var i = 0, len = rawComps.length; i < len; i++) {
                        comps.push(this.makeComp(_type, rawComps[i]));
                    }
                    return comps;
                };
                m4mGO.prototype.addComponent = function (_type) {
                    var rawComp = this.rawHandle.addComponent(m4mGO.getRawCompStr(_type, this.isKeyFramePlayer));
                    return this.makeComp(_type, rawComp);
                };
                m4mGO.prototype.dispose = function () {
                    var arr = m4mGO.helpArr;
                    if (this.componentsMap) {
                        for (var key in this.componentsMap) {
                            arr.push(key);
                            var comp = this.componentsMap[key];
                            if (comp.dispose) {
                                comp.dispose();
                            }
                        }
                    }
                    for (var i = 0, len = arr.length; i < len; i++) {
                        delete this.componentsMap[arr[i]];
                    }
                    arr.length = 0;
                    this.rawHandle = null;
                    this.transform = null;
                    this.componentsMap = null;
                    this._rootNode = null;
                };
                //创建Cmp
                m4mGO.prototype.makeComp = function (_type, rawComp) {
                    if (!rawComp) {
                        return;
                    }
                    var compId = m4mGO.getCompID(rawComp);
                    var result = this.componentsMap[compId];
                    if (!result) {
                        var compTran = parallelEngineTool_3.getSpTransform(rawComp.gameObject.transform);
                        result = m4mGO.getSpCompByType(_type, compTran.gameObject, rawComp);
                        result.id = compId;
                        this.componentsMap[compId] = result;
                    }
                    return result;
                };
                m4mGO.helpArr = [];
                return m4mGO;
            }()));
            exports_41("gdTransform", gdTransform = /** @class */ (function () {
                /**
                 *
                 * @param _rawhandle 原始 m4m transform 数据
                 * @param _gameObject GO对象
                 */
                function gdTransform(_rawhandle, _gameObject) {
                    this.engineType = spInterface_14.engineParallelType.none;
                    if (!_rawhandle) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        _rawhandle = new m4m.framework.transform();
                    }
                    if (!_gameObject) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        _gameObject = new m4mGO(_rawhandle.gameObject, this);
                    }
                    this.rawHandle = _rawhandle;
                    this.gameObject = _gameObject;
                    gdTransform.IDMap[_rawhandle.insId.getInsID()] = this;
                }
                Object.defineProperty(gdTransform.prototype, "name", {
                    get: function () { return this.rawHandle.name; },
                    set: function (v) { this.rawHandle.name = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdTransform.prototype, "enableCulling", {
                    get: function () { return this.rawHandle.enableCulling; },
                    set: function (v) { this.rawHandle.enableCulling = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdTransform.prototype, "needGpuInstancBatcher", {
                    get: function () { return this.rawHandle.needGpuInstancBatcher; },
                    set: function (v) { this.rawHandle.needGpuInstancBatcher = v; },
                    enumerable: false,
                    configurable: true
                });
                gdTransform.packTran = function (tran) {
                    if (!tran) {
                        return;
                    }
                    //看下缓存中是否创建了壳子
                    var gdTran = gdTransform.IDMap[tran.insId.getInsID()];
                    if (gdTran) {
                        return gdTran;
                    }
                    var t = new gdTransform(tran);
                    return t;
                };
                Object.defineProperty(gdTransform.prototype, "childrenCount", {
                    get: function () { return this.rawHandle.children.length; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdTransform.prototype, "localRotate", {
                    get: function () { return this.rawHandle.localRotate; },
                    set: function (v) { this.rawHandle.localRotate = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdTransform.prototype, "localPosition", {
                    // localRotate: m4m.math.quaternion;
                    get: function () { return this.rawHandle.localPosition; },
                    set: function (v) { this.rawHandle.localPosition = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdTransform.prototype, "localScale", {
                    // localPosition: m4m.math.vector3;
                    get: function () { return this.rawHandle.localScale; },
                    set: function (v) { this.rawHandle.localScale = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(gdTransform.prototype, "localEulerAngles", {
                    // localScale: m4m.math.vector3;
                    get: function () { return this.rawHandle.localEulerAngles; },
                    set: function (v) { this.rawHandle.localEulerAngles = v; },
                    enumerable: false,
                    configurable: true
                });
                gdTransform.prototype.getChildByIdx = function (childIdx) {
                    var tempTrans = this.rawHandle.children[childIdx];
                    return gdTransform.packTran(tempTrans);
                };
                gdTransform.prototype.addChild = function (node) {
                    if (!node || node.engineType != spInterface_14.engineParallelType.none) {
                        // tslint:disable-next-line: max-line-length
                        console.error("addChild fail to  engineParallelType : ".concat(spInterface_14.engineParallelType[spInterface_14.engineParallelType.none], " node , node == null : ").concat(node == null, " "));
                        return;
                    }
                    this.rawHandle.addChild(node.rawHandle);
                };
                gdTransform.prototype.removeAllChild = function (needDispose) {
                    while (this.childrenCount > 0) {
                        if (needDispose) {
                            this.getChildByIdx(0)
                                .dispose();
                        }
                        else {
                            this.removeChild(this.getChildByIdx(0));
                        }
                    }
                };
                gdTransform.prototype.removeChild = function (node) {
                    this.rawHandle.removeChild(node.rawHandle);
                };
                gdTransform.prototype.find = function (name) {
                    var tempTran = this.rawHandle.find(name);
                    return gdTransform.packTran(tempTran);
                };
                // localEulerAngles: m4m.math.vector3;
                gdTransform.prototype.getWorldRotate = function () {
                    return this.rawHandle.getWorldRotate();
                };
                gdTransform.prototype.setWorldRotate = function (rotate) {
                    this.rawHandle.setWorldRotate(rotate);
                };
                gdTransform.prototype.getWorldPosition = function () {
                    return this.rawHandle.getWorldPosition();
                };
                gdTransform.prototype.setWorldPosition = function (pos) {
                    this.rawHandle.setWorldPosition(pos);
                };
                gdTransform.prototype.getWorldScale = function () {
                    return this.rawHandle.getWorldScale();
                };
                gdTransform.prototype.setWorldScale = function (scale) {
                    this.rawHandle.setWorldScale(scale);
                };
                gdTransform.prototype.getWorldMatrix = function () {
                    return this.rawHandle.getWorldMatrix();
                };
                gdTransform.prototype.getLocalMatrix = function () {
                    return this.rawHandle.getLocalMatrix();
                };
                gdTransform.prototype.setWorldMatrix = function (mat) {
                    this.rawHandle.setWorldMatrix(mat);
                };
                gdTransform.prototype.lookatPoint = function (point) {
                    this.rawHandle.lookatPoint(point);
                };
                gdTransform.prototype.getForwardInWorld = function (out) {
                    this.rawHandle.getForwardInWorld(out);
                };
                gdTransform.prototype.getRightInWorld = function (out) {
                    this.rawHandle.getRightInWorld(out);
                };
                gdTransform.prototype.getUpInWorld = function (out) {
                    this.rawHandle.getUpInWorld(out);
                };
                gdTransform.prototype.getParent = function () {
                    var tempTran = this.rawHandle.parent;
                    return gdTransform.packTran(tempTran);
                };
                gdTransform.prototype.getAabbMax = function () {
                    return this.rawHandle.aabb.maximum;
                };
                gdTransform.prototype.getAabbMin = function () {
                    return this.rawHandle.aabb.minimum;
                };
                gdTransform.prototype.getAabbCenter = function () {
                    return this.rawHandle.aabb.center;
                };
                gdTransform.prototype.dispose = function () {
                    var tranID = this.rawHandle.insId.getInsID();
                    this.rawHandle.dispose();
                    delete gdTransform.IDMap[tranID];
                    this.gameObject.dispose();
                    this.gameObject = null;
                    this.rawHandle = null;
                };
                gdTransform.prototype.getWorldTranslate = function () {
                    return this.getWorldPosition();
                };
                gdTransform.IDMap = {};
                return gdTransform;
            }()));
            exports_41("wxEngineGO", wxEngineGO = /** @class */ (function () {
                function wxEngineGO(rawGo) {
                    this.componentsMap = {};
                    this.rawHandle = rawGo;
                    this.transform = new wxTransform(this.rawHandle.transform, this);
                }
                Object.defineProperty(wxEngineGO.prototype, "layer", {
                    // get layer(){ return this.rawHandle.layer;}
                    // set layer(v){ this.rawHandle.layer = v;};
                    get: function () { return 0; },
                    // tslint:disable-next-line: no-empty
                    set: function (v) { },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxEngineGO.prototype, "visible", {
                    get: function () { return this.rawHandle.active; },
                    set: function (v) { this.rawHandle.active = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxEngineGO.prototype, "isStatic", {
                    get: function () { return false; },
                    // tslint:disable-next-line: no-empty
                    set: function (v) { },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxEngineGO.prototype, "tag", {
                    get: function () { return ""; },
                    // tslint:disable-next-line: no-empty
                    set: function (v) { },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxEngineGO.prototype, "name", {
                    get: function () { return this.rawHandle.name; },
                    set: function (v) { this.rawHandle.name = v; },
                    enumerable: false,
                    configurable: true
                });
                //获取raw组件类型str
                wxEngineGO.getRawCompType = function (_type) {
                    var result;
                    switch (_type) {
                        case spInterface_14.spComponentType.camera:
                            result = engine_2.default.Camera;
                            break;
                        case spInterface_14.spComponentType.animPlayer:
                            result = engine_2.default.Animator;
                            break;
                        case spInterface_14.spComponentType.meshRenderer:
                            result = engine_2.default.MeshRenderer;
                            break;
                        case spInterface_14.spComponentType.skinMeshRenderer:
                            result = engine_2.default.SkinnedMeshRenderer;
                            break;
                        case spInterface_14.spComponentType.particleSystem:
                            result = engine_2.default.Particle;
                            break;
                        case spInterface_14.spComponentType.trailRenderer:
                            result = engine_2.default.TrailRenderer;
                            break;
                        default: result = null;
                    }
                    return result;
                };
                //获取spComp 
                wxEngineGO.getSpCompByType = function (_type, go, rawComp) {
                    var result;
                    switch (_type) {
                        case spInterface_14.spComponentType.camera:
                            result = new wxCamera_1.wxCamera(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.animPlayer:
                            result = new wxAnimPlayer_1.wxAnimPlayer(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.meshRenderer:
                            result = new wxMeshRenderer_2.wxMeshRenderer(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.skinMeshRenderer:
                            result = new wxSkinnedMeshRenderer_1.wxSkinnedMeshRenderer(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.particleSystem:
                            result = new wxParticleSystemt_1.wxParticleSystemt(rawComp, go);
                            break;
                        case spInterface_14.spComponentType.trailRenderer:
                            result = new wxTrailRenderer_1.wxTrailRenderer(rawComp, go);
                            break;
                        default: result = null;
                    }
                    return result;
                };
                wxEngineGO.prototype.getID = function () {
                    return this.rawHandle.transform.id;
                };
                wxEngineGO.prototype.getRootNode = function () {
                    if (!this._rootNode) {
                        var root = engine_2.default.game.sceneRoot.transform;
                        this._rootNode = new wxTransform(root, this);
                    }
                    return this._rootNode;
                };
                wxEngineGO.prototype.getFirstComponent = function (_type) {
                    // let rawComp = this.rawHandle.getComponent(wxEngineGO.getRawCompType(_type));
                    // let compTypeStr = wxEngineGO.getRawCompType(_type).name; 
                    var compTypeStr = wxEngineGO.getRawCompType(_type).prototype.__typeName;
                    var rawComp = this.getNodeFirstComponent(this.rawHandle, compTypeStr);
                    return this.makeComp(_type, rawComp);
                };
                wxEngineGO.prototype.getComponents = function (_type) {
                    var compTypeStr = wxEngineGO.getRawCompType(_type).prototype.__typeName;
                    var rawComps = [];
                    this.getNodeComponentsInChildren(this.rawHandle, compTypeStr, rawComps);
                    var comps = [];
                    for (var i = 0, len = rawComps.length; i < len; i++) {
                        comps.push(this.makeComp(_type, rawComps[i]));
                    }
                    return comps;
                };
                wxEngineGO.prototype.addComponent = function (_type) {
                    var rawComp = this.rawHandle.addComponent(wxEngineGO.getRawCompType(_type));
                    return this.makeComp(spInterface_14.spComponentType.camera, rawComp);
                };
                wxEngineGO.prototype.dispose = function () {
                    var arr = wxEngineGO.helpArr;
                    if (this.componentsMap) {
                        for (var key in this.componentsMap) {
                            arr.push(key);
                            var comp = this.componentsMap[key];
                            if (comp.dispose) {
                                comp.dispose();
                            }
                        }
                    }
                    for (var i = 0, len = arr.length; i < len; i++) {
                        delete this.componentsMap[arr[i]];
                    }
                    arr.length = 0;
                    this.rawHandle = null;
                    this.transform = null;
                    this.componentsMap = null;
                    this._rootNode = null;
                };
                //创建Cmp
                wxEngineGO.prototype.makeComp = function (_type, rawComp) {
                    if (!rawComp) {
                        return;
                    }
                    var compId = rawComp.id;
                    var result = this.componentsMap[compId];
                    if (!result) {
                        var compTran = parallelEngineTool_3.getSpTransform(rawComp.entity.transform);
                        result = wxEngineGO.getSpCompByType(_type, compTran.gameObject, rawComp);
                        result.id = compId.toString();
                        this.componentsMap[compId] = result;
                    }
                    return result;
                };
                /** 获取节点的第一个组件 */
                wxEngineGO.prototype.getNodeFirstComponent = function (entity, compTypeName) {
                    var len = entity.components.length;
                    for (var i = 0; i < len; i++) {
                        var comp = entity.components[i];
                        if (comp["__typeName"] != compTypeName) {
                            continue;
                        }
                        return comp;
                    }
                    var children = entity.transform.children;
                    if (children != null) {
                        var len1 = children.length;
                        for (var j = 0; j < len1; j++) {
                            var result = this.getNodeFirstComponent(children[j].entity, compTypeName);
                            if (result) {
                                return result;
                            }
                        }
                    }
                };
                wxEngineGO.prototype.getNodeComponentsInChildren = function (entity, compTypeName, rawComps) {
                    var len = entity.components.length;
                    for (var i = 0; i < len; i++) {
                        var comp = entity.components[i];
                        if (comp["__typeName"] != compTypeName) {
                            continue;
                        }
                        // return comp;
                        rawComps.push(comp);
                    }
                    var children = entity.transform.children;
                    if (children) {
                        for (var j = 0, len1 = children.length; j < len1; j++) {
                            this.getNodeComponentsInChildren(children[j].entity, compTypeName, rawComps);
                        }
                    }
                };
                wxEngineGO.helpArr = [];
                return wxEngineGO;
            }()));
            exports_41("wxTransform", wxTransform = /** @class */ (function () {
                function wxTransform(_rawhandle, _gameObject) {
                    this.engineType = spInterface_14.engineParallelType.wxEngine;
                    this._helpDataMap = {};
                    // localRotate: m4m.math.quaternion;
                    this._helpPos = new m4m.math.vector3();
                    // localPosition: m4m.math.vector3;
                    this._helpScale = new m4m.math.vector3();
                    // localScale: m4m.math.vector3;
                    this._helpEuler = new m4m.math.vector3();
                    this._helpWRotate = new m4m.math.quaternion();
                    this._helpWPos = new m4m.math.vector3();
                    this._helpWScale = new m4m.math.vector3();
                    this._helpWorldMatrix = new m4m.math.matrix();
                    this._helpLocalMatrix = new m4m.math.matrix();
                    this._aabbMax = new m4m.math.vector3(0.5, 0.5, 0.5);
                    this._aabbMin = new m4m.math.vector3(-0.5, -0.5, -0.5);
                    this._aabbCenter = new m4m.math.vector3(0, 0, 0);
                    if (!_rawhandle) {
                        wxTransform.count++;
                        // _rawhandle = engine.Entity.createEntity3D("wxTransForm_" + wxTransform.count).transform;
                        // tslint:disable-next-line: no-parameter-reassignment
                        _rawhandle = engine_2.default.game.createEntity3D("wxTransForm_" + wxTransform.count).transform;
                        // let go = new engine.Entity();
                        // _rawhandle = go.addComponent(engine.Transform3D);
                    }
                    if (!_gameObject) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        _gameObject = new wxEngineGO(_rawhandle.entity);
                    }
                    this.rawHandle = _rawhandle;
                    this.gameObject = _gameObject;
                    wxTransform.IDMap[_rawhandle.id] = this;
                }
                wxTransform.packTran = function (tran) {
                    if (!tran) {
                        return;
                    }
                    //看下缓存中是否创建了壳子
                    var gdTran = wxTransform.IDMap[tran.id];
                    if (gdTran) {
                        return gdTran;
                    }
                    var t = new wxTransform(tran);
                    return t;
                };
                Object.defineProperty(wxTransform.prototype, "name", {
                    get: function () { return this.gameObject.name; },
                    set: function (v) { this.gameObject.name = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxTransform.prototype, "enableCulling", {
                    get: function () { return false; },
                    // tslint:disable-next-line: no-empty
                    set: function (v) { },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxTransform.prototype, "needGpuInstancBatcher", {
                    get: function () { return false; },
                    // tslint:disable-next-line: no-empty
                    set: function (v) { },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxTransform.prototype, "localRotate", {
                    get: function () {
                        return this.getData(this.rawHandle.quaternion, "localRotate", "quat");
                    },
                    set: function (v) {
                        gameMathUtil_1.gameMathUtil.IquatClone(v, this.rawHandle.quaternion);
                        this.rawHandle.quaternion.x *= -1;
                        this.rawHandle.quaternion.w *= -1;
                        this.rawHandle.quaternion = this.rawHandle.quaternion;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxTransform.prototype, "localPosition", {
                    get: function () {
                        return this.getData(this.rawHandle.position, "localPosition", "v3_pos");
                    },
                    set: function (v) {
                        var pos = this.rawHandle.position;
                        gameMathUtil_1.gameMathUtil.Ivec3Clone(v, pos);
                        pos.x *= -1;
                        this.rawHandle.position = pos;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxTransform.prototype, "localScale", {
                    get: function () {
                        // gameMathUtil.Ivec3Clone(this.rawHandle.scale , this._help_scale);
                        // return this._help_scale;
                        return this.getData(this.rawHandle.scale, "localScale", "v3");
                    },
                    set: function (v) {
                        gameMathUtil_1.gameMathUtil.Ivec3Clone(v, this.rawHandle.scale);
                        this.rawHandle.scale = this.rawHandle.scale;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxTransform.prototype, "localEulerAngles", {
                    get: function () {
                        // gameMathUtil.Ivec3Clone(this.rawHandle.euler , this._help_Euler);
                        // return this._help_Euler;
                        return this.getData(this.rawHandle.euler, "localEulerAngles", "v3");
                    },
                    set: function (v) {
                        gameMathUtil_1.gameMathUtil.Ivec3Clone(v, this.rawHandle.euler);
                        this.rawHandle.euler = this.rawHandle.euler;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(wxTransform.prototype, "childrenCount", {
                    get: function () { return this.rawHandle.children.length; },
                    enumerable: false,
                    configurable: true
                });
                wxTransform.prototype.getChildByIdx = function (childIdx) {
                    var tempTrans = this.rawHandle.children[childIdx];
                    return wxTransform.packTran(tempTrans);
                };
                wxTransform.prototype.addChild = function (node) {
                    if (!node || node.engineType != spInterface_14.engineParallelType.wxEngine) {
                        // tslint:disable-next-line: max-line-length
                        console.error("addChild fail to engineParallelType :  ".concat(spInterface_14.engineParallelType[spInterface_14.engineParallelType.wxEngine], " node , node == null : ").concat(node == null, " "));
                        return;
                    }
                    this.rawHandle.addChild(node.rawHandle);
                };
                /**
                 * 删除所有child
                 * @param needDispose 是否需要销毁
                 */
                wxTransform.prototype.removeAllChild = function (needDispose) {
                    var children = this.rawHandle.children;
                    var temparr = wxTransform.cacheTrans;
                    for (var i = 0, len = children.length; i < len; i++) {
                        var c = children[i];
                        temparr.push(c);
                    }
                    while (temparr && temparr.length > 0) {
                        var t = temparr.pop();
                        this.rawHandle.removeChild(t);
                        if (needDispose) {
                            t.destroy();
                        }
                    }
                };
                wxTransform.prototype.removeChild = function (node) {
                    this.rawHandle.removeChild(node.rawHandle);
                };
                wxTransform.prototype.find = function (name) {
                    var tempTran = this.findNodeFirst(this.rawHandle, name);
                    if (!tempTran) {
                        return;
                    }
                    return wxTransform.packTran(tempTran);
                };
                wxTransform.prototype.getWorldRotate = function () {
                    return this.getData(this.rawHandle.worldQuaternion, "getWorldRotate", "quat");
                };
                wxTransform.prototype.setWorldRotate = function (rotate) {
                    var tempQaut = wxTransform.helpQuat;
                    m4m.math.quatClone(rotate, tempQaut);
                    tempQaut.x *= -1;
                    tempQaut.w *= -1;
                    var currQuat = this.rawHandle.quaternion;
                    if (!this.rawHandle.parent) {
                        gameMathUtil_1.gameMathUtil.IquatClone(tempQaut, currQuat);
                    }
                    else {
                        var tquat = wxTransform.helpQuatWx;
                        var tquat1 = wxTransform.helpQuatWx1;
                        this.rawHandle.parent.worldQuaternion.invert(tquat);
                        gameMathUtil_1.gameMathUtil.IquatClone(tempQaut, tquat1);
                        tquat.multiply(tquat1, currQuat);
                    }
                    this.rawHandle.quaternion = this.rawHandle.quaternion;
                };
                wxTransform.prototype.getWorldPosition = function () {
                    return this.getData(this.rawHandle.worldPosition, "getWorldPosition", "v3_pos");
                };
                wxTransform.prototype.setWorldPosition = function (pos) {
                    var rawTemp = this.rawHandle;
                    gameMathUtil_1.gameMathUtil.Ivec3Clone(pos, rawTemp.worldPosition);
                    rawTemp.worldPosition.x *= -1;
                    rawTemp.worldPosition = rawTemp.worldPosition;
                };
                wxTransform.prototype.getWorldScale = function () {
                    // gameMathUtil.Ivec3Clone( this.rawHandle.worldScale , this._help_w_scale);
                    // return this._help_w_scale;
                    return this.getData(this.rawHandle.worldScale, "getWorldScale", "v3");
                };
                wxTransform.prototype.setWorldScale = function (scale) {
                    var rawLocalScale = this.rawHandle.scale;
                    if (!this.rawHandle.parent) {
                        gameMathUtil_1.gameMathUtil.Ivec3Clone(scale, this.rawHandle.scale);
                    }
                    else {
                        var tv3 = wxTransform.helpV3;
                        gameMathUtil_1.gameMathUtil.Ivec3Clone(this.rawHandle.parent.worldScale, tv3);
                        rawLocalScale.x = scale.x / tv3.x;
                        rawLocalScale.y = scale.y / tv3.y;
                        rawLocalScale.z = scale.z / tv3.z;
                    }
                    this.rawHandle.scale = rawLocalScale;
                };
                wxTransform.prototype.getWorldMatrix = function () {
                    matrixCloneFromWX(this.rawHandle.worldMatrix, this._helpWorldMatrix);
                    var data = this._helpWorldMatrix.rawData;
                    //反 x
                    data[12] *= -1;
                    //反 旋转
                    data[4] *= -1;
                    data[8] *= -1;
                    data[2] *= -1;
                    data[1] *= -1;
                    return this._helpWorldMatrix;
                };
                wxTransform.prototype.getLocalMatrix = function () {
                    matrixCloneFromWX(this.rawHandle.localMatrix, this._helpLocalMatrix);
                    var data = this._helpLocalMatrix.rawData;
                    //反 x
                    data[12] *= -1;
                    //反 旋转
                    data[4] *= -1;
                    data[8] *= -1;
                    data[2] *= -1;
                    data[1] *= -1;
                    return this._helpLocalMatrix;
                };
                wxTransform.prototype.setWorldMatrix = function (mat) {
                    var rawTran = this.rawHandle;
                    var pos = wxTransform.helpV3;
                    var scale = wxTransform.helpV3v1;
                    var rot = wxTransform.helpQuat;
                    var finalMat = mat;
                    if (rawTran.parent) {
                        var tmtx = wxTransform.helpMtx;
                        matrixCloneFromWX(rawTran.parent.worldMatrix, tmtx);
                        m4m.math.matrixInverse(tmtx, tmtx);
                        var localMtx = wxTransform.helpMtx1;
                        m4m.math.matrixMultiply(tmtx, mat, localMtx);
                        finalMat = localMtx;
                    }
                    m4m.math.matrixDecompose(finalMat, pos, rot, scale);
                    //左右手翻转
                    pos.x *= -1;
                    //旋转
                    rot.x *= -1;
                    rot.w *= -1;
                    gameMathUtil_1.gameMathUtil.Ivec3Clone(pos, rawTran.position);
                    gameMathUtil_1.gameMathUtil.Ivec3Clone(scale, rawTran.scale);
                    gameMathUtil_1.gameMathUtil.IquatClone(rot, rawTran.quaternion);
                    rawTran.position = rawTran.position;
                    rawTran.scale = rawTran.scale;
                    rawTran.quaternion = rawTran.quaternion;
                };
                wxTransform.prototype.getForwardInWorld = function (out) {
                    // hsUtil.Ivec3Clone(this.rawHandle.forward, out);
                    m4m.math.matrixTransformNormal(wxTransform.helpFoward, this.getWorldMatrix(), out);
                    m4m.math.vec3Normalize(out, out);
                };
                wxTransform.prototype.getRightInWorld = function (out) {
                    // hsUtil.Ivec3Clone(this.rawHandle.right, out);
                    m4m.math.matrixTransformNormal(wxTransform.helpRight, this.getWorldMatrix(), out);
                    m4m.math.vec3Normalize(out, out);
                };
                wxTransform.prototype.getUpInWorld = function (out) {
                    // hsUtil.Ivec3Clone(this.rawHandle.up, out);
                    m4m.math.matrixTransformNormal(wxTransform.helpUp, this.getWorldMatrix(), out);
                    m4m.math.vec3Normalize(out, out);
                };
                wxTransform.prototype.lookatPoint = function (point) {
                    // this.rawHandle.lookatPoint(point);
                    throw new Error("Method not implemented.");
                };
                wxTransform.prototype.getParent = function () {
                    var tempTran = this.rawHandle.parent;
                    if (!tempTran) {
                        return;
                    }
                    return wxTransform.packTran(tempTran);
                };
                wxTransform.prototype.getAabbMax = function () {
                    return this._aabbMax;
                };
                wxTransform.prototype.getAabbMin = function () {
                    return this._aabbMin;
                };
                wxTransform.prototype.getAabbCenter = function () {
                    return this._aabbCenter;
                };
                wxTransform.prototype.dispose = function () {
                    // throw new Error("Method not implemented.");
                    var tranID = this.rawHandle.id;
                    this.rawHandle.destroy();
                    delete wxTransform.IDMap[tranID];
                    this.gameObject.dispose();
                    this.gameObject = null;
                    this.rawHandle = null;
                };
                wxTransform.prototype.getData = function (rawData, key, type) {
                    var arr = this._helpDataMap[key];
                    var isDirty = false;
                    //init data;
                    if (!arr) {
                        arr = this._helpDataMap[key] = [];
                        isDirty = true;
                    }
                    var gdData = arr[0];
                    if (!gdData) {
                        switch (type) {
                            case "v3":
                                gdData = arr[0] = new m4m.math.vector3();
                                break;
                            case "v3_pos":
                                gdData = arr[0] = new m4m.math.vector3();
                                break;
                            case "quat":
                                gdData = arr[0] = new m4m.math.quaternion();
                                break;
                            default: gdData = null;
                        }
                        isDirty = true;
                    }
                    var wxData = arr[1];
                    if (!wxData) {
                        switch (type) {
                            case "v3":
                                wxData = arr[1] = new engine_2.default.Vector3();
                                break;
                            case "v3_pos":
                                wxData = arr[1] = new engine_2.default.Vector3();
                                break;
                            case "quat":
                                wxData = arr[1] = new engine_2.default.Quaternion();
                                break;
                            default: wxData = null;
                        }
                        isDirty = true;
                    }
                    //set
                    isDirty = !wxData.equal(rawData);
                    if (isDirty) {
                        switch (type) {
                            case "v3":
                                gameMathUtil_1.gameMathUtil.Ivec3Clone(rawData, gdData);
                                gameMathUtil_1.gameMathUtil.Ivec3Clone(rawData, wxData);
                                break;
                            case "v3_pos":
                                gameMathUtil_1.gameMathUtil.Ivec3Clone(rawData, gdData);
                                gameMathUtil_1.gameMathUtil.Ivec3Clone(rawData, wxData);
                                gdData.x *= -1;
                                break;
                            case "quat":
                                gameMathUtil_1.gameMathUtil.IquatClone(rawData, gdData);
                                gameMathUtil_1.gameMathUtil.IquatClone(rawData, wxData);
                                gdData.x *= -1;
                                gdData.w *= -1;
                                break;
                            default: gdData.x = 0, gdData.y = 0;
                        }
                    }
                    return gdData;
                };
                /**
                 * 查找第一个对象，通过节点树以下
                 * @param rootNode 节点对象
                 * @param nodeName
                 */
                wxTransform.prototype.findNodeFirst = function (rootNode, nodeName) {
                    if (!rootNode) {
                        return;
                    }
                    var temp = rootNode.findChildByName(nodeName);
                    if (temp) {
                        return temp;
                    }
                    var children = rootNode.children;
                    if (children != null) {
                        var len1 = children.length;
                        for (var i = 0; i < len1; i++) {
                            var result = this.findNodeFirst(children[i], nodeName);
                            if (result) {
                                return result;
                            }
                        }
                    }
                };
                wxTransform.prototype.getWorldTranslate = function () {
                    return this.getWorldPosition();
                };
                wxTransform.IDMap = {};
                wxTransform.helpMtx = new m4m.math.matrix();
                wxTransform.helpMtx1 = new m4m.math.matrix();
                wxTransform.helpMtxWx = new engine_2.default.Matrix4();
                wxTransform.helpMtxWx1 = new engine_2.default.Matrix4();
                wxTransform.helpV3 = new m4m.math.vector3();
                wxTransform.helpV3v1 = new m4m.math.vector3();
                wxTransform.helpQuat = new m4m.math.quaternion();
                wxTransform.helpQuat1 = new m4m.math.quaternion();
                wxTransform.helpQuatWx = new engine_2.default.Quaternion();
                wxTransform.helpQuatWx1 = new engine_2.default.Quaternion();
                wxTransform.helpV3Wx = new engine_2.default.Vector3();
                wxTransform.helpV3Wx1 = new engine_2.default.Vector3();
                wxTransform.helpUp = new m4m.math.vector3(0, 1, 0);
                wxTransform.helpRight = new m4m.math.vector3(1, 0, 0);
                wxTransform.helpFoward = new m4m.math.vector3(0, 0, 1);
                wxTransform.cacheTrans = [];
                wxTransform.count = 0;
                return wxTransform;
            }()));
        }
    };
});
System.register("Tools/engineParallel/m4m/gdCustomCompAdapter", ["Tools/engineParallel/spGameObject"], function (exports_42, context_42) {
    "use strict";
    var spGameObject_1, gdCustomCompAdapter;
    var __moduleName = context_42 && context_42.id;
    return {
        setters: [
            function (spGameObject_1_1) {
                spGameObject_1 = spGameObject_1_1;
            }
        ],
        execute: function () {
            exports_42("gdCustomCompAdapter", gdCustomCompAdapter = /** @class */ (function (_super) {
                __extends(gdCustomCompAdapter, _super);
                // tslint:disable-next-line: class-name
                function gdCustomCompAdapter() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this._enabled = true;
                    return _this;
                }
                gdCustomCompAdapter.prototype.getComp = function () {
                    return this.spCustomComp;
                };
                gdCustomCompAdapter.prototype.setEnabled = function (enabled) {
                    this._enabled = enabled;
                    if (this.spCustomComp) {
                        this.spCustomComp.enabled = enabled;
                    }
                };
                gdCustomCompAdapter.prototype.getEnabled = function () {
                    return this._enabled;
                };
                gdCustomCompAdapter.prototype.addCompToGO = function (_customComp) {
                    this.spCustomComp = _customComp;
                    this.spCustomComp.gameObject = new spGameObject_1.m4mGO(this.gameObject);
                    this.enabled = this.enabled;
                };
                gdCustomCompAdapter.prototype.start = function () {
                    if (this.spCustomComp.start) {
                        this.spCustomComp.start();
                    }
                };
                /** 初始化使用 在start 之后 */
                gdCustomCompAdapter.prototype.onPlay = function () {
                    if (this.spCustomComp.onPlay) {
                        this.spCustomComp.onPlay();
                    }
                };
                /** 每帧调用一次 */
                gdCustomCompAdapter.prototype.update = function (delta) {
                    if (this.spCustomComp.update) {
                        this.spCustomComp.update(delta);
                    }
                };
                /** 组件被清理时调用 */
                gdCustomCompAdapter.prototype.remove = function () {
                    if (this.spCustomComp.remove) {
                        this.spCustomComp.remove();
                    }
                    this.spCustomComp = null;
                };
                gdCustomCompAdapter = __decorate([
                    m4m.reflect.nodeComponent
                    // tslint:disable-next-line: class-name
                ], gdCustomCompAdapter);
                return gdCustomCompAdapter;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxCustomCompAdapter", ["Tools/engineParallel/spGameObject"], function (exports_43, context_43) {
    "use strict";
    var spGameObject_2, wxCustomCompAdapter;
    var __moduleName = context_43 && context_43.id;
    return {
        setters: [
            function (spGameObject_2_1) {
                spGameObject_2 = spGameObject_2_1;
            }
        ],
        execute: function () {
            exports_43("wxCustomCompAdapter", wxCustomCompAdapter = /** @class */ (function (_super) {
                __extends(wxCustomCompAdapter, _super);
                // tslint:disable-next-line: class-name
                function wxCustomCompAdapter() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this._enabled = true;
                    return _this;
                }
                wxCustomCompAdapter.prototype.getComp = function () {
                    return this.spCustomComp;
                };
                /** 设置激活状态 */
                wxCustomCompAdapter.prototype.setEnabled = function (enabled) {
                    this._enabled = enabled;
                    if (this.spCustomComp) {
                        this.spCustomComp.enabled = enabled;
                    }
                };
                /** 获取激活状态 */
                wxCustomCompAdapter.prototype.getEnabled = function () {
                    return this._enabled;
                };
                wxCustomCompAdapter.prototype.addCompToGO = function (_customComp) {
                    this.spCustomComp = _customComp;
                    this.spCustomComp.gameObject = new spGameObject_2.wxEngineGO(this.entity);
                    this.setEnabled(this._enabled);
                };
                wxCustomCompAdapter.prototype.onAwake = function () {
                    if (this.spCustomComp.start) {
                        this.spCustomComp.start();
                    }
                };
                /** 初始化使用 在start 之后 */
                wxCustomCompAdapter.prototype.onStart = function () {
                    if (this.spCustomComp.onPlay) {
                        this.spCustomComp.onPlay();
                    }
                };
                /** 每帧调用一次 */
                wxCustomCompAdapter.prototype.onUpdate = function (delta) {
                    if (this.spCustomComp.update) {
                        this.spCustomComp.update(delta);
                    }
                };
                /** 组件被清理时调用 */
                wxCustomCompAdapter.prototype.onDestroy = function () {
                    if (this.spCustomComp.remove) {
                        this.spCustomComp.remove();
                    }
                    this.spCustomComp = null;
                };
                wxCustomCompAdapter = __decorate([
                    engine.decorators.serialize("wxCustomCompAdapter")
                    // tslint:disable-next-line: class-name
                ], wxCustomCompAdapter);
                return wxCustomCompAdapter;
            }(engine.Script)));
        }
    };
});
System.register("Tools/LateUpdateMgr", ["Data/Dictionary"], function (exports_44, context_44) {
    "use strict";
    var Dictionary_3, LateUpdateMgr;
    var __moduleName = context_44 && context_44.id;
    return {
        setters: [
            function (Dictionary_3_1) {
                Dictionary_3 = Dictionary_3_1;
            }
        ],
        execute: function () {
            exports_44("LateUpdateMgr", LateUpdateMgr = /** @class */ (function () {
                // import {Dictionary} from "../Data/base/Dictionary";
                function LateUpdateMgr() {
                }
                LateUpdateMgr.Add = function (callback, thisObj) {
                    if (!callback || !thisObj) {
                        return;
                    }
                    this.funDic.Add(callback, thisObj);
                    // if(this.funDic.values.indexOf(thisObj) == -1){
                    // }
                };
                LateUpdateMgr.Remove = function (callback, thisObj) {
                    if (!callback || !thisObj) {
                        return;
                    }
                    if (this.funDic.values.indexOf(thisObj) != -1 && this.funDic.keys.indexOf(callback) != -1) {
                        this.removeDic.Add(callback, thisObj);
                    }
                };
                LateUpdateMgr.onUpdate = function (delta) {
                    var _this = this;
                    var len = this.funDic.count;
                    var fkeys = this.funDic.keys;
                    for (var i = 0; i < len; i++) {
                        var key = fkeys[i];
                        var value = this.funDic.GetValue(key);
                        var tfname = key.name;
                        if (value) {
                            key.call(value, delta);
                        }
                    }
                    var rvalues = this.removeDic.values;
                    var relen = this.removeDic.count;
                    var _loop_2 = function (i) {
                        var val = rvalues[i];
                        this_2.idxs.length = 0;
                        this_2.funDic.values.forEach(function (temp, idx) {
                            if (temp && temp == val) {
                                _this.idxs.push(idx);
                            }
                        });
                        this_2.idxs.forEach(function (idx) {
                            var k = _this.funDic.keys[idx];
                            if (idx != -1 && k && k == _this.removeDic.keys[i]) {
                                _this.funDic.keys.splice(idx, 1);
                                _this.funDic.values.splice(idx, 1);
                            }
                        });
                    };
                    var this_2 = this;
                    for (var i = 0; i < relen; i++) {
                        _loop_2(i);
                    }
                    if (relen > 0) {
                        this.removeDic.Clear();
                    }
                };
                LateUpdateMgr.idxs = [];
                LateUpdateMgr.funDic = new Dictionary_3.Dictionary();
                LateUpdateMgr.removeDic = new Dictionary_3.Dictionary();
                LateUpdateMgr.funList = [];
                LateUpdateMgr.removeList = [];
                return LateUpdateMgr;
            }()));
        }
    };
});
System.register("animation/animLoadPlayer", ["Data/Map", "Tools/engineParallel/AnimTimeEventHandle", "Tools/FrameMgr"], function (exports_45, context_45) {
    "use strict";
    var Map_5, AnimTimeEventHandle_3, FrameMgr_3, AnimLoadPlayer;
    var __moduleName = context_45 && context_45.id;
    return {
        setters: [
            function (Map_5_1) {
                Map_5 = Map_5_1;
            },
            function (AnimTimeEventHandle_3_1) {
                AnimTimeEventHandle_3 = AnimTimeEventHandle_3_1;
            },
            function (FrameMgr_3_1) {
                FrameMgr_3 = FrameMgr_3_1;
            }
        ],
        execute: function () {
            exports_45("AnimLoadPlayer", AnimLoadPlayer = /** @class */ (function () {
                /**
                 * 动画加载播放控制组件
                 * @param prefabName 预设体资源名
                 * @param clips 需要加载的动画片段列表
                 * @param aplayer 引擎 aniplayer 组件实例
                 * @param loadPath 加载文件路径
                 */
                function AnimLoadPlayer(prefabName, clips, aplayer, loadPath, outUrls) {
                    if (loadPath === void 0) { loadPath = ""; }
                    if (outUrls === void 0) { outUrls = null; }
                    var _this = this;
                    this.animTimeEventNode = new AnimTimeEventHandle_3.AnimTimeEventNode(this);
                    this.lastWaitIdx = -1;
                    this.lastwaitOnPlayend = null;
                    this.lastBlendTime = 0;
                    this.lastEndframe = 0;
                    this.lastSpeed = 1;
                    this.lastbeRevert = false;
                    this.clips = [];
                    this.clipNameMap = new Map_5.cMap();
                    this.loadLen = 0;
                    this.loadingCount = 0;
                    this._isLoadedAll = false;
                    this.prefabName = prefabName;
                    var urls = [];
                    clips.forEach(function (_c, idx) {
                        var clip = _c;
                        clip = clip.replace("".concat(prefabName, "_"), "");
                        _this.clipNameMap.set(clip, idx);
                        clip = clip.lastIndexOf(AnimLoadPlayer.suffix) == -1 ? clip + AnimLoadPlayer.suffix : clip;
                        var str = clip.indexOf("".concat(_this.prefabName, "_")) != -1 ? clip : "".concat(_this.prefabName, "_").concat(clip);
                        _this.clips.push(str);
                        urls.push("".concat(loadPath).concat(_this.prefabName, "/resources/").concat(clip));
                        if (outUrls) { //向外复制
                            urls.forEach(function (v) {
                                outUrls.push(v);
                            });
                        }
                    });
                    this.aplayer = aplayer;
                    if (!prefabName || !clips || !aplayer) {
                        var info = !prefabName ? "prefabName" : !clips ? "clips" : "aplayer";
                        console.warn("animLoadPlayer \u6784\u9020\u53C2\u6570\u5F02\u5E38 , ".concat(info, " \u4E3A\u7A7A !"));
                        return;
                    }
                    this.loadAnims(urls);
                }
                /** 清理字典容器中指定url的数据  */
                AnimLoadPlayer.clearDic = function (url) {
                    this.animClipDic.delete(url);
                    this.clipLoadingDic.delete(url);
                    this.clipWaitLoadDic.delete(url);
                };
                Object.defineProperty(AnimLoadPlayer.prototype, "isLoadedAll", {
                    /** 已经加载所有 动画片段 */
                    get: function () { return this._isLoadedAll; },
                    enumerable: false,
                    configurable: true
                });
                /** 通过aniplayer 组件获取 clipnames  */
                AnimLoadPlayer.getClipNames = function (aplayer, outClipNames, cutString) {
                    if (cutString === void 0) { cutString = ""; }
                    if (!aplayer || !outClipNames) {
                        return;
                    }
                    outClipNames.length = 0;
                    if (!aplayer.clips) {
                        return;
                    }
                    aplayer.clips.forEach(function (clip) {
                        if (clip) {
                            var fname = clip.getName();
                            var idx = fname.indexOf(".FBAni.aniclip.bin");
                            fname = fname.substr(0, idx);
                            if (cutString) {
                                fname = fname.replace(cutString, "");
                            }
                            outClipNames.push(fname);
                        }
                    });
                };
                AnimLoadPlayer.activeUpdate = function () {
                    if (this.hasSetUpdate) {
                        return;
                    }
                    this.hasSetUpdate = true;
                    FrameMgr_3.FrameMgr.Add(this.update, this);
                };
                AnimLoadPlayer.update = function (dt) {
                    var eventHD = AnimLoadPlayer.animTimeEventHD;
                    eventHD.updateDic.forEach(function (n) {
                        var p = n.playerObj;
                        var ap = p.aplayer;
                        if (!ap) {
                            return;
                        }
                        var clip = ap.currentAniclip;
                        if (!clip) {
                            return;
                        }
                        var cName = clip.getName();
                        n.ckTimeEventUpdate(eventHD, cName, p.getCurrClipTime(), p.currClipTotalTime());
                    });
                };
                AnimLoadPlayer.prototype.getCurrClipName = function () {
                    if (!this.aplayer || !this.aplayer.currentAniclip) {
                        return "";
                    }
                    return this.aplayer.currentAniclipName;
                };
                AnimLoadPlayer.prototype.currClipTotalTime = function () {
                    if (!this.aplayer || !this.aplayer.currentAniclip) {
                        return 0;
                    }
                    var clip = this.aplayer.currentAniclip;
                    return clip.frameCount / clip.fps;
                };
                AnimLoadPlayer.prototype.getClipTotalTime = function (simpleClipName) {
                    if (!this.aplayer) {
                        console.error("player \u4E3A\u7A7A");
                        return 0;
                    }
                    var realClipName = "".concat(this.prefabName, "_").concat(simpleClipName).concat(AnimLoadPlayer.suffix);
                    var clip = this.aplayer.getClip(realClipName);
                    if (!clip) {
                        console.warn("player \u4E2D\u6CA1\u627E\u5230 clip".concat(realClipName, " "));
                        return 0;
                    }
                    return clip.frameCount / clip.fps;
                };
                AnimLoadPlayer.prototype.getCurrClipNormalizedTime = function () {
                    var ap = this.aplayer;
                    if (!ap) {
                        return 0;
                    }
                    var clip = ap.currentAniclip;
                    if (!clip) {
                        return 0;
                    }
                    return ap.PlayFrameID / clip.frameCount;
                };
                AnimLoadPlayer.prototype.setCurrClipNormalizedTime = function (normalLizedTime) {
                    if (!this.aplayer) {
                        return;
                    }
                    this.aplayer["_playTimer"] = this.currClipTotalTime() * normalLizedTime;
                };
                AnimLoadPlayer.prototype.isPlay = function () {
                    if (!this.aplayer) {
                        return false;
                    }
                    return this.aplayer.isPlay();
                };
                AnimLoadPlayer.prototype.stop = function () {
                    if (!this.aplayer) {
                        return;
                    }
                    this.aplayer.stop();
                };
                /** 播放动画通过 传入的clip索引 */
                AnimLoadPlayer.prototype.playAnimByIdx = function (idx, onPlayend, blendTime, endframe, speed, beRevert) {
                    if (onPlayend === void 0) { onPlayend = null; }
                    if (blendTime === void 0) { blendTime = 0; }
                    if (endframe === void 0) { endframe = 0; }
                    if (speed === void 0) { speed = 1; }
                    if (beRevert === void 0) { beRevert = false; }
                    if (!this._isLoadedAll) {
                        this.lastWaitIdx = idx;
                        this.lastwaitOnPlayend = onPlayend;
                        this.lastBlendTime = blendTime;
                        this.lastEndframe = endframe;
                        this.lastSpeed = speed;
                        this.lastbeRevert = beRevert;
                        return;
                    }
                    var str = this.clips[idx];
                    if (!str) {
                        console.warn("\u7D22\u5F15 [".concat(idx, "] \u64AD\u653E\u5931\u8D25 : \u672A\u627E\u5230\u5BF9\u5E94animtionClip "));
                        return;
                    }
                    if (endframe != 0) {
                        this.aplayer.playToXFrame(str, endframe, blendTime, onPlayend, speed);
                    }
                    else {
                        if (blendTime == 0) {
                            this.aplayer.play(str, onPlayend, speed, beRevert);
                        }
                        else {
                            this.aplayer.playCross(str, blendTime, onPlayend, speed, beRevert);
                        }
                    }
                    //检查 upadte 注册
                    // this.ckRegUpdate(str);
                    var id = this.aplayer.gameObject.transform.insId.getInsID();
                    var availReg = this.animTimeEventNode.ckRegUpdate(AnimLoadPlayer.animTimeEventHD, str, id.toString());
                    if (availReg) {
                        AnimLoadPlayer.activeUpdate();
                    }
                    //
                    if (this.onLoadedClips) {
                        this.onLoadedClips(this);
                        this.onLoadedClips = null;
                    }
                };
                /** 播放动画通过 clip 名 */
                AnimLoadPlayer.prototype.playAnimByName = function (simpleClipName, onPlayend, blendTime, endframe, speed, beRevert) {
                    if (onPlayend === void 0) { onPlayend = null; }
                    if (blendTime === void 0) { blendTime = 0; }
                    if (endframe === void 0) { endframe = 0; }
                    if (speed === void 0) { speed = 1; }
                    if (beRevert === void 0) { beRevert = false; }
                    var _realClipName = "".concat(simpleClipName).concat(AnimLoadPlayer.suffix);
                    if (!simpleClipName || !this.clipNameMap.has(_realClipName)) {
                        console.warn(" \u52A8\u753B\u7247\u6BB5[".concat(_realClipName, "]\u64AD\u653E\u5931\u8D25 : \u672A\u627E\u5230\u5BF9\u5E94animtionClip "));
                        return;
                    }
                    //console.error(`m4mAnimPlayer.playAnimByName ${clipName}`);
                    var index = this.clipNameMap.get(_realClipName);
                    if (index == undefined) {
                        console.error("取到的动画片断所引出错！！！！    " + _realClipName);
                    }
                    this.playAnimByIdx(index, onPlayend, blendTime, endframe, speed, beRevert);
                };
                /** 停止播放 的动画 */
                AnimLoadPlayer.prototype.stopAnim = function () {
                    this.aplayer.stop();
                };
                /** 是否有 clipName 动画*/
                AnimLoadPlayer.prototype.hasClip = function (simpleClipName) {
                    var _realClipName = "".concat(simpleClipName).concat(AnimLoadPlayer.suffix);
                    return this.clipNameMap.has(_realClipName);
                };
                AnimLoadPlayer.prototype.dispose = function () {
                    if (this.animTimeEventNode) {
                        this.animTimeEventNode.dispose();
                    }
                    this.aplayer = null;
                    this.lastwaitOnPlayend = null;
                    this.animTimeEventNode = null;
                };
                AnimLoadPlayer.prototype.regTimeEventCallbackObj = function (eventActObj) {
                    this.animTimeEventNode.regTimeEventCallbackObj(eventActObj);
                };
                AnimLoadPlayer.prototype.setTimeEvent = function (simpleClipName, timePoint, _actFunName, val) {
                    var realClipName = "".concat(simpleClipName).concat(AnimLoadPlayer.suffix);
                    this.animTimeEventNode.setTimeEvent(AnimLoadPlayer.animTimeEventHD, realClipName, timePoint, _actFunName, val);
                };
                AnimLoadPlayer.prototype.getIsExtend = function (url) {
                    var cOpt = AnimLoadPlayer.extendCreatClipOption;
                    return cOpt && cOpt.matchStr && cOpt.creatFun && url.indexOf(cOpt.matchStr) != -1;
                };
                AnimLoadPlayer.prototype.loadAnims = function (urls) {
                    var _this = this;
                    this.loadLen = urls.length;
                    urls.forEach(function (url, idx) {
                        var animClipName = _this.clips[idx];
                        var cOpt = AnimLoadPlayer.extendCreatClipOption;
                        var isExtend = _this.getIsExtend(url);
                        var realUrl = isExtend ? url + cOpt.attachSuffix : url;
                        if (!AnimLoadPlayer.animClipDic.has(animClipName) && url) {
                            _this.doLoad(realUrl, animClipName);
                        }
                        else {
                            _this.onloadOne(realUrl);
                        }
                    });
                };
                AnimLoadPlayer.prototype.doLoad = function (url, animClipName) {
                    var _this = this;
                    if (!AnimLoadPlayer.clipLoadingDic.has(url)) { //检查是否在加载中
                        AnimLoadPlayer.clipLoadingDic.set(url, true);
                        var cOpt = AnimLoadPlayer.extendCreatClipOption;
                        // if(cOpt && cOpt.matchStr && cOpt.creatFun && url.indexOf("/TESTAsset/") != -1){
                        if (this.getIsExtend(url)) {
                            //使用拓展 创建 方式 
                            return cOpt.creatFun(url)
                                .then(function (_clip) {
                                if (_clip) {
                                    _clip["name"].name = animClipName;
                                    AnimLoadPlayer.animClipDic.set(animClipName, _clip);
                                }
                                _this.onloadOne(url);
                                _this.doWaitLoadFun(url);
                            });
                            // tslint:disable-next-line: unnecessary-else
                        }
                        else {
                            m4m.io.loadArrayBuffer(url, function (_buffer, _err, islfail) {
                                if (_err) {
                                    console.error(_err);
                                    return;
                                }
                                var _clip = new m4m.framework.animationClip(animClipName);
                                AnimLoadPlayer.animClipDic.set(animClipName, _clip);
                                // AssetFactoryTools.useAsset(assetMgr, onstate, state, _clip, url);
                                return _clip.Parse(_buffer)
                                    .then(function () {
                                    _this.onloadOne(url);
                                    _this.doWaitLoadFun(url);
                                });
                            }, null);
                        }
                    }
                    else {
                        var arr = AnimLoadPlayer.clipWaitLoadDic.get(url);
                        if (!arr) {
                            arr = [];
                            AnimLoadPlayer.clipWaitLoadDic.set(url, arr);
                        }
                        arr.push(this.onloadOne.bind(this));
                    }
                };
                AnimLoadPlayer.prototype.doWaitLoadFun = function (url) {
                    var arr = AnimLoadPlayer.clipWaitLoadDic.get(url);
                    if (!arr) {
                        return;
                    }
                    arr.forEach(function (fun) {
                        if (fun) {
                            fun(url);
                        }
                    });
                    //清理
                    arr.length = 0;
                    AnimLoadPlayer.clipLoadingDic.delete(url);
                };
                AnimLoadPlayer.prototype.onloadOne = function (url) {
                    if (this._isLoadedAll || this.aplayer == null) {
                        return;
                    }
                    var clipname;
                    for (var i = 0; i < this.clips.length; i++) {
                        var cut = "/" + this.clips[i].slice(this.prefabName.length + 1, this.clips[i].length);
                        if (url.indexOf(cut) != -1) {
                            clipname = this.clips[i];
                            break;
                        }
                    }
                    this.loadingCount++;
                    //add to player 
                    if (AnimLoadPlayer.animClipDic.has(clipname)) {
                        if (this.aplayer) {
                            var aniClip = AnimLoadPlayer.animClipDic.get(clipname);
                            this.aplayer.addClip(aniClip);
                        }
                        else {
                            console.error("错误！！！！！！！！    动作组件为null");
                            return;
                        }
                    }
                    if (this.loadingCount >= this.loadLen) {
                        this._isLoadedAll = true;
                        if (this.lastWaitIdx != -1) {
                            if (this.lastWaitIdx == undefined) {
                                console.error("lastWaitIdx 取到的动画片断所引出错！！！！    " + clipname);
                            }
                            this.playAnimByIdx(this.lastWaitIdx, this.lastwaitOnPlayend, this.lastBlendTime, this.lastEndframe, this.lastSpeed, this.lastbeRevert);
                        }
                        else {
                            if (this.onLoadedClips) {
                                this.onLoadedClips(this);
                                this.onLoadedClips = null;
                            }
                        }
                    }
                };
                /**
                 * 获取 当前在播放动画到的时间点
                 */
                AnimLoadPlayer.prototype.getCurrClipTime = function () {
                    var ap = this.aplayer;
                    if (!ap) {
                        return 0;
                    }
                    var clip = ap.currentAniclip;
                    if (!clip) {
                        return 0;
                    }
                    return ap.PlayFrameID / clip.fps;
                };
                AnimLoadPlayer.suffix = ".FBAni.aniclip.bin";
                AnimLoadPlayer.animTimeEventHD = new AnimTimeEventHandle_3.AnimTimeEventHandle(); //动画时间轴事件HD
                AnimLoadPlayer.animClipDic = new Map_5.cMap(); //已经加载完毕的clip 集合
                AnimLoadPlayer.clipLoadingDic = new Map_5.cMap(); //加载中的集合
                AnimLoadPlayer.clipWaitLoadDic = new Map_5.cMap(); //等待加载完回调的 集合
                AnimLoadPlayer.hasSetUpdate = false;
                return AnimLoadPlayer;
            }()));
        }
    };
});
System.register("Tools/engineParallel/parallelEngineTool", ["Tools/engineParallel/spGameObject", "Tools/engineParallel/spInterface", "Tools/engineParallel/wxEngine/wxAnimPlayer", "Tools/engineParallel/wxEngine/wxCustomCompAdapter", "engine", "Tools/LateUpdateMgr", "Data/Map", "animation/animLoadPlayer", "Tools/engineParallel/wxEngine/wxMaterialcacher"], function (exports_46, context_46) {
    "use strict";
    var spGameObject_3, spInterface_15, wxAnimPlayer_2, wxCustomCompAdapter_1, engine_3, LateUpdateMgr_1, Map_6, animLoadPlayer_1, wxMaterialcacher_3, spAPP;
    var __moduleName = context_46 && context_46.id;
    /**
     * 创建 一个原生transform 对象，通过引擎类型
     * @param eType 引擎类型
     */
    function createRawTransform(eType) {
        switch (eType) {
            case spInterface_15.engineParallelType.none: return new m4m.framework.transform();
            case spInterface_15.engineParallelType.wxEngine: return engine_3.default.game.createEntity3D().transform;
            default: return;
        }
    }
    exports_46("createRawTransform", createRawTransform);
    /**
     * 获取 SP transfrom
     * @param rawTran 原始 Trans对象
     * @param forceType 强制指定引擎类型
     */
    function getSpTransform(rawTran) {
        if (!rawTran) {
            return;
        }
        if (rawTran.rawHandle) {
            console.error(" getSpTransform \u5931\u8D25 , \u5F53\u524D\u5BF9\u8C61\u5DF2\u7ECF\u662F\u4E00\u4E2A  ISpTransform \u4E86 , \u4E0D\u9700\u8981\u518D\u6B21 getSpTransform \u3002");
            return;
        }
        // let _type = forceType == null ? this.engineParallel : forceType;
        var _type = rawTran instanceof m4m.framework.transform ? spInterface_15.engineParallelType.none : spInterface_15.engineParallelType.wxEngine;
        if (_type == spInterface_15.engineParallelType.none) {
            var gdRawTran = rawTran;
            var cache = spGameObject_3.gdTransform.IDMap[gdRawTran.insId.getInsID()];
            if (cache) {
                return cache;
            }
            return new spGameObject_3.gdTransform(gdRawTran);
        }
        else if (_type == spInterface_15.engineParallelType.wxEngine) {
            var wxRawTran = rawTran;
            var cache = spGameObject_3.wxTransform.IDMap[wxRawTran.id];
            if (cache) {
                return cache;
            }
            return new spGameObject_3.wxTransform(wxRawTran);
        }
    }
    exports_46("getSpTransform", getSpTransform);
    /**
     * 添加 自定义组件
     * @param _trans 节点对象
     * @param _customCompClass T 类对象
     */
    function addSpCustomComp(_trans, _customCompClass) {
        if (!_trans || !_customCompClass) {
            return;
        }
        var _cComp;
        var _type = _trans.engineType == null ? this.engineParallel : _trans.engineType;
        var adapter;
        switch (_type) {
            case spInterface_15.engineParallelType.none:
                adapter = _trans.rawHandle.gameObject.addComponent("gdCustomCompAdapter");
                _cComp = new _customCompClass();
                adapter.addCompToGO(_cComp);
                break;
            case spInterface_15.engineParallelType.wxEngine:
                adapter = _trans.rawHandle.entity.addComponent(wxCustomCompAdapter_1.wxCustomCompAdapter);
                _cComp = new _customCompClass();
                adapter.addCompToGO(_cComp);
                break;
            default: adapter = null;
        }
        return _cComp;
    }
    exports_46("addSpCustomComp", addSpCustomComp);
    /**
     * 获取 自定义组件第一个
     * @param _trans 节点对象
     * @param _customCompClass T 类对象
     */
    function getFirstSpCustomComp(_trans, _customCompClass) {
        if (!_trans || !_customCompClass) {
            return;
        }
        var adapters = getSpCustomCompAdapters(_trans);
        var result;
        for (var i = 0, len = adapters.length; i < len; i++) {
            var adapter = adapters[i];
            var comp = adapter.getComp();
            if (comp && comp.constructor && comp.constructor == _customCompClass) {
                result = comp;
                break; //需要匹配类型
            }
        }
        return result;
    }
    exports_46("getFirstSpCustomComp", getFirstSpCustomComp);
    function getSpCustomCompAdapters(_trans) {
        var _type = _trans.engineType == null ? this.engineParallel : _trans.engineType;
        var adapters;
        switch (_type) {
            case spInterface_15.engineParallelType.none:
                adapters = _trans.rawHandle.gameObject
                    .getComponentsInChildren("gdCustomCompAdapter");
                break;
            case spInterface_15.engineParallelType.wxEngine:
                adapters = [];
                var go = _trans.gameObject;
                go["getNodeComponentsInChildren"](go.rawHandle, wxCustomCompAdapter_1.wxCustomCompAdapter.prototype["__typeName"], adapters);
                break;
            default: var temp = void 0;
        }
        return adapters;
    }
    function getSpAnimPlayerHandle(player, prefabName) {
        if (prefabName === void 0) { prefabName = ""; }
        var pH;
        var trans = player.gameObject.transform;
        switch (trans.engineType) {
            case spInterface_15.engineParallelType.none:
                var clip = [];
                animLoadPlayer_1.AnimLoadPlayer.getClipNames(player.rawHandle, clip, prefabName + "_");
                pH = new animLoadPlayer_1.AnimLoadPlayer(prefabName, clip, player.rawHandle, spAPP.rolePath);
                break;
            case spInterface_15.engineParallelType.wxEngine:
                pH = player;
                break;
            default: var temp = void 0;
        }
        return pH;
    }
    exports_46("getSpAnimPlayerHandle", getSpAnimPlayerHandle);
    /**
     * 多引擎并行接入处理工具类
     */
    function wxEngineEnvSet() {
        var hasWxEngine = window["engine"] != null;
        if (!hasWxEngine) {
            return;
        }
        // wx mat
        // tslint:disable-next-line: max-line-length
        // let shArr = [ResurlManager.RimLitSurfaceCausticsshader ,ResurlManager.RimLitUnderwaterCausticsshader , ResurlManager.CloakingDeviceshader, ResurlManager.PreZCloakingDeviceshader, ResurlManager.SphereMapAdditiveshader, ResurlManager.transparentshader, ResurlManager.trailerShader , ResurlManager.outLineShader , ResurlManager.RimLitshader , ResurlManager.RimLitAlphashader];
        var shArr = [];
        var shPath = "";
        var suttixList = ["Background", "CloakingDevice", "GodRays", "RimLitUnderwaterCaustics", "SkyPlaneBackground",
            "SphereMapAdditive", "Water", "RimLit_Alpha"];
        wxMaterialcacher_3.wxMaterialcacher.init(shArr, shPath, suttixList);
        spAPP.engineParallel = 0;
        spAPP.syncParallelEngineCamera = null;
        // AnimLoadPlayer.extendCreatClipOption = null;
        // this.engineParallel = engineParallelType.wxEngine;
        if (!spAPP.syncParallelEngineCamera) {
            var scene = m4m.framework.sceneMgr.scene;
            // let t = new wxTransform();
            // t.gameObject.name = "syncParallelEngineCamera";
            // this.syncParallelEngineCamera =  t.gameObject.addComponent(spComponentType.camera) as wxCamera;
            var trans = engine_3.default.game.sceneRoot.transform.children[0].findChildByName("cam");
            var wxGo = new spGameObject_3.wxEngineGO(trans.entity);
            var cam = spAPP.syncParallelEngineCamera = wxGo.getFirstComponent(spInterface_15.spComponentType.camera);
            cam.rawHandle.clearColor = new engine_3.default.Color(0, 98, 144, 255);
            cam.far = scene.mainCamera.far;
            cam.near = scene.mainCamera.near;
        }
        //test 切换到 微信显示
        m4m.framework.sceneMgr.scene.fog = null;
        //m4m.framework.sceneMgr.scene["rootNode"].children[3].gameObject.visible = false;    //m4m 场景特效层
        // m4m.framework.sceneMgr.scene["rootNode"].children[4].gameObject.visible = false;    //m4m 场景背景层
        //wx 动画检测接口
        LateUpdateMgr_1.LateUpdateMgr.Add(wxAnimPlayer_2.wxAnimPlayer.update, wxAnimPlayer_2.wxAnimPlayer);
        //test setting ----------
        // player["_isGodMode"] = true;
        // setTimeout(() => {
        //     var a = m4m["__consTool"].datGUITool.runGameGUI();
        //     m4m["dat"] = a;
        //     a.switchDebugLineShow()
        //     m4m["__consTool"].stageMgr.camCtr.distance = 45;   //相机距离
        //     sceneSpawnerMgr["_disableSpawn"] = true;    //关闭刷怪
        // }, 5000);
        // -------------------------
    }
    exports_46("wxEngineEnvSet", wxEngineEnvSet);
    return {
        setters: [
            function (spGameObject_3_1) {
                spGameObject_3 = spGameObject_3_1;
            },
            function (spInterface_15_1) {
                spInterface_15 = spInterface_15_1;
            },
            function (wxAnimPlayer_2_1) {
                wxAnimPlayer_2 = wxAnimPlayer_2_1;
            },
            function (wxCustomCompAdapter_1_1) {
                wxCustomCompAdapter_1 = wxCustomCompAdapter_1_1;
            },
            function (engine_3_1) {
                engine_3 = engine_3_1;
            },
            function (LateUpdateMgr_1_1) {
                LateUpdateMgr_1 = LateUpdateMgr_1_1;
            },
            function (Map_6_1) {
                Map_6 = Map_6_1;
            },
            function (animLoadPlayer_1_1) {
                animLoadPlayer_1 = animLoadPlayer_1_1;
            },
            function (wxMaterialcacher_3_1) {
                wxMaterialcacher_3 = wxMaterialcacher_3_1;
            }
        ],
        execute: function () {
            exports_46("spAPP", spAPP = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function spAPP() {
                }
                /** 获取webglcontext */
                spAPP.getWebglCtx = function () {
                    switch (this.engineParallel) {
                        case spInterface_15.engineParallelType.none: return m4m.framework.sceneMgr.app.webgl;
                        case spInterface_15.engineParallelType.wxEngine: return null;
                        default: return;
                    }
                };
                /** 获取主相机 */
                spAPP.getMainCamera = function () {
                    switch (this.engineParallel) {
                        case spInterface_15.engineParallelType.none:
                            var t = getSpTransform(m4m.framework.sceneMgr.scene.mainCamera.gameObject.transform);
                            return t.gameObject.getFirstComponent(spInterface_15.spComponentType.camera);
                        case spInterface_15.engineParallelType.wxEngine:
                            return spAPP.syncParallelEngineCamera;
                        default: return;
                    }
                };
                /**
                 * 是否已经有全局材质
                 * @param matKey 材质标识Key
                 */
                spAPP.hasGlobalMaterial = function (matKey) {
                    var result = false;
                    switch (this.engineParallel) {
                        case spInterface_15.engineParallelType.none: return this.m4mGlobalMats.has(matKey);
                        case spInterface_15.engineParallelType.wxEngine: return this.wxGlobalMats.has(matKey);
                        default: return;
                    }
                };
                /**
                 * 设置全局材质，通过制定的现有材质
                 * @param matKey 材质标识Key
                 * @param _renderer 渲染对象(meshRenderer)
                 * @param matIdx 渲染对象中的材质队列中的索引（默认0）
                 * @returns 是否成功
                 */
                spAPP.setGlobalMaterial = function (matKey, _renderer, matIdx) {
                    if (matIdx === void 0) { matIdx = 0; }
                    if (!_renderer || _renderer.getMaterialsCount() < 1 || matIdx >= _renderer.getMaterialsCount()) {
                        return false;
                    }
                    var _etype = _renderer.gameObject.transform.engineType;
                    switch (_etype) {
                        case spInterface_15.engineParallelType.none:
                            var _r = _renderer.rawHandle;
                            var mat = _r.materials[matIdx];
                            this.m4mGlobalMats.set(matKey, mat.clone());
                            break;
                        case spInterface_15.engineParallelType.wxEngine:
                            var _r1 = _renderer.rawHandle;
                            var mat1 = _r1.getSharedMaterialAtIndex(matIdx);
                            this.wxGlobalMats.set(matKey, mat1.clone());
                            break;
                        default: return false;
                    }
                    return true;
                };
                /**
                 * 获取 全局材质
                 * @param matKey 材质指定key
                 * @param forceCreate 为空 强制创建一个
                 * @param etype 引擎类型 ， 默认指定 全局引擎状态
                 */
                spAPP.getGlobalMaterial = function (matKey, forceCreate, etype) {
                    if (forceCreate === void 0) { forceCreate = false; }
                    var _etype = etype != null ? etype : this.engineParallel;
                    switch (_etype) {
                        case spInterface_15.engineParallelType.none:
                            if (forceCreate && !this.m4mGlobalMats.has(matKey)) {
                                this.m4mGlobalMats.set(matKey, new m4m.framework.material(matKey));
                            }
                            return this.m4mGlobalMats.get(matKey);
                        case spInterface_15.engineParallelType.wxEngine:
                            if (forceCreate && !this.wxGlobalMats.has(matKey)) {
                                var mat = new engine_3.default.Material();
                                this.wxGlobalMats.set(matKey, mat);
                            }
                            return this.wxGlobalMats.get(matKey);
                        default: return;
                    }
                };
                /**
                 * 设置无效
                 * @param enable
                 */
                spAPP.setEnableFog = function (enable) {
                    var fogTag = "__fogTag__";
                    var etype = this.engineParallel;
                    if (etype == spInterface_15.engineParallelType.wxEngine && engine_3.default.game.activeScene.settings[fogTag] == null) {
                        engine_3.default.game.activeScene.settings[fogTag] = engine_3.default.game.activeScene.settings.fogRange;
                    }
                    if (enable) {
                        switch (etype) {
                            case spInterface_15.engineParallelType.wxEngine:
                                engine_3.default.game.activeScene.settings.fogRange = engine_3.default.game.activeScene.settings[fogTag];
                                break;
                            case spInterface_15.engineParallelType.none:
                                //雾效
                                var scene = m4m.framework.sceneMgr.app.getScene();
                                scene.fog = new m4m.framework.Fog();
                                scene.fog._Start = 1;
                                scene.fog._End = 150;
                                scene.fog._Color = new m4m.math.vector4(5 / 255, 166 / 255, 182 / 255, 1);
                                break;
                            default: var temp = void 0;
                        }
                    }
                    else {
                        switch (etype) {
                            case spInterface_15.engineParallelType.wxEngine:
                                engine_3.default.game.activeScene.settings.fogRange = 99999; //微信处理,拉远距离 雾就淡了
                                break;
                            case spInterface_15.engineParallelType.none:
                                m4m.framework.sceneMgr.app.getScene().fog = null;
                                break;
                            default: var temp = void 0;
                        }
                    }
                };
                /** 性能引擎 类型 */
                spAPP.engineParallel = spInterface_15.engineParallelType.none;
                spAPP.m4mGlobalMats = new Map_6.cMap();
                spAPP.wxGlobalMats = new Map_6.cMap();
                return spAPP;
            }()));
        }
    };
});
System.register("Tools/engineParallel/m4m/gdPrefab", ["Tools/engineParallel/parallelEngineTool"], function (exports_47, context_47) {
    "use strict";
    var parallelEngineTool_4, gdPrefab;
    var __moduleName = context_47 && context_47.id;
    return {
        setters: [
            function (parallelEngineTool_4_1) {
                parallelEngineTool_4 = parallelEngineTool_4_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            gdPrefab = /** @class */ (function () {
                function gdPrefab(rawHandle) {
                    this.rawHandle = rawHandle;
                }
                gdPrefab.prototype.getCloneTrans = function () {
                    return parallelEngineTool_4.getSpTransform(this.rawHandle.getCloneTrans());
                };
                gdPrefab.prototype.getGUID = function () {
                    return this.rawHandle.getGUID();
                };
                return gdPrefab;
            }());
            exports_47("gdPrefab", gdPrefab);
        }
    };
});
System.register("Tools/engineParallel/wxEngine/wxPrefab", ["Tools/engineParallel/parallelEngineTool"], function (exports_48, context_48) {
    "use strict";
    var parallelEngineTool_5, wxPrefab;
    var __moduleName = context_48 && context_48.id;
    return {
        setters: [
            function (parallelEngineTool_5_1) {
                parallelEngineTool_5 = parallelEngineTool_5_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            wxPrefab = /** @class */ (function () {
                function wxPrefab(rawHandle) {
                    this.rawHandle = rawHandle;
                }
                wxPrefab.prototype.getCloneTrans = function () {
                    return parallelEngineTool_5.getSpTransform(this.rawHandle.instantiate().transform);
                };
                wxPrefab.prototype.getGUID = function () {
                    return this.rawHandle.id;
                };
                return wxPrefab;
            }());
            exports_48("wxPrefab", wxPrefab);
        }
    };
});
System.register("Loader/otherPlan/PropertieType", [], function (exports_49, context_49) {
    "use strict";
    var PropertieType;
    var __moduleName = context_49 && context_49.id;
    return {
        setters: [],
        execute: function () {
            (function (PropertieType) {
                //基础数据类型
                PropertieType[PropertieType["typeString"] = 0] = "typeString";
                PropertieType[PropertieType["typeByte"] = 1] = "typeByte";
                PropertieType[PropertieType["typeSByte"] = 2] = "typeSByte";
                PropertieType[PropertieType["typeInt16"] = 3] = "typeInt16";
                PropertieType[PropertieType["typeUInt16"] = 4] = "typeUInt16";
                PropertieType[PropertieType["typeInt32"] = 5] = "typeInt32";
                PropertieType[PropertieType["typeUInt32"] = 6] = "typeUInt32";
                PropertieType[PropertieType["typeInt64"] = 7] = "typeInt64";
                PropertieType[PropertieType["typeUInt64"] = 8] = "typeUInt64";
                PropertieType[PropertieType["typeFloat"] = 9] = "typeFloat";
                PropertieType[PropertieType["typeLong"] = 10] = "typeLong";
                PropertieType[PropertieType["typeDouble"] = 11] = "typeDouble";
                PropertieType[PropertieType["typeBool"] = 12] = "typeBool";
                PropertieType[PropertieType["typeVector2"] = 13] = "typeVector2";
                PropertieType[PropertieType["typeVector3"] = 14] = "typeVector3";
                PropertieType[PropertieType["typeVector4"] = 15] = "typeVector4";
                PropertieType[PropertieType["typeColor"] = 16] = "typeColor";
                PropertieType[PropertieType["typeBounds"] = 17] = "typeBounds";
                PropertieType[PropertieType["typeQuaternion"] = 18] = "typeQuaternion";
                //资源常用类型（暂时没有使用）
                PropertieType[PropertieType["typeF14EffectSystem"] = 19] = "typeF14EffectSystem";
                PropertieType[PropertieType["typeImageSetting"] = 20] = "typeImageSetting";
                PropertieType[PropertieType["typeMat"] = 21] = "typeMat";
                PropertieType[PropertieType["typeGameObject"] = 22] = "typeGameObject";
                PropertieType[PropertieType["typeMesh"] = 23] = "typeMesh";
                PropertieType[PropertieType["typeKeyFrameAnimtionClip"] = 24] = "typeKeyFrameAnimtionClip";
                PropertieType[PropertieType["typeLinerenderer"] = 25] = "typeLinerenderer";
                PropertieType[PropertieType["typeParticleSystem"] = 26] = "typeParticleSystem";
                PropertieType[PropertieType["typeBoxcollider"] = 27] = "typeBoxcollider";
                PropertieType[PropertieType["typeAniplayer"] = 28] = "typeAniplayer";
                PropertieType[PropertieType["typeSkinnedMeshRenderer"] = 29] = "typeSkinnedMeshRenderer";
                PropertieType[PropertieType["typeMeshRenderer"] = 30] = "typeMeshRenderer";
                PropertieType[PropertieType["typeMeshFilter"] = 31] = "typeMeshFilter";
                PropertieType[PropertieType["typeMeshcollider"] = 32] = "typeMeshcollider";
                PropertieType[PropertieType["typeAsbone"] = 33] = "typeAsbone";
                PropertieType[PropertieType["typeF4skinnedMeshRenderer"] = 34] = "typeF4skinnedMeshRenderer";
                PropertieType[PropertieType["typeTPoseInfo"] = 35] = "typeTPoseInfo";
                PropertieType[PropertieType["typePoseBoneMatrix"] = 36] = "typePoseBoneMatrix";
                PropertieType[PropertieType["typeF14effCmop"] = 37] = "typeF14effCmop";
                PropertieType[PropertieType["typeKeyFrameAniPlayer"] = 38] = "typeKeyFrameAniPlayer";
                PropertieType[PropertieType["typeAnimationCurve1"] = 39] = "typeAnimationCurve1";
                PropertieType[PropertieType["typekey"] = 40] = "typekey";
                PropertieType[PropertieType["typeGradient"] = 41] = "typeGradient";
                PropertieType[PropertieType["typeAlphaKey"] = 42] = "typeAlphaKey";
                PropertieType[PropertieType["typeColorKey"] = 43] = "typeColorKey";
                PropertieType[PropertieType["typeParticleMainModule"] = 44] = "typeParticleMainModule";
                PropertieType[PropertieType["typeParticleEmissionModule"] = 45] = "typeParticleEmissionModule";
                PropertieType[PropertieType["typeParticleShapeModule"] = 46] = "typeParticleShapeModule";
                PropertieType[PropertieType["typeParticleVelocityOverLifetimeModule"] = 47] = "typeParticleVelocityOverLifetimeModule";
                PropertieType[PropertieType["typeParticleLimitVelocityOverLifetimeModule"] = 48] = "typeParticleLimitVelocityOverLifetimeModule";
                PropertieType[PropertieType["typeParticleInheritVelocityModule"] = 49] = "typeParticleInheritVelocityModule";
                PropertieType[PropertieType["typeColorBySpeed"] = 50] = "typeColorBySpeed";
                PropertieType[PropertieType["typeSizeOverLifetime"] = 51] = "typeSizeOverLifetime";
                PropertieType[PropertieType["typeNoise"] = 52] = "typeNoise";
                PropertieType[PropertieType["typeTextureSheetAnimation"] = 53] = "typeTextureSheetAnimation";
                PropertieType[PropertieType["typeMinMaxCurve"] = 54] = "typeMinMaxCurve";
                PropertieType[PropertieType["typeMinMaxGradient"] = 55] = "typeMinMaxGradient";
                PropertieType[PropertieType["typeBurst"] = 56] = "typeBurst";
                PropertieType[PropertieType["typePrefab"] = 57] = "typePrefab";
                PropertieType[PropertieType["typeNumber4"] = 58] = "typeNumber4";
                //对应类型的LIST 类型+100
                //基础数据
                PropertieType[PropertieType["listString"] = 100] = "listString";
                PropertieType[PropertieType["listByte"] = 101] = "listByte";
                PropertieType[PropertieType["listSByte"] = 102] = "listSByte";
                PropertieType[PropertieType["listInt16"] = 103] = "listInt16";
                PropertieType[PropertieType["listUInt16"] = 104] = "listUInt16";
                PropertieType[PropertieType["listInt32"] = 105] = "listInt32";
                PropertieType[PropertieType["listUInt32"] = 106] = "listUInt32";
                PropertieType[PropertieType["listInt64"] = 107] = "listInt64";
                PropertieType[PropertieType["listUInt64"] = 108] = "listUInt64";
                PropertieType[PropertieType["listFloat"] = 109] = "listFloat";
                PropertieType[PropertieType["listLong"] = 110] = "listLong";
                PropertieType[PropertieType["listDouble"] = 111] = "listDouble";
                PropertieType[PropertieType["listBool"] = 112] = "listBool";
                PropertieType[PropertieType["listVector2"] = 113] = "listVector2";
                PropertieType[PropertieType["listVector3"] = 114] = "listVector3";
                PropertieType[PropertieType["listVector4"] = 115] = "listVector4";
                PropertieType[PropertieType["listColor"] = 116] = "listColor";
                PropertieType[PropertieType["listBounds"] = 117] = "listBounds";
                PropertieType[PropertieType["listQuaternion"] = 118] = "listQuaternion";
                //资源常用类型（暂时没有使用）
                PropertieType[PropertieType["listF14EffectSystem"] = 119] = "listF14EffectSystem";
                PropertieType[PropertieType["listImageSetting"] = 120] = "listImageSetting";
                PropertieType[PropertieType["listMat"] = 121] = "listMat";
                PropertieType[PropertieType["listGameObject"] = 122] = "listGameObject";
                PropertieType[PropertieType["listMesh"] = 123] = "listMesh";
                PropertieType[PropertieType["listKeyFrameAnimtionClip"] = 124] = "listKeyFrameAnimtionClip";
                PropertieType[PropertieType["listLinerenderer"] = 125] = "listLinerenderer";
                PropertieType[PropertieType["listParticleSystem"] = 126] = "listParticleSystem";
                PropertieType[PropertieType["listBoxcollider"] = 127] = "listBoxcollider";
                PropertieType[PropertieType["listAniplayer"] = 128] = "listAniplayer";
                PropertieType[PropertieType["listSkinnedMeshRenderer"] = 129] = "listSkinnedMeshRenderer";
                PropertieType[PropertieType["listMeshRenderer"] = 130] = "listMeshRenderer";
                PropertieType[PropertieType["listMeshFilter"] = 131] = "listMeshFilter";
                PropertieType[PropertieType["listMeshcollider"] = 132] = "listMeshcollider";
                PropertieType[PropertieType["listAsbone"] = 133] = "listAsbone";
                PropertieType[PropertieType["listF4skinnedMeshRenderer"] = 134] = "listF4skinnedMeshRenderer";
                PropertieType[PropertieType["listTPoseInfo"] = 135] = "listTPoseInfo";
                PropertieType[PropertieType["listPoseBoneMatrix"] = 136] = "listPoseBoneMatrix";
                PropertieType[PropertieType["listF14effCmop"] = 137] = "listF14effCmop";
                PropertieType[PropertieType["listKeyFrameAniPlayer"] = 138] = "listKeyFrameAniPlayer";
                PropertieType[PropertieType["listAnimationCurve1"] = 139] = "listAnimationCurve1";
                PropertieType[PropertieType["listkey"] = 140] = "listkey";
                PropertieType[PropertieType["listGradient"] = 141] = "listGradient";
                PropertieType[PropertieType["listAlphaKey"] = 142] = "listAlphaKey";
                PropertieType[PropertieType["listColorKey"] = 143] = "listColorKey";
                PropertieType[PropertieType["listParticleMainModule"] = 144] = "listParticleMainModule";
                PropertieType[PropertieType["listParticleEmissionModule"] = 145] = "listParticleEmissionModule";
                PropertieType[PropertieType["listParticleShapeModule"] = 146] = "listParticleShapeModule";
                PropertieType[PropertieType["listParticleVelocityOverLifetimeModule"] = 147] = "listParticleVelocityOverLifetimeModule";
                PropertieType[PropertieType["listParticleLimitVelocityOverLifetimeModule"] = 148] = "listParticleLimitVelocityOverLifetimeModule";
                PropertieType[PropertieType["listParticleInheritVelocityModule"] = 149] = "listParticleInheritVelocityModule";
                PropertieType[PropertieType["listColorBySpeed"] = 150] = "listColorBySpeed";
                PropertieType[PropertieType["listSizeOverLifetime"] = 151] = "listSizeOverLifetime";
                PropertieType[PropertieType["listNoise"] = 152] = "listNoise";
                PropertieType[PropertieType["listTextureSheetAnimation"] = 153] = "listTextureSheetAnimation";
                PropertieType[PropertieType["listMinMaxCurve"] = 154] = "listMinMaxCurve";
                PropertieType[PropertieType["listMinMaxGradient"] = 155] = "listMinMaxGradient";
                PropertieType[PropertieType["listBurst"] = 156] = "listBurst";
                PropertieType[PropertieType["listPrefab"] = 157] = "listPrefab";
                PropertieType[PropertieType["listNumber4"] = 158] = "listNumber4";
                //对应类型的数组 类型+200
                //基础数据
                PropertieType[PropertieType["arrayString"] = 200] = "arrayString";
                PropertieType[PropertieType["arrayByte"] = 201] = "arrayByte";
                PropertieType[PropertieType["arraySByte"] = 202] = "arraySByte";
                PropertieType[PropertieType["arrayInt16"] = 203] = "arrayInt16";
                PropertieType[PropertieType["arrayUInt16"] = 204] = "arrayUInt16";
                PropertieType[PropertieType["arrayInt32"] = 205] = "arrayInt32";
                PropertieType[PropertieType["arrayUInt32"] = 206] = "arrayUInt32";
                PropertieType[PropertieType["arrayInt64"] = 207] = "arrayInt64";
                PropertieType[PropertieType["arrayUInt64"] = 208] = "arrayUInt64";
                PropertieType[PropertieType["arrayFloat"] = 209] = "arrayFloat";
                PropertieType[PropertieType["arrayLong"] = 210] = "arrayLong";
                PropertieType[PropertieType["arrayDouble"] = 211] = "arrayDouble";
                PropertieType[PropertieType["arrayBool"] = 212] = "arrayBool";
                PropertieType[PropertieType["arrayVector2"] = 213] = "arrayVector2";
                PropertieType[PropertieType["arrayVector3"] = 214] = "arrayVector3";
                PropertieType[PropertieType["arrayVector4"] = 215] = "arrayVector4";
                PropertieType[PropertieType["arrayColor"] = 216] = "arrayColor";
                PropertieType[PropertieType["arrayBounds"] = 217] = "arrayBounds";
                PropertieType[PropertieType["arrayQuaternion"] = 218] = "arrayQuaternion";
                //资源常用类型（暂时没有使用）
                PropertieType[PropertieType["arrayF14EffectSystem"] = 219] = "arrayF14EffectSystem";
                PropertieType[PropertieType["arrayImageSetting"] = 220] = "arrayImageSetting";
                PropertieType[PropertieType["arrayMat"] = 221] = "arrayMat";
                PropertieType[PropertieType["arrayGameObject"] = 222] = "arrayGameObject";
                PropertieType[PropertieType["arrayMesh"] = 223] = "arrayMesh";
                PropertieType[PropertieType["arrayKeyFrameAnimtionClip"] = 224] = "arrayKeyFrameAnimtionClip";
                PropertieType[PropertieType["arrayLinerenderer"] = 225] = "arrayLinerenderer";
                PropertieType[PropertieType["arrayParticleSystem"] = 226] = "arrayParticleSystem";
                PropertieType[PropertieType["arrayBoxcollider"] = 227] = "arrayBoxcollider";
                PropertieType[PropertieType["arrayAniplayer"] = 228] = "arrayAniplayer";
                PropertieType[PropertieType["arraySkinnedMeshRenderer"] = 229] = "arraySkinnedMeshRenderer";
                PropertieType[PropertieType["arrayMeshRenderer"] = 230] = "arrayMeshRenderer";
                PropertieType[PropertieType["arrayMeshFilter"] = 231] = "arrayMeshFilter";
                PropertieType[PropertieType["arrayMeshcollider"] = 232] = "arrayMeshcollider";
                PropertieType[PropertieType["arrayAsbone"] = 233] = "arrayAsbone";
                PropertieType[PropertieType["arrayF4skinnedMeshRenderer"] = 234] = "arrayF4skinnedMeshRenderer";
                PropertieType[PropertieType["arrayTPoseInfo"] = 235] = "arrayTPoseInfo";
                PropertieType[PropertieType["arrayPoseBoneMatrix"] = 236] = "arrayPoseBoneMatrix";
                PropertieType[PropertieType["arrayF14effCmop"] = 237] = "arrayF14effCmop";
                PropertieType[PropertieType["arrayKeyFrameAniPlayer"] = 238] = "arrayKeyFrameAniPlayer";
                PropertieType[PropertieType["arrayAnimationCurve1"] = 239] = "arrayAnimationCurve1";
                PropertieType[PropertieType["arraykey"] = 240] = "arraykey";
                PropertieType[PropertieType["arrayGradient"] = 241] = "arrayGradient";
                PropertieType[PropertieType["arrayAlphaKey"] = 242] = "arrayAlphaKey";
                PropertieType[PropertieType["arrayColorKey"] = 243] = "arrayColorKey";
                PropertieType[PropertieType["arrayParticleMainModule"] = 244] = "arrayParticleMainModule";
                PropertieType[PropertieType["arrayParticleEmissionModule"] = 245] = "arrayParticleEmissionModule";
                PropertieType[PropertieType["arrayParticleShapeModule"] = 246] = "arrayParticleShapeModule";
                PropertieType[PropertieType["arrayParticleVelocityOverLifetimeModule"] = 247] = "arrayParticleVelocityOverLifetimeModule";
                PropertieType[PropertieType["arrayParticleLimitVelocityOverLifetimeModule"] = 248] = "arrayParticleLimitVelocityOverLifetimeModule";
                PropertieType[PropertieType["arrayParticleInheritVelocityModule"] = 249] = "arrayParticleInheritVelocityModule";
                PropertieType[PropertieType["arrayColorBySpeed"] = 250] = "arrayColorBySpeed";
                PropertieType[PropertieType["arraySizeOverLifetime"] = 251] = "arraySizeOverLifetime";
                PropertieType[PropertieType["arrayNoise"] = 252] = "arrayNoise";
                PropertieType[PropertieType["arrayTextureSheetAnimation"] = 253] = "arrayTextureSheetAnimation";
                PropertieType[PropertieType["arrayMinMaxCurve"] = 254] = "arrayMinMaxCurve";
                PropertieType[PropertieType["arrayMinMaxGradient"] = 255] = "arrayMinMaxGradient";
                PropertieType[PropertieType["arrayBurst"] = 256] = "arrayBurst";
                PropertieType[PropertieType["arrayPrefab"] = 257] = "arrayPrefab";
                PropertieType[PropertieType["arrayNumber4"] = 258] = "arrayNumber4";
                //其他类型
                PropertieType[PropertieType["typeClass"] = 1000] = "typeClass";
                //其他类型LIST
                PropertieType[PropertieType["listClass"] = 1100] = "listClass";
                //其他类型数组
                PropertieType[PropertieType["arrayClass"] = 1200] = "arrayClass";
            })(PropertieType || (PropertieType = {}));
            exports_49("PropertieType", PropertieType);
        }
    };
});
System.register("Loader/otherPlan/dataType/tPoseInfo", [], function (exports_50, context_50) {
    "use strict";
    var tPoseInfo;
    var __moduleName = context_50 && context_50.id;
    return {
        setters: [],
        execute: function () {
            exports_50("tPoseInfo", tPoseInfo = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function tPoseInfo() {
                    this.tranName = "";
                    this.tposeq = m4m.poolquat();
                    this.tposep = m4m.poolv3();
                }
                tPoseInfo.classType = m4m["tPoseInfo"] = tPoseInfo;
                return tPoseInfo;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/PoseBoneMatrix", [], function (exports_51, context_51) {
    "use strict";
    var PoseBoneMatrix;
    var __moduleName = context_51 && context_51.id;
    return {
        setters: [],
        execute: function () {
            exports_51("PoseBoneMatrix", PoseBoneMatrix = /** @class */ (function () {
                function PoseBoneMatrix() {
                    this.r = m4m.poolquat();
                    this.t = m4m.poolv3();
                }
                PoseBoneMatrix.classType = m4m["PoseBoneMatrix"] = PoseBoneMatrix;
                return PoseBoneMatrix;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/number4", [], function (exports_52, context_52) {
    "use strict";
    var number4;
    var __moduleName = context_52 && context_52.id;
    return {
        setters: [],
        execute: function () {
            exports_52("number4", number4 = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function number4() {
                    this.v0 = 0;
                    this.v1 = 0;
                    this.v2 = 0;
                    this.v3 = 0;
                }
                number4.classType = m4m["number4"] = number4;
                return number4;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/readEnums", [], function (exports_53, context_53) {
    "use strict";
    var nameEnum, prtEnum, typeEnum;
    var __moduleName = context_53 && context_53.id;
    return {
        setters: [],
        execute: function () {
            //类名对应的编号
            (function (nameEnum) {
                nameEnum[nameEnum["Mesh"] = 1] = "Mesh";
                nameEnum[nameEnum["Bounds"] = 2] = "Bounds";
                nameEnum[nameEnum["subMeshInfo"] = 3] = "subMeshInfo";
                nameEnum[nameEnum["ImageSetting"] = 4] = "ImageSetting";
                nameEnum[nameEnum["Mat"] = 5] = "Mat";
                nameEnum[nameEnum["mapUniInfo"] = 6] = "mapUniInfo";
                nameEnum[nameEnum["Prefab"] = 7] = "Prefab";
                nameEnum[nameEnum["gameObjectInfo"] = 8] = "gameObjectInfo";
                nameEnum[nameEnum["meshFilter"] = 9] = "meshFilter";
                nameEnum[nameEnum["meshRenderer"] = 10] = "meshRenderer";
                nameEnum[nameEnum["fileInfo"] = 11] = "fileInfo";
                nameEnum[nameEnum["skinnedMeshRenderer"] = 12] = "skinnedMeshRenderer";
                nameEnum[nameEnum["meshcollider"] = 13] = "meshcollider";
                nameEnum[nameEnum["keyFrameAniPlayer"] = 14] = "keyFrameAniPlayer";
                nameEnum[nameEnum["f14EffectSystem"] = 15] = "f14EffectSystem";
                nameEnum[nameEnum["layer"] = 16] = "layer";
                nameEnum[nameEnum["Singlemeshdata"] = 17] = "Singlemeshdata";
                nameEnum[nameEnum["frame"] = 18] = "frame";
                nameEnum[nameEnum["f14effCmop"] = 19] = "f14effCmop";
                nameEnum[nameEnum["att"] = 20] = "att";
                nameEnum[nameEnum["ParticleSystem"] = 21] = "ParticleSystem";
                nameEnum[nameEnum["ParticleMainModule"] = 22] = "ParticleMainModule";
                nameEnum[nameEnum["MinMaxCurve"] = 23] = "MinMaxCurve";
                nameEnum[nameEnum["AnimationCurve1"] = 24] = "AnimationCurve1";
                nameEnum[nameEnum["MinMaxGradient"] = 25] = "MinMaxGradient";
                nameEnum[nameEnum["Gradient"] = 26] = "Gradient";
                nameEnum[nameEnum["ParticleEmissionModule"] = 27] = "ParticleEmissionModule";
                nameEnum[nameEnum["burst"] = 28] = "burst";
                nameEnum[nameEnum["ParticleShapeModule"] = 29] = "ParticleShapeModule";
                nameEnum[nameEnum["ParticleVelocityOverLifetimeModule"] = 30] = "ParticleVelocityOverLifetimeModule";
                nameEnum[nameEnum["ParticleLimitVelocityOverLifetimeModule"] = 31] = "ParticleLimitVelocityOverLifetimeModule";
                nameEnum[nameEnum["ParticleInheritVelocityModule"] = 32] = "ParticleInheritVelocityModule";
                nameEnum[nameEnum["ColorBySpeed"] = 33] = "ColorBySpeed";
                nameEnum[nameEnum["alphaKey"] = 34] = "alphaKey";
                nameEnum[nameEnum["colorKey"] = 35] = "colorKey";
                nameEnum[nameEnum["SizeOverLifetime"] = 36] = "SizeOverLifetime";
                nameEnum[nameEnum["key"] = 37] = "key";
                nameEnum[nameEnum["Noise"] = 38] = "Noise";
                nameEnum[nameEnum["TextureSheetAnimation"] = 39] = "TextureSheetAnimation";
                nameEnum[nameEnum["particlesystem"] = 40] = "particlesystem";
                nameEnum[nameEnum["aniplayer"] = 41] = "aniplayer";
                nameEnum[nameEnum["Aniclip"] = 42] = "Aniclip";
                nameEnum[nameEnum["asbone"] = 43] = "asbone";
                nameEnum[nameEnum["spherecollider"] = 44] = "spherecollider";
                nameEnum[nameEnum["water"] = 45] = "water";
                nameEnum[nameEnum["godray"] = 46] = "godray";
                nameEnum[nameEnum["boxcollider"] = 47] = "boxcollider";
            })(nameEnum || (nameEnum = {}));
            exports_53("nameEnum", nameEnum);
            //属性名对应的编号
            //因为不同类可能有同名属性，所以采用 类名$属性名 的格式来记录
            (function (prtEnum) {
                prtEnum[prtEnum["Mesh$meshName"] = 1] = "Mesh$meshName";
                prtEnum[prtEnum["Mesh$originVF"] = 2] = "Mesh$originVF";
                prtEnum[prtEnum["Mesh$bounds"] = 3] = "Mesh$bounds";
                prtEnum[prtEnum["Bounds$extents"] = 4] = "Bounds$extents";
                prtEnum[prtEnum["Bounds$center"] = 5] = "Bounds$center";
                prtEnum[prtEnum["Mesh$posCount"] = 6] = "Mesh$posCount";
                prtEnum[prtEnum["Mesh$trisindex"] = 7] = "Mesh$trisindex";
                prtEnum[prtEnum["Mesh$subMesh"] = 8] = "Mesh$subMesh";
                prtEnum[prtEnum["subMeshInfo$size"] = 9] = "subMeshInfo$size";
                prtEnum[prtEnum["Mesh$tmpVArr"] = 10] = "Mesh$tmpVArr";
                prtEnum[prtEnum["Mesh$minimum"] = 11] = "Mesh$minimum";
                prtEnum[prtEnum["Mesh$maximum"] = 12] = "Mesh$maximum";
                prtEnum[prtEnum["Mesh$fileName"] = 13] = "Mesh$fileName";
                prtEnum[prtEnum["Mesh$length"] = 14] = "Mesh$length";
                prtEnum[prtEnum["Mesh$name"] = 15] = "Mesh$name";
                prtEnum[prtEnum["ImageSetting$imageName"] = 16] = "ImageSetting$imageName";
                prtEnum[prtEnum["ImageSetting$filterMode"] = 17] = "ImageSetting$filterMode";
                prtEnum[prtEnum["ImageSetting$format"] = 18] = "ImageSetting$format";
                prtEnum[prtEnum["ImageSetting$mipmap"] = 19] = "ImageSetting$mipmap";
                prtEnum[prtEnum["ImageSetting$wrap"] = 20] = "ImageSetting$wrap";
                prtEnum[prtEnum["ImageSetting$premultiplyAlpha"] = 21] = "ImageSetting$premultiplyAlpha";
                prtEnum[prtEnum["ImageSetting$fileName"] = 22] = "ImageSetting$fileName";
                prtEnum[prtEnum["ImageSetting$length"] = 23] = "ImageSetting$length";
                prtEnum[prtEnum["ImageSetting$name"] = 24] = "ImageSetting$name";
                prtEnum[prtEnum["Mat$shader"] = 25] = "Mat$shader";
                prtEnum[prtEnum["Mat$srcshader"] = 26] = "Mat$srcshader";
                prtEnum[prtEnum["Mat$mapUniform"] = 27] = "Mat$mapUniform";
                prtEnum[prtEnum["mapUniInfo$type"] = 28] = "mapUniInfo$type";
                prtEnum[prtEnum["mapUniInfo$value"] = 29] = "mapUniInfo$value";
                prtEnum[prtEnum["Mat$fileName"] = 30] = "Mat$fileName";
                prtEnum[prtEnum["Mat$length"] = 31] = "Mat$length";
                prtEnum[prtEnum["Mat$name"] = 32] = "Mat$name";
                prtEnum[prtEnum["Prefab$tranName"] = 33] = "Prefab$tranName";
                prtEnum[prtEnum["Prefab$localRotate"] = 34] = "Prefab$localRotate";
                prtEnum[prtEnum["Prefab$localScale"] = 35] = "Prefab$localScale";
                prtEnum[prtEnum["Prefab$gameObject"] = 36] = "Prefab$gameObject";
                prtEnum[prtEnum["gameObjectInfo$tag"] = 37] = "gameObjectInfo$tag";
                prtEnum[prtEnum["gameObjectInfo$components"] = 38] = "gameObjectInfo$components";
                prtEnum[prtEnum["meshFilter$mesh"] = 39] = "meshFilter$mesh";
                prtEnum[prtEnum["meshRenderer$materials"] = 40] = "meshRenderer$materials";
                prtEnum[prtEnum["meshRenderer$lightmapIndex"] = 41] = "meshRenderer$lightmapIndex";
                prtEnum[prtEnum["Prefab$insid"] = 42] = "Prefab$insid";
                prtEnum[prtEnum["Prefab$fileName"] = 43] = "Prefab$fileName";
                prtEnum[prtEnum["Prefab$length"] = 44] = "Prefab$length";
                prtEnum[prtEnum["Prefab$name"] = 45] = "Prefab$name";
                prtEnum[prtEnum["fileInfo$fileCount"] = 46] = "fileInfo$fileCount";
                prtEnum[prtEnum["Prefab$children"] = 47] = "Prefab$children";
                prtEnum[prtEnum["Prefab$localTranslate"] = 48] = "Prefab$localTranslate";
                prtEnum[prtEnum["Mesh$vec10tpose"] = 49] = "Mesh$vec10tpose";
                prtEnum[prtEnum["skinnedMeshRenderer$materials"] = 50] = "skinnedMeshRenderer$materials";
                prtEnum[prtEnum["skinnedMeshRenderer$center"] = 51] = "skinnedMeshRenderer$center";
                prtEnum[prtEnum["skinnedMeshRenderer$size"] = 52] = "skinnedMeshRenderer$size";
                prtEnum[prtEnum["skinnedMeshRenderer$mesh"] = 53] = "skinnedMeshRenderer$mesh";
                prtEnum[prtEnum["skinnedMeshRenderer$rootBone"] = 54] = "skinnedMeshRenderer$rootBone";
                prtEnum[prtEnum["skinnedMeshRenderer$bones"] = 55] = "skinnedMeshRenderer$bones";
                prtEnum[prtEnum["Mesh$guid"] = 56] = "Mesh$guid";
                prtEnum[prtEnum["Mesh$zip_length"] = 57] = "Mesh$zip_length";
                prtEnum[prtEnum["ImageSetting$guid"] = 58] = "ImageSetting$guid";
                prtEnum[prtEnum["ImageSetting$zip_length"] = 59] = "ImageSetting$zip_length";
                prtEnum[prtEnum["Mat$guid"] = 60] = "Mat$guid";
                prtEnum[prtEnum["Mat$zip_length"] = 61] = "Mat$zip_length";
                prtEnum[prtEnum["Prefab$guid"] = 62] = "Prefab$guid";
                prtEnum[prtEnum["Prefab$zip_length"] = 63] = "Prefab$zip_length";
                prtEnum[prtEnum["subMeshInfo$matIndex"] = 64] = "subMeshInfo$matIndex";
                prtEnum[prtEnum["subMeshInfo$start"] = 65] = "subMeshInfo$start";
                prtEnum[prtEnum["gameObjectInfo$layer"] = 66] = "gameObjectInfo$layer";
                prtEnum[prtEnum["Mat$InstanceID"] = 67] = "Mat$InstanceID";
                prtEnum[prtEnum["f14EffectSystem$Name"] = 68] = "f14EffectSystem$Name";
                prtEnum[prtEnum["f14EffectSystem$lifeTime"] = 69] = "f14EffectSystem$lifeTime";
                prtEnum[prtEnum["f14EffectSystem$beloop"] = 70] = "f14EffectSystem$beloop";
                prtEnum[prtEnum["f14EffectSystem$layers"] = 71] = "f14EffectSystem$layers";
                prtEnum[prtEnum["layer$Name"] = 72] = "layer$Name";
                prtEnum[prtEnum["layer$type"] = 73] = "layer$type";
                prtEnum[prtEnum["layer$singlemeshdata"] = 74] = "layer$singlemeshdata";
                prtEnum[prtEnum["Singlemeshdata$mesh"] = 75] = "Singlemeshdata$mesh";
                prtEnum[prtEnum["Singlemeshdata$material"] = 76] = "Singlemeshdata$material";
                prtEnum[prtEnum["Singlemeshdata$position"] = 77] = "Singlemeshdata$position";
                prtEnum[prtEnum["Singlemeshdata$scale"] = 78] = "Singlemeshdata$scale";
                prtEnum[prtEnum["Singlemeshdata$euler"] = 79] = "Singlemeshdata$euler";
                prtEnum[prtEnum["Singlemeshdata$color"] = 80] = "Singlemeshdata$color";
                prtEnum[prtEnum["Singlemeshdata$tex_ST"] = 81] = "Singlemeshdata$tex_ST";
                prtEnum[prtEnum["Singlemeshdata$uvType"] = 82] = "Singlemeshdata$uvType";
                prtEnum[prtEnum["Singlemeshdata$bindAxis"] = 83] = "Singlemeshdata$bindAxis";
                prtEnum[prtEnum["layer$frames"] = 84] = "layer$frames";
                prtEnum[prtEnum["frame$frameindex"] = 85] = "frame$frameindex";
                prtEnum[prtEnum["f14EffectSystem$fileName"] = 86] = "f14EffectSystem$fileName";
                prtEnum[prtEnum["f14EffectSystem$length"] = 87] = "f14EffectSystem$length";
                prtEnum[prtEnum["f14EffectSystem$name"] = 88] = "f14EffectSystem$name";
                prtEnum[prtEnum["f14effCmop$f14eff"] = 89] = "f14effCmop$f14eff";
                prtEnum[prtEnum["frame$colorAtts"] = 90] = "frame$colorAtts";
                prtEnum[prtEnum["att$name"] = 91] = "att$name";
                prtEnum[prtEnum["att$value"] = 92] = "att$value";
                prtEnum[prtEnum["frame$vec3Atts"] = 93] = "frame$vec3Atts";
                prtEnum[prtEnum["frame$vec4Atts"] = 94] = "frame$vec4Atts";
                prtEnum[prtEnum["ParticleSystem$main"] = 95] = "ParticleSystem$main";
                prtEnum[prtEnum["ParticleMainModule$duration"] = 96] = "ParticleMainModule$duration";
                prtEnum[prtEnum["ParticleMainModule$startDelay"] = 97] = "ParticleMainModule$startDelay";
                prtEnum[prtEnum["MinMaxCurve$constant"] = 98] = "MinMaxCurve$constant";
                prtEnum[prtEnum["MinMaxCurve$constantMax"] = 99] = "MinMaxCurve$constantMax";
                prtEnum[prtEnum["MinMaxCurve$curve"] = 100] = "MinMaxCurve$curve";
                prtEnum[prtEnum["MinMaxCurve$curveMax"] = 101] = "MinMaxCurve$curveMax";
                prtEnum[prtEnum["MinMaxCurve$curveMin"] = 102] = "MinMaxCurve$curveMin";
                prtEnum[prtEnum["ParticleMainModule$startLifetime"] = 103] = "ParticleMainModule$startLifetime";
                prtEnum[prtEnum["ParticleMainModule$startSpeed"] = 104] = "ParticleMainModule$startSpeed";
                prtEnum[prtEnum["ParticleMainModule$startSize"] = 105] = "ParticleMainModule$startSize";
                prtEnum[prtEnum["ParticleMainModule$startSizeX"] = 106] = "ParticleMainModule$startSizeX";
                prtEnum[prtEnum["ParticleMainModule$startSizeY"] = 107] = "ParticleMainModule$startSizeY";
                prtEnum[prtEnum["ParticleMainModule$startSizeZ"] = 108] = "ParticleMainModule$startSizeZ";
                prtEnum[prtEnum["ParticleMainModule$gravityModifier"] = 109] = "ParticleMainModule$gravityModifier";
                prtEnum[prtEnum["ParticleMainModule$maxParticles"] = 110] = "ParticleMainModule$maxParticles";
                prtEnum[prtEnum["ParticleMainModule$playOnAwake"] = 111] = "ParticleMainModule$playOnAwake";
                prtEnum[prtEnum["ParticleMainModule$scalingMode"] = 112] = "ParticleMainModule$scalingMode";
                prtEnum[prtEnum["ParticleMainModule$simulationSpeed"] = 113] = "ParticleMainModule$simulationSpeed";
                prtEnum[prtEnum["ParticleMainModule$startColor"] = 114] = "ParticleMainModule$startColor";
                prtEnum[prtEnum["MinMaxGradient$color"] = 115] = "MinMaxGradient$color";
                prtEnum[prtEnum["MinMaxGradient$colorMax"] = 116] = "MinMaxGradient$colorMax";
                prtEnum[prtEnum["MinMaxGradient$gradient"] = 117] = "MinMaxGradient$gradient";
                prtEnum[prtEnum["MinMaxGradient$gradientMax"] = 118] = "MinMaxGradient$gradientMax";
                prtEnum[prtEnum["MinMaxGradient$gradientMin"] = 119] = "MinMaxGradient$gradientMin";
                prtEnum[prtEnum["ParticleMainModule$startRotation"] = 120] = "ParticleMainModule$startRotation";
                prtEnum[prtEnum["ParticleMainModule$startRotationX"] = 121] = "ParticleMainModule$startRotationX";
                prtEnum[prtEnum["ParticleMainModule$startRotationY"] = 122] = "ParticleMainModule$startRotationY";
                prtEnum[prtEnum["ParticleMainModule$startRotationZ"] = 123] = "ParticleMainModule$startRotationZ";
                prtEnum[prtEnum["ParticleSystem$emission"] = 124] = "ParticleSystem$emission";
                prtEnum[prtEnum["ParticleEmissionModule$enabled"] = 125] = "ParticleEmissionModule$enabled";
                prtEnum[prtEnum["ParticleEmissionModule$rateOverDistance"] = 126] = "ParticleEmissionModule$rateOverDistance";
                prtEnum[prtEnum["ParticleEmissionModule$rateOverTime"] = 127] = "ParticleEmissionModule$rateOverTime";
                prtEnum[prtEnum["ParticleEmissionModule$bursts"] = 128] = "ParticleEmissionModule$bursts";
                prtEnum[prtEnum["burst$cycleCount"] = 129] = "burst$cycleCount";
                prtEnum[prtEnum["burst$maxCount"] = 130] = "burst$maxCount";
                prtEnum[prtEnum["burst$minCount"] = 131] = "burst$minCount";
                prtEnum[prtEnum["burst$repeatInterval"] = 132] = "burst$repeatInterval";
                prtEnum[prtEnum["ParticleSystem$shape"] = 133] = "ParticleSystem$shape";
                prtEnum[prtEnum["ParticleShapeModule$angle"] = 134] = "ParticleShapeModule$angle";
                prtEnum[prtEnum["ParticleShapeModule$arc"] = 135] = "ParticleShapeModule$arc";
                prtEnum[prtEnum["ParticleShapeModule$arcSpeed"] = 136] = "ParticleShapeModule$arcSpeed";
                prtEnum[prtEnum["ParticleShapeModule$box"] = 137] = "ParticleShapeModule$box";
                prtEnum[prtEnum["ParticleShapeModule$length"] = 138] = "ParticleShapeModule$length";
                prtEnum[prtEnum["ParticleShapeModule$radius"] = 139] = "ParticleShapeModule$radius";
                prtEnum[prtEnum["ParticleShapeModule$radiusSpeed"] = 140] = "ParticleShapeModule$radiusSpeed";
                prtEnum[prtEnum["ParticleSystem$velocityOverLifetime"] = 141] = "ParticleSystem$velocityOverLifetime";
                prtEnum[prtEnum["ParticleVelocityOverLifetimeModule$x"] = 142] = "ParticleVelocityOverLifetimeModule$x";
                prtEnum[prtEnum["ParticleVelocityOverLifetimeModule$y"] = 143] = "ParticleVelocityOverLifetimeModule$y";
                prtEnum[prtEnum["ParticleVelocityOverLifetimeModule$z"] = 144] = "ParticleVelocityOverLifetimeModule$z";
                prtEnum[prtEnum["ParticleSystem$limitVelocityOverLifetime"] = 145] = "ParticleSystem$limitVelocityOverLifetime";
                prtEnum[prtEnum["ParticleLimitVelocityOverLifetimeModule$dampen"] = 146] = "ParticleLimitVelocityOverLifetimeModule$dampen";
                prtEnum[prtEnum["ParticleLimitVelocityOverLifetimeModule$limit"] = 147] = "ParticleLimitVelocityOverLifetimeModule$limit";
                prtEnum[prtEnum["ParticleLimitVelocityOverLifetimeModule$limitX"] = 148] = "ParticleLimitVelocityOverLifetimeModule$limitX";
                prtEnum[prtEnum["ParticleLimitVelocityOverLifetimeModule$limitY"] = 149] = "ParticleLimitVelocityOverLifetimeModule$limitY";
                prtEnum[prtEnum["ParticleLimitVelocityOverLifetimeModule$limitZ"] = 150] = "ParticleLimitVelocityOverLifetimeModule$limitZ";
                prtEnum[prtEnum["ParticleSystem$inheritVelocity"] = 151] = "ParticleSystem$inheritVelocity";
                prtEnum[prtEnum["ParticleInheritVelocityModule$curve"] = 152] = "ParticleInheritVelocityModule$curve";
                prtEnum[prtEnum["ParticleSystem$forceOverLifetime"] = 153] = "ParticleSystem$forceOverLifetime";
                prtEnum[prtEnum["ParticleSystem$colorOverLifetime"] = 154] = "ParticleSystem$colorOverLifetime";
                prtEnum[prtEnum["ColorBySpeed$color"] = 155] = "ColorBySpeed$color";
                prtEnum[prtEnum["Gradient$alphaKeys"] = 156] = "Gradient$alphaKeys";
                prtEnum[prtEnum["alphaKey$alpha"] = 157] = "alphaKey$alpha";
                prtEnum[prtEnum["alphaKey$time"] = 158] = "alphaKey$time";
                prtEnum[prtEnum["Gradient$colorKeys"] = 159] = "Gradient$colorKeys";
                prtEnum[prtEnum["colorKey$color"] = 160] = "colorKey$color";
                prtEnum[prtEnum["colorKey$time"] = 161] = "colorKey$time";
                prtEnum[prtEnum["ColorBySpeed$enabled"] = 162] = "ColorBySpeed$enabled";
                prtEnum[prtEnum["ParticleSystem$colorBySpeed"] = 163] = "ParticleSystem$colorBySpeed";
                prtEnum[prtEnum["ParticleSystem$sizeOverLifetime"] = 164] = "ParticleSystem$sizeOverLifetime";
                prtEnum[prtEnum["SizeOverLifetime$enabled"] = 165] = "SizeOverLifetime$enabled";
                prtEnum[prtEnum["SizeOverLifetime$size"] = 166] = "SizeOverLifetime$size";
                prtEnum[prtEnum["AnimationCurve1$postWrapMode"] = 167] = "AnimationCurve1$postWrapMode";
                prtEnum[prtEnum["AnimationCurve1$preWrapMode"] = 168] = "AnimationCurve1$preWrapMode";
                prtEnum[prtEnum["AnimationCurve1$keys"] = 169] = "AnimationCurve1$keys";
                prtEnum[prtEnum["key$inTangent"] = 170] = "key$inTangent";
                prtEnum[prtEnum["key$outTangent"] = 171] = "key$outTangent";
                prtEnum[prtEnum["key$time"] = 172] = "key$time";
                prtEnum[prtEnum["key$value"] = 173] = "key$value";
                prtEnum[prtEnum["MinMaxCurve$curveMultiplier"] = 174] = "MinMaxCurve$curveMultiplier";
                prtEnum[prtEnum["MinMaxCurve$mode"] = 175] = "MinMaxCurve$mode";
                prtEnum[prtEnum["SizeOverLifetime$x"] = 176] = "SizeOverLifetime$x";
                prtEnum[prtEnum["SizeOverLifetime$y"] = 177] = "SizeOverLifetime$y";
                prtEnum[prtEnum["SizeOverLifetime$z"] = 178] = "SizeOverLifetime$z";
                prtEnum[prtEnum["ParticleSystem$sizeBySpeed"] = 179] = "ParticleSystem$sizeBySpeed";
                prtEnum[prtEnum["ParticleSystem$rotationOverLifetime"] = 180] = "ParticleSystem$rotationOverLifetime";
                prtEnum[prtEnum["ParticleSystem$rotationBySpeed"] = 181] = "ParticleSystem$rotationBySpeed";
                prtEnum[prtEnum["ParticleSystem$noise"] = 182] = "ParticleSystem$noise";
                prtEnum[prtEnum["ParticleSystem$textureSheetAnimation"] = 183] = "ParticleSystem$textureSheetAnimation";
                prtEnum[prtEnum["TextureSheetAnimation$cycleCount"] = 184] = "TextureSheetAnimation$cycleCount";
                prtEnum[prtEnum["TextureSheetAnimation$frameOverTime"] = 185] = "TextureSheetAnimation$frameOverTime";
                prtEnum[prtEnum["TextureSheetAnimation$numTilesX"] = 186] = "TextureSheetAnimation$numTilesX";
                prtEnum[prtEnum["TextureSheetAnimation$numTilesY"] = 187] = "TextureSheetAnimation$numTilesY";
                prtEnum[prtEnum["TextureSheetAnimation$startFrame"] = 188] = "TextureSheetAnimation$startFrame";
                prtEnum[prtEnum["TextureSheetAnimation$useRandomRow"] = 189] = "TextureSheetAnimation$useRandomRow";
                prtEnum[prtEnum["TextureSheetAnimation$uvChannelMask"] = 190] = "TextureSheetAnimation$uvChannelMask";
                prtEnum[prtEnum["ParticleSystem$fileName"] = 191] = "ParticleSystem$fileName";
                prtEnum[prtEnum["ParticleSystem$length"] = 192] = "ParticleSystem$length";
                prtEnum[prtEnum["ParticleSystem$guid"] = 193] = "ParticleSystem$guid";
                prtEnum[prtEnum["ParticleSystem$zip_length"] = 194] = "ParticleSystem$zip_length";
                prtEnum[prtEnum["ParticleSystem$name"] = 195] = "ParticleSystem$name";
                prtEnum[prtEnum["ParticleShapeModule$shapeType"] = 196] = "ParticleShapeModule$shapeType";
                prtEnum[prtEnum["particlesystem$particleSystemData"] = 197] = "particlesystem$particleSystemData";
                prtEnum[prtEnum["particlesystem$material"] = 198] = "particlesystem$material";
                prtEnum[prtEnum["Singlemeshdata$beBillboard"] = 199] = "Singlemeshdata$beBillboard";
                prtEnum[prtEnum["ParticleMainModule$loop"] = 200] = "ParticleMainModule$loop";
                prtEnum[prtEnum["MinMaxCurve$constantMin"] = 201] = "MinMaxCurve$constantMin";
                prtEnum[prtEnum["ParticleShapeModule$enabled"] = 202] = "ParticleShapeModule$enabled";
                prtEnum[prtEnum["Noise$damping"] = 203] = "Noise$damping";
                prtEnum[prtEnum["Noise$frequency"] = 204] = "Noise$frequency";
                prtEnum[prtEnum["Noise$octaveCount"] = 205] = "Noise$octaveCount";
                prtEnum[prtEnum["Noise$octaveMultiplier"] = 206] = "Noise$octaveMultiplier";
                prtEnum[prtEnum["Noise$octaveScale"] = 207] = "Noise$octaveScale";
                prtEnum[prtEnum["Noise$quality"] = 208] = "Noise$quality";
                prtEnum[prtEnum["Noise$remap"] = 209] = "Noise$remap";
                prtEnum[prtEnum["Noise$remapMultiplier"] = 210] = "Noise$remapMultiplier";
                prtEnum[prtEnum["Noise$remapX"] = 211] = "Noise$remapX";
                prtEnum[prtEnum["Noise$remapXMultiplier"] = 212] = "Noise$remapXMultiplier";
                prtEnum[prtEnum["Noise$remapY"] = 213] = "Noise$remapY";
                prtEnum[prtEnum["Noise$remapYMultiplier"] = 214] = "Noise$remapYMultiplier";
                prtEnum[prtEnum["Noise$remapZ"] = 215] = "Noise$remapZ";
                prtEnum[prtEnum["Noise$remapZMultiplier"] = 216] = "Noise$remapZMultiplier";
                prtEnum[prtEnum["Noise$scrollSpeed"] = 217] = "Noise$scrollSpeed";
                prtEnum[prtEnum["Noise$strength"] = 218] = "Noise$strength";
                prtEnum[prtEnum["Noise$strengthMultiplier"] = 219] = "Noise$strengthMultiplier";
                prtEnum[prtEnum["Noise$strengthX"] = 220] = "Noise$strengthX";
                prtEnum[prtEnum["Noise$strengthXMultiplier"] = 221] = "Noise$strengthXMultiplier";
                prtEnum[prtEnum["Noise$strengthY"] = 222] = "Noise$strengthY";
                prtEnum[prtEnum["Noise$strengthYMultiplier"] = 223] = "Noise$strengthYMultiplier";
                prtEnum[prtEnum["Noise$strengthZ"] = 224] = "Noise$strengthZ";
                prtEnum[prtEnum["Noise$strengthZMultiplier"] = 225] = "Noise$strengthZMultiplier";
                prtEnum[prtEnum["TextureSheetAnimation$enabled"] = 226] = "TextureSheetAnimation$enabled";
                prtEnum[prtEnum["aniplayer$clips"] = 227] = "aniplayer$clips";
                prtEnum[prtEnum["Aniclip$fileName"] = 228] = "Aniclip$fileName";
                prtEnum[prtEnum["Aniclip$aniclipName"] = 229] = "Aniclip$aniclipName";
                prtEnum[prtEnum["Aniclip$fps"] = 230] = "Aniclip$fps";
                prtEnum[prtEnum["Aniclip$loop"] = 231] = "Aniclip$loop";
                prtEnum[prtEnum["Aniclip$boneCount"] = 232] = "Aniclip$boneCount";
                prtEnum[prtEnum["Aniclip$bones"] = 233] = "Aniclip$bones";
                prtEnum[prtEnum["Aniclip$indexDic"] = 234] = "Aniclip$indexDic";
                prtEnum[prtEnum["Aniclip$frameCount"] = 235] = "Aniclip$frameCount";
                prtEnum[prtEnum["Aniclip$frames"] = 236] = "Aniclip$frames";
                prtEnum[prtEnum["aniplayer$bones"] = 237] = "aniplayer$bones";
                prtEnum[prtEnum["aniplayer$startPos"] = 238] = "aniplayer$startPos";
                prtEnum[prtEnum["aniplayer$animNames"] = 239] = "aniplayer$animNames";
                prtEnum[prtEnum["skinnedMeshRenderer$player"] = 240] = "skinnedMeshRenderer$player";
                prtEnum[prtEnum["Aniclip$hasScaled"] = 241] = "Aniclip$hasScaled";
                prtEnum[prtEnum["Mat$queue"] = 242] = "Mat$queue";
                prtEnum[prtEnum["spherecollider$radius"] = 243] = "spherecollider$radius";
                prtEnum[prtEnum["ParticleShapeModule$randomDirectionAmount"] = 244] = "ParticleShapeModule$randomDirectionAmount";
                prtEnum[prtEnum["meshRenderer$lightmapScaleOffset"] = 245] = "meshRenderer$lightmapScaleOffset";
                prtEnum[prtEnum["meshRenderer$layer"] = 246] = "meshRenderer$layer";
                prtEnum[prtEnum["water$copyFrom"] = 247] = "water$copyFrom";
                prtEnum[prtEnum["water$defNumVertsPerRow"] = 248] = "water$defNumVertsPerRow";
                prtEnum[prtEnum["boxcollider$center"] = 249] = "boxcollider$center";
                prtEnum[prtEnum["boxcollider$size"] = 250] = "boxcollider$size";
            })(prtEnum || (prtEnum = {}));
            exports_53("prtEnum", prtEnum);
            //属性名对应的数据类型编号
            (function (typeEnum) {
                typeEnum[typeEnum["Mesh$meshName"] = 0] = "Mesh$meshName";
                typeEnum[typeEnum["Mesh$originVF"] = 4] = "Mesh$originVF";
                typeEnum[typeEnum["Mesh$bounds"] = 1000] = "Mesh$bounds";
                typeEnum[typeEnum["Bounds$extents"] = 14] = "Bounds$extents";
                typeEnum[typeEnum["Bounds$center"] = 14] = "Bounds$center";
                typeEnum[typeEnum["Mesh$posCount"] = 5] = "Mesh$posCount";
                typeEnum[typeEnum["Mesh$trisindex"] = 106] = "Mesh$trisindex";
                typeEnum[typeEnum["Mesh$subMesh"] = 1100] = "Mesh$subMesh";
                typeEnum[typeEnum["subMeshInfo$size"] = 5] = "subMeshInfo$size";
                typeEnum[typeEnum["Mesh$tmpVArr"] = 109] = "Mesh$tmpVArr";
                typeEnum[typeEnum["Mesh$minimum"] = 14] = "Mesh$minimum";
                typeEnum[typeEnum["Mesh$maximum"] = 14] = "Mesh$maximum";
                typeEnum[typeEnum["Mesh$fileName"] = 0] = "Mesh$fileName";
                typeEnum[typeEnum["Mesh$length"] = 5] = "Mesh$length";
                typeEnum[typeEnum["Mesh$name"] = 0] = "Mesh$name";
                typeEnum[typeEnum["ImageSetting$imageName"] = 0] = "ImageSetting$imageName";
                typeEnum[typeEnum["ImageSetting$filterMode"] = 0] = "ImageSetting$filterMode";
                typeEnum[typeEnum["ImageSetting$format"] = 0] = "ImageSetting$format";
                typeEnum[typeEnum["ImageSetting$mipmap"] = 12] = "ImageSetting$mipmap";
                typeEnum[typeEnum["ImageSetting$wrap"] = 0] = "ImageSetting$wrap";
                typeEnum[typeEnum["ImageSetting$premultiplyAlpha"] = 12] = "ImageSetting$premultiplyAlpha";
                typeEnum[typeEnum["ImageSetting$fileName"] = 0] = "ImageSetting$fileName";
                typeEnum[typeEnum["ImageSetting$length"] = 5] = "ImageSetting$length";
                typeEnum[typeEnum["ImageSetting$name"] = 0] = "ImageSetting$name";
                typeEnum[typeEnum["Mat$shader"] = 0] = "Mat$shader";
                typeEnum[typeEnum["Mat$srcshader"] = 0] = "Mat$srcshader";
                typeEnum[typeEnum["Mat$mapUniform"] = 300] = "Mat$mapUniform";
                typeEnum[typeEnum["mapUniInfo$type"] = 5] = "mapUniInfo$type";
                typeEnum[typeEnum["mapUniInfo$value"] = 0] = "mapUniInfo$value";
                typeEnum[typeEnum["Mat$fileName"] = 0] = "Mat$fileName";
                typeEnum[typeEnum["Mat$length"] = 5] = "Mat$length";
                typeEnum[typeEnum["Mat$name"] = 0] = "Mat$name";
                typeEnum[typeEnum["Prefab$tranName"] = 0] = "Prefab$tranName";
                typeEnum[typeEnum["Prefab$localRotate"] = 18] = "Prefab$localRotate";
                typeEnum[typeEnum["Prefab$localScale"] = 14] = "Prefab$localScale";
                typeEnum[typeEnum["Prefab$gameObject"] = 1000] = "Prefab$gameObject";
                typeEnum[typeEnum["gameObjectInfo$tag"] = 0] = "gameObjectInfo$tag";
                typeEnum[typeEnum["gameObjectInfo$components"] = 1100] = "gameObjectInfo$components";
                typeEnum[typeEnum["meshFilter$mesh"] = 0] = "meshFilter$mesh";
                typeEnum[typeEnum["meshRenderer$materials"] = 100] = "meshRenderer$materials";
                typeEnum[typeEnum["meshRenderer$lightmapIndex"] = 5] = "meshRenderer$lightmapIndex";
                typeEnum[typeEnum["Prefab$insid"] = 5] = "Prefab$insid";
                typeEnum[typeEnum["Prefab$fileName"] = 0] = "Prefab$fileName";
                typeEnum[typeEnum["Prefab$length"] = 5] = "Prefab$length";
                typeEnum[typeEnum["Prefab$name"] = 0] = "Prefab$name";
                typeEnum[typeEnum["fileInfo$fileCount"] = 300] = "fileInfo$fileCount";
                typeEnum[typeEnum["Prefab$children"] = 1100] = "Prefab$children";
                typeEnum[typeEnum["Prefab$localTranslate"] = 14] = "Prefab$localTranslate";
                typeEnum[typeEnum["Mesh$vec10tpose"] = 109] = "Mesh$vec10tpose";
                typeEnum[typeEnum["skinnedMeshRenderer$materials"] = 100] = "skinnedMeshRenderer$materials";
                typeEnum[typeEnum["skinnedMeshRenderer$center"] = 14] = "skinnedMeshRenderer$center";
                typeEnum[typeEnum["skinnedMeshRenderer$size"] = 14] = "skinnedMeshRenderer$size";
                typeEnum[typeEnum["skinnedMeshRenderer$mesh"] = 0] = "skinnedMeshRenderer$mesh";
                typeEnum[typeEnum["skinnedMeshRenderer$rootBone"] = 5] = "skinnedMeshRenderer$rootBone";
                typeEnum[typeEnum["skinnedMeshRenderer$bones"] = 105] = "skinnedMeshRenderer$bones";
                typeEnum[typeEnum["Mesh$guid"] = 0] = "Mesh$guid";
                typeEnum[typeEnum["Mesh$zip_length"] = 5] = "Mesh$zip_length";
                typeEnum[typeEnum["ImageSetting$guid"] = 0] = "ImageSetting$guid";
                typeEnum[typeEnum["ImageSetting$zip_length"] = 5] = "ImageSetting$zip_length";
                typeEnum[typeEnum["Mat$guid"] = 0] = "Mat$guid";
                typeEnum[typeEnum["Mat$zip_length"] = 5] = "Mat$zip_length";
                typeEnum[typeEnum["Prefab$guid"] = 0] = "Prefab$guid";
                typeEnum[typeEnum["Prefab$zip_length"] = 5] = "Prefab$zip_length";
                typeEnum[typeEnum["subMeshInfo$matIndex"] = 5] = "subMeshInfo$matIndex";
                typeEnum[typeEnum["subMeshInfo$start"] = 5] = "subMeshInfo$start";
                typeEnum[typeEnum["gameObjectInfo$layer"] = 5] = "gameObjectInfo$layer";
                typeEnum[typeEnum["Mat$InstanceID"] = 0] = "Mat$InstanceID";
                typeEnum[typeEnum["f14EffectSystem$Name"] = 0] = "f14EffectSystem$Name";
                typeEnum[typeEnum["f14EffectSystem$lifeTime"] = 9] = "f14EffectSystem$lifeTime";
                typeEnum[typeEnum["f14EffectSystem$beloop"] = 12] = "f14EffectSystem$beloop";
                typeEnum[typeEnum["f14EffectSystem$layers"] = 1100] = "f14EffectSystem$layers";
                typeEnum[typeEnum["layer$Name"] = 0] = "layer$Name";
                typeEnum[typeEnum["layer$type"] = 0] = "layer$type";
                typeEnum[typeEnum["layer$singlemeshdata"] = 1000] = "layer$singlemeshdata";
                typeEnum[typeEnum["Singlemeshdata$mesh"] = 0] = "Singlemeshdata$mesh";
                typeEnum[typeEnum["Singlemeshdata$material"] = 0] = "Singlemeshdata$material";
                typeEnum[typeEnum["Singlemeshdata$position"] = 0] = "Singlemeshdata$position";
                typeEnum[typeEnum["Singlemeshdata$scale"] = 0] = "Singlemeshdata$scale";
                typeEnum[typeEnum["Singlemeshdata$euler"] = 0] = "Singlemeshdata$euler";
                typeEnum[typeEnum["Singlemeshdata$color"] = 0] = "Singlemeshdata$color";
                typeEnum[typeEnum["Singlemeshdata$tex_ST"] = 0] = "Singlemeshdata$tex_ST";
                typeEnum[typeEnum["Singlemeshdata$uvType"] = 0] = "Singlemeshdata$uvType";
                typeEnum[typeEnum["Singlemeshdata$bindAxis"] = 0] = "Singlemeshdata$bindAxis";
                typeEnum[typeEnum["layer$frames"] = 1100] = "layer$frames";
                typeEnum[typeEnum["frame$frameindex"] = 5] = "frame$frameindex";
                typeEnum[typeEnum["f14EffectSystem$fileName"] = 0] = "f14EffectSystem$fileName";
                typeEnum[typeEnum["f14EffectSystem$length"] = 5] = "f14EffectSystem$length";
                typeEnum[typeEnum["f14EffectSystem$name"] = 0] = "f14EffectSystem$name";
                typeEnum[typeEnum["f14effCmop$f14eff"] = 1000] = "f14effCmop$f14eff";
                typeEnum[typeEnum["frame$colorAtts"] = 1100] = "frame$colorAtts";
                typeEnum[typeEnum["att$name"] = 0] = "att$name";
                typeEnum[typeEnum["att$value"] = 0] = "att$value";
                typeEnum[typeEnum["frame$vec3Atts"] = 1100] = "frame$vec3Atts";
                typeEnum[typeEnum["frame$vec4Atts"] = 1100] = "frame$vec4Atts";
                typeEnum[typeEnum["ParticleSystem$main"] = 1000] = "ParticleSystem$main";
                typeEnum[typeEnum["ParticleMainModule$duration"] = 9] = "ParticleMainModule$duration";
                typeEnum[typeEnum["ParticleMainModule$startDelay"] = 1000] = "ParticleMainModule$startDelay";
                typeEnum[typeEnum["MinMaxCurve$constant"] = 9] = "MinMaxCurve$constant";
                typeEnum[typeEnum["MinMaxCurve$constantMax"] = 9] = "MinMaxCurve$constantMax";
                typeEnum[typeEnum["MinMaxCurve$curve"] = 1000] = "MinMaxCurve$curve";
                typeEnum[typeEnum["MinMaxCurve$curveMax"] = 1000] = "MinMaxCurve$curveMax";
                typeEnum[typeEnum["MinMaxCurve$curveMin"] = 1000] = "MinMaxCurve$curveMin";
                typeEnum[typeEnum["ParticleMainModule$startLifetime"] = 1000] = "ParticleMainModule$startLifetime";
                typeEnum[typeEnum["ParticleMainModule$startSpeed"] = 1000] = "ParticleMainModule$startSpeed";
                typeEnum[typeEnum["ParticleMainModule$startSize"] = 1000] = "ParticleMainModule$startSize";
                typeEnum[typeEnum["ParticleMainModule$startSizeX"] = 1000] = "ParticleMainModule$startSizeX";
                typeEnum[typeEnum["ParticleMainModule$startSizeY"] = 1000] = "ParticleMainModule$startSizeY";
                typeEnum[typeEnum["ParticleMainModule$startSizeZ"] = 1000] = "ParticleMainModule$startSizeZ";
                typeEnum[typeEnum["ParticleMainModule$gravityModifier"] = 1000] = "ParticleMainModule$gravityModifier";
                typeEnum[typeEnum["ParticleMainModule$maxParticles"] = 5] = "ParticleMainModule$maxParticles";
                typeEnum[typeEnum["ParticleMainModule$playOnAwake"] = 12] = "ParticleMainModule$playOnAwake";
                typeEnum[typeEnum["ParticleMainModule$scalingMode"] = 5] = "ParticleMainModule$scalingMode";
                typeEnum[typeEnum["ParticleMainModule$simulationSpeed"] = 9] = "ParticleMainModule$simulationSpeed";
                typeEnum[typeEnum["ParticleMainModule$startColor"] = 1000] = "ParticleMainModule$startColor";
                typeEnum[typeEnum["MinMaxGradient$color"] = 16] = "MinMaxGradient$color";
                typeEnum[typeEnum["MinMaxGradient$colorMax"] = 16] = "MinMaxGradient$colorMax";
                typeEnum[typeEnum["MinMaxGradient$gradient"] = 1000] = "MinMaxGradient$gradient";
                typeEnum[typeEnum["MinMaxGradient$gradientMax"] = 1000] = "MinMaxGradient$gradientMax";
                typeEnum[typeEnum["MinMaxGradient$gradientMin"] = 1000] = "MinMaxGradient$gradientMin";
                typeEnum[typeEnum["ParticleMainModule$startRotation"] = 1000] = "ParticleMainModule$startRotation";
                typeEnum[typeEnum["ParticleMainModule$startRotationX"] = 1000] = "ParticleMainModule$startRotationX";
                typeEnum[typeEnum["ParticleMainModule$startRotationY"] = 1000] = "ParticleMainModule$startRotationY";
                typeEnum[typeEnum["ParticleMainModule$startRotationZ"] = 1000] = "ParticleMainModule$startRotationZ";
                typeEnum[typeEnum["ParticleSystem$emission"] = 1000] = "ParticleSystem$emission";
                typeEnum[typeEnum["ParticleEmissionModule$enabled"] = 12] = "ParticleEmissionModule$enabled";
                typeEnum[typeEnum["ParticleEmissionModule$rateOverDistance"] = 1000] = "ParticleEmissionModule$rateOverDistance";
                typeEnum[typeEnum["ParticleEmissionModule$rateOverTime"] = 1000] = "ParticleEmissionModule$rateOverTime";
                typeEnum[typeEnum["ParticleEmissionModule$bursts"] = 1100] = "ParticleEmissionModule$bursts";
                typeEnum[typeEnum["burst$cycleCount"] = 5] = "burst$cycleCount";
                typeEnum[typeEnum["burst$maxCount"] = 5] = "burst$maxCount";
                typeEnum[typeEnum["burst$minCount"] = 5] = "burst$minCount";
                typeEnum[typeEnum["burst$repeatInterval"] = 9] = "burst$repeatInterval";
                typeEnum[typeEnum["ParticleSystem$shape"] = 1000] = "ParticleSystem$shape";
                typeEnum[typeEnum["ParticleShapeModule$angle"] = 9] = "ParticleShapeModule$angle";
                typeEnum[typeEnum["ParticleShapeModule$arc"] = 9] = "ParticleShapeModule$arc";
                typeEnum[typeEnum["ParticleShapeModule$arcSpeed"] = 1000] = "ParticleShapeModule$arcSpeed";
                typeEnum[typeEnum["ParticleShapeModule$box"] = 14] = "ParticleShapeModule$box";
                typeEnum[typeEnum["ParticleShapeModule$length"] = 9] = "ParticleShapeModule$length";
                typeEnum[typeEnum["ParticleShapeModule$radius"] = 9] = "ParticleShapeModule$radius";
                typeEnum[typeEnum["ParticleShapeModule$radiusSpeed"] = 1000] = "ParticleShapeModule$radiusSpeed";
                typeEnum[typeEnum["ParticleSystem$velocityOverLifetime"] = 1000] = "ParticleSystem$velocityOverLifetime";
                typeEnum[typeEnum["ParticleVelocityOverLifetimeModule$x"] = 1000] = "ParticleVelocityOverLifetimeModule$x";
                typeEnum[typeEnum["ParticleVelocityOverLifetimeModule$y"] = 1000] = "ParticleVelocityOverLifetimeModule$y";
                typeEnum[typeEnum["ParticleVelocityOverLifetimeModule$z"] = 1000] = "ParticleVelocityOverLifetimeModule$z";
                typeEnum[typeEnum["ParticleSystem$limitVelocityOverLifetime"] = 1000] = "ParticleSystem$limitVelocityOverLifetime";
                typeEnum[typeEnum["ParticleLimitVelocityOverLifetimeModule$dampen"] = 9] = "ParticleLimitVelocityOverLifetimeModule$dampen";
                typeEnum[typeEnum["ParticleLimitVelocityOverLifetimeModule$limit"] = 1000] = "ParticleLimitVelocityOverLifetimeModule$limit";
                typeEnum[typeEnum["ParticleLimitVelocityOverLifetimeModule$limitX"] = 1000] = "ParticleLimitVelocityOverLifetimeModule$limitX";
                typeEnum[typeEnum["ParticleLimitVelocityOverLifetimeModule$limitY"] = 1000] = "ParticleLimitVelocityOverLifetimeModule$limitY";
                typeEnum[typeEnum["ParticleLimitVelocityOverLifetimeModule$limitZ"] = 1000] = "ParticleLimitVelocityOverLifetimeModule$limitZ";
                typeEnum[typeEnum["ParticleSystem$inheritVelocity"] = 1000] = "ParticleSystem$inheritVelocity";
                typeEnum[typeEnum["ParticleInheritVelocityModule$curve"] = 1000] = "ParticleInheritVelocityModule$curve";
                typeEnum[typeEnum["ParticleSystem$forceOverLifetime"] = 1000] = "ParticleSystem$forceOverLifetime";
                typeEnum[typeEnum["ParticleSystem$colorOverLifetime"] = 1000] = "ParticleSystem$colorOverLifetime";
                typeEnum[typeEnum["ColorBySpeed$color"] = 1000] = "ColorBySpeed$color";
                typeEnum[typeEnum["Gradient$alphaKeys"] = 1100] = "Gradient$alphaKeys";
                typeEnum[typeEnum["alphaKey$alpha"] = 9] = "alphaKey$alpha";
                typeEnum[typeEnum["alphaKey$time"] = 9] = "alphaKey$time";
                typeEnum[typeEnum["Gradient$colorKeys"] = 1100] = "Gradient$colorKeys";
                typeEnum[typeEnum["colorKey$color"] = 16] = "colorKey$color";
                typeEnum[typeEnum["colorKey$time"] = 9] = "colorKey$time";
                typeEnum[typeEnum["ColorBySpeed$enabled"] = 12] = "ColorBySpeed$enabled";
                typeEnum[typeEnum["ParticleSystem$colorBySpeed"] = 1000] = "ParticleSystem$colorBySpeed";
                typeEnum[typeEnum["ParticleSystem$sizeOverLifetime"] = 1000] = "ParticleSystem$sizeOverLifetime";
                typeEnum[typeEnum["SizeOverLifetime$enabled"] = 12] = "SizeOverLifetime$enabled";
                typeEnum[typeEnum["SizeOverLifetime$size"] = 1000] = "SizeOverLifetime$size";
                typeEnum[typeEnum["AnimationCurve1$postWrapMode"] = 5] = "AnimationCurve1$postWrapMode";
                typeEnum[typeEnum["AnimationCurve1$preWrapMode"] = 5] = "AnimationCurve1$preWrapMode";
                typeEnum[typeEnum["AnimationCurve1$keys"] = 1100] = "AnimationCurve1$keys";
                typeEnum[typeEnum["key$inTangent"] = 9] = "key$inTangent";
                typeEnum[typeEnum["key$outTangent"] = 9] = "key$outTangent";
                typeEnum[typeEnum["key$time"] = 9] = "key$time";
                typeEnum[typeEnum["key$value"] = 9] = "key$value";
                typeEnum[typeEnum["MinMaxCurve$curveMultiplier"] = 9] = "MinMaxCurve$curveMultiplier";
                typeEnum[typeEnum["MinMaxCurve$mode"] = 5] = "MinMaxCurve$mode";
                typeEnum[typeEnum["SizeOverLifetime$x"] = 1000] = "SizeOverLifetime$x";
                typeEnum[typeEnum["SizeOverLifetime$y"] = 1000] = "SizeOverLifetime$y";
                typeEnum[typeEnum["SizeOverLifetime$z"] = 1000] = "SizeOverLifetime$z";
                typeEnum[typeEnum["ParticleSystem$sizeBySpeed"] = 1000] = "ParticleSystem$sizeBySpeed";
                typeEnum[typeEnum["ParticleSystem$rotationOverLifetime"] = 1000] = "ParticleSystem$rotationOverLifetime";
                typeEnum[typeEnum["ParticleSystem$rotationBySpeed"] = 1000] = "ParticleSystem$rotationBySpeed";
                typeEnum[typeEnum["ParticleSystem$noise"] = 1000] = "ParticleSystem$noise";
                typeEnum[typeEnum["ParticleSystem$textureSheetAnimation"] = 1000] = "ParticleSystem$textureSheetAnimation";
                typeEnum[typeEnum["TextureSheetAnimation$cycleCount"] = 5] = "TextureSheetAnimation$cycleCount";
                typeEnum[typeEnum["TextureSheetAnimation$frameOverTime"] = 1000] = "TextureSheetAnimation$frameOverTime";
                typeEnum[typeEnum["TextureSheetAnimation$numTilesX"] = 5] = "TextureSheetAnimation$numTilesX";
                typeEnum[typeEnum["TextureSheetAnimation$numTilesY"] = 5] = "TextureSheetAnimation$numTilesY";
                typeEnum[typeEnum["TextureSheetAnimation$startFrame"] = 1000] = "TextureSheetAnimation$startFrame";
                typeEnum[typeEnum["TextureSheetAnimation$useRandomRow"] = 12] = "TextureSheetAnimation$useRandomRow";
                typeEnum[typeEnum["TextureSheetAnimation$uvChannelMask"] = 5] = "TextureSheetAnimation$uvChannelMask";
                typeEnum[typeEnum["ParticleSystem$fileName"] = 0] = "ParticleSystem$fileName";
                typeEnum[typeEnum["ParticleSystem$length"] = 5] = "ParticleSystem$length";
                typeEnum[typeEnum["ParticleSystem$guid"] = 0] = "ParticleSystem$guid";
                typeEnum[typeEnum["ParticleSystem$zip_length"] = 5] = "ParticleSystem$zip_length";
                typeEnum[typeEnum["ParticleSystem$name"] = 0] = "ParticleSystem$name";
                typeEnum[typeEnum["ParticleShapeModule$shapeType"] = 5] = "ParticleShapeModule$shapeType";
                typeEnum[typeEnum["particlesystem$particleSystemData"] = 0] = "particlesystem$particleSystemData";
                typeEnum[typeEnum["particlesystem$material"] = 0] = "particlesystem$material";
                typeEnum[typeEnum["Singlemeshdata$beBillboard"] = 12] = "Singlemeshdata$beBillboard";
                typeEnum[typeEnum["ParticleMainModule$loop"] = 12] = "ParticleMainModule$loop";
                typeEnum[typeEnum["MinMaxCurve$constantMin"] = 9] = "MinMaxCurve$constantMin";
                typeEnum[typeEnum["ParticleShapeModule$enabled"] = 12] = "ParticleShapeModule$enabled";
                typeEnum[typeEnum["Noise$damping"] = 12] = "Noise$damping";
                typeEnum[typeEnum["Noise$frequency"] = 9] = "Noise$frequency";
                typeEnum[typeEnum["Noise$octaveCount"] = 5] = "Noise$octaveCount";
                typeEnum[typeEnum["Noise$octaveMultiplier"] = 9] = "Noise$octaveMultiplier";
                typeEnum[typeEnum["Noise$octaveScale"] = 9] = "Noise$octaveScale";
                typeEnum[typeEnum["Noise$quality"] = 5] = "Noise$quality";
                typeEnum[typeEnum["Noise$remap"] = 1000] = "Noise$remap";
                typeEnum[typeEnum["Noise$remapMultiplier"] = 9] = "Noise$remapMultiplier";
                typeEnum[typeEnum["Noise$remapX"] = 1000] = "Noise$remapX";
                typeEnum[typeEnum["Noise$remapXMultiplier"] = 9] = "Noise$remapXMultiplier";
                typeEnum[typeEnum["Noise$remapY"] = 1000] = "Noise$remapY";
                typeEnum[typeEnum["Noise$remapYMultiplier"] = 9] = "Noise$remapYMultiplier";
                typeEnum[typeEnum["Noise$remapZ"] = 1000] = "Noise$remapZ";
                typeEnum[typeEnum["Noise$remapZMultiplier"] = 9] = "Noise$remapZMultiplier";
                typeEnum[typeEnum["Noise$scrollSpeed"] = 1000] = "Noise$scrollSpeed";
                typeEnum[typeEnum["Noise$strength"] = 1000] = "Noise$strength";
                typeEnum[typeEnum["Noise$strengthMultiplier"] = 9] = "Noise$strengthMultiplier";
                typeEnum[typeEnum["Noise$strengthX"] = 1000] = "Noise$strengthX";
                typeEnum[typeEnum["Noise$strengthXMultiplier"] = 9] = "Noise$strengthXMultiplier";
                typeEnum[typeEnum["Noise$strengthY"] = 1000] = "Noise$strengthY";
                typeEnum[typeEnum["Noise$strengthYMultiplier"] = 9] = "Noise$strengthYMultiplier";
                typeEnum[typeEnum["Noise$strengthZ"] = 1000] = "Noise$strengthZ";
                typeEnum[typeEnum["Noise$strengthZMultiplier"] = 9] = "Noise$strengthZMultiplier";
                typeEnum[typeEnum["TextureSheetAnimation$enabled"] = 12] = "TextureSheetAnimation$enabled";
                typeEnum[typeEnum["aniplayer$clips"] = 1100] = "aniplayer$clips";
                typeEnum[typeEnum["Aniclip$fileName"] = 0] = "Aniclip$fileName";
                typeEnum[typeEnum["Aniclip$aniclipName"] = 0] = "Aniclip$aniclipName";
                typeEnum[typeEnum["Aniclip$fps"] = 9] = "Aniclip$fps";
                typeEnum[typeEnum["Aniclip$loop"] = 12] = "Aniclip$loop";
                typeEnum[typeEnum["Aniclip$boneCount"] = 5] = "Aniclip$boneCount";
                typeEnum[typeEnum["Aniclip$bones"] = 100] = "Aniclip$bones";
                typeEnum[typeEnum["Aniclip$indexDic"] = 300] = "Aniclip$indexDic";
                typeEnum[typeEnum["Aniclip$frameCount"] = 5] = "Aniclip$frameCount";
                typeEnum[typeEnum["Aniclip$frames"] = 300] = "Aniclip$frames";
                typeEnum[typeEnum["aniplayer$bones"] = 135] = "aniplayer$bones";
                typeEnum[typeEnum["aniplayer$startPos"] = 136] = "aniplayer$startPos";
                typeEnum[typeEnum["aniplayer$animNames"] = 100] = "aniplayer$animNames";
                typeEnum[typeEnum["skinnedMeshRenderer$player"] = 5] = "skinnedMeshRenderer$player";
                typeEnum[typeEnum["Aniclip$hasScaled"] = 12] = "Aniclip$hasScaled";
                typeEnum[typeEnum["Mat$queue"] = 5] = "Mat$queue";
                typeEnum[typeEnum["spherecollider$radius"] = 9] = "spherecollider$radius";
                typeEnum[typeEnum["ParticleShapeModule$randomDirectionAmount"] = 9] = "ParticleShapeModule$randomDirectionAmount";
                typeEnum[typeEnum["meshRenderer$lightmapScaleOffset"] = 15] = "meshRenderer$lightmapScaleOffset";
                typeEnum[typeEnum["meshRenderer$layer"] = 5] = "meshRenderer$layer";
                typeEnum[typeEnum["water$copyFrom"] = 5] = "water$copyFrom";
                typeEnum[typeEnum["water$defNumVertsPerRow"] = 9] = "water$defNumVertsPerRow";
                typeEnum[typeEnum["boxcollider$center"] = 14] = "boxcollider$center";
                typeEnum[typeEnum["boxcollider$size"] = 14] = "boxcollider$size";
            })(typeEnum || (typeEnum = {}));
            exports_53("typeEnum", typeEnum);
        }
    };
});
System.register("Loader/otherPlan/dataType/AssetBundleFileInfo", [], function (exports_54, context_54) {
    "use strict";
    var AssetBundleFileInfo;
    var __moduleName = context_54 && context_54.id;
    return {
        setters: [],
        execute: function () {
            exports_54("AssetBundleFileInfo", AssetBundleFileInfo = /** @class */ (function () {
                function AssetBundleFileInfo() {
                    this.fileName = "";
                    this.length = 0;
                    this.guid = "";
                    // tslint:disable-next-line: variable-name
                    this.zip_length = 0;
                    this.oldVersions = false;
                    this.name = "";
                }
                AssetBundleFileInfo.classType = m4m["AssetBundleFileInfo"] = AssetBundleFileInfo;
                return AssetBundleFileInfo;
            }()));
        }
    };
});
System.register("Loader/otherPlan/loadTools", [], function (exports_55, context_55) {
    "use strict";
    var loadTools;
    var __moduleName = context_55 && context_55.id;
    return {
        setters: [],
        execute: function () {
            exports_55("loadTools", loadTools = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function loadTools() {
                }
                /**
                 *
                 * @param url 加载路径
                 * @param fun 加载结果回调函数
                 * @param onprocess 加载进度
                 * @param loadedFun 正常加载完成后回调
                 */
                loadTools.xhrLoad = function (url, fun, onprocess, responseType, loadedFun) {
                    var _this = this;
                    if (onprocess === void 0) { onprocess = null; }
                    var req = new XMLHttpRequest();
                    var isLoaded = false;
                    req.open("GET", url);
                    req.responseType = responseType;
                    req.onreadystatechange = function () {
                        if (req.readyState == 4) {
                            if (req.status == 200) {
                                if (_this.urlCaseDic[url]) {
                                    delete _this.urlCaseDic[url];
                                }
                                isLoaded = true;
                                loadedFun(req);
                                // if (fun)
                                //     fun(req, null, false);
                            }
                            else {
                                // tslint:disable-next-line: switch-default
                                switch (req.status) {
                                    case 404:
                                        if (fun) {
                                            fun(null, new Error("got a 404:" + url));
                                        }
                                        console.error("got a 404:" + url);
                                        _this.urlCaseDic[url] = _this.retryCount;
                                }
                            }
                        }
                    };
                    req.onprogress = function (ev) {
                        if (onprocess) {
                            onprocess(ev.loaded, ev.total);
                        }
                    };
                    req.onerror = function (ev) {
                        if (fun) {
                            fun(null, new Error("URL : ".concat(url, " \n onerr on req: ")), true);
                        }
                    };
                    req.onloadend = function () {
                        //console.error(" is onload");
                        if (!isLoaded) {
                            // this.loadFail(req, url, fun, onprocess, responseType, loadedFun);
                            if (fun) {
                                fun(null, new Error("URL : ".concat(url, " \n onerr on req: ")), true);
                            }
                        }
                    };
                    // try
                    // {
                    req.send();
                    // } catch (err)
                    // {
                    //     fun(null, err);
                    // }
                };
                // static loadFail(xhr: XMLHttpRequest, url, fun, onprocess, responseType, loadedFun) {
                //     console.error(`下载失败: ${url}  status:${xhr.status}, ${this.retryTime}/ms 后重试  testtesttesttesttest`);
                //     this.urlCaseDic[url] = this.urlCaseDic[url] || 0;
                //     if (this.urlCaseDic[url] >= this.retryCount) {
                //         this.urlCaseDic[url] = 0;
                //         if (fun)
                //             fun(null, new Error("load this url fail  ：" + url), true);  //throw error after retry some times
                //         console.error(`------ load this url fail URL:${url}  `);
                //     } else {
                //         setTimeout(() => {
                //             this.urlCaseDic[url]++;
                //             this.xhrLoad(url, fun, onprocess, responseType, loadedFun);
                //         }, this.retryTime);
                //     }
                // }
                // /**
                //  * @public
                //  * @language zh_CN
                //  * @classdesc
                //  * 加载text资源
                //  * @param url 加载路径
                //  * @param fun 加载结果回调函数
                //  * @param onprocess 加载进度
                //  * @version m4m-m4m 1.0
                //  */
                // tslint:disable-next-line: max-line-length
                // static loadText(url: string, fun: (_txt: string, _err: Error, isloadFail?: boolean) => void, onprocess: (curLength: number, totalLength: number) => void = null): void {
                //     this.xhrLoad(url, fun, onprocess, "text", (req) => {
                //         fun(req.responseText, null);
                //     });
                // }
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 加载text资源
                 * @param url 加载路径
                 * @param fun 加载结果回调函数
                 * @param onprocess 加载进度
                 * @version m4m-m4m 1.0
                 */
                loadTools.loadJson = function (url, fun, onprocess) {
                    if (onprocess === void 0) { onprocess = null; }
                    this.xhrLoad(url, fun, onprocess, "json", function (req) {
                        fun(req.response, null);
                    });
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 加载arraybuffer资源
                 * @param url 加载路径
                 * @param fun 加载结果回调函数
                 * @param onprocess 加载进度
                 */
                loadTools.loadArrayBuffer = function (url, fun, onprocess) {
                    if (onprocess === void 0) { onprocess = null; }
                    //req.responseType = "arraybuffer";//ie 一定要在open之后修改responseType
                    this.xhrLoad(url, fun, onprocess, "arraybuffer", function (req) {
                        fun(req.response, null, false);
                    });
                };
                loadTools.urlCaseDic = {};
                loadTools.retryTime = 1000;
                loadTools.retryCount = 9999;
                return loadTools;
            }()));
        }
    };
});
System.register("Loader/otherPlan/testReadTool", ["Loader/otherPlan/PropertieType", "Loader/otherPlan/dataType/tPoseInfo", "Loader/otherPlan/dataType/PoseBoneMatrix", "Loader/otherPlan/dataType/number4", "Loader/otherPlan/dataType/readEnums", "Loader/otherPlan/loadTools", "Data/Map", "Loader/otherPlan/testCreat"], function (exports_56, context_56) {
    "use strict";
    var PropertieType_1, tPoseInfo_1, PoseBoneMatrix_1, number4_1, readEnums_1, loadTools_1, Map_7, testCreat_1, fileInfo, testReadTool;
    var __moduleName = context_56 && context_56.id;
    return {
        setters: [
            function (PropertieType_1_1) {
                PropertieType_1 = PropertieType_1_1;
            },
            function (tPoseInfo_1_1) {
                tPoseInfo_1 = tPoseInfo_1_1;
            },
            function (PoseBoneMatrix_1_1) {
                PoseBoneMatrix_1 = PoseBoneMatrix_1_1;
            },
            function (number4_1_1) {
                number4_1 = number4_1_1;
            },
            function (readEnums_1_1) {
                readEnums_1 = readEnums_1_1;
            },
            function (loadTools_1_1) {
                loadTools_1 = loadTools_1_1;
            },
            function (Map_7_1) {
                Map_7 = Map_7_1;
            },
            function (testCreat_1_1) {
                testCreat_1 = testCreat_1_1;
            }
        ],
        execute: function () {
            exports_56("fileInfo", fileInfo = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function fileInfo() {
                    this.fileCount = new Map_7.cMap();
                }
                fileInfo.classType = m4m["fileInfo"] = fileInfo;
                return fileInfo;
            }()));
            exports_56("testReadTool", testReadTool = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function testReadTool() {
                }
                /**
                 * 加载资源组二进制数据
                 * @param url
                 */
                // public static loadAssetBoundleFiles(url: string, fun: (classObj) => void) {
                testReadTool.loadAssetBoundleFiles = function (urll, isOnlyExportOne) {
                    if (isOnlyExportOne === void 0) { isOnlyExportOne = false; }
                    return __awaiter(this, void 0, void 0, function () {
                        var url, tempp, bd;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = testCreat_1.testCreat.CDNURL + urll;
                                    if (this.tempListString.has(url)) {
                                        return [2 /*return*/, this.tempListString.get(url)];
                                    }
                                    this.tempListString.set(url, null);
                                    tempp = new Promise(function (resolve) {
                                        _this.readArrayBuffer(url, resolve);
                                    });
                                    return [4 /*yield*/, tempp];
                                case 1:
                                    bd = _a.sent();
                                    return [2 /*return*/, this.readInfoByBuffer(url, bd)];
                            }
                        });
                    });
                };
                testReadTool.readInfoByBuffer = function (url, bd) {
                    // let nowT = Date.now();
                    // console.error(" 加载文件   " + url + "    " + (nowT - this.timer.get(url + 2)));
                    // this.timer.set(url + 3, nowT);
                    var test = [];
                    if (bd) {
                        var bytes = new m4m.io.binTool();
                        bytes.write(new Uint8Array(bd));
                        var fileListLenght = bytes.readInt32();
                        var deserializeCount = 0;
                        for (var i = 0; i < fileListLenght; i++) {
                            var classNameID = bytes.readUInt8();
                            //通过编号取得类名
                            var className = readEnums_1.nameEnum[classNameID];
                            //通过类名新建类
                            var classObj = new m4m[className]();
                            classObj["className"] = className;
                            //解析类
                            classObj = this.readBytes(bytes, classObj);
                            test.push(classObj);
                            deserializeCount++;
                        }
                        bytes.dispose();
                    }
                    this.tempListString.set(url, test);
                    // let nowTT = Date.now();
                    // console.error(" 解析二进制文件   " + url + "    " + (nowTT - this.timer.get(url + 3)));
                    // this.timer.set(url + 4, nowTT);
                    return test;
                };
                testReadTool.readArrayBuffer = function (url, cb) {
                    // if (url.indexOf("InGame_Sharks_ReefShark_ReefShark.FBX_Object003.mesh.bin.js") != -1) {
                    //     url = url.replace("InGame_Sharks_ReefShark_ReefShark.FBX_Object003.mesh.bin.js", "PF_PlayerSharkReef.bpkg.json");
                    // }
                    loadTools_1.loadTools.loadArrayBuffer(url, function (bin, urlStr) {
                        cb(bin);
                    });
                };
                /**
                 * 解析类
                 * @param br
                 * @param classObj
                 */
                testReadTool.readBytes = function (br, classObj) {
                    var _loop_3 = function () {
                        //一直解析直到读取到的数据类型代码为-1才停止
                        var prNum = br.readUInt16();
                        if (prNum == 0) {
                            return "break";
                        }
                        //获取数据类型代码通过枚举获得变量类代码和变量名
                        var typeNameFull = readEnums_1.prtEnum[prNum];
                        var typeName = typeNameFull.split("$")[1];
                        var type = readEnums_1.typeEnum[readEnums_1.prtEnum[prNum]];
                        var isComp = false;
                        if (readEnums_1.prtEnum[prNum] == "gameObjectInfo$components") {
                            isComp = true;
                        }
                        //解析数据
                        this_3.readValue(br, type, function (v) {
                            classObj[typeName] = v;
                        }, isComp);
                    };
                    var this_3 = this;
                    while (true) {
                        var state_1 = _loop_3();
                        if (state_1 === "break")
                            break;
                    }
                    return classObj;
                };
                testReadTool.readFloat = function (data, pos) {
                    var num = data.getFloat32(pos, true);
                    return num;
                };
                testReadTool.readListV3 = function (br, listLen, pos, cb) {
                    var dyList = [];
                    var data = new DataView(br, 0);
                    var _pos = pos;
                    for (var j = 0; j < listLen; j++) {
                        var v3 = new m4m.math.vector3();
                        v3.x = this.readFloat(data, _pos);
                        _pos += 4;
                        v3.y = this.readFloat(data, _pos);
                        _pos += 4;
                        v3.z = this.readFloat(data, _pos);
                        _pos += 4;
                        dyList.push(v3);
                    }
                    cb(dyList);
                    // return dyList;
                };
                // tslint:disable-next-line: cyclomatic-complexity
                testReadTool.readValue = function (br, type, cb, isComp) {
                    if (isComp === void 0) { isComp = false; }
                    var classObj;
                    //这段二进制不需要处理直接保存为二进制序列
                    if (type == PropertieType_1.PropertieType.listByte) {
                        var bufferLen = br.readInt32();
                        classObj = br.readBytes(bufferLen);
                    }
                    else if (type == PropertieType_1.PropertieType.listFloat) {
                        var bufferLen = br.readInt32();
                        var buffer = br["buffer"];
                        br.r_offset = Math.ceil(br.r_offset / 4) * 4;
                        var floatArray = new Float32Array(buffer.buffer, br.r_offset, bufferLen);
                        br.r_offset += bufferLen * 4;
                        classObj = floatArray;
                    }
                    else if (type > -1 && type < 100) {
                        classObj = this.readTypes(br, type);
                    }
                    else if (type == PropertieType_1.PropertieType.listVector3) {
                        var listLen = br.readInt32();
                        var r_offset = br.r_offset;
                        var listV3Buffer = br.readBytes(listLen * 12).buffer;
                        this.readListV3(listV3Buffer, listLen, r_offset, cb);
                        return;
                    }
                    else if (type > 99 && type < 200) {
                        var listLen = br.readInt32();
                        var dyList = [];
                        for (var j = 0; j < listLen; j++) {
                            dyList.push(this.readTypes(br, type - 100));
                        }
                        classObj = dyList;
                    }
                    else if (type > 199 && type < 300) {
                        var listLen = br.readInt32();
                        var dyList = [];
                        for (var j = 0; j < listLen; j++) {
                            dyList.push(this.readTypes(br, type - 200));
                        }
                        classObj = dyList;
                    }
                    else if (type > 299 && type < 400) {
                        var listLen = br.readInt32();
                        var keyType = br.readInt16();
                        var valueType = br.readInt16();
                        var py_1 = new Map_7.cMap();
                        var _loop_4 = function (j) {
                            var key = this_4.readTypes(br, keyType);
                            this_4.readValue(br, valueType, function (v) {
                                py_1.set(key, v);
                            });
                        };
                        var this_4 = this;
                        for (var j = 0; j < listLen; j++) {
                            _loop_4(j);
                        }
                        classObj = py_1;
                    }
                    else if (type == PropertieType_1.PropertieType.typeClass) {
                        var classNameID = br.readUInt8();
                        var className = readEnums_1.nameEnum[classNameID];
                        var pdy = new m4m[className]();
                        classObj = this.readBytes(br, pdy);
                    }
                    else if (isComp) {
                        var listLen = br.readInt32();
                        var dyList = [];
                        for (var k = 0; k < listLen; k++) {
                            var classNameID = br.readUInt8();
                            var className = readEnums_1.nameEnum[classNameID];
                            var pdy = new m4m[className]();
                            pdy = this.readBytes(br, pdy);
                            dyList.push(pdy);
                        }
                        classObj = dyList;
                    }
                    else if (type == PropertieType_1.PropertieType.listClass || type == PropertieType_1.PropertieType.arrayClass) {
                        var listLen = br.readInt32();
                        var dyList = [];
                        var classNameID = br.readUInt8();
                        var className = readEnums_1.nameEnum[classNameID];
                        for (var k = 0; k < listLen; k++) {
                            var pdy = new m4m[className]();
                            pdy = this.readBytes(br, pdy);
                            dyList.push(pdy);
                        }
                        classObj = dyList;
                    }
                    cb(classObj);
                    // return classObj;
                };
                //预设解析方法的基础数据类型
                // tslint:disable-next-line: cyclomatic-complexity
                testReadTool.readTypes = function (br, type) {
                    var dy = null;
                    // tslint:disable-next-line: switch-default
                    switch (type) {
                        case PropertieType_1.PropertieType.typeString:
                            //读取字符串长度，如果等于255则再次读取长度，最后计算总长度，按照总长度反序列化为字符串
                            var stringLen = br.readUInt8();
                            var nowLen = stringLen;
                            while (nowLen >= 255) {
                                nowLen = br.readUInt8();
                                stringLen += nowLen;
                            }
                            dy = br.readUTFByLen(stringLen);
                            break;
                        case PropertieType_1.PropertieType.typeByte:
                            dy = br.readUInt8();
                            break;
                        case PropertieType_1.PropertieType.typeSByte:
                            dy = br.readInt8();
                            break;
                        case PropertieType_1.PropertieType.typeInt16:
                            dy = br.readInt16();
                            break;
                        case PropertieType_1.PropertieType.typeUInt16:
                            dy = br.readUInt16();
                            break;
                        case PropertieType_1.PropertieType.typeInt32:
                            dy = br.readInt32();
                            break;
                        case PropertieType_1.PropertieType.typeUInt32:
                            dy = br.readUInt32();
                            break;
                        case PropertieType_1.PropertieType.typeInt64:
                            dy = br.readLong();
                            break;
                        case PropertieType_1.PropertieType.typeUInt64:
                            dy = br.readULong();
                            break;
                        case PropertieType_1.PropertieType.typeFloat:
                            dy = br.readSingle();
                            break;
                        case PropertieType_1.PropertieType.typeLong:
                            dy = br.readLong();
                            break;
                        case PropertieType_1.PropertieType.typeDouble:
                            dy = br.readDouble();
                            break;
                        case PropertieType_1.PropertieType.typeBool:
                            dy = br.readBoolean();
                            break;
                        case PropertieType_1.PropertieType.typeVector2:
                            dy = m4m.poolv2();
                            // let v2Byte = br.readByte();
                            // dy.x = (v2Byte & 2) == 0 ? 0 : br.readSingle();
                            // dy.y = (v2Byte & 1) == 0 ? 0 : br.readSingle();
                            var v2x = br.readSingle();
                            var v2y = br.readSingle();
                            dy.x = v2x;
                            dy.y = v2y;
                            break;
                        case PropertieType_1.PropertieType.typeVector3:
                            dy = m4m.poolv3();
                            // let v3Byte = br.readByte();
                            // dy.x = (v3Byte & 4) == 0 ? 0 : br.readSingle();
                            // dy.y = (v3Byte & 2) == 0 ? 0 : br.readSingle();
                            // dy.z = (v3Byte & 1) == 0 ? 0 : br.readSingle();
                            var v3x = br.readSingle();
                            var v3y = br.readSingle();
                            var v3z = br.readSingle();
                            dy.x = v3x;
                            dy.y = v3y;
                            dy.z = v3z;
                            break;
                        case PropertieType_1.PropertieType.typeColor:
                            dy = m4m.poolcolor();
                            // let coByte = br.readByte();
                            // dy.r = (coByte & 8) == 0 ? 0 : br.readSingle();
                            // dy.g = (coByte & 4) == 0 ? 0 : br.readSingle();
                            // dy.b = (coByte & 2) == 0 ? 0 : br.readSingle();
                            // dy.a = (coByte & 1) == 0 ? 0 : br.readSingle();
                            var cor = br.readSingle();
                            var cog = br.readSingle();
                            var cob = br.readSingle();
                            var coa = br.readSingle();
                            dy.r = cor;
                            dy.g = cog;
                            dy.b = cob;
                            dy.a = coa;
                            break;
                        case PropertieType_1.PropertieType.typeVector4:
                        case PropertieType_1.PropertieType.typeQuaternion:
                            dy = m4m.poolquat();
                            // let v4Byte = br.readByte();
                            // dy.x = (v4Byte & 8) == 0 ? 0 : br.readSingle();
                            // dy.y = (v4Byte & 4) == 0 ? 0 : br.readSingle();
                            // dy.z = (v4Byte & 2) == 0 ? 0 : br.readSingle();
                            // dy.w = (v4Byte & 1) == 0 ? 0 : br.readSingle();
                            var qux = br.readSingle();
                            var quy = br.readSingle();
                            var quz = br.readSingle();
                            var quw = br.readSingle();
                            dy.x = qux;
                            dy.y = quy;
                            dy.z = quz;
                            dy.w = quw;
                            break;
                        case PropertieType_1.PropertieType.typeNumber4:
                            dy = new number4_1.number4();
                            // let n4Byte = br.readByte();
                            // dy.v0 = (n4Byte & 8) == 0 ? 0 : br.readSingle();
                            // dy.v1 = (n4Byte & 4) == 0 ? 0 : br.readSingle();
                            // dy.v2 = (n4Byte & 2) == 0 ? 0 : br.readSingle();
                            // dy.v3 = (n4Byte & 1) == 0 ? 0 : br.readSingle();
                            var n40 = br.readSingle();
                            var n41 = br.readSingle();
                            var n42 = br.readSingle();
                            var n43 = br.readSingle();
                            dy.v0 = n40;
                            dy.v1 = n41;
                            dy.v2 = n42;
                            dy.v3 = n43;
                            break;
                        case PropertieType_1.PropertieType.typePoseBoneMatrix:
                            dy = new PoseBoneMatrix_1.PoseBoneMatrix();
                            dy.r = this.readTypes(br, PropertieType_1.PropertieType.typeQuaternion);
                            dy.t = this.readTypes(br, PropertieType_1.PropertieType.typeVector3);
                            break;
                        case PropertieType_1.PropertieType.typeTPoseInfo:
                            dy = new tPoseInfo_1.tPoseInfo();
                            dy.name = this.readTypes(br, PropertieType_1.PropertieType.typeString);
                            dy.tposeq = this.readTypes(br, PropertieType_1.PropertieType.typeQuaternion);
                            dy.tposep = this.readTypes(br, PropertieType_1.PropertieType.typeVector3);
                    }
                    return dy;
                };
                testReadTool.classType = m4m["testReadTool"] = testReadTool;
                // public static async loadArrayBuffera(url: string, onFishih: Function = null) {
                //     let loadFile = LoaderManage.Instance.load(url, onFishih);
                //     let buffer = await loadFile.load();
                //     // let loader = new Loader();
                //     // LoaderManage.Instance.loaders.set(url, loader);
                //     // let buffer = await loader.load();
                //     return buffer as ArrayBuffer;
                // }
                // "Resources/props/TESTAsset/role_middle/PF_PlayerSharkReef/resources/PF_PlayerSharkReef_Json.json"
                testReadTool.tempListString = new Map_7.cMap();
                testReadTool.timer = new Map_7.cMap();
                // public static async loadABFFromJson(url: string) {
                //     // this.timer.set(url + 1, Date.now());
                //     let json = await testCreat.loadJson(url);
                //     // let nowT = Date.now();
                //     // console.error(" 加载文件   " + url + "    " + (nowT - this.timer.get(url + 1)));
                //     // this.timer.set(url + 1, nowT);
                //     // let files = JSON.parse(json);
                //     return json
                // }
                testReadTool.index = 0;
                /**
                 * 解析数据
                 * @param br
                 * @param type
                 */
                testReadTool.aaaaaaa = 0;
                testReadTool.aaaaaaabbbbbbbbbb = 0;
                testReadTool.TypeListCount = new Map_7.cMap();
                return testReadTool;
            }()));
            //暴露出 类，微信前端使用
            if (m4m) {
                if (!m4m["test"]) {
                    m4m["test"] = {};
                }
                m4m["test"].testReadTool = testReadTool;
            }
        }
    };
});
System.register("Loader/otherPlan/dataType/Bounds", [], function (exports_57, context_57) {
    "use strict";
    var Bounds;
    var __moduleName = context_57 && context_57.id;
    return {
        setters: [],
        execute: function () {
            exports_57("Bounds", Bounds = /** @class */ (function () {
                function Bounds() {
                    this.extents = m4m.poolv3();
                    this.size = m4m.poolv3();
                    this.center = m4m.poolv3();
                    this.min = m4m.poolv3();
                    this.max = m4m.poolv3();
                }
                Bounds.classType = m4m["Bounds"] = Bounds;
                return Bounds;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/Mesh", ["Loader/otherPlan/dataType/AssetBundleFileInfo", "Loader/otherPlan/dataType/Bounds"], function (exports_58, context_58) {
    "use strict";
    var AssetBundleFileInfo_1, Bounds_1, Mesh, subMeshInfo;
    var __moduleName = context_58 && context_58.id;
    return {
        setters: [
            function (AssetBundleFileInfo_1_1) {
                AssetBundleFileInfo_1 = AssetBundleFileInfo_1_1;
            },
            function (Bounds_1_1) {
                Bounds_1 = Bounds_1_1;
            }
        ],
        execute: function () {
            exports_58("Mesh", Mesh = /** @class */ (function (_super) {
                __extends(Mesh, _super);
                function Mesh() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.className = "";
                    _this.meshName = "";
                    _this.originVF = 0;
                    _this.bounds = new Bounds_1.Bounds();
                    _this.posCount = 0;
                    _this.position = [];
                    _this.color = [];
                    _this.colorex = [];
                    _this.normal = [];
                    _this.UV0 = [];
                    _this.UV1 = [];
                    _this.tangent = [];
                    _this.blendIndex = [];
                    _this.blendWeight = [];
                    _this.vec10tpose = [];
                    _this.trisindex = [];
                    _this.subMesh = [];
                    _this.minimum = m4m.poolv3();
                    _this.maximum = m4m.poolv3();
                    return _this;
                }
                Mesh.classType = m4m["Mesh"] = Mesh;
                return Mesh;
            }(AssetBundleFileInfo_1.AssetBundleFileInfo)));
            subMeshInfo = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function subMeshInfo() {
                    this.matIndex = 0;
                    this.useVertexIndex = 0;
                    this.line = false;
                    this.start = 0;
                    this.size = 0;
                }
                subMeshInfo.classType = m4m["subMeshInfo"] = subMeshInfo;
                return subMeshInfo;
            }());
        }
    };
});
System.register("Loader/otherPlan/dataType/mapUniInfo", [], function (exports_59, context_59) {
    "use strict";
    var mapUniInfo;
    var __moduleName = context_59 && context_59.id;
    return {
        setters: [],
        execute: function () {
            exports_59("mapUniInfo", mapUniInfo = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function mapUniInfo() {
                    this.type = 0;
                    this.value = "";
                }
                mapUniInfo.classType = m4m["mapUniInfo"] = mapUniInfo;
                return mapUniInfo;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/Mat", ["Data/Map", "Loader/otherPlan/dataType/AssetBundleFileInfo"], function (exports_60, context_60) {
    "use strict";
    var Map_8, AssetBundleFileInfo_2, Mat;
    var __moduleName = context_60 && context_60.id;
    return {
        setters: [
            function (Map_8_1) {
                Map_8 = Map_8_1;
            },
            function (AssetBundleFileInfo_2_1) {
                AssetBundleFileInfo_2 = AssetBundleFileInfo_2_1;
            }
        ],
        execute: function () {
            exports_60("Mat", Mat = /** @class */ (function (_super) {
                __extends(Mat, _super);
                function Mat() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.shader = "";
                    _this.srcshader = "";
                    _this.queue = 0;
                    _this.mapUniform = new Map_8.cMap();
                    _this.InstanceID = "";
                    return _this;
                }
                Mat.classType = m4m["Mat"] = Mat;
                return Mat;
            }(AssetBundleFileInfo_2.AssetBundleFileInfo)));
        }
    };
});
System.register("Loader/otherPlan/dataType/subClip", [], function (exports_61, context_61) {
    "use strict";
    var subClip;
    var __moduleName = context_61 && context_61.id;
    return {
        setters: [],
        execute: function () {
            exports_61("subClip", subClip = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function subClip() {
                    this.name = "";
                    this.loop = false;
                    this.startframe = 0;
                    this.endframe = 0;
                }
                subClip.classType = m4m["subClip"] = subClip;
                return subClip;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/Aniclip", ["Data/Map"], function (exports_62, context_62) {
    "use strict";
    var Map_9, Aniclip;
    var __moduleName = context_62 && context_62.id;
    return {
        setters: [
            function (Map_9_1) {
                Map_9 = Map_9_1;
            }
        ],
        execute: function () {
            exports_62("Aniclip", Aniclip = /** @class */ (function () {
                function Aniclip() {
                    this.fileName = "";
                    this.aniclipName = "";
                    this.fps = 0;
                    this.hasScaled = false;
                    this.loop = false;
                    this.boneCount = 0;
                    this.bones = [];
                    this.indexDic = new Map_9.cMap();
                    this.subclipCount = 0;
                    this.subclips = [];
                    this.frameCount = 0;
                    this.frames = new Map_9.cMap();
                }
                Aniclip.classType = m4m["Aniclip"] = Aniclip;
                return Aniclip;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/keyFrame", [], function (exports_63, context_63) {
    "use strict";
    var keyFrame;
    var __moduleName = context_63 && context_63.id;
    return {
        setters: [],
        execute: function () {
            exports_63("keyFrame", keyFrame = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function keyFrame() {
                    this.time = 0;
                    this.value = [];
                }
                keyFrame.classType = m4m["keyFrame"] = keyFrame;
                return keyFrame;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/curve", [], function (exports_64, context_64) {
    "use strict";
    var curve;
    var __moduleName = context_64 && context_64.id;
    return {
        setters: [],
        execute: function () {
            exports_64("curve", curve = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function curve() {
                    this.path = "";
                    this.type = "";
                    this.propertyName = "";
                    this.keyFrames = [];
                }
                curve.classType = m4m["curve"] = curve;
                return curve;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/KeyFrameAnimtionClip", ["Loader/otherPlan/dataType/AssetBundleFileInfo"], function (exports_65, context_65) {
    "use strict";
    var AssetBundleFileInfo_3, KeyFrameAnimtionClip;
    var __moduleName = context_65 && context_65.id;
    return {
        setters: [
            function (AssetBundleFileInfo_3_1) {
                AssetBundleFileInfo_3 = AssetBundleFileInfo_3_1;
            }
        ],
        execute: function () {
            exports_65("KeyFrameAnimtionClip", KeyFrameAnimtionClip = /** @class */ (function (_super) {
                __extends(KeyFrameAnimtionClip, _super);
                function KeyFrameAnimtionClip() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.tag = "";
                    _this.frameRate = 0;
                    _this.KeyFrameAnimtionlength = 0;
                    _this.wrapMode = 0;
                    _this.curves = [];
                    return _this;
                }
                KeyFrameAnimtionClip.classType = m4m["KeyFrameAnimtionClip"] = KeyFrameAnimtionClip;
                return KeyFrameAnimtionClip;
            }(AssetBundleFileInfo_3.AssetBundleFileInfo)));
        }
    };
});
System.register("Loader/otherPlan/dataType/nodeComponent", [], function (exports_66, context_66) {
    "use strict";
    var nodeComponent, boxcollider, aniplayer, skinnedMeshRenderer, meshFilter, meshRenderer, meshcollider, asbone, particlesystem, f14effCmop, linerendererCmop, keyFrameAniPlayer, spherecollider, godray, waterComp;
    var __moduleName = context_66 && context_66.id;
    return {
        setters: [],
        execute: function () {
            exports_66("nodeComponent", nodeComponent = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function nodeComponent() {
                    this.cmop = "";
                }
                nodeComponent.classType = m4m["nodeComponent"] = nodeComponent;
                return nodeComponent;
            }()));
            exports_66("boxcollider", boxcollider = /** @class */ (function (_super) {
                __extends(boxcollider, _super);
                // tslint:disable-next-line: class-name
                function boxcollider() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "boxcollider";
                    _this.center = m4m.poolv3();
                    _this.size = m4m.poolv3();
                    return _this;
                }
                boxcollider.classType = m4m["boxcollider"] = boxcollider;
                return boxcollider;
            }(nodeComponent)));
            exports_66("aniplayer", aniplayer = /** @class */ (function (_super) {
                __extends(aniplayer, _super);
                // tslint:disable-next-line: class-name
                function aniplayer() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "aniplayer";
                    _this.clips = [];
                    _this.bones = [];
                    _this.startPos = [];
                    _this.animNames = [];
                    return _this;
                }
                aniplayer.classType = m4m["aniplayer"] = aniplayer;
                return aniplayer;
            }(nodeComponent)));
            exports_66("skinnedMeshRenderer", skinnedMeshRenderer = /** @class */ (function (_super) {
                __extends(skinnedMeshRenderer, _super);
                // tslint:disable-next-line: class-name
                function skinnedMeshRenderer() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "skinnedMeshRenderer";
                    _this.materials = [];
                    _this.center = m4m.poolv3();
                    _this.size = m4m.poolv3();
                    _this.mesh = "";
                    _this.rootBone = 0;
                    _this.bones = [];
                    _this.player = 0;
                    return _this;
                }
                skinnedMeshRenderer.classType = m4m["skinnedMeshRenderer"] = skinnedMeshRenderer;
                return skinnedMeshRenderer;
            }(nodeComponent)));
            exports_66("meshFilter", meshFilter = /** @class */ (function (_super) {
                __extends(meshFilter, _super);
                // tslint:disable-next-line: class-name
                function meshFilter() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "meshFilter";
                    _this.mesh = "";
                    return _this;
                }
                meshFilter.classType = m4m["meshFilter"] = meshFilter;
                return meshFilter;
            }(nodeComponent)));
            exports_66("meshRenderer", meshRenderer = /** @class */ (function (_super) {
                __extends(meshRenderer, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function meshRenderer() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "meshRenderer";
                    _this.materials = [];
                    _this.lightmapIndex = 0;
                    _this.lightmapScaleOffset = m4m.poolquat();
                    _this.layer = 0;
                    return _this;
                }
                meshRenderer.classType = m4m["meshRenderer"] = meshRenderer;
                return meshRenderer;
            }(nodeComponent)));
            exports_66("meshcollider", meshcollider = /** @class */ (function (_super) {
                __extends(meshcollider, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function meshcollider() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "meshcollider";
                    return _this;
                }
                meshcollider.classType = m4m["meshcollider"] = meshcollider;
                return meshcollider;
            }(nodeComponent)));
            exports_66("asbone", asbone = /** @class */ (function (_super) {
                __extends(asbone, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function asbone() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "asbone";
                    return _this;
                }
                asbone.classType = m4m["asbone"] = asbone;
                return asbone;
            }(nodeComponent)));
            exports_66("particlesystem", particlesystem = /** @class */ (function (_super) {
                __extends(particlesystem, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function particlesystem() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "particlesystem";
                    _this.particleSystemData = "";
                    _this.material = "";
                    _this.mesh = "";
                    _this.sortingFudge = 0;
                    _this.pivot = m4m.poolv3();
                    return _this;
                }
                particlesystem.classType = m4m["particlesystem"] = particlesystem;
                return particlesystem;
            }(nodeComponent)));
            exports_66("f14effCmop", f14effCmop = /** @class */ (function (_super) {
                __extends(f14effCmop, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function f14effCmop() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "f14effCmop";
                    _this.f14eff = "";
                    _this.delay = 0;
                    return _this;
                }
                f14effCmop.classType = m4m["f14effCmop"] = f14effCmop;
                return f14effCmop;
            }(nodeComponent)));
            exports_66("linerendererCmop", linerendererCmop = /** @class */ (function (_super) {
                __extends(linerendererCmop, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function linerendererCmop() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "linerendererCmop";
                    _this.lineRendererData = "";
                    _this.material = "";
                    return _this;
                }
                linerendererCmop.classType = m4m["linerendererCmop"] = linerendererCmop;
                return linerendererCmop;
            }(nodeComponent)));
            exports_66("keyFrameAniPlayer", keyFrameAniPlayer = /** @class */ (function (_super) {
                __extends(keyFrameAniPlayer, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function keyFrameAniPlayer() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "keyFrameAniPlayer";
                    _this.clips = [];
                    return _this;
                }
                keyFrameAniPlayer.classType = m4m["keyFrameAniPlayer"] = keyFrameAniPlayer;
                return keyFrameAniPlayer;
            }(nodeComponent)));
            exports_66("spherecollider", spherecollider = /** @class */ (function (_super) {
                __extends(spherecollider, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function spherecollider() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "spherecollider";
                    _this.center = m4m.poolv3();
                    _this.radius = 0;
                    return _this;
                }
                spherecollider.classType = m4m["spherecollider"] = spherecollider;
                return spherecollider;
            }(nodeComponent)));
            exports_66("godray", godray = /** @class */ (function (_super) {
                __extends(godray, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function godray() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "godray";
                    return _this;
                }
                godray.classType = m4m["godray"] = godray;
                return godray;
            }(nodeComponent)));
            exports_66("waterComp", waterComp = /** @class */ (function (_super) {
                __extends(waterComp, _super);
                // tslint:disable-next-line: max-classes-per-file class-name
                function waterComp() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.cmop = "water";
                    _this.copyFrom = 0;
                    _this.defNumVertsPerRow = 0;
                    return _this;
                }
                waterComp.classType = m4m["water"] = waterComp;
                return waterComp;
            }(nodeComponent)));
        }
    };
});
System.register("Loader/otherPlan/dataType/gameObjectInfo", [], function (exports_67, context_67) {
    "use strict";
    var gameObjectInfo;
    var __moduleName = context_67 && context_67.id;
    return {
        setters: [],
        execute: function () {
            exports_67("gameObjectInfo", gameObjectInfo = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function gameObjectInfo() {
                    this.layer = 0;
                    this.tag = "";
                    this.components = [];
                }
                gameObjectInfo.classType = m4m["gameObjectInfo"] = gameObjectInfo;
                return gameObjectInfo;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/Prefab", ["Loader/otherPlan/dataType/AssetBundleFileInfo", "Loader/otherPlan/dataType/gameObjectInfo"], function (exports_68, context_68) {
    "use strict";
    var AssetBundleFileInfo_4, gameObjectInfo_1, Prefab;
    var __moduleName = context_68 && context_68.id;
    return {
        setters: [
            function (AssetBundleFileInfo_4_1) {
                AssetBundleFileInfo_4 = AssetBundleFileInfo_4_1;
            },
            function (gameObjectInfo_1_1) {
                gameObjectInfo_1 = gameObjectInfo_1_1;
            }
        ],
        execute: function () {
            exports_68("Prefab", Prefab = /** @class */ (function (_super) {
                __extends(Prefab, _super);
                function Prefab() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.tranName = "";
                    _this.localRotate = m4m.poolquat();
                    _this.localTranslate = m4m.poolv3();
                    _this.localScale = m4m.poolv3();
                    _this.gameObject = new gameObjectInfo_1.gameObjectInfo();
                    _this.children = [];
                    _this.insid = 0;
                    return _this;
                }
                Prefab.classType = m4m["Prefab"] = Prefab;
                return Prefab;
            }(AssetBundleFileInfo_4.AssetBundleFileInfo)));
        }
    };
});
System.register("Loader/otherPlan/dataType/ImageSetting", ["Loader/otherPlan/dataType/AssetBundleFileInfo"], function (exports_69, context_69) {
    "use strict";
    var AssetBundleFileInfo_5, ImageSetting;
    var __moduleName = context_69 && context_69.id;
    return {
        setters: [
            function (AssetBundleFileInfo_5_1) {
                AssetBundleFileInfo_5 = AssetBundleFileInfo_5_1;
            }
        ],
        execute: function () {
            exports_69("ImageSetting", ImageSetting = /** @class */ (function (_super) {
                __extends(ImageSetting, _super);
                function ImageSetting() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.imageName = "";
                    _this.filterMode = "";
                    _this.format = "";
                    _this.mipmap = false;
                    _this.wrap = "";
                    _this.premultiplyAlpha = false;
                    _this.imageGuid = "";
                    return _this;
                }
                ImageSetting.classType = m4m["ImageSetting"] = ImageSetting;
                return ImageSetting;
            }(AssetBundleFileInfo_5.AssetBundleFileInfo)));
        }
    };
});
System.register("Loader/otherPlan/ktx", [], function (exports_70, context_70) {
    "use strict";
    var KTXParse;
    var __moduleName = context_70 && context_70.id;
    return {
        setters: [],
        execute: function () {
            exports_70("KTXParse", KTXParse = /** @class */ (function () {
                /**
                 *
                 * for description see https://www.khronos.org/opengles/sdk/tools/KTX/
                 * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/
                 *
                 * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Misc/khronosTextureContainer.ts
                 */
                function KTXParse() {
                }
                /**
                 *
                 * @param gl
                 * @param arrayBuffer contents of the KTX container file
                 * @param facesExpected should be either 1 or 6, based whether a cube texture or or
                 */
                // tslint:disable-next-line: cyclomatic-complexity
                KTXParse.parse = function (gl, arrayBuffer, facesExpected, loadMipmaps) {
                    if (facesExpected === void 0) { facesExpected = 1; }
                    if (loadMipmaps === void 0) { loadMipmaps = true; }
                    var identifier = new Uint8Array(arrayBuffer, 0, 12);
                    // tslint:disable-next-line: max-line-length
                    if (identifier[0] !== 0xAB || identifier[1] !== 0x4B || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xBB || identifier[8] !== 0x0D || identifier[9] !== 0x0A || identifier[10] !== 0x1A || identifier[11] !== 0x0A) 
                    // if (identifier[0] !== 0xAB || identifier[1] !== 0x4B)
                    {
                        //     console.error("texture missing KTX identifier");
                        return;
                    }
                    gl.getExtension("WEBGL_compressed_texture_etc1");
                    // load the reset of the header in native 32 bit uint
                    var dataSize = Uint32Array.BYTES_PER_ELEMENT;
                    // tslint:disable-next-line: binary-expression-operand-order
                    var headerDataView = new DataView(arrayBuffer, 12, 13 * dataSize);
                    var endianness = headerDataView.getUint32(0, true);
                    var littleEndian = endianness === 0x04030201;
                    // tslint:disable-next-line: binary-expression-operand-order
                    var glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures
                    // tslint:disable-next-line: binary-expression-operand-order
                    var glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)
                    // tslint:disable-next-line: max-line-length
                    // tslint:disable-next-line: binary-expression-operand-order
                    var pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)
                    // tslint:disable-next-line: binary-expression-operand-order
                    var pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)
                    // tslint:disable-next-line: binary-expression-operand-order
                    var pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)
                    // tslint:disable-next-line: binary-expression-operand-order
                    var numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays
                    // tslint:disable-next-line: binary-expression-operand-order
                    var numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6
                    // tslint:disable-next-line: max-line-length
                    // tslint:disable-next-line: binary-expression-operand-order max-line-length
                    var numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures
                    // tslint:disable-next-line: binary-expression-operand-order
                    var bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data
                    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.
                    if (glType !== 0) {
                        console.warn("only compressed formats currently supported");
                        return null;
                        // tslint:disable-next-line: unnecessary-else
                    }
                    else {
                        // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.
                        numberOfMipmapLevels = Math.max(1, numberOfMipmapLevels);
                    }
                    if (pixelHeight === 0 || pixelDepth !== 0) {
                        console.warn("only 2D textures currently supported");
                        return null;
                    }
                    if (numberOfArrayElements !== 0) {
                        console.warn("texture arrays not currently supported");
                        return null;
                    }
                    if (numberOfFaces !== facesExpected) {
                        console.warn("number of faces expected" + facesExpected + ", but found " + numberOfFaces);
                        return null;
                    }
                    // 初始化纹理
                    var t2d = new m4m.render.glTexture2D(gl);
                    t2d.format = m4m.render.TextureFormatEnum.KTX;
                    var target = gl.TEXTURE_2D;
                    gl.activeTexture(gl.TEXTURE0);
                    gl.bindTexture(target, t2d.texture);
                    // initialize width & height for level 1
                    var dataOffset = KTXParse.HEADER_LEN + bytesOfKeyValueData;
                    var width = pixelWidth;
                    var height = pixelHeight;
                    var mipmapCount = loadMipmaps ? numberOfMipmapLevels : 1;
                    for (var level = 0; level < mipmapCount; level++) {
                        var imageSize = new Int32Array(arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps
                        dataOffset += 4; // size of the image + 4 for the imageSize field
                        for (var face = 0; face < numberOfFaces; face++) {
                            var byteArray = new Uint8Array(arrayBuffer, dataOffset, imageSize);
                            gl.compressedTexImage2D(target, level, glInternalFormat, width, height, 0, byteArray);
                            dataOffset += imageSize;
                            dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image
                        }
                        width = Math.max(1, width * 0.5);
                        height = Math.max(1, height * 0.5);
                    }
                    if (mipmapCount > 1) {
                        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                    }
                    else {
                        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                    }
                    return t2d;
                };
                // tslint:disable-next-line: binary-expression-operand-order
                KTXParse.HEADER_LEN = 12 + (13 * 4); // identifier + header elements (not including key value meta-data pairs)
                return KTXParse;
            }()));
        }
    };
});
System.register("Loader/otherPlan/pvr", [], function (exports_71, context_71) {
    "use strict";
    var testPvrParse, ChannelTypes;
    var __moduleName = context_71 && context_71.id;
    return {
        setters: [],
        execute: function () {
            // tslint:disable-next-line: class-name
            testPvrParse = /** @class */ (function () {
                function testPvrParse(gl) {
                    this.height = 1;
                    this.width = 1;
                    this.version = 0x03525650;
                    this.flags = 0;
                    this.pixelFormatH = 0;
                    this.pixelFormatL = 0;
                    // private colourSpace = 0;
                    this.channelType = 0;
                    this.depth = 1;
                    // private numSurfaces = 1;
                    this.numFaces = 1;
                    this.mipMapCount = 1;
                    this.metaDataSize = 0;
                    this.gl = gl;
                }
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 解析pvr图片
                 * @param _buffer 图片二进制数据
                 * @version m4m 1.0
                 */
                testPvrParse.prototype.parse = function (_buffer) {
                    var ar = new Uint8Array(_buffer);
                    // tslint:disable-next-line: no-parameter-reassignment
                    _buffer = null;
                    var tool = new m4m.io.binTool();
                    tool.writeUint8Array(ar);
                    this.version = tool.readUInt32();
                    if (this.version == 0x03525650) {
                        var tex = this.parseV3(tool);
                        tool.dispose();
                        return tex;
                    }
                    else if (this.version === 0x50565203) {
                        //v2
                        console.error("v2");
                    }
                    else {
                        console.error("pvr parse error!:" + this.version);
                        return null;
                    }
                };
                testPvrParse.prototype.parseV3 = function (tool) {
                    this.flags = tool.readUInt32(); //0:没有设置  0x02 ：alpha预乘
                    if (this.flags == 0) {
                        this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
                    }
                    else {
                        this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
                    } //开启预乘
                    this.pixelFormatH = tool.readUInt32(); //高4位 rgba
                    // tslint:disable-next-line: max-line-length
                    this.pixelFormatL = tool.readUInt32(); //低4位 8888/4444/5551/565    高四位和低四位共同决定了其格式RGBA（32位）、RGBA4（16位）、    RGB、RGB5_A1、RGB565、  LUMINANCE_ALPHA、LUMINANCE、ALPHA
                    // this.colourSpace = tool.readUInt32();//0:linear rgb   1:srgb
                    tool.readBytes(4);
                    this.channelType = tool.readUInt32(); //格式
                    this.height = tool.readUInt32();
                    this.width = tool.readUInt32();
                    this.depth = tool.readUInt32();
                    // this.numSurfaces = tool.readUInt32();
                    tool.readBytes(4);
                    this.numFaces = tool.readUInt32();
                    this.mipMapCount = tool.readUInt32();
                    this.metaDataSize = tool.readUInt32();
                    tool.readBytes(this.metaDataSize);
                    var engineFormat;
                    var textureFormat;
                    var textureType;
                    var t2d = new m4m.render.glTexture2D(this.gl);
                    var ext = m4m.framework.sceneMgr.app.webgl.extensions.WEBGL_compressed_texture_pvrtc;
                    switch (this.pixelFormatH) {
                        case 0:
                            textureFormat = ext.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                            engineFormat = m4m.render.TextureFormatEnum.PVRTC2_RGB;
                            break;
                        case 1:
                            textureFormat = ext.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                            engineFormat = m4m.render.TextureFormatEnum.PVRTC2_RGBA;
                            break;
                        case 2:
                            textureFormat = ext.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                            engineFormat = m4m.render.TextureFormatEnum.PVRTC4_RGB;
                            break;
                        case 3:
                            textureFormat = ext.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                            engineFormat = m4m.render.TextureFormatEnum.PVRTC4_RGBA;
                            break;
                        default:
                            textureFormat = this.gl.RGB;
                            engineFormat = m4m.render.TextureFormatEnum.RGB;
                            console.log("unknow pixel format::" + this.pixelFormatH);
                    }
                    t2d.format = engineFormat;
                    // tslint:disable-next-line: switch-default
                    switch (this.channelType) {
                        case ChannelTypes.UnsignedByteNorm:
                            textureType = this.gl.UNSIGNED_BYTE;
                            break;
                        case ChannelTypes.UnsignedShortNorm:
                    }
                    var target = this.gl.TEXTURE_2D;
                    if (this.numFaces > 1) {
                        target = this.gl.TEXTURE_CUBE_MAP;
                    }
                    //v3
                    this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, 1); //对齐方式
                    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, 0); //不对Y翻转
                    this.gl.activeTexture(this.gl.TEXTURE0);
                    this.gl.bindTexture(target, t2d.texture);
                    if (this.numFaces > 1) {
                        target = this.gl.TEXTURE_CUBE_MAP_POSITIVE_X;
                    }
                    function textureLevelSize(format, width, height) {
                        var ext = m4m.framework.sceneMgr.app.webgl.extensions.WEBGL_compressed_texture_pvrtc;
                        switch (format) {
                            case ext.COMPRESSED_RGB_S3TC_DXT1_EXT:
                            case ext.COMPRESSED_RGB_ATC_WEBGL:
                            case ext.COMPRESSED_RGB_ETC1_WEBGL:
                                return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;
                            case ext.COMPRESSED_RGBA_S3TC_DXT3_EXT:
                            case ext.COMPRESSED_RGBA_S3TC_DXT5_EXT:
                            case ext.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL:
                            case ext.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL:
                                return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;
                            case ext.COMPRESSED_RGB_PVRTC_4BPPV1_IMG:
                            case ext.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:
                                return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);
                            case ext.COMPRESSED_RGB_PVRTC_2BPPV1_IMG:
                            case ext.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:
                                return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);
                            default:
                                return 0;
                        }
                    }
                    var offset = 0;
                    var _width = this.width;
                    var _height = this.height;
                    for (var i = 0; i < this.mipMapCount; ++i) {
                        var levelSize = textureLevelSize(textureFormat, _width, _height);
                        var data = tool.readBytes(levelSize);
                        this.gl.compressedTexImage2D(this.gl.TEXTURE_2D, i, textureFormat, _width, _height, 0, data);
                        _width = _width >> 1;
                        if (_width < 1) {
                            _width = 1;
                        }
                        _height = _height >> 1;
                        if (_height < 1) {
                            _height = 1;
                        }
                        offset += levelSize;
                    }
                    if (this.mipMapCount > 1) {
                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);
                    }
                    else {
                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
                    }
                    return t2d;
                };
                return testPvrParse;
            }());
            exports_71("testPvrParse", testPvrParse);
            (function (ChannelTypes) {
                ChannelTypes[ChannelTypes["UnsignedByteNorm"] = 0] = "UnsignedByteNorm";
                ChannelTypes[ChannelTypes["SignedByteNorm"] = 1] = "SignedByteNorm";
                ChannelTypes[ChannelTypes["UnsignedByte"] = 2] = "UnsignedByte";
                ChannelTypes[ChannelTypes["SignedByte"] = 3] = "SignedByte";
                ChannelTypes[ChannelTypes["UnsignedShortNorm"] = 4] = "UnsignedShortNorm";
                ChannelTypes[ChannelTypes["SignedShortNorm"] = 5] = "SignedShortNorm";
                ChannelTypes[ChannelTypes["UnsignedShort"] = 6] = "UnsignedShort";
                ChannelTypes[ChannelTypes["SignedShort"] = 7] = "SignedShort";
                ChannelTypes[ChannelTypes["UnsignedIntegerNorm"] = 8] = "UnsignedIntegerNorm";
                ChannelTypes[ChannelTypes["SignedIntegerNorm"] = 9] = "SignedIntegerNorm";
                ChannelTypes[ChannelTypes["UnsignedInteger"] = 10] = "UnsignedInteger";
                ChannelTypes[ChannelTypes["SignedInteger"] = 11] = "SignedInteger";
                ChannelTypes[ChannelTypes["SignedFloat"] = 12] = "SignedFloat";
                ChannelTypes[ChannelTypes["Float"] = 12] = "Float";
                ChannelTypes[ChannelTypes["UnsignedFloat"] = 13] = "UnsignedFloat";
            })(ChannelTypes || (ChannelTypes = {}));
        }
    };
});
System.register("Time/TimerData", ["Time/CTimer"], function (exports_72, context_72) {
    "use strict";
    var CTimer_1, TimerData;
    var __moduleName = context_72 && context_72.id;
    return {
        setters: [
            function (CTimer_1_1) {
                CTimer_1 = CTimer_1_1;
            }
        ],
        execute: function () {
            TimerData = /** @class */ (function () {
                function TimerData() {
                    this.id = 0;
                    //是否需要在loopTime时间 一直循环更新
                    this.isNeedLoop = false;
                    this.currentCount = 0;
                    this.count = -1;
                    this.loopTime = 0;
                    this.oldTime = 0;
                    this.pause = false;
                    this.countDownid = -1;
                    this.showLog = false;
                    this._isEnd = false;
                }
                Object.defineProperty(TimerData.prototype, "isEnd", {
                    get: function () {
                        return this._isEnd;
                    },
                    set: function (value) {
                        this._isEnd = value;
                        if (value) {
                            CTimer_1.CTimer.Instance.removeList.push(this);
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                TimerData.prototype.tick = function (nowTime) {
                    if (this.oldTime + this.loopTime <= nowTime) {
                        var timercount = Math.floor(Math.floor(nowTime - this.oldTime) / Math.floor(this.loopTime));
                        if (this.callback != null && this.pause == false) {
                            for (var i = 0; i < timercount; i++) {
                                if (this.countDownid == -1) {
                                    this.callback(this.id);
                                }
                                else {
                                    if (this.count == 1) {
                                        CTimer_1.CTimer.Instance.showConutDown(this.countDownid);
                                    }
                                    //LogManager.Warn("countDownid" + this.countDownid + "        " + this.currentCount + ">=" + this.count);
                                    this.callback(this.countDownid);
                                }
                                if (this.showLog) {
                                    // tslint:disable-next-line: max-line-length
                                    //LogManager.Warn("countDownid" + this.countDownid + " id:" + this.id + " count:" + this.count + "oldTime:" + this.oldTime + "  nowTime" + nowTime);
                                }
                                if (!this.isNeedLoop) {
                                    this.currentCount++;
                                }
                            }
                        }
                        this.oldTime = this.oldTime + timercount * this.loopTime;
                    }
                    if (!this.isNeedLoop) {
                        if (this.count == -1) {
                            return;
                        }
                        if (this.currentCount >= this.count) {
                            this.isEnd = true;
                        }
                    }
                };
                TimerData.prototype.disponse = function () {
                };
                return TimerData;
            }());
            exports_72("TimerData", TimerData);
        }
    };
});
System.register("Time/CTimer", ["Time/TimerData", "Time/TimeUtil", "Tools/FrameMgr"], function (exports_73, context_73) {
    "use strict";
    var TimerData_1, TimeUtil_2, FrameMgr_4, CTimer;
    var __moduleName = context_73 && context_73.id;
    return {
        setters: [
            function (TimerData_1_1) {
                TimerData_1 = TimerData_1_1;
            },
            function (TimeUtil_2_1) {
                TimeUtil_2 = TimeUtil_2_1;
            },
            function (FrameMgr_4_1) {
                FrameMgr_4 = FrameMgr_4_1;
            }
        ],
        execute: function () {
            exports_73("CTimer", CTimer = /** @class */ (function () {
                function CTimer() {
                    this.removeList = new Array();
                    this.list = new Array();
                    this.id = 0;
                    this.id = 0;
                    FrameMgr_4.FrameMgr.Add(this.Update, this);
                }
                Object.defineProperty(CTimer, "Instance", {
                    get: function () {
                        if (this.instance == null) {
                            this.instance = new CTimer();
                        }
                        return this.instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                CTimer.prototype.showTimer = function () {
                    for (var i = 0; i < this.list.length; i++) {
                        var item = this.list[i];
                        //    console.warn("list.Count" + this.list.length);
                        // tslint:disable-next-line: max-line-length
                        //  console.warn(item.id + "    item.countDownid:" + item.countDownid + " item.count" + item.count + "   item.oldTime" + item.oldTime + "   item.loopTime" + item.loopTime + "   " + item.isEnd);
                    }
                };
                CTimer.prototype.showConutDown = function (countDownid) {
                    for (var i = 0; i < this.list.length; i++) {
                        var item = this.list[i];
                        if (item.countDownid == countDownid) {
                            item.showLog = true;
                        }
                    }
                };
                /// <summary>
                /// 倒计时函数
                /// </summary>
                /// <param name="time"></param>
                /// <param name="rateTime"></param>
                /// <param name="callback"></param>
                /// <param name="completeCallback"></param>
                CTimer.prototype.countDown = function (time, rateTime, callback, completeCallback) {
                    this.id++;
                    var countDownid = this.id;
                    ///根据倒计时的频率算出需要倒计时的次数，然后最后一次不做更新，但是会发出完成事件
                    var count = Math.floor(time / rateTime) - 1;
                    if (time != 0) {
                        this.timer(rateTime, count, callback, countDownid);
                    }
                    this.timeDelay(time, completeCallback, countDownid);
                    return countDownid;
                };
                /// <summary>
                /// 暂停或继续回掉功能 pause true  暂停
                /// </summary>
                /// <param name="id"></param>
                CTimer.prototype.pause = function (id, pause) {
                    for (var i = 0; i < this.list.length; i++) {
                        var data = this.list[i];
                        if (data.id == id) {
                            data.pause = pause;
                        }
                    }
                };
                /// <summary>
                /// 直接将timer停止掉
                /// </summary>
                /// <param name="timerid"></param>
                CTimer.prototype.stop = function (timerid) {
                    for (var i = 0; i < this.list.length; i++) {
                        var data = this.list[i];
                        if (data.id == timerid) {
                            data.isEnd = true;
                        }
                    }
                };
                /// <summary>
                /// stopCountDown
                /// </summary>
                /// <param name="countDownid"></param>
                CTimer.prototype.stopCountDown = function (countDownid) {
                    if (countDownid == -1) {
                        return;
                    }
                    for (var i = 0; i < this.list.length; i++) {
                        var data = this.list[i];
                        if (data.countDownid == countDownid) {
                            data.isEnd = true;
                        }
                    }
                };
                /// <summary>
                /// 定时执行函数
                /// </summary>
                /// <param name="time"></param>
                /// <param name="count"></param>
                /// <param name="callback"></param>
                CTimer.prototype.timer = function (time, count, callback, countDownid) {
                    if (countDownid === void 0) { countDownid = -1; }
                    ///虽然delay时间是0但是也应该使用timedelay的方法来调用，因为delay的时间是通过配置或者具体需求来的，优化交给架构本身。所以这里做了特殊处理
                    if (time == 0) {
                        callback(countDownid);
                        return 0;
                    }
                    var data = new TimerData_1.TimerData();
                    data.count = count;
                    this.id++;
                    data.id = this.id;
                    if (countDownid != -1) {
                        data.countDownid = countDownid;
                    }
                    data.oldTime = TimeUtil_2.TimeUtil.realtimeSinceStartup;
                    data.callback = callback;
                    data.loopTime = time;
                    this.list.push(data);
                    return data.id;
                };
                /// <summary>
                /// 延迟执行函数
                /// </summary>
                /// <param name="delayTime"></param>
                /// <param name="callback"></param>
                /// <returns></returns>
                CTimer.prototype.timeDelay = function (delayTime, callback, countDownid) {
                    if (countDownid === void 0) { countDownid = -1; }
                    this.id++;
                    ///虽然delay时间是0但是也应该使用timedelay的方法来调用，因为delay的时间是通过配置或者具体需求来的，优化交给架构本身。所以这里做了特殊处理
                    if (delayTime == 0) {
                        callback(countDownid);
                        return 0;
                    }
                    var data = new TimerData_1.TimerData();
                    data.count = 1;
                    if (countDownid != -1) {
                        data.countDownid = countDownid;
                    }
                    data.id = this.id;
                    data.oldTime = TimeUtil_2.TimeUtil.realtimeSinceStartup;
                    data.callback = callback;
                    data.loopTime = delayTime;
                    this.list.push(data);
                    return data.id;
                };
                /// <summary>
                /// loopTime 循环执行函数
                /// </summary>
                /// <param name="loopTime"></param>
                /// <param name="callback"></param>
                /// <returns></returns>
                CTimer.prototype.loopTimeUpdate = function (loopTime, callback) {
                    this.id++;
                    if (loopTime == 0) {
                        console.error("CTimer Error: loopTime为0 不需要用这个方法  直接用Update每帧调用");
                        return 0;
                    }
                    var data = new TimerData_1.TimerData();
                    data.id = this.id;
                    data.isNeedLoop = true;
                    data.oldTime = TimeUtil_2.TimeUtil.realtimeSinceStartup;
                    data.callback = callback;
                    data.loopTime = loopTime;
                    this.list.push(data);
                    return data.id;
                };
                //计时器抛出计时事件时，可能会出现调用已经释放的类，
                //所以在for循环中加了一个异常捕获，
                //当出现异常的时候直接Remove掉所在的元素，同时抛出一次异常提示   
                CTimer.prototype.Update = function () {
                    var nowTime = TimeUtil_2.TimeUtil.realtimeSinceStartup;
                    for (var i = 0; i < this.list.length; i++) {
                        var data = this.list[i];
                        if (data == null) {
                            continue;
                        }
                        if (data.isEnd == false) {
                            data.tick(nowTime);
                        }
                    }
                    for (var k = 0; k < this.removeList.length; k++) {
                        var removeData = this.removeList[k];
                        var index = this.list.indexOf(removeData);
                        if (index != -1) {
                            this.list.splice(index, 1);
                        }
                    }
                    this.removeList.length = 0;
                };
                CTimer.testC = true;
                return CTimer;
            }()));
        }
    };
});
System.register("Loader/otherPlan/LoaderManage", ["Data/Map", "Time/CTimer", "Loader/otherPlan/Loader"], function (exports_74, context_74) {
    "use strict";
    var Map_10, CTimer_2, Loader_1, ResLoadType, LoadType, LoaderManage;
    var __moduleName = context_74 && context_74.id;
    return {
        setters: [
            function (Map_10_1) {
                Map_10 = Map_10_1;
            },
            function (CTimer_2_1) {
                CTimer_2 = CTimer_2_1;
            },
            function (Loader_1_1) {
                Loader_1 = Loader_1_1;
            }
        ],
        execute: function () {
            (function (ResLoadType) {
                ResLoadType[ResLoadType["NONE"] = 0] = "NONE";
                ResLoadType[ResLoadType["SCENE"] = 1] = "SCENE";
            })(ResLoadType || (ResLoadType = {}));
            exports_74("ResLoadType", ResLoadType);
            (function (LoadType) {
                LoadType[LoadType["ARRAYBUFFER"] = 0] = "ARRAYBUFFER";
                LoadType[LoadType["JSON"] = 1] = "JSON";
                LoadType[LoadType["IMAGE"] = 2] = "IMAGE";
            })(LoadType || (LoadType = {}));
            exports_74("LoadType", LoadType);
            exports_74("LoaderManage", LoaderManage = /** @class */ (function () {
                function LoaderManage() {
                    // public loaders: Dictionary = new Dictionary();
                    this.loaders = new Map_10.cMap();
                    /// <summary>
                    /// 正在加载中的loader列表
                    /// </summary>
                    this.currentLoaders = new Array();
                    /// <summary>
                    /// 所有等待加载的Loader列表
                    /// </summary>
                    this.waitLoaders = new Array();
                    /// <summary>
                    /// 只要产生加载文件即生成一个id;
                    /// </summary>
                    this.index = 0;
                    this.loadFailBackList = new Array();
                    //每间隔 1200 毫秒取一次 加入重试load
                    var timeID = CTimer_2.CTimer.Instance.loopTimeUpdate(1200, this.failBackFun.bind(this));
                }
                Object.defineProperty(LoaderManage, "Instance", {
                    get: function () {
                        if (this.instance == null) {
                            this.instance = new LoaderManage();
                        }
                        return this.instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                LoaderManage.prototype.load = function (url, onLoadFinished, data, loadType) {
                    if (data === void 0) { data = null; }
                    if (loadType === void 0) { loadType = LoadType.ARRAYBUFFER; }
                    var loader;
                    if (this.loaders.has(url)) {
                        loader = this.loaders.get(url);
                        if (loader && onLoadFinished) {
                            onLoadFinished(data);
                        }
                        else {
                            loader.addCallBack(onLoadFinished, data);
                        }
                    }
                    else {
                        loader = new Loader_1.Loader();
                        loader.loaderType = loadType;
                        this.loaders.set(url, loader);
                        loader.url = url;
                        loader.addCallBack(onLoadFinished, data);
                        // this.addLoader(loader);
                    }
                    return loader;
                };
                LoaderManage.prototype.startLoader = function () {
                    if (this.waitLoaders.length == 0 || LoaderManage.loaderCount <= this.currentLoaders.length) {
                        return;
                    }
                    var nextLoader = this.getNextLoader();
                    if (nextLoader != null) {
                        ///从等待加载的列表中移除,添加到当前加载列表中
                        var index = this.waitLoaders.indexOf(nextLoader);
                        if (index != -1) {
                            this.waitLoaders.splice(index, 1);
                        }
                        //Debug.LogError("加入加载列表中");
                        this.currentLoaders.push(nextLoader);
                        nextLoader.load();
                        ///判断下同时加载的数量是否达到默认设置的数量如果没有则继续开始新的加载
                        if (this.currentLoaders.length <= LoaderManage.loaderCount) {
                            this.startLoader();
                        }
                    }
                };
                LoaderManage.prototype.loaderEnd = function (loader) {
                    var index = this.currentLoaders.indexOf(loader);
                    if (index != -1) {
                        this.currentLoaders.splice(index, 1);
                    }
                    this.startLoader();
                };
                /// <summary>
                /// 添加loader
                /// </summary>
                /// <param name="loader"></param>
                LoaderManage.prototype.addLoader = function (loader) {
                    this.index++;
                    loader.id = this.index;
                    loader.endFunction = this.loaderEnd.bind(this);
                    this.waitLoaders.push(loader);
                    this.startLoader();
                };
                /// <summary>
                /// 删除loader
                /// </summary>
                LoaderManage.prototype.removeLoader = function (url) {
                    if (!this.loaders.has(url)) {
                        return;
                    }
                    var loader = this.loaders.get(url);
                    var index = this.waitLoaders.indexOf(loader);
                    if (index != -1) {
                        this.waitLoaders.splice(index, 1);
                    }
                    index = this.currentLoaders.indexOf(loader);
                    if (index != -1) {
                        this.currentLoaders.splice(index, 1);
                    }
                    this.loaders.delete(url);
                    loader.dispose();
                };
                //加入失败列表
                LoaderManage.prototype.addFail = function (loader) {
                    var index = this.loadFailBackList.indexOf(loader);
                    console.error("重新加载     " + loader.url);
                    if (index == -1) {
                        this.loadFailBackList.push(loader);
                    }
                };
                /// <summary>
                /// 获取下一个需要加载的loader,根据需要加载的优先级进行排序
                /// </summary>
                LoaderManage.prototype.getNextLoader = function () {
                    var loader = this.waitLoaders[0];
                    var temp;
                    for (var i = 0; i < this.waitLoaders.length; i++) {
                        temp = this.waitLoaders[i];
                        if (temp.priority > loader.priority) {
                            loader = temp;
                        }
                    }
                    return loader;
                };
                //失败重试
                LoaderManage.prototype.failBackFun = function () {
                    if (this.loadFailBackList.length > 0) {
                        var loader = this.loadFailBackList.shift();
                        loader.load();
                        console.error(loader.url + "   下载失败  重新 下载loadArrayBuffer");
                    }
                    // for (let i: number = 0; i < this.loadFailBackList.length; i++) {
                    //     let loader: Loader = this.loadFailBackList[i];
                    //     setTimeout(() => {
                    //         let index = loader.url.lastIndexOf("&rand");
                    //         if (index != -1)
                    //             loader.url = loader.url.substring(0, index);
                    //         loader.url += "&randT=" + Date.now();
                    //         loader.load();
                    //         console.error(loader.url + "   下载失败  重新 下载loadArrayBuffer");
                    //     }, i * 200);
                    // }
                    // this.loadFailBackList.length = 0;
                };
                LoaderManage.loaderCount = 10;
                return LoaderManage;
            }()));
        }
    };
});
System.register("Loader/otherPlan/Loader", ["Loader/otherPlan/LoaderManage", "Loader/otherPlan/loadTools", "Loader/otherPlan/testCreat", "Data/Map"], function (exports_75, context_75) {
    "use strict";
    var LoaderManage_1, loadTools_2, testCreat_2, Map_11, Loader, CallBackData;
    var __moduleName = context_75 && context_75.id;
    return {
        setters: [
            function (LoaderManage_1_1) {
                LoaderManage_1 = LoaderManage_1_1;
            },
            function (loadTools_2_1) {
                loadTools_2 = loadTools_2_1;
            },
            function (testCreat_2_1) {
                testCreat_2 = testCreat_2_1;
            },
            function (Map_11_1) {
                Map_11 = Map_11_1;
            }
        ],
        execute: function () {
            Loader = /** @class */ (function () {
                function Loader() {
                    /// <summary>
                    /// 优先级,数值越高越优先
                    /// </summary>
                    this.priority = 0;
                    /// <summary>
                    /// 加载失败的重试次数
                    /// </summary>
                    /// <returns></returns>
                    this.timeoutCount = 3;
                    /// <summary>
                    /// 加载失败的重试次数
                    /// </summary>
                    /// <returns></returns>
                    this.timeout = 3;
                    /// <summary>
                    /// 资源的引用次数
                    /// </summary>
                    this.userCount = 0;
                    /// <summary>
                    /// 加载进度
                    /// </summary>
                    /// <returns></returns>
                    this.progress = 0;
                    ///已经加载的字节大小
                    this.bytesLoaded = 0;
                    //总需求加载大小
                    this.bytesTotal = 0;
                    this.timer = new Map_11.cMap();
                    //总需要加载的文件数量
                    this.fileCount = 0;
                    //当前已经加载文件数量
                    this.fileLoadedCount = 0;
                    this.loaderType = LoaderManage_1.LoadType.ARRAYBUFFER;
                    this.loaderEvents = new Array();
                    this.removeList = new Array();
                }
                Loader.prototype.load = function () {
                    var _this = this;
                    if (this.bin && this.endFunction) {
                        this.endFunction(this, this.bin);
                        return this.bin;
                    }
                    this.timer.set(this.url, Date.now());
                    try {
                        switch (this.loaderType) {
                            case LoaderManage_1.LoadType.ARRAYBUFFER:
                                return new Promise(function (resolve) {
                                    // console.error("开始加载       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                    loadTools_2.loadTools.loadArrayBuffer(testCreat_2.testCreat.CDNURL + _this.url, function (bin, urlStr, isLoadFail) {
                                        if (isLoadFail) {
                                            LoaderManage_1.LoaderManage.Instance.addFail(_this);
                                            // LoaderManage.Instance.addFail(this);
                                            // console.error("11111111111111111111111111111111");
                                            resolve(null);
                                        }
                                        else {
                                            // console.error("加载成功       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                                // if (BeginnerGuidManger.needGuid) {
                                                //     jsManager.noviceGuideFun(url, 1)
                                                // }
                                            }
                                            resolve(bin);
                                        }
                                    });
                                });
                            case LoaderManage_1.LoadType.IMAGE:
                                return new Promise(function (resolve) {
                                    // if (miniGame.miniType == miniAPIType.wechat) {
                                    if (m4m["__wx__"]) {
                                        m4m.framework.assetMgr.prototype["_loadImg"](_this.url, function (bin) {
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                            }
                                            resolve(bin);
                                        });
                                    }
                                    else {
                                        testCreat_2.testCreat._loadImg(_this.url, function (bin) {
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                                // if (BeginnerGuidManger.needGuid) {
                                                //     jsManager.noviceGuideFun(url, 1)
                                                // }
                                            }
                                            resolve(bin);
                                        });
                                    }
                                });
                            case LoaderManage_1.LoadType.JSON:
                                return new Promise(function (resolve) {
                                    // console.error("开始加载       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                    testCreat_2.testCreat._loadJson(_this.url, function (bin, urlStr, isLoadFail) {
                                        if (isLoadFail) {
                                            LoaderManage_1.LoaderManage.Instance.addFail(_this);
                                            resolve(null);
                                        }
                                        else {
                                            // console.error("加载成功       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                            }
                                            resolve(bin);
                                        }
                                    });
                                });
                            default:
                        }
                    }
                    catch (er) {
                        console.error(this.url + " 报错 " + er);
                    }
                };
                Loader.prototype.dispose = function () {
                    for (var i = 0; i < this.loaderEvents.length; i++) {
                        var data = this.loaderEvents[i];
                        data.dispose();
                        data = null;
                    }
                    this.loaderEvents.length = 0;
                    this.endFunction = null;
                    this._progressCallBack = null;
                };
                //设置加载进度回调
                Loader.prototype.addProgressCallBack = function (value) {
                    this._progressCallBack = value;
                };
                Loader.prototype.addCallBack = function (callBack, obj) {
                    var cb = new CallBackData();
                    cb.callback = callBack;
                    cb.data = obj;
                    this.loaderEvents.push(cb);
                };
                Loader.prototype.removeCallBack = function (callBack) {
                    for (var i = 0; i < this.loaderEvents.length; i++) {
                        var cc = this.loaderEvents[i];
                        if (cc.callback == callBack) {
                            this.removeList.push(cc);
                        }
                    }
                    for (var k = 0; k < this.removeList.length; k++) {
                        var recallbackData = this.removeList[k];
                        var index = this.loaderEvents.indexOf(recallbackData);
                        if (index != -1) {
                            this.loaderEvents.splice(index, 1);
                        }
                    }
                    this.removeList.length = 0;
                };
                return Loader;
            }());
            exports_75("Loader", Loader);
            CallBackData = /** @class */ (function () {
                function CallBackData() {
                }
                CallBackData.prototype.dispose = function () {
                    this.callback = null;
                    this.data = null;
                };
                return CallBackData;
            }());
        }
    };
});
System.register("Loader/otherPlan/testLoader", ["Loader/otherPlan/LoaderManage"], function (exports_76, context_76) {
    "use strict";
    var LoaderManage_2, LoadType, testLoader;
    var __moduleName = context_76 && context_76.id;
    return {
        setters: [
            function (LoaderManage_2_1) {
                LoaderManage_2 = LoaderManage_2_1;
            }
        ],
        execute: function () {
            (function (LoadType) {
                LoadType[LoadType["ARRAYBUFFER"] = 0] = "ARRAYBUFFER";
                LoadType[LoadType["JSON"] = 1] = "JSON";
                LoadType[LoadType["IMAGE"] = 2] = "IMAGE";
            })(LoadType || (LoadType = {}));
            // tslint:disable-next-line: class-name
            testLoader = /** @class */ (function () {
                function testLoader() {
                    //总需要加载的文件数量
                    this.fileCount = 0;
                    //当前已经加载文件数量
                    this.fileLoadedCount = 0;
                    //加载文件完成的进度
                    this.sucessProgress = 0;
                    //总进度
                    this.progress = 0;
                    this.list = new Array();
                    this.loadedFile = [];
                }
                testLoader.prototype.add = function (url, callback, type) {
                    if (type === void 0) { type = LoadType.ARRAYBUFFER; }
                    var loader = LoaderManage_2.LoaderManage.Instance.load(url, callback, url, type);
                    this.list.push(loader);
                    this.fileCount++;
                    return;
                };
                testLoader.prototype.loaderEnd = function (loader, file) {
                    if (file) {
                        this.fileLoadedCount++;
                        this.sucessProgress = this.fileLoadedCount / this.fileCount;
                        this.loadedFile.push(file);
                        if (this.loadCallBack && this.fileLoadedCount >= this.fileCount) {
                            this.loadCallBack(this.loadedFile);
                            this.list.length = 0;
                        }
                    }
                };
                testLoader.prototype.start = function (callback) {
                    if (callback === void 0) { callback = null; }
                    this.loadCallBack = callback;
                    // this.list.forEach((loader) => {
                    //     loader.endFunction = this.loaderEnd.bind(this);
                    //     loader.load();
                    //     this.progressCallback = this.LoadProgress.bind(this);
                    //     loader.addProgressCallBack(this.progressCallback)
                    // })
                    if (this.fileCount <= 0) {
                        callback(null);
                        return;
                    }
                    for (var i = 0; i < this.list.length; i++) {
                        var loader = this.list[i];
                        loader.endFunction = this.loaderEnd.bind(this);
                        loader.load();
                        this.progressCallback = this.LoadProgress.bind(this);
                        loader.addProgressCallBack(this.progressCallback);
                    }
                };
                testLoader.prototype.LoadProgress = function (progress, fileLoadedCount, fileCount, bytesLoaded, bytesTotal) {
                    //总进度
                    this.progress = bytesLoaded / bytesTotal / this.fileCount + this.sucessProgress;
                };
                return testLoader;
            }());
            exports_76("testLoader", testLoader);
        }
    };
});
System.register("Scripts/multiToucher", [], function (exports_77, context_77) {
    "use strict";
    var multiToucher;
    var __moduleName = context_77 && context_77.id;
    return {
        setters: [],
        execute: function () {
            exports_77("multiToucher", multiToucher = /** @class */ (function (_super) {
                __extends(multiToucher, _super);
                // tslint:disable-next-line: class-name
                function multiToucher() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 是否吃事件（阻止事件穿透） */
                    _this.eatEvent = false;
                    _this.eventer = new m4m.event.InputEvent(); //事件播报对象
                    _this.touchId = -1; //touch 的id
                    _this.hasPointDown = false; //有被点击
                    _this.lastTouchDic = {}; // 结构 {id:是否点击}
                    _this.ids = [];
                    _this.moveTolerance = 6; //move 状态容忍值
                    _this.lastTouch = false;
                    _this.hasPointUP = false;
                    _this.lastPoint = new m4m.math.vector2();
                    _this.downPoint = new m4m.math.vector2();
                    return _this;
                }
                multiToucher_1 = multiToucher;
                multiToucher.regId = function (id) {
                    if (isNaN(id) || id < 0) {
                        return;
                    }
                    this.useIdMap[id] = true;
                };
                multiToucher.unregId = function (id) {
                    if (isNaN(id) || id < 0) {
                        return;
                    }
                    this.useIdMap[id] = false;
                };
                /** 初始化设置 overlay2D */
                multiToucher.init = function (ol2d, app) {
                    if (!ol2d || !app) {
                        return;
                    }
                    this._ol2d = ol2d;
                    this.app = app;
                    this.iptMgr = app.getInputMgr();
                    this.inited = true;
                };
                /**
                * 添加point事件监听者
                * @param eventEnum 事件类型
                * @param func 事件触发回调方法 (Warn: 不要使用 func.bind() , 它会导致相等判断失败)
                * @param thisArg 回调方法执行者
                */
                multiToucher.prototype.addPointListener = function (eventEnum, func, thisArg) {
                    this.eventer.OnEnum_point(eventEnum, func, thisArg);
                };
                /**
                 * 移除point事件监听者
                 * @param eventEnum 事件类型
                 * @param func 事件触发回调方法
                 * @param thisArg 回调方法执行者
                 */
                multiToucher.prototype.removePointListener = function (eventEnum, func, thisArg) {
                    this.eventer.RemoveListener(m4m.event.PointEventEnum[eventEnum], func, thisArg);
                };
                multiToucher.prototype.onPlay = function () {
                };
                multiToucher.prototype.update = function (delta) {
                };
                multiToucher.prototype.onPointEvent = function (canvas, ev, oncap) {
                    //注 ： ev.eated 在该组件中不能正常使用，因为事件触发 和 UI事件流不对称 
                    //oncap==true 是捕获阶段，一般的行为，只在pop阶段处理
                    if (!multiToucher_1.enable || oncap) {
                        return;
                    }
                    if (!this.transform.visible || !multiToucher_1.inited) {
                        return;
                    }
                    //检查是否有点击进入
                    if (!this.hasPointDown) {
                        this.ckStratHit();
                    }
                    //进入状态更新流
                    this.updateState(ev);
                    var ipt = multiToucher_1.iptMgr;
                    //同步 lastdic
                    for (var key in ipt.touches) {
                        var id = Number(key);
                        var pt = ipt.touches[id];
                        if (pt) {
                            // this.lastTouchDic.set(id,pt.touch);
                            this.lastTouchDic[id] = pt.touch;
                        }
                    }
                };
                /** 重置状态 */
                multiToucher.prototype.resetSate = function () {
                    this.hasPointDown = false;
                    multiToucher_1.unregId(this.touchId);
                    this.lastTouchDic[this.touchId] = false;
                    this.touchId = -1;
                };
                multiToucher.prototype.remove = function () {
                };
                //检查 是否有 新touch 击中 自己
                //是否 有新增touch
                multiToucher.prototype.ckHaveNewTouch = function (newTs) {
                    if (!newTs) {
                        return;
                    }
                    newTs.length = 0;
                    var result = false;
                    var ipt = multiToucher_1.iptMgr;
                    for (var key in ipt.touches) {
                        var id = Number(key);
                        var pt = ipt.touches[id];
                        if (pt) {
                            if (!pt.touch) {
                                continue;
                            } //当前没有点击
                            if (!this.lastTouchDic[id] && !multiToucher_1.useIdMap[id]) { //新的点击 或者 上一次没有点击， 这次被点击了 ,且没被占用
                                result = true;
                                newTs.push(id);
                            }
                        }
                    }
                    return result;
                };
                //判断是有否有击中
                multiToucher.prototype.ckStratHit = function () {
                    this.ckHaveNewTouch(this.ids);
                    while (this.ids.length > 0) {
                        var id = this.ids.shift();
                        var pinfo = multiToucher_1.iptMgr.touches[id];
                        if (pinfo && this.tryHit(pinfo)) {
                            this.touchId = id;
                            multiToucher_1.regId(id);
                            this.hasPointDown = true;
                            this.lastTouch = false;
                            this.hasPointUP = false;
                            this.downPoint.x = pinfo.x;
                            this.downPoint.y = pinfo.y;
                            break;
                        }
                    }
                };
                //检查是否击中
                multiToucher.prototype.tryHit = function (pInfo) {
                    if (!pInfo) {
                        return false;
                    }
                    var result = false;
                    multiToucher_1.helpv2.x = pInfo.x;
                    multiToucher_1.helpv2.y = pInfo.y;
                    multiToucher_1._ol2d.calScreenPosToModelPos(multiToucher_1.helpv2, multiToucher_1.helpv2v1);
                    result = this.transform.ContainsCanvasPoint(multiToucher_1.helpv2v1);
                    return result;
                };
                //跟踪击中自己的touch 、 更新交互状态 (对外抛送事件)
                // tslint:disable-next-line: cyclomatic-complexity
                multiToucher.prototype.updateState = function (ev) {
                    if (!this.hasPointDown || this.touchId == -1) {
                        return;
                    }
                    var pt = multiToucher_1.iptMgr.touches[this.touchId];
                    if (!pt) {
                        this.hasPointDown = false;
                        this.lastTouch = false;
                        return;
                    }
                    var needMove = false;
                    if (this.lastPoint.x != pt.x || this.lastPoint.y != pt.y) {
                        //on move
                        needMove = true;
                    }
                    var pEnum;
                    if (!this.lastTouch && pt.touch) {
                        //on down
                        this.downPoint.x = pt.x;
                        this.downPoint.y = pt.y;
                        pEnum = m4m.event.PointEventEnum.PointDown;
                        // console.error(`down this.touchId : ${this.touchId}`);
                        if (this.eventer.listenerCount(m4m.event.PointEventEnum[pEnum]) > 0) {
                            //有监听
                            this.eventer.EmitEnum_point(pEnum, pt.x, pt.y, ev);
                            if (this.eatEvent) {
                                ev.eated = true;
                            }
                        }
                    }
                    else if (this.lastTouch && !pt.touch) {
                        //on up
                        this.hasPointUP = true;
                        // console.error(`up this.touchId : ${this.touchId}`);
                        pEnum = m4m.event.PointEventEnum.PointUp;
                        if (this.eventer.listenerCount(m4m.event.PointEventEnum[pEnum]) > 0) {
                            //有监听
                            this.eventer.EmitEnum_point(pEnum, pt.x, pt.y, ev);
                            if (this.eatEvent) {
                                ev.eated = true;
                            }
                        }
                    }
                    else if (this.lastTouch && pt.touch) {
                        //on hold
                        pEnum = m4m.event.PointEventEnum.PointHold;
                        if (this.eventer.listenerCount(m4m.event.PointEventEnum[pEnum]) > 0) {
                            //有监听
                            this.eventer.EmitEnum_point(pEnum, pt.x, pt.y, ev);
                            if (this.eatEvent) {
                                ev.eated = true;
                            }
                        }
                    }
                    if (needMove) {
                        pEnum = m4m.event.PointEventEnum.PointMove;
                        if (this.eventer.listenerCount(m4m.event.PointEventEnum[pEnum]) > 0) {
                            //有监听
                            this.eventer.EmitEnum_point(pEnum, pt.x, pt.y, ev);
                            if (this.eatEvent) {
                                ev.eated = true;
                            }
                        }
                    }
                    if (this.hasPointUP && this.hasPointDown) {
                        //let isMoveTolerance = (Math.abs(this.downPoint.x - pt.x)> this.moveTolerance || Math.abs(this.downPoint.y - pt.y)> this.moveTolerance)
                        var isMoveTolerance = (Math.abs(this.downPoint.x - pt.x) > this.moveTolerance || Math.abs(this.downPoint.y - pt.y) > this.moveTolerance);
                        if (!isMoveTolerance) {
                            //on click
                            pEnum = m4m.event.PointEventEnum.PointClick;
                            if (this.eventer.listenerCount(m4m.event.PointEventEnum[pEnum]) > 0) {
                                //有监听
                                this.eventer.EmitEnum_point(pEnum, pt.x, pt.y, ev);
                                if (this.eatEvent) {
                                    ev.eated = true;
                                }
                            }
                        }
                    }
                    if (!pt.touch) {
                        this.resetSate();
                    }
                    this.lastTouch = pt.touch;
                    this.lastPoint.x = pt.x;
                    this.lastPoint.y = pt.y;
                };
                var multiToucher_1;
                /** 全局启用 多点触控的功能 */
                multiToucher.enable = true;
                multiToucher.helpv2 = new m4m.math.vector2();
                multiToucher.helpv2v1 = new m4m.math.vector2();
                multiToucher.useIdMap = {};
                multiToucher.inited = false;
                multiToucher = multiToucher_1 = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], multiToucher);
                return multiToucher;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/metaUIManager", ["Tools/commTool"], function (exports_78, context_78) {
    "use strict";
    var commTool_1, metaUIManager;
    var __moduleName = context_78 && context_78.id;
    return {
        setters: [
            function (commTool_1_1) {
                commTool_1 = commTool_1_1;
            }
        ],
        execute: function () {
            exports_78("metaUIManager", metaUIManager = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function metaUIManager() {
                }
                Object.defineProperty(metaUIManager, "ActiveSelf", {
                    /** 当前激活中 变体子类 */
                    get: function () { return this._ActiveSelf; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(metaUIManager, "sCanvIconMode", {
                    /** shareCanvas image 容器的 icon ，（isIconMode ? this.scIconImg : this.scFullImg）*/
                    get: function () { return this._sCanvIconMode; },
                    set: function (isIconMode) {
                        this.shareCanvasImg.transform.visible = false;
                        if (isIconMode) {
                            this.shareCanvasImg = this.scIconImg;
                        }
                        else {
                            this.shareCanvasImg = this.scFullImg;
                        }
                        this._sCanvIconMode = isIconMode;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(metaUIManager, "layerIndexOverUI3d", {
                    /** UI之上显示 模型的专有层级 （默认 31）*/
                    get: function () { return this._layerIndexOverUI3d; },
                    set: function (v) {
                        this._layerIndexOverUI3d = v;
                        this.refrashCamMask();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(metaUIManager, "modelCam", {
                    /** UI 上模型相机 */
                    get: function () {
                        if (!this._modelcam) {
                            this.initModelOverCam();
                        }
                        return this._modelcam;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 初始化UIManager
                 * @param uiWidth ui设计最大宽度分辨率
                 * @param uiHeight ui设计最大高度分辨率
                 * @param screenMatchRate 屏幕匹配率 ( 屏幕宽高匹配模式 (range 0-1  =0:固定宽  =1:固定高) )
                 * @param uiPrefabPath UI prefab 资源路径
                 * @param atlasPath ui atlas 资源路径
                 */
                metaUIManager.init = function (uiWidth, uiHeight, screenMatchRate, uiPrefabPath, atlasPath) {
                    if (this.isInited) {
                        return;
                    }
                    this.isInited = true;
                    this.uiPrefabPath = uiPrefabPath;
                    this.atlasPath = atlasPath;
                    var app = m4m.framework.sceneMgr.app;
                    var scene = app.getScene();
                    //创建overlayer2d
                    this.overlay = new m4m.framework.overlay2D();
                    //
                    this.overlay.scaleMode = m4m.framework.UIScaleMode.SCALE_WITH_SCREEN_SIZE;
                    this.overlay.matchReference_width = uiWidth; //UI 固定分辨率
                    this.overlay.matchReference_height = uiHeight;
                    this.overlay.screenMatchRate = screenMatchRate; //如果是以高度固定的 模屏 模式  要把这个值设置为1   默认为竖屏模式
                    if (!scene.mainCamera) {
                        var camT = new m4m.framework.transform();
                        camT.name = "mainCam";
                        scene.getRoot()
                            .addChild(camT);
                        var cam = camT.gameObject.addComponent("camera");
                        //渲染层级设置
                        // cam.CullingMask = cam.CullingMask ^ GameLogic.layerBitGUI;  //GUI 层不渲染
                        // cam.cullZPlane = false;
                        if (!scene.autoCollectlightCamera) {
                            scene.addCamera(cam);
                        }
                        scene.update(0);
                    }
                    else {
                        var oldOl = scene.mainCamera.getOverLays();
                        for (var i = 0, len = oldOl.length; i < len; i++) {
                            var ol = oldOl[i];
                            if (!this.firstDisplay && ol.canvas) {
                                var _root = ol.canvas.getRoot();
                                //获取 首屏渲染的对象
                                this.firstDisplay = _root.children[0];
                            }
                            scene.mainCamera.removeOverLay(ol);
                        }
                    }
                    scene.mainCamera.addOverLay(this.overlay);
                    //ui
                    var opt = m4m.framework.layoutOption;
                    var full = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    this.uiRoot = this.overlay.canvas.getRoot();
                    //头像层
                    // this.setHeadIcon();
                    //各层
                    this.downlayer = new m4m.framework.transform2D();
                    this.downlayer.layoutState = full;
                    this.downlayer.name = "downlayer";
                    this.uiRoot.addChild(this.downlayer);
                    this.baselayer = new m4m.framework.transform2D();
                    this.baselayer.layoutState = full;
                    this.baselayer.name = "baselayer";
                    this.uiRoot.addChild(this.baselayer);
                    this.midlayer = new m4m.framework.transform2D();
                    this.midlayer.name = "midlayer";
                    this.midlayer.layoutState = full;
                    this.uiRoot.addChild(this.midlayer);
                    this.highlayer = new m4m.framework.transform2D();
                    this.highlayer.name = "highlayer";
                    this.highlayer.layoutState = full;
                    this.uiRoot.addChild(this.highlayer);
                    //pop
                    this.poplayer = new m4m.framework.transform2D();
                    this.poplayer.name = "poplayer";
                    this.poplayer.layoutState = full;
                    this.uiRoot.addChild(this.poplayer);
                    // //shareCanvasImg
                    //scFullImg
                    var SCITran = new m4m.framework.transform2D();
                    SCITran.name = "scFullImg";
                    this.uiRoot.addChild(SCITran);
                    SCITran.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    var rimg = SCITran.addComponent("rawImage2D");
                    // rimg.image = GameMgr.assetMgr.getDefaultTexture("grid");
                    rimg.image = this.createTextrue();
                    SCITran.visible = false;
                    this.shareCanvasImg = this.scFullImg = rimg;
                    //pop
                    // this.poplayer = new m4m.framework.transform2D();
                    // this.poplayer.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    // this.uiRoot.addChild(this.poplayer);
                    // //UI上的模型
                    // this.initModelOverCam();
                    //全屏事件遮挡对象
                    this._fullScreenTran = new m4m.framework.transform2D();
                    this.uiRoot.addChild(this._fullScreenTran);
                    this._fullScreenTran.name = "_fullScreenTran";
                    // let btn = this._fullScreenTran.addComponent("button") as m4m.framework.button;
                    // let lo = m4m.framework.layoutOption;
                    // this._fullScreenTran.layoutState = lo.TOP | lo.BOTTOM | lo.LEFT | lo.RIGHT;
                    // btn.addListener(m4m.event.UIEventEnum.PointerClick, () => { }, this);   //遮挡的事件
                    // btn.addListener(m4m.event.UIEventEnum.PointerDown, () => { }, this);
                    // btn.addListener(m4m.event.UIEventEnum.PointerUp, () => { }, this);
                    // btn.addListener(m4m.event.UIEventEnum.PointerEnter, () => { }, this);
                    // btn.addListener(m4m.event.UIEventEnum.PointerExit, () => { }, this);
                    commTool_1.commTool.makeUIEventDiscard(this._fullScreenTran);
                    this._fullScreenTran.visible = false;
                    //over 3d model 管理器
                    // Over3dModelMgr.init();
                    //old UI
                    if (this.firstDisplay) {
                        this.poplayer.addChild(this.firstDisplay);
                    }
                };
                /** 清理首屏渲染显示UI */
                metaUIManager.clearFristDisplay = function () {
                    if (!this.firstDisplay) {
                        return;
                    }
                    this.firstDisplay.visible = false;
                    var rawImage = this.firstDisplay.getComponent("rawImage2D");
                    rawImage.image.defaultAsset = false;
                    rawImage.image.unuse(true);
                    rawImage.image = null;
                    if (this.firstDisplay.parent) {
                        this.firstDisplay.parent.removeChild(this.firstDisplay);
                    }
                };
                /**
                 * 全屏UI 事件 遮挡 或 开启
                 * @param enable 开启UI事件遮挡
                 */
                metaUIManager.fullScreenUIEventMask = function (enable) {
                    if (!this._fullScreenTran) {
                        return;
                    }
                    this._fullScreenTran.visible = enable;
                };
                /**
                 * 计算ui坐标 通过 屏幕坐标
                 * @param x 屏幕坐标系 x
                 * @param y 屏幕坐标系 y
                 * @param uiPos vector2 ui坐标系postion
                 */
                metaUIManager.screenPosToUIpos = function (x, y, uiPos) {
                    if (isNaN(x) || isNaN(y) || !uiPos) {
                        return;
                    }
                    m4m.math.vec2Set(uiPos, x, y);
                    this.overlay.calScreenPosToCanvasPos(uiPos, uiPos);
                };
                //创建贴图
                metaUIManager.createTextrue = function () {
                    var gl = m4m.framework.sceneMgr.app.webgl;
                    this.cTIdx++;
                    var _texture = new m4m.framework.texture("canvasTex_".concat(this.cTIdx));
                    var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                    var t2d = new m4m.render.glTexture2D(gl, _textureFormat);
                    t2d.uploadByteArray(false, true, 1, 1, new Uint8Array(4), false);
                    _texture.glTexture = t2d;
                    return _texture;
                };
                //头像显示
                metaUIManager.setHeadIcon = function () {
                    var opt = m4m.framework.layoutOption;
                    var size = 80;
                    //scIconImg
                    var SCITran0 = new m4m.framework.transform2D();
                    this.uiRoot.addChild(SCITran0);
                    SCITran0.layoutState = opt.H_CENTER | opt.V_CENTER;
                    SCITran0.name = "scIconImg";
                    SCITran0.width = SCITran0.height = size;
                    var rimg0 = SCITran0.addComponent("rawImage2D");
                    // rimg_0.image = GameMgr.assetMgr.getDefaultTexture("grid");
                    rimg0.image = this.createTextrue();
                    SCITran0.visible = false;
                    this.scIconImg = rimg0;
                };
                //UI 上的模型展示 初始化
                metaUIManager.initModelOverCam = function () {
                    var camT = new m4m.framework.transform();
                    camT.name = "modelCam";
                    var scene = m4m.framework.sceneMgr.scene;
                    // camT.localPosition.y = -1200;
                    // camT.localPosition.z = -15;
                    // camT.localPosition = camT.localPosition;
                    // m4m.math.quatFromEulerAngles(5, 0, 0, camT.localRotate);
                    // camT.localRotate = camT.localRotate;
                    scene.getRoot()
                        .addChild(camT);
                    var cam = camT.gameObject.addComponent("camera");
                    this._modelcam = cam;
                    // cam.cullZPlane = false;
                    this._modelcam.gameObject.visible = true;
                    cam.opvalue = 0; //正交相机
                    // cam.fov = 0.9075712110370514;// 角度值 52        80 * Math.PI / 180;
                    cam.far = 100;
                    cam.near = -10;
                    cam.size = 20;
                    //设置onlyDisp layers
                    this.refrashCamMask();
                    cam.clearOption_Color = false;
                    scene.update(0);
                    if (!scene.autoCollectlightCamera) { // 现不会自动把新加的相机添加到队列  需的 手动添加
                        scene.addCamera(cam);
                    }
                    //overlay
                    this.topOverlay = new m4m.framework.overlay2D();
                    cam.addOverLay(this.topOverlay);
                    //change to leap 
                    this.overlay.canvas.beforeRender = this.onFrontLay2dBeforRender.bind(this);
                    this.topOverlay.canvas.beforeRender = this.onTopLay2dBeforRender.bind(this);
                };
                /**
                 * 注册 top_overLay 渲染跳跃对象
                 * @param insid 实例id
                 * @param leapRenderFun
                 * @param frontBefRenderFun
                 * @param layer 层级值 最大值显示在最上面
                 */
                metaUIManager.registerLeapRender = function (insid, leapRenderFun, frontBefRenderFun, layer) {
                    if (layer === void 0) { layer = 0; }
                    if (isNaN(insid)) {
                        return;
                    }
                    var insidMap = this.uiInsIDLayerMap;
                    if (insidMap[insid] != null) {
                        if (insidMap[insid] == layer) {
                            return;
                        } //去重
                        this.unregisterLeapRender(insid);
                    }
                    insidMap[insid] = layer;
                    var arr = this.leapLayerMap[layer];
                    if (!arr) {
                        arr = this.leapLayerMap[layer] = [];
                        var queue = this.leapLayerQueue;
                        queue.push(layer);
                        //排序
                        queue.sort();
                    }
                    arr.push(insid);
                    if (leapRenderFun) {
                        this.leapRenderFunMap[insid] = leapRenderFun;
                    }
                    if (frontBefRenderFun) {
                        this.FrontBefRenderFunMap[insid] = frontBefRenderFun;
                    }
                };
                /**
                 * 注销 top_overLay 渲染跳跃对象
                 * @param insid 实例id
                 */
                metaUIManager.unregisterLeapRender = function (insid) {
                    if (isNaN(insid)) {
                        return;
                    }
                    var layer = this.uiInsIDLayerMap[insid];
                    var arr = this.leapLayerMap[layer];
                    if (arr == null) {
                        return;
                    }
                    if (arr.length > 0) {
                        var idx = arr.indexOf(insid);
                        if (idx != -1) {
                            arr.splice(idx, 1);
                        }
                    }
                    else {
                        var queue = this.leapLayerQueue;
                        var idx = queue.indexOf(layer);
                        if (idx != -1) {
                            queue.splice(idx, 1);
                        }
                        delete this.leapLayerMap[layer];
                    }
                    delete this.uiInsIDLayerMap[insid];
                    delete this.leapRenderFunMap[insid];
                    delete this.FrontBefRenderFunMap[insid];
                };
                //Front  overlay 渲染前的调用
                metaUIManager.onFrontLay2dBeforRender = function () {
                    var map = this.FrontBefRenderFunMap;
                    if (!map) {
                        return;
                    }
                    var queue = this.leapLayerQueue;
                    for (var i = 0, len = queue.length; i < len; i++) {
                        var layer = queue[i];
                        var arr = this.leapLayerMap[layer];
                        for (var j = 0, len1 = arr.length; j < len1; j++) {
                            var insID = arr[j];
                            if (map.hasOwnProperty(insID)) {
                                var fun = map[insID];
                                if (this.overlay.canvas.assetmgr) {
                                    fun(this.overlay.canvas);
                                }
                            }
                        }
                    }
                };
                //top_overLay 渲染前的调用
                metaUIManager.onTopLay2dBeforRender = function () {
                    var map = this.leapRenderFunMap;
                    if (!map) {
                        return;
                    }
                    var queue = this.leapLayerQueue;
                    for (var i = 0, len = queue.length; i < len; i++) {
                        var layer = queue[i];
                        var arr = this.leapLayerMap[layer];
                        for (var j = 0, len1 = arr.length; j < len1; j++) {
                            var insID = arr[j];
                            if (map.hasOwnProperty(insID)) {
                                var fun = map[insID];
                                if (this.topOverlay.canvas.assetmgr) {
                                    fun(this.topOverlay.canvas);
                                }
                            }
                        }
                    }
                };
                metaUIManager.refrashCamMask = function () {
                    var funToMask = m4m.framework.cullingmaskutil.layerToMask;
                    var bit = funToMask(this._layerIndexOverUI3d);
                    //over 3d cam 
                    if (this._modelcam) {
                        this._modelcam.CullingMask = bit | m4m.framework.CullingMask.ui;
                    }
                    //main cam 
                    var mainCam = m4m.framework.sceneMgr.scene.mainCamera;
                    if (mainCam) {
                        mainCam.CullingMask = bit ^ 0xFFFFFFFF;
                    }
                };
                metaUIManager._layerIndexOverUI3d = 30;
                metaUIManager.isInited = false;
                metaUIManager._ActiveSelf = metaUIManager;
                /** 跳跃层级map */
                metaUIManager.leapLayerMap = {};
                /** insID Layer Map */
                metaUIManager.uiInsIDLayerMap = {};
                /** leap layer渲染队列 */
                metaUIManager.leapLayerQueue = [];
                metaUIManager.cTIdx = 0;
                metaUIManager._sCanvIconMode = false;
                metaUIManager.leapRenderFunMap = {}; //跳跃到 top_overlay 的渲染容器
                metaUIManager.FrontBefRenderFunMap = {}; //overlay 的渲染前
                return metaUIManager;
            }()));
        }
    };
});
System.register("UIBase/joyStick", ["UIBase/metaUIManager"], function (exports_79, context_79) {
    "use strict";
    var metaUIManager_1, joyStick;
    var __moduleName = context_79 && context_79.id;
    return {
        setters: [
            function (metaUIManager_1_1) {
                metaUIManager_1 = metaUIManager_1_1;
            }
        ],
        execute: function () {
            exports_79("joyStick", joyStick = /** @class */ (function (_super) {
                __extends(joyStick, _super);
                // tslint:disable-next-line: class-name
                function joyStick() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    //浮动按钮可移动范围
                    _this.moveRange = 30;
                    _this.hasDown = false;
                    return _this;
                }
                joyStick_1 = joyStick;
                joyStick.prototype.onPlay = function () {
                    var peEnum = m4m.event.PointEventEnum;
                    this.mToucher = this.transform.addComponent("multiToucher");
                    //事件
                    this.mToucher.addPointListener(peEnum.PointDown, this.onDown, this);
                    this.mToucher.addPointListener(peEnum.PointMove, this.onMove, this);
                    this.mToucher.addPointListener(peEnum.PointUp, this.onUp, this);
                };
                //复位
                joyStick.prototype.resetJoy = function () {
                    this.hasDown = false;
                    if (this.onRelease) {
                        this.onRelease();
                    }
                    if (this.mToucher) {
                        this.mToucher.resetSate();
                    }
                    if (!this.overImg) {
                        return;
                    }
                    var tran = this.overImg.transform;
                    tran.localTranslate.x = 0;
                    tran.localTranslate.y = 0;
                    tran.markDirty();
                };
                joyStick.prototype.update = function (delta) {
                };
                joyStick.prototype.remove = function () {
                };
                joyStick.prototype.onDown = function () {
                    if (!this.enabled) {
                        return;
                    }
                    //被点中了
                    //记录 开始点
                    this.hasDown = true;
                };
                joyStick.prototype.onMove = function (_a) {
                    var x = _a[0], y = _a[1];
                    if (!this.enabled) {
                        return;
                    }
                    if (!this.hasDown || !this.overImg) {
                        return;
                    }
                    var Ttran = this.transform;
                    if (!Ttran.parent) {
                        return;
                    }
                    var difV2 = joyStick_1.helpv2;
                    var point = joyStick_1.helpv2v1;
                    metaUIManager_1.metaUIManager.ActiveSelf.screenPosToUIpos(x, y, point);
                    m4m.math.vec2Subtract(point, Ttran.parent.getWorldTranslate(), difV2);
                    //计算 overimg 的位置
                    //范围限制处理
                    var currdis = m4m.math.vec2Length(difV2);
                    // console.error("范围 ",currdis);
                    if (currdis > this.moveRange) {
                        m4m.math.vec2Normalize(difV2, difV2);
                        m4m.math.vec2ScaleByNum(difV2, this.moveRange, difV2);
                    }
                    //设置 overimg 的位置
                    var tran = this.overImg.transform;
                    m4m.math.vec2Clone(difV2, tran.localTranslate);
                    tran.markDirty();
                    //摇晃回调
                    if (this.onShake) {
                        var sclNum = 1 / this.moveRange;
                        this.onShake(difV2.x * sclNum, difV2.y * sclNum, currdis);
                    }
                };
                joyStick.prototype.onUp = function () {
                    if (!this.enabled) {
                        return;
                    }
                    this.resetJoy();
                    // if (this.onRelease) {
                    //     this.onRelease();
                    // }
                    //  if(this.onShake){
                    //     this.onShake(0,0);
                    // }
                };
                var joyStick_1;
                joyStick.helpv2 = new m4m.math.vector2();
                joyStick.helpv2v1 = new m4m.math.vector2();
                joyStick.helpv2v2 = new m4m.math.vector2();
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], joyStick.prototype, "bottomImg", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], joyStick.prototype, "overImg", void 0);
                __decorate([
                    m4m.reflect.Field("number")
                ], joyStick.prototype, "moveRange", void 0);
                joyStick = joyStick_1 = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], joyStick);
                return joyStick;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/imgNum", ["Data/Map"], function (exports_80, context_80) {
    "use strict";
    var Map_12, imgNum;
    var __moduleName = context_80 && context_80.id;
    return {
        setters: [
            function (Map_12_1) {
                Map_12 = Map_12_1;
            }
        ],
        execute: function () {
            exports_80("imgNum", imgNum = /** @class */ (function (_super) {
                __extends(imgNum, _super);
                // tslint:disable-next-line: class-name
                function imgNum() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 排列间隔 （默认23 ，一般取 0-9 中像素最宽的值） */
                    _this.gap = 23;
                    _this.shellLayoutState = m4m.framework.layoutOption.V_CENTER | m4m.framework.layoutOption.LEFT;
                    _this.tranLayoutState = m4m.framework.layoutOption.V_CENTER | m4m.framework.layoutOption.H_CENTER;
                    _this.assetBundleName = "";
                    _this.ImgArr = [];
                    _this.baseName = "";
                    _this.cacheColor = new m4m.math.color(1, 1, 1, 1);
                    _this.inited = false;
                    /*
                    s=：
                    b=%
                    c=层
                    d=.
                    x=×
                    i=第
                    j=+
                    n=-
                    k=千
                    m=万
                    f=/
                    z=折
                     */
                    _this.extSupArr = ["x", "j", "n", "d", "b", "k", "m", "f", "z", "c", "i", "s", "o"];
                    return _this;
                }
                imgNum_1 = imgNum;
                //                              x    +    -    .    %    k    m    /   折扣   层   第   :   名
                /** 设置 模板对象 sprite 的AssetBundleName （默认情况不用处理 , 读取不到 再考虑设置） */
                imgNum.prototype.setSpriteAssetBundleName = function (abName) {
                    this.assetBundleName = abName;
                };
                /** 设置 值 */
                imgNum.prototype.setNum = function (num) {
                    this.init();
                    if (num == undefined || isNaN(num)) {
                        return;
                    }
                    // tslint:disable-next-line: newline-per-chained-call
                    var str = Math.floor(num).toString();
                    this.ckGenimg(str.length);
                    this.refreshImgs(str);
                };
                /** 设置 string值 */
                imgNum.prototype.setStr = function (str) {
                    this.init();
                    if (str == undefined) {
                        return;
                    }
                    // tslint:disable-next-line: newline-per-chained-call
                    this.ckGenimg(str.length);
                    this.refreshImgs(str);
                };
                /** 设置 颜色 */
                imgNum.prototype.setColor = function (color) {
                    if (!color) {
                        return;
                    }
                    m4m.math.colorClone(color, this.cacheColor);
                    this.ImgArr.forEach(function (img) {
                        if (img) {
                            m4m.math.colorClone(color, img.color);
                            img.transform.markDirty();
                        }
                    });
                };
                imgNum.prototype.onPlay = function () {
                    this.template.transform.visible = false;
                    //this.setNum(1234567890);
                };
                imgNum.prototype.update = function (delta) {
                };
                imgNum.prototype.remove = function () {
                    if (this.ImgArr) {
                        this.ImgArr.length = 0;
                        this.ImgArr = null;
                    }
                };
                imgNum.prototype.subsIconParse = function () {
                    //后续修改 
                    // this.template.transform.name  再用 下面  _spriteName 拼成一个正确的图片集名
                    var nameArr = this.template.transform.name.split("_");
                    var iconName = nameArr[0];
                    //.atlas.json
                    this.baseName = this.template["_spriteName"];
                    var index = this.baseName.indexOf(imgNum_1.iconSprStr);
                    if (index != -1) {
                        var uiName = this.baseName.substring(0, index + imgNum_1.iconSprStr.length);
                        this.baseName = uiName + iconName;
                        // console.error(a);
                        // console.error(a + iconName);
                    }
                    else {
                        console.error("imgNum 组件取图片名出错！");
                        return;
                    }
                    var lastOne = this.baseName[this.baseName.length - 1];
                    this.baseName = isNaN(Number(lastOne)) ? this.baseName : this.baseName.substring(0, this.baseName.length - 1);
                    var assetmgr = m4m.framework.sceneMgr.app.getAssetMgr();
                    this.numImgToMap(assetmgr);
                };
                imgNum.prototype.init = function () {
                    if (this.inited) {
                        return;
                    }
                    /* this.baseName = (this.template["_spriteName"] as string);
                     this.baseName = this.baseName.substring(0, this.baseName.length - 1);
             
                     let assetmgr = GameMgr.assetMgr;
                     this.numImgToMap(assetmgr);*/
                    this.subsIconParse();
                    this.inited = true;
                };
                imgNum.prototype.numImgToMap = function (assetmgr) {
                    if (this.baseName == "") {
                        return;
                    }
                    var numArr = imgNum_1.NumsMap["".concat(this.baseName)] = new Map_12.cMap();
                    if (this.assetBundleName == null) {
                        console.error(" atlas 未设置 asset 路径！！");
                        return;
                    }
                    for (var i = 0; i < 10; i++) {
                        var sp = assetmgr.getAssetByName("".concat(this.baseName).concat(i), this.assetBundleName);
                        if (!sp) {
                            // console.error(`imgNum 组件 sprite 无法获取 : ${this.baseName}${i} ,请检查 模板的配套资源`);
                            continue;
                        }
                        numArr.set(i, sp);
                    }
                    for (var i = 0; i < this.extSupArr.length; i++) {
                        var str = this.extSupArr[i];
                        var sp = assetmgr.getAssetByName("".concat(this.baseName).concat(str), this.assetBundleName);
                        if (!sp) {
                            // console.error(`imgNum 组件 sprite 无法获取 : ${this.baseName}${str} ,请检查 模板的配套资源`);
                            continue;
                        }
                        numArr.set(str, sp);
                    }
                };
                imgNum.prototype.refreshImgs = function (str) {
                    var len = str.length;
                    this.ImgArr.forEach(function (img) {
                        img.transform.visible = false;
                    });
                    var num = Math.min(len, this.ImgArr.length);
                    var www = 0;
                    for (var i = 0; i < num; i++) {
                        var val = str[i];
                        var img = this.ImgArr[i];
                        img.transform.visible = true;
                        if (!img.sprite || img.sprite.getName() != "".concat(this.baseName).concat(val)) {
                            // console.log(this.baseName);
                            var spt = imgNum_1.NumsMap["".concat(this.baseName)].get(val);
                            if (!spt || !spt.texture) {
                                img.transform.visible = false;
                                continue;
                            }
                            img.sprite = spt;
                            img.transform.width = img.sprite.rect.w;
                            img.transform.height = img.sprite.rect.h; //余群枝新增
                            // console.error(`${this.baseName}${val}` + "   " + img.sprite.rect.w + "  :  " + img.sprite.rect.h);
                            www += img.transform.width;
                            img.transform.markDirty();
                        }
                    }
                    // console.error(str + "   " + len + "   " + (len * this.gap));
                    this.transform.width = len * this.gap;
                    this.transform.markDirty();
                };
                imgNum.prototype.ckGenimg = function (len) {
                    //暂时处理 后续优化 余群枝
                    if (this.ImgArr) {
                        this.ImgArr.forEach(function (img) {
                            img.transform.visible = false;
                        });
                        this.ImgArr.length = 0;
                        this.transform.removeAllChild();
                    }
                    var needlen = len - this.ImgArr.length;
                    if (needlen < 0) {
                        return;
                    }
                    var opt = m4m.framework.layoutOption;
                    for (var i = len - needlen; i < len; i++) {
                        var imgtran = this.template.transform.clone();
                        this.transform.addChild(this.addShell(imgtran, i));
                        var img = imgtran.getComponent("image2D");
                        m4m.math.colorClone(this.cacheColor, img.color);
                        this.ImgArr.push(img);
                    }
                };
                imgNum.prototype.addShell = function (tran, pos) {
                    var opt = m4m.framework.layoutOption;
                    var shell = new m4m.framework.transform2D();
                    shell.width = this.gap;
                    shell.layoutState = this.shellLayoutState; //opt.V_CENTER | opt.LEFT;
                    tran.layoutState = this.tranLayoutState; //opt.V_CENTER | opt.H_CENTER;
                    shell.transform.setLayoutValue(opt.LEFT, this.gap * pos);
                    shell.addChild(tran);
                    return shell;
                };
                var imgNum_1;
                imgNum.NumsMap = {};
                imgNum.iconSprStr = ".atlas.json_";
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], imgNum.prototype, "template", void 0);
                __decorate([
                    m4m.reflect.Field("number")
                ], imgNum.prototype, "gap", void 0);
                imgNum = imgNum_1 = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], imgNum);
                return imgNum;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiFloat", [], function (exports_81, context_81) {
    "use strict";
    var uiFloat;
    var __moduleName = context_81 && context_81.id;
    return {
        setters: [],
        execute: function () {
            exports_81("uiFloat", uiFloat = /** @class */ (function (_super) {
                __extends(uiFloat, _super);
                // tslint:disable-next-line: class-name
                function uiFloat() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.clickTime = 0;
                    return _this;
                }
                uiFloat.prototype.onPlay = function () {
                    // this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640);
                    // this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200);
                    // this.floatIcon.transform.markDirty();
                    // this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640);
                    // this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200);
                    // this.clickBtn.transform.markDirty();
                    // this.clickBtn.addListener(m4m.event.UIEventEnum.PointerClick, this.onClick, this);
                    // this.timeCount = 15;
                };
                uiFloat.prototype.update = function (delta) {
                    // if (this.testBool) {
                    //     this.createBox();
                    // } else {
                    //     this.clickTime += delta;
                    //     // console.error(`[开始计算时间：]   ${this.clickTime}`);
                    //     if (this.clickTime <= this.timeCount) {//超过多少5秒
                    //         this.floatIcon.transform.visible = false;
                    //         this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640);
                    //         this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200);
                    //         this.floatIcon.transform.markDirty();
                    //         this.clickBtn.transform.visible = false;
                    //         this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640);
                    //         this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200);
                    //         this.clickBtn.transform.markDirty();
                    //     } else {
                    //         this.createBox();
                    //     }
                    // }
                };
                uiFloat.prototype.testFun = function () {
                    // this.testBool = true;
                };
                uiFloat.prototype.setBG = function () {
                    // //设置背景图片
                    // this.setIcon(GameMgr.iconPath + "shoppresent.png", this.floatIcon);
                };
                //生成宝箱
                uiFloat.prototype.createBox = function () {
                    // if (this.moveX > 0 && this.moveX < 1) {
                    // }
                    // this.floatIcon.transform.visible = true;
                    // this.clickBtn.transform.visible = true;
                    // this.movePosx = this.moveSpeed * this.moveX;
                    // this.moveX += 0.5;
                    // if (this.moveY < 8) {
                    //     this.moveY += 0.5;
                    //     this.movePosy = 2;
                    // } else if (this.moveY >= 8 && this.moveY < 16) {
                    //     this.movePosy = -2;
                    //     this.moveY += 0.5;
                    // } else {
                    //     this.moveY = 0;
                    //     this.movePosy = 0;
                    // }
                    // this.movePosy += this.movePosy;
                    // this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640 + this.moveSpeed * this.moveX);
                    // this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200 + this.movePosy);
                    // this.floatIcon.transform.markDirty();
                    // this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640 + this.moveSpeed * this.moveX);
                    // this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200 + this.movePosy);
                    // this.clickBtn.transform.markDirty();
                    // if (this.movePosx > 1280) {
                    //     // console.error(`[宝箱：]超出屏幕隐藏`);
                    //     this.floatIcon.transform.visible = false;
                    //     this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640);
                    //     this.floatIcon.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200);
                    //     this.floatIcon.transform.markDirty();
                    //     this.clickBtn.transform.visible = false;
                    //     this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.H_CENTER, -640);
                    //     this.clickBtn.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -200);
                    //     this.clickBtn.transform.markDirty();
                    //     this.clickTime = 0;
                    //     this.movePosx = 0;
                    //     this.moveX = 0;
                    //     // console.error(`[计时时间：]${this.clickTime}`);
                    // }
                };
                //点击了图标
                uiFloat.prototype.onClick = function () {
                    // this.timeCount = hsUtil.RandRange(15, 25, true);//从15-25之间取一个随机整数
                    // console.error(`[刷宝箱时间间隔：]${this.timeCount}`);
                    // TryUseTool.BuildTryUse();
                    // // treasureChestPage.setluckyIconShow(false);//礼包屏蔽
                    // // treasureChestPage.playAnimation();
                    // this.floatIcon.transform.visible = false;
                    // this.clickBtn.transform.visible = false;
                    // this.clickTime = 0;
                    // this.movePosx = 0;
                    // this.moveX = 0;
                };
                uiFloat.prototype.setIcon = function (src, icon) {
                    // commTool.loaderTextureFun(src, (_tex) => {
                    //     icon.image = _tex;
                    //     icon.transform.markDirty();
                    //     // icon.color = new m4m.math.color(1, 1, 1, 1);
                    // });
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], uiFloat.prototype, "floatIcon", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], uiFloat.prototype, "clickBtn", void 0);
                uiFloat = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiFloat);
                return uiFloat;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiImageSlider", [], function (exports_82, context_82) {
    "use strict";
    var uiImageSlider;
    var __moduleName = context_82 && context_82.id;
    return {
        setters: [],
        execute: function () {
            exports_82("uiImageSlider", uiImageSlider = /** @class */ (function (_super) {
                __extends(uiImageSlider, _super);
                // tslint:disable-next-line: class-name
                function uiImageSlider() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.defIconHeight = 0;
                    _this.defYY = 0;
                    //可移动区间值
                    _this.moveInterval = 0;
                    _this.imageMoveInterval = 0;
                    return _this;
                }
                uiImageSlider.prototype.onPlay = function () {
                    this.scrollRect.onMoveFun = this.onMoveFun.bind(this);
                    this.defIconHeight = this.imageTrans.height;
                    if (this.imageTrans) {
                        this.defYY = this.imageTrans.localTranslate.y;
                    }
                };
                //设置 滑动区域大小 完成
                uiImageSlider.prototype.setContentEnd = function () {
                    if (this.content) {
                        this.content.localTranslate.y = 0; //便于计算 切换滑动内容时先置顶
                        this.moveInterval = this.content.height - this.scrollRect.transform.height;
                        if (this.moveInterval > 10) {
                            this.imageTrans.visible = true;
                            if (this.imageBgTrans) {
                                this.imageBgTrans.visible = true;
                            }
                            var percentage = this.scrollRect.transform.height / this.content.height;
                            if (percentage < 0.2) {
                                percentage = 0.2;
                            }
                            this.imageTrans.height = this.defIconHeight * percentage;
                            this.imageTrans.localTranslate.y = this.defYY;
                            this.imageTrans.markDirty();
                            this.imageMoveInterval = this.defIconHeight - this.imageTrans.height;
                            this.onMoveFun(0, 1);
                        }
                        else {
                            this.imageTrans.visible = false;
                            if (this.imageBgTrans) {
                                this.imageBgTrans.visible = false;
                            }
                        }
                    }
                };
                uiImageSlider.prototype.onMoveFun = function (x, y) {
                    // console.warn(x+"  滑动区域  "+y);
                    if (y != 0) {
                        if (this.moveInterval > 0) {
                            if (this.content && this.imageTrans) {
                                var proNum = Math.abs(this.content.localTranslate.y / this.moveInterval);
                                // console.warn(proNum + "   " + this.content.localTranslate.y + "   ++  " + this.content.height);
                                this.imageTrans.localTranslate.y = this.defYY + this.imageMoveInterval * proNum;
                                this.imageTrans.markDirty();
                            }
                        }
                    }
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "scrollRect")
                ], uiImageSlider.prototype, "scrollRect", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], uiImageSlider.prototype, "content", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], uiImageSlider.prototype, "imageTrans", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], uiImageSlider.prototype, "imageBgTrans", void 0);
                uiImageSlider = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiImageSlider);
                return uiImageSlider;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/ubiAdvIcon", ["Tools/commTool", "Tools/miniGame"], function (exports_83, context_83) {
    "use strict";
    var commTool_2, miniGame_4, ubiAdvIcon;
    var __moduleName = context_83 && context_83.id;
    return {
        setters: [
            function (commTool_2_1) {
                commTool_2 = commTool_2_1;
            },
            function (miniGame_4_1) {
                miniGame_4 = miniGame_4_1;
            }
        ],
        execute: function () {
            exports_83("ubiAdvIcon", ubiAdvIcon = /** @class */ (function (_super) {
                __extends(ubiAdvIcon, _super);
                // tslint:disable-next-line: class-name
                function ubiAdvIcon() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.intervals = 1 / 24; //24f/s
                    _this.imglist = [];
                    _this.imgTexs = []; //序列帧贴图
                    _this.jumptargetAppid = ""; //跳转的目标id
                    _this.isShake = true;
                    _this.waitCount = 0;
                    _this.shakeCount = 0;
                    _this.shakeTime = 1;
                    _this.shakeSpeed = 2; //拍动速度
                    _this.tp = 0;
                    // tslint:disable-next-line: binary-expression-operand-order
                    _this.angleRange = 30 * Math.PI / 180;
                    _this.ranimCount = 0;
                    _this.playIdx = 0;
                    return _this;
                }
                /** 设置icon 通过获取 的数据
                 * res.id   跳转的appID
                 * res.frames  序列图存放CDN URL
                 * res.name  帧图 序列前缀
                 * res.count 帧数量
                 *
                 * delay 延迟执行
                 */
                ubiAdvIcon.prototype.setIcon = function (res, delay) {
                    var _this = this;
                    if (delay === void 0) { delay = 0; }
                    if (!res) {
                        return;
                    }
                    setTimeout(function () {
                        _this.dosetIcon(res);
                    }, delay);
                };
                ubiAdvIcon.prototype.onPlay = function () {
                    var _this = this;
                    //icon init
                    var opt = m4m.framework.layoutOption;
                    var tran = new m4m.framework.transform2D();
                    this.transform.addChild(tran);
                    tran.name = "ubi_advert_Img";
                    tran.layoutState = opt.TOP | opt.BOTTOM | opt.RIGHT | opt.LEFT;
                    this.icon = tran.transform.addComponent("rawImage2D");
                    //click
                    var btn = this.transform.addComponent("button");
                    btn.addListener(m4m.event.UIEventEnum.PointerDown, function () {
                        // wxTool.openMiniPrograme(this.jumptargetAppid,"");
                        miniGame_4.miniGame.openMiniPrograme(_this.jumptargetAppid, "");
                        if (_this.onClickIcon) {
                            _this.onClickIcon();
                        }
                    }, this);
                };
                ubiAdvIcon.prototype.update = function (delta) {
                    if (!this.transform.visible) {
                        return;
                    }
                    if (this.currAnimFun) {
                        this.currAnimFun(delta);
                    }
                };
                ubiAdvIcon.prototype.remove = function () {
                };
                ubiAdvIcon.prototype.dosetIcon = function (res) {
                    if (!res) {
                        return;
                    }
                    this.playIdx = 0;
                    this.currAnimFun = this.swFrame_shake;
                    // this.imglist = res.data.imglist;
                    this.imglist.length = 0;
                    var len = res.count;
                    for (var i = 0; i < len; i++) {
                        var idx = i <= 9 ? "0".concat(i) : "".concat(i);
                        this.imglist.push("".concat(res.frames).concat(res.name).concat(idx, ".png"));
                    }
                    this.jumptargetAppid = res.id;
                    this.loadImg();
                    //旋转复位
                    this.transform.localRotate = 0;
                };
                ubiAdvIcon.prototype.loadImg = function () {
                    var _this = this;
                    this.imgTexs.length = 0;
                    var count = 0;
                    this.imglist.forEach(function (url, idx) {
                        commTool_2.commTool.loaderTextureFun(url, function (tex) {
                            // wxTool.ImgLoad(url,(tex)=>{
                            count++;
                            _this.imgTexs[idx] = tex;
                            if (count >= _this.imglist.length) {
                                _this.chageIconF();
                            }
                        });
                        // commTool.ImgByLoad(url,(tex)=>{
                        // // wxTool.ImgLoad(url,(tex)=>{
                        //     count++;
                        //     this.imgTexs[idx] = tex;
                        //     if(count >= this.imglist.length){
                        //         this.chageIconF();
                        //     }
                        // });
                    });
                };
                //摇晃动画
                ubiAdvIcon.prototype.shakeAnim = function (delta) {
                    if (this.isShake) {
                        this.tp += delta * this.shakeSpeed;
                        this.tp = this.tp > 1 ? this.tp - 1 : this.tp;
                        var angle = 0;
                        var tMethod = m4m.framework.tweenMethod;
                        if (this.tp <= 0.5) {
                            angle = commTool_2.commTool.tweenInOut(this.tp * 2, this.angleRange, tMethod.QuadEaseIn, tMethod.QuadEaseOut);
                        }
                        else {
                            angle = commTool_2.commTool.tweenInOut((2 - this.tp * 2), this.angleRange, tMethod.QuadEaseIn, tMethod.QuadEaseOut);
                        }
                        var half = this.angleRange / 2;
                        var fTemp = angle <= half ? angle - half : angle - half;
                        this.shakeCount += delta;
                        if (this.shakeCount >= this.shakeTime) {
                            this.shakeCount = 0;
                            this.tp = 0;
                            this.isShake = false;
                            fTemp = 0;
                        }
                        this.transform.localRotate = fTemp;
                        this.transform.markDirty();
                    }
                    else {
                        this.waitCount += delta;
                        if (this.waitCount >= this.shakeTime) {
                            this.waitCount = 0;
                            this.isShake = true;
                        }
                    }
                };
                //序列帧切换动画
                ubiAdvIcon.prototype.swFrameAnim = function (delta) {
                    this.ranimCount += delta;
                    if (this.ranimCount >= this.intervals) {
                        this.ranimCount = 0;
                        this.chageIconF();
                    }
                };
                //序列帧切换 + 摇晃动画
                ubiAdvIcon.prototype.swFrame_shake = function (delta) {
                    this.swFrameAnim(delta);
                    this.shakeAnim(delta);
                };
                //改变icon
                ubiAdvIcon.prototype.chageIconF = function () {
                    if (this.imgTexs.length < 1 || !this.icon) {
                        return;
                    }
                    var tex = this.imgTexs[this.playIdx];
                    this.icon.image = tex;
                    this.playIdx++;
                    this.playIdx = this.playIdx % this.imgTexs.length;
                };
                ubiAdvIcon.advW = 142; //统一尺寸
                ubiAdvIcon.advH = 156;
                ubiAdvIcon = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], ubiAdvIcon);
                return ubiAdvIcon;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Tools/CrossPromotion", [], function (exports_84, context_84) {
    "use strict";
    var CrossPromotion, crossPromo;
    var __moduleName = context_84 && context_84.id;
    return {
        setters: [],
        execute: function () {
            CrossPromotion = /** @class */ (function () {
                function CrossPromotion() {
                    /**
                     * URL of the config file. You can change it before init for test purpose
                     */
                    this.configUrl = "https://umc-static-content.upaidui.com/crosspromotion/cp_config.json";
                    this.popupEntities = [];
                    this.crossEntities = [];
                    this.cachedIndex = -1;
                    this._displayDot = false;
                    this.inited = false;
                }
                Object.defineProperty(CrossPromotion.prototype, "displayDot", {
                    /**
                     * flag if we should highlight crosspromotion button. For example add a red dot beside the button.
                     */
                    get: function () {
                        return this._displayDot;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * fetch the config file from CDN
                 * @param entryName entity name of current game
                 */
                CrossPromotion.prototype.init = function (entryName) {
                    var _this = this;
                    this.entryName = entryName;
                    return new Promise(function (resolve, reject) {
                        if (!_this.entryName) {
                            console.error("entryName is not defined in CrossPromotion");
                            reject();
                            return;
                        }
                        if (_this.inited) {
                            resolve(null);
                            return;
                        }
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                if (xhr.status === 200) {
                                    _this.parseResponse(JSON.parse(xhr.responseText));
                                    _this.inited = true;
                                    resolve(null);
                                }
                                else {
                                    reject();
                                }
                            }
                        };
                        xhr.open("GET", _this.configUrl, true);
                        xhr.send();
                    });
                };
                /**
                 * navigate to the mini program of the entity. If the mini program is not whitelisted, it will use QRCode.
                 * this function will also record events on talkingdata if talkingdata is integrated.
                 * @param entity the entity of the target mini game.
                 * @param type the source's type.  cross means it comes from a GIF-like animation(using frames in entity to display the target entity)
                 * @param params additional parameters to be added to talkingdata event
                 */
                CrossPromotion.prototype.navigateToMiniProgram = function (entity, type, params) {
                    var _this = this;
                    if (params === void 0) { params = {}; }
                    if (GameGlobal && GameGlobal.tdAppSdk) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        params = __assign(__assign({}, params), { from: this.entryName, to: entity.appCode, type: type });
                        var sdk = GameGlobal.tdAppSdk;
                        sdk.event({
                            id: "cp_clicked_" + entity.appCode + "_" + type,
                            params: params,
                        });
                    }
                    else {
                        console.error("cannot find talking data sdk, cross promotion events will not be tracked");
                    }
                    wx.navigateToMiniProgram({
                        appId: entity.appId,
                        path: "",
                        extraData: null,
                        fail: function (res) {
                            if (res && res.errMsg) {
                                if (res.errMsg.indexOf("navigateToMiniProgramAppIdList") >= 0) {
                                    _this.previewQrcode(entity, type);
                                    // tslint:disable-next-line: max-line-length
                                    console.error("target mini program is not inside navigateToMiniProgramAppIdList, use qrcode instead, crossPromoSucceed cannot be tracked");
                                }
                                else {
                                    console.error("navigateToMiniProgram", res.errMsg);
                                }
                            }
                        },
                        success: function (res) {
                            if (GameGlobal && GameGlobal.tdAppSdk) {
                                var sdk = GameGlobal.tdAppSdk;
                                sdk.event({
                                    id: "cp_go_" + entity.appCode + "_" + type,
                                    params: params,
                                });
                            }
                        },
                    });
                };
                /**
                 * Use QRCode for user to navigate to the mini program of the entity.
                 * this function will also record events on talkingdata if talkingdata is integrated.
                 * Unlike navigateToMiniProgram, we don't know if user really jump to the other game. Only click event will be recorded.
                 * @param entity the entity of the target mini game.
                 * @param type the source's type.  cross means it comes from a GIF-like animation(using frames in entity to display the target entity)
                 * @param params additional parameters to be added to talkingdata event
                 */
                CrossPromotion.prototype.previewQrcode = function (entity, type, params) {
                    if (params === void 0) { params = {}; }
                    if (GameGlobal && GameGlobal.tdAppSdk) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        params = __assign(__assign({}, params), { from: this.entryName, to: entity.appCode, type: type });
                        var sdk = GameGlobal.tdAppSdk;
                        sdk.event({
                            id: "cp_clicked_" + entity.appCode + "_" + type,
                            params: params,
                        });
                    }
                    else {
                        console.error("cannot find talking data sdk, cross promotion events will not be tracked");
                    }
                    if (!entity.qrcode) {
                        console.error("target mini program does not have a qrcode");
                        return;
                    }
                    var entities;
                    if (type === "cross") {
                        entities = [entity];
                    }
                    else {
                        entities = this.getPopupEntities();
                    }
                    var urls = [];
                    for (var i = 0; i < entities.length; i++) {
                        if (entities[i].qrcode) {
                            urls.push(entities[i].qrcode);
                        }
                    }
                    wx.previewImage({
                        current: entity.qrcode,
                        urls: urls,
                    });
                };
                /**
                 * @deprecated return a random one in crossEntities
                 */
                CrossPromotion.prototype.randomOne = function () {
                    var totalWeight = 0;
                    for (var i = 0; i < this.crossEntities.length; i++) {
                        totalWeight += this.crossEntities[i].weight;
                    }
                    var random = Math.random() * totalWeight;
                    for (var i = 0; i < this.crossEntities.length; i++) {
                        random -= this.crossEntities[i].weight;
                        if (random < 0) {
                            this.cachedIndex = i;
                            return this.crossEntities[i];
                        }
                    }
                    return null;
                };
                /**
                 * @deprecated return a cached one in crossEntities
                 */
                CrossPromotion.prototype.getCached = function () {
                    if (this.cachedIndex < 0) {
                        return null;
                    }
                    return this.crossEntities[this.cachedIndex];
                };
                /**
                 * Get all the entities can be displayed in GIF-like animation
                 */
                CrossPromotion.prototype.getCrossEntities = function () {
                    return this.crossEntities.slice();
                };
                /**
                 * Get all the entities can be displayed in static image.
                 */
                CrossPromotion.prototype.getPopupEntities = function () {
                    return this.popupEntities.slice();
                };
                CrossPromotion.prototype.parseResponse = function (data) {
                    var entities = {};
                    // import crossEntities
                    if (data["cross"]) {
                        var crossEntities = data["cross"][this.entryName];
                        for (var i = 0; crossEntities && i < crossEntities.length; i++) {
                            var appCode = crossEntities[i];
                            if (!entities[appCode]) {
                                entities[appCode] = this.parseCrossPromotionEntity(appCode, data[appCode]);
                            }
                            if (entities[appCode] && entities[appCode].weight > 0) {
                                this.crossEntities.push(entities[appCode]);
                            }
                        }
                    }
                    // import popupEntities
                    if (data["popup"]) {
                        var popupEntities = data["popup"][this.entryName];
                        for (var i = 0; popupEntities && i < popupEntities.length; i++) {
                            var appCode = popupEntities[i];
                            if (!entities[appCode]) {
                                entities[appCode] = this.parseCrossPromotionEntity(appCode, data[appCode]);
                            }
                            if (entities[appCode]) {
                                this.popupEntities.push(entities[appCode]);
                            }
                        }
                    }
                    if (data["dot"]) {
                        this._displayDot = data["dot"][this.entryName] || false;
                    }
                };
                CrossPromotion.prototype.parseCrossPromotionEntity = function (appCode, data) {
                    var frames = [];
                    for (var i = 0; i < data.count; i++) {
                        frames.push(data.frames + data.name + (i < 10 ? "0" : "") + i + (data.ext ? data.ext : ".png"));
                    }
                    var weight = 1;
                    if (typeof data.weight === "number") {
                        weight = data.weight;
                    }
                    else {
                        if (data.weight) {
                            if (typeof data.weight[this.entryName] === "number") {
                                weight = data.weight[this.entryName];
                            }
                        }
                    }
                    return {
                        frames: frames,
                        appId: data.id,
                        icon: data.icon ? data.frames + data.icon : "",
                        qrcode: data.qrcode ? data.frames + data.qrcode : "",
                        appCode: appCode,
                        weight: weight,
                        displayName: data.displayName || {},
                    };
                };
                return CrossPromotion;
            }());
            exports_84("CrossPromotion", CrossPromotion);
            exports_84("crossPromo", crossPromo = new CrossPromotion());
        }
    };
});
/** 内部广告 管理器 */
System.register("Tools/advMgr", ["Tools/CrossPromotion", "Tools/miniGame"], function (exports_85, context_85) {
    "use strict";
    var CrossPromotion_1, miniGame_5, advMgr;
    var __moduleName = context_85 && context_85.id;
    return {
        setters: [
            function (CrossPromotion_1_1) {
                CrossPromotion_1 = CrossPromotion_1_1;
            },
            function (miniGame_5_1) {
                miniGame_5 = miniGame_5_1;
            }
        ],
        execute: function () {
            /** 内部广告 管理器 */
            exports_85("advMgr", advMgr = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function advMgr() {
                }
                advMgr.init = function () {
                    var _this = this;
                    if (this.inited || miniGame_5.miniGame.miniType == miniGame_5.miniAPIType.none) {
                        return;
                    }
                    this.inited = true;
                    //-------------------------------交叉推广old 逻辑-----------------------
                    miniGame_5.miniGame.requestSimple("GET", this.advUrl, null, function (data) {
                        if (!data || !data.cross) {
                            return;
                        }
                        var tarArr = data.cross["".concat(_this.gameName)];
                        if (!tarArr) {
                            return;
                        }
                        var len = tarArr.length;
                        var ridx = Math.floor(Math.random() * len);
                        var tarStr = tarArr[ridx];
                        var tarObj = data["".concat(tarStr)];
                        if (!tarObj) {
                            return;
                        }
                        _this.sequenceAdvD = tarObj;
                        if (_this.ubiAdv) {
                            _this.ubiAdv.setIcon(_this.sequenceAdvD, 5000);
                        }
                    });
                    //----------------------------------------------------------------------
                    //育碧SDK
                    this.crossPromotion.init(this.gameName)
                        .then(function () {
                        if (_this.onCrossPromotionInited) {
                            _this.onCrossPromotionInited();
                        }
                    });
                };
                advMgr.gameName = "";
                advMgr.crossPromotion = new CrossPromotion_1.CrossPromotion();
                advMgr.advUrl = "https://umc-static-content.upaidui.com/crosspromotion/cp_config.json";
                advMgr.inited = false;
                advMgr.onCrossPromotionInited = function () { };
                return advMgr;
            }()));
        }
    };
});
System.register("UIBase/ubiPopupIcon", ["Tools/advMgr", "Tools/commTool"], function (exports_86, context_86) {
    "use strict";
    var advMgr_1, commTool_3, ubiPopupIcon;
    var __moduleName = context_86 && context_86.id;
    return {
        setters: [
            function (advMgr_1_1) {
                advMgr_1 = advMgr_1_1;
            },
            function (commTool_3_1) {
                commTool_3 = commTool_3_1;
            }
        ],
        execute: function () {
            exports_86("ubiPopupIcon", ubiPopupIcon = /** @class */ (function (_super) {
                __extends(ubiPopupIcon, _super);
                // tslint:disable-next-line: class-name
                function ubiPopupIcon() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.inited = false;
                    return _this;
                }
                ubiPopupIcon_1 = ubiPopupIcon;
                //展示
                ubiPopupIcon.prototype.init = function (_data, scale) {
                    var _this = this;
                    if (scale === void 0) { scale = 1; }
                    if (!_data || !_data.appId || !this.icon || !this.lab) {
                        return;
                    }
                    this.data = _data;
                    if (scale != 1) {
                        if (this.transform) {
                            m4m.math.vec2SetAll(this.transform.localScale, scale);
                        }
                        this.transform.markDirty();
                    }
                    //图片
                    commTool_3.commTool.syncLoadTexture(_data.icon)
                        .then(function (img) {
                        _this.icon.image = img;
                        _this.transform.visible = true;
                    });
                    this.lab.text = _data.displayName[ubiPopupIcon_1.language];
                    //点击事件
                    var btn = this.transform.addComponent("button");
                    btn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
                        console.log("click of ".concat(_this.lab.text, " icon"));
                        if (!_this.data) {
                            return;
                        }
                        advMgr_1.advMgr.crossPromotion.navigateToMiniProgram(_this.data, "popup");
                        // this.data.
                    }, this);
                    this.inited = true;
                };
                var ubiPopupIcon_1;
                ubiPopupIcon.language = "";
                __decorate([
                    m4m.reflect.FieldRef("rawImage2D")
                ], ubiPopupIcon.prototype, "icon", void 0);
                __decorate([
                    m4m.reflect.FieldRef("label")
                ], ubiPopupIcon.prototype, "lab", void 0);
                ubiPopupIcon = ubiPopupIcon_1 = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], ubiPopupIcon);
                return ubiPopupIcon;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiRoll", ["Tools/commTool"], function (exports_87, context_87) {
    "use strict";
    var commTool_4, uiRoll;
    var __moduleName = context_87 && context_87.id;
    return {
        setters: [
            function (commTool_4_1) {
                commTool_4 = commTool_4_1;
            }
        ],
        execute: function () {
            exports_87("uiRoll", uiRoll = /** @class */ (function (_super) {
                __extends(uiRoll, _super);
                // tslint:disable-next-line: class-name
                function uiRoll() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.moveSpeed = 50;
                    return _this;
                }
                uiRoll.prototype.onPlay = function () {
                    // debugger;
                    this.bgArr = [this.bgPan1, this.bgPan2];
                    //设置滚动背景宽度 
                    var p = this.bgPan1.parent;
                    if (this.bgPan1.width < p.width) { //当小于 初始宽度时 
                        // let rate = this.handle.bgPan1.width / p.width;
                        var rate = p.width / this.bgPan1.width;
                        this.bgPan1.width = p.width;
                        this.bgPan2.width = p.width;
                        //处理缩放 避免拉升变形
                        this.bgPan1.height *= rate;
                        this.bgPan2.height *= rate;
                    }
                    var opt = m4m.framework.layoutOption;
                    this.bgPan1.setLayoutValue(opt.LEFT, 0);
                    this.bgPan1.markDirty();
                    this.bgPan2.setLayoutValue(opt.LEFT, this.bgArr[0].width);
                    this.bgPan2.markDirty();
                };
                uiRoll.prototype.update = function (delta) {
                    var w = this.bgArr[0].width;
                    //滚动背景
                    var opt = m4m.framework.layoutOption;
                    var pos = this.bgArr[0].getLayoutValue(opt.LEFT);
                    // if(pos<=-1280){
                    if (pos <= -w) {
                        var a = this.bgArr.shift();
                        this.bgArr.push(a);
                        this.bgArr[0].setLayoutValue(opt.LEFT, 0);
                        this.bgArr[1].setLayoutValue(opt.LEFT, w);
                    }
                    for (var i = 0, len = this.bgArr.length; i < len; ++i) {
                        this.bgArr[i].setLayoutValue(opt.LEFT, this.bgArr[i].getLayoutValue(opt.LEFT) - this.moveSpeed * delta);
                        this.bgArr[i].markDirty();
                    }
                };
                uiRoll.prototype.setBG = function (TexPath) {
                    //设置背景图片
                    // this.setBg(GameMgr.TexPath + "loadTipbg.jpg", this.bg1, this.bg2);
                    this.setBg(TexPath + "loadTipbg.jpg", this.bg1, this.bg2);
                };
                uiRoll.prototype.remove = function () {
                };
                //设置背景波浪图
                // private LoadBg() {
                //     this.setBg(GameMgr.TexPath + "loadTipbg.jpg", this.bg1,this.bg2);
                // }
                uiRoll.prototype.setBg = function (src, icon, icon1) {
                    var _this = this;
                    commTool_4.commTool.loaderTextureFun(src, function (_tex) {
                        icon.image = _tex;
                        icon1.image = _tex;
                        icon.color = new m4m.math.color(1, 1, 1, 1);
                        icon1.color = new m4m.math.color(1, 1, 1, 1);
                        if (_this.onLoaded) {
                            _this.onLoaded();
                        }
                    });
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], uiRoll.prototype, "bgPan1", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], uiRoll.prototype, "bgPan2", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], uiRoll.prototype, "bg1", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], uiRoll.prototype, "bg2", void 0);
                uiRoll = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiRoll);
                return uiRoll;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiScaleDown", [], function (exports_88, context_88) {
    "use strict";
    var uiScaleDown;
    var __moduleName = context_88 && context_88.id;
    return {
        setters: [],
        execute: function () {
            exports_88("uiScaleDown", uiScaleDown = /** @class */ (function (_super) {
                __extends(uiScaleDown, _super);
                // tslint:disable-next-line: class-name
                function uiScaleDown() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 是否循环播放 */
                    _this.isLoop = false;
                    /** 播放速度 f/s (帧每秒)*/
                    _this.playSpeed = 5;
                    _this.runState = false;
                    _this.mth = 0;
                    _this.time = 0;
                    _this.coutTime = 2;
                    _this.scale = 1;
                    return _this;
                }
                uiScaleDown.prototype.onPlay = function () {
                    this.mth = m4m.framework.tweenMethod.BackEaseIn;
                };
                uiScaleDown.prototype.play = function () {
                    if (this.runState) {
                        return;
                    }
                    this.runState = true;
                    this.scale = 1;
                    this.time = 0;
                    this.transform.visible = true;
                    this.resTransform();
                };
                uiScaleDown.prototype.stop = function () {
                    this.runState = false;
                    // this.scale = 0;
                    this.time = 0;
                    this.transform.visible = false;
                    this.resTransform();
                };
                uiScaleDown.prototype.update = function (delta) {
                    if (!this.runState) {
                        return;
                    }
                    var num = delta * this.playSpeed;
                    this.time += num;
                    var p = this.time / this.coutTime;
                    //
                    var tp = m4m.framework.tweenUtil.GetEaseProgress(this.mth, p);
                    this.scale = 1 - tp;
                    //console.error("this.scale   "+this.scale+"  num  "+num);
                    this.resTransform();
                    if (this.time > this.coutTime) {
                        this.stop();
                        if (this.lastFun) {
                            this.lastFun();
                        }
                    }
                };
                uiScaleDown.prototype.remove = function () {
                };
                uiScaleDown.prototype.resTransform = function () {
                    if (this.transform) {
                        this.transform.localScale.x = this.scale;
                        this.transform.localScale.y = this.scale;
                        this.transform.markDirty();
                    }
                };
                uiScaleDown = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiScaleDown);
                return uiScaleDown;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiScaleAnimation", [], function (exports_89, context_89) {
    "use strict";
    var uiScaleAnimation;
    var __moduleName = context_89 && context_89.id;
    return {
        setters: [],
        execute: function () {
            exports_89("uiScaleAnimation", uiScaleAnimation = /** @class */ (function (_super) {
                __extends(uiScaleAnimation, _super);
                // tslint:disable-next-line: class-name
                function uiScaleAnimation() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 是否循环播放 */
                    _this.isLoop = false;
                    /** 播放速度 f/s (帧每秒)*/
                    _this.playSpeed = 5;
                    _this.runState = false;
                    _this.mth = 0;
                    _this.time = 0;
                    _this.coutTime = 7.5;
                    _this.scale = 1;
                    return _this;
                }
                uiScaleAnimation.prototype.onPlay = function () {
                    this.mth = m4m.framework.tweenMethod.ElasticEaseOut;
                };
                uiScaleAnimation.prototype.play = function () {
                    this.scale = 0;
                    this.time = 0;
                    this.runState = true;
                    this.transform.visible = true;
                    this.resTransform();
                };
                uiScaleAnimation.prototype.stop = function () {
                    this.runState = false;
                    this.time = 0;
                    this.scale = 1;
                    this.resTransform();
                };
                uiScaleAnimation.prototype.update = function (delta) {
                    if (!this.runState) {
                        return;
                    }
                    var num = delta * this.playSpeed;
                    this.time += num;
                    var p = this.time / this.coutTime;
                    //
                    this.scale = m4m.framework.tweenUtil.GetEaseProgress(this.mth, p);
                    //  console.error("this.scale   "+this.scale+"  num  "+num);
                    this.resTransform();
                    if (this.time >= this.coutTime) {
                        this.stop();
                        if (this.lastFun) {
                            this.lastFun();
                        }
                    }
                };
                uiScaleAnimation.prototype.remove = function () {
                };
                uiScaleAnimation.prototype.resTransform = function () {
                    if (this.transform) {
                        this.transform.localScale.x = this.scale;
                        this.transform.localScale.y = this.scale;
                        this.transform.markDirty();
                    }
                };
                uiScaleAnimation = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiScaleAnimation);
                return uiScaleAnimation;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiSpring", [], function (exports_90, context_90) {
    "use strict";
    var uiSpring;
    var __moduleName = context_90 && context_90.id;
    return {
        setters: [],
        execute: function () {
            exports_90("uiSpring", uiSpring = /** @class */ (function (_super) {
                __extends(uiSpring, _super);
                // tslint:disable-next-line: class-name
                function uiSpring() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.num = 0;
                    _this.addNum = 0;
                    _this.isright = true;
                    return _this;
                }
                uiSpring.prototype.onPlay = function () {
                    this.addNum = 1;
                };
                uiSpring.prototype.update = function (delta) {
                    if (this.transform == null || !this.transform.visible) {
                        return;
                    }
                    this.transform.localTranslate.x += this.addNum;
                    this.transform.markDirty();
                    this.num += this.addNum;
                    // if (this.isright) {
                    if (this.num >= 30) {
                        this.addNum = -1;
                    }
                    else if (this.num <= 0) {
                        this.addNum = 1;
                    }
                    // } else {
                    //     if (this.num <= -30) {
                    //         this.addNum = 1;
                    //     } else if (this.num >= 0) {
                    //         this.addNum = -1;
                    //     }
                    // }
                };
                uiSpring.prototype.setLeft = function () {
                    this.isright = false;
                    this.num = 0;
                };
                uiSpring.prototype.remove = function () {
                };
                uiSpring = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiSpring);
                return uiSpring;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/sequenceFrame", [], function (exports_91, context_91) {
    "use strict";
    var sequenceFrame;
    var __moduleName = context_91 && context_91.id;
    return {
        setters: [],
        execute: function () {
            exports_91("sequenceFrame", sequenceFrame = /** @class */ (function (_super) {
                __extends(sequenceFrame, _super);
                // tslint:disable-next-line: class-name
                function sequenceFrame() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 是否循环播放 */
                    _this.isLoop = false;
                    /** sprite 列表 */
                    _this.sps = [];
                    _this.isplay = false;
                    /** 播放速率 f/s (每秒播放次数)*/
                    _this._framerate = 24;
                    /** 是否初始化了 */
                    _this.inited = false;
                    /** 帧间隔时间 */
                    _this._interval = 1 / _this._framerate;
                    /** 帧间隔 delata记时 */
                    _this.frameDelata = 0;
                    /** 当前帧 */
                    _this.currF = 0;
                    /** 图集资源URL */
                    _this._atlasAssetUrl = "";
                    /** 单图集模式 */
                    _this._isSingleAtlasMode = false;
                    return _this;
                }
                Object.defineProperty(sequenceFrame.prototype, "framerate", {
                    /** 播放速率 f/s (每秒播放次数)*/
                    get: function () { return this._framerate; },
                    set: function (v) {
                        if (isNaN(v) || v < 0) {
                            return;
                        }
                        this._framerate = v;
                        this._interval = 1 / this._framerate;
                    },
                    enumerable: false,
                    configurable: true
                });
                sequenceFrame.prototype.onPlay = function () {
                };
                /**
                 * 设置图集资源的路径(设置后 走单图集 初始化模式 , 非必选)
                 * 例如：xxx/图集名
                 * @param atlasAssetUrl
                 */
                sequenceFrame.prototype.setAssetUrl = function (atlasAssetUrl) {
                    this._atlasAssetUrl = atlasAssetUrl;
                    this._isSingleAtlasMode = true;
                };
                /** 播放  */
                sequenceFrame.prototype.play = function () {
                    if (this.isplay) {
                        return;
                    }
                    this.transform.visible = true;
                    this.isplay = true;
                    this.currF = 0;
                    this.frameDelata = 0;
                };
                /** 暂停播放 */
                sequenceFrame.prototype.stop = function () {
                    if (!this.isplay) {
                        return;
                    }
                    this.transform.visible = false;
                    this.isplay = false;
                };
                sequenceFrame.prototype.update = function (delta) {
                    if (!this.isplay) {
                        return;
                    }
                    this.frameDelata += delta;
                    if (this.frameDelata < this._interval) {
                        return;
                    }
                    this.frameDelata = 0;
                    this.init();
                    if (this.sps.length == 0) {
                        return;
                    }
                    var sp = this.sps[this.currF];
                    if (sp) {
                        this.img.sprite = sp;
                    }
                    this.currF++;
                    if (this.currF == this.sps.length) {
                        this.currF = 0;
                        if (!this.isLoop) {
                            this.stop();
                        }
                    }
                };
                sequenceFrame.prototype.remove = function () {
                    if (this.sps) {
                        this.sps.length = 0;
                    }
                    this.img = null;
                    this.sps = null;
                };
                /** 初始化 */
                sequenceFrame.prototype.init = function () {
                    if (this.inited) {
                        return;
                    }
                    this.inited = true;
                    var img = this.transform.getComponent("image2D");
                    if (!img) {
                        return;
                    }
                    this.img = img;
                    //init set 
                    if (this._isSingleAtlasMode) {
                        this.initBySingleAtlas();
                    }
                    else {
                        this.initByMaxNum();
                    }
                };
                /** 单图集模式 */
                sequenceFrame.prototype.initBySingleAtlas = function () {
                    if (!this._atlasAssetUrl) {
                        console.error(" atlas 相应路径 未设置  !!！");
                        return;
                    }
                    var atlasSuffix = ".atlas.json";
                    var bundleSuffix = ".assetbundle.json";
                    var atlasName = this.img["_spriteName"];
                    if (!atlasName) {
                        atlasName = this._atlasAssetUrl.substring(this._atlasAssetUrl.lastIndexOf("/"));
                        atlasName += atlasSuffix;
                        // atlasName = this.atlasName;
                    }
                    var baseAtlasName = atlasName.substring(0, atlasName.lastIndexOf(atlasSuffix));
                    var bundlename = "".concat(this._atlasAssetUrl, "/").concat(baseAtlasName, "/").concat(baseAtlasName).concat(bundleSuffix);
                    var _atles = m4m.framework.sceneMgr.app.getAssetMgr()
                        .getAssetByName(atlasName, bundlename);
                    if (_atles == null) {
                        console.error(atlasName + "     atlas 未找到  !!！");
                        return;
                    }
                    for (var key in _atles.sprites) {
                        var sp = _atles.sprites[key];
                        var charAtindex = Number(key.slice(key.length - 2, key.length));
                        if (sp) {
                            this.sps[charAtindex] = sp;
                        }
                    }
                };
                /** 模板最大值 初始化模式 */
                sequenceFrame.prototype.initByMaxNum = function () {
                    var templateName = this.img["_spriteName"];
                    if (!templateName) {
                        console.warn("initByMaxNum \u5931\u8D25 ,image2d \u7684 _spriteName \u662F\u7A7A\u7684\u3002");
                        return;
                    }
                    var arr = templateName.match(/\d*/g);
                    var lastNumStr = arr[arr.length - 2];
                    var baseName = templateName.split(lastNumStr)[0];
                    var maxNum = Number(lastNumStr); // name = xxx001, 或最后的 数字。
                    var len = maxNum + 1;
                    var assMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                    for (var i = 0; i < len; i++) {
                        var spName = "".concat(baseName).concat(this.numStrFull3(i));
                        var sp = assMgr.getAssetByName(spName);
                        if (!sp) {
                            console.warn("sequenceFrame \u521D\u59CB\u5316\u65F6 , sprite : ".concat(spName, " \u83B7\u53D6\u4E0D\u5230\u3002"));
                        }
                        this.sps.push(sp);
                    }
                };
                /** 长度不够3 的补全 */
                sequenceFrame.prototype.numStrFull3 = function (num) {
                    var str = num.toString();
                    var defCount = 3 - str.length;
                    if (defCount < 0) {
                        defCount = 0;
                    }
                    while (defCount > 0) {
                        defCount--;
                        str = "0" + str;
                    }
                    return str;
                };
                sequenceFrame = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], sequenceFrame);
                return sequenceFrame;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Tools/PlatformUtil", [], function (exports_92, context_92) {
    "use strict";
    var PlatformUtil, SystemQualityType, PlatformType;
    var __moduleName = context_92 && context_92.id;
    return {
        setters: [],
        execute: function () {
            exports_92("PlatformUtil", PlatformUtil = /** @class */ (function () {
                function PlatformUtil() {
                }
                Object.defineProperty(PlatformUtil, "isPCWX", {
                    get: function () {
                        return PlatformUtil.recordWXPlatform == "windows";
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PlatformUtil, "LowOrMediumDevice", {
                    /** 是低端 或 中端 设备 */
                    get: function () { return this.systemQuality < SystemQualityType.high; },
                    enumerable: false,
                    configurable: true
                });
                /** 获取 平台类型信息 通过 navigator 对象 */
                PlatformUtil.getTypeByBrowser = function () {
                    if (!navigator) {
                        console.error("navigator \u6CA1\u627E\u5230\u3002");
                        return null;
                    }
                    //因微信上这里的数据会取得不对  此方法暂不使用
                    var userAgentInfo = navigator.userAgent;
                    var platformType = PlatformType.PC;
                    if (userAgentInfo.indexOf("Android") != -1) {
                        platformType = PlatformType.Android;
                    }
                    else if (userAgentInfo.indexOf("iPhone") != -1) {
                        platformType = PlatformType.iPhone;
                    }
                    else if (userAgentInfo.indexOf("Windows Phone") != -1) {
                        platformType = PlatformType.WindowsPhone;
                    }
                    else if (userAgentInfo.indexOf("iPad") != -1) {
                        platformType = PlatformType.iPad;
                    }
                    else if (userAgentInfo.indexOf("iPod") != -1) {
                        platformType = PlatformType.iPod;
                    }
                    return platformType;
                };
                //平台 （记录用 不用于判断 逻辑）
                PlatformUtil.recordWXPlatform = "";
                //平台
                PlatformUtil.platform = "android";
                //因会被广告位档到  iphone  5  5s   iphone 8  ui整体微调缩小
                PlatformUtil.needUIscale = false;
                //如果是iPhoneX 或 iphone 11
                PlatformUtil.isIPhoneX = false;
                //如果是流海屏
                PlatformUtil.isLiuHai = false;
                //是否是开发工具环境
                PlatformUtil.isDevTool = false;
                return PlatformUtil;
            }()));
            (function (SystemQualityType) {
                SystemQualityType[SystemQualityType["low"] = 0] = "low";
                SystemQualityType[SystemQualityType["middle"] = 1] = "middle";
                SystemQualityType[SystemQualityType["high"] = 2] = "high";
            })(SystemQualityType || (SystemQualityType = {}));
            exports_92("SystemQualityType", SystemQualityType);
            (function (PlatformType) {
                PlatformType[PlatformType["Android"] = 1] = "Android";
                PlatformType[PlatformType["iPhone"] = 2] = "iPhone";
                PlatformType[PlatformType["SymbianOS"] = 3] = "SymbianOS";
                PlatformType[PlatformType["WindowsPhone"] = 4] = "WindowsPhone";
                PlatformType[PlatformType["iPad"] = 5] = "iPad";
                PlatformType[PlatformType["iPod"] = 6] = "iPod";
                PlatformType[PlatformType["PC"] = 7] = "PC";
            })(PlatformType || (PlatformType = {}));
            exports_92("PlatformType", PlatformType);
        }
    };
});
System.register("UIBase/uiBtnDown", ["Tools/PlatformUtil"], function (exports_93, context_93) {
    "use strict";
    var PlatformUtil_1, uiBtnDown;
    var __moduleName = context_93 && context_93.id;
    return {
        setters: [
            function (PlatformUtil_1_1) {
                PlatformUtil_1 = PlatformUtil_1_1;
            }
        ],
        execute: function () {
            exports_93("uiBtnDown", uiBtnDown = /** @class */ (function (_super) {
                __extends(uiBtnDown, _super);
                // tslint:disable-next-line: class-name
                function uiBtnDown() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.scaleList = [];
                    //当前点到的Trans停下的时间
                    _this.currentPauseTime = 0;
                    // 当前点到的Trans暂停
                    _this.currentIspause = false;
                    _this.currentScalNum = 0.5;
                    _this.pauseTime = 0;
                    // 暂停
                    _this.ispause = false;
                    _this.ScalNum = 0.12;
                    _this.maxScaleNum = 1.05;
                    _this.scaleUp = true;
                    //当前缩放比例
                    _this.nowScaleNum = 1;
                    return _this;
                }
                uiBtnDown.prototype.onPlay = function () {
                };
                uiBtnDown.prototype.update = function (delta) {
                    if (PlatformUtil_1.PlatformUtil.systemQuality == PlatformUtil_1.SystemQualityType.low) {
                        //低端机无动画
                        return;
                    }
                    if (this.currentTrans) {
                        if (this.currentIspause) {
                            this.currentPauseTime += delta;
                            if (this.currentPauseTime >= 0.12) {
                                this.currentPauseTime = 0;
                                this.currentIspause = false;
                            }
                        }
                        else {
                            var _deltaNum = this.currentScalNum * delta;
                            if (_deltaNum > 0.04) {
                                _deltaNum = 0.04;
                            }
                            this.currentTrans.localScale.x -= _deltaNum;
                            this.currentTrans.localScale.y -= _deltaNum;
                            this.currentTrans.markDirty();
                            if (this.currentTrans.localScale.x <= 1) {
                                this.currentTrans.localScale.x = 1;
                                this.currentTrans.localScale.y = 1;
                                this.currentTrans.markDirty();
                                if (this.scaleUp) {
                                    this.currentTrans = null;
                                }
                            }
                        }
                    }
                    if (this.scaleList == null || this.scaleList.length == 0 || this.transform.visible == false) {
                        return;
                    }
                    if (this.ispause) {
                        this.pauseTime += delta;
                        if (this.pauseTime >= 0.15) {
                            this.pauseTime = 0;
                            this.ispause = false;
                        }
                        return;
                    }
                    var deltaNum = this.ScalNum * delta;
                    if (deltaNum > 0.04) {
                        deltaNum = 0.04;
                    }
                    if (this.scaleUp) {
                        this.nowScaleNum += deltaNum;
                        if (this.nowScaleNum >= this.maxScaleNum) {
                            this.scaleUp = false;
                            this.nowScaleNum = this.maxScaleNum;
                            this.ispause = true;
                        }
                    }
                    else {
                        this.nowScaleNum -= deltaNum;
                        if (this.nowScaleNum <= 1) {
                            this.scaleUp = true;
                            this.nowScaleNum = 1;
                            this.ispause = true;
                        }
                    }
                    for (var i = 0; i < this.scaleList.length; ++i) {
                        var trans = this.scaleList[i];
                        if (this.currentTrans == trans) {
                            //如果当前点到的目标  不做处理
                            continue;
                        }
                        if (trans) {
                            trans.localScale.x = this.nowScaleNum;
                            trans.localScale.y = this.nowScaleNum;
                            trans.markDirty();
                        }
                    }
                };
                uiBtnDown.prototype.remove = function () {
                };
                uiBtnDown = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiBtnDown);
                return uiBtnDown;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Loader/otherPlan/testCreat", ["Loader/otherPlan/testReadTool", "Loader/otherPlan/loadTools", "Loader/otherPlan/dataType/subClip", "Loader/otherPlan/ktx", "Loader/otherPlan/pvr", "Loader/otherPlan/testLoader", "Data/Map", "UIBase/joyStick", "UIBase/imgNum", "animation/animLoadPlayer", "Tools/miniGame", "UIBase/uiFloat", "UIBase/uiImageSlider", "UIBase/ubiPopupIcon", "UIBase/uiRoll", "UIBase/uiScaleDown", "UIBase/uiScaleAnimation", "Scripts/multiToucher", "UIBase/uiSpring", "UIBase/sequenceFrame", "UIBase/uiBtnDown"], function (exports_94, context_94) {
    "use strict";
    var testReadTool_1, loadTools_3, subClip_1, ktx_1, pvr_1, testLoader_1, Map_13, joyStick_2, imgNum_2, animLoadPlayer_2, miniGame_6, uiFloat_1, uiImageSlider_1, ubiPopupIcon_2, uiRoll_1, uiScaleDown_1, uiScaleAnimation_1, multiToucher_2, uiSpring_1, sequenceFrame_1, uiBtnDown_1, creatType, testCreat;
    var __moduleName = context_94 && context_94.id;
    return {
        setters: [
            function (testReadTool_1_1) {
                testReadTool_1 = testReadTool_1_1;
            },
            function (loadTools_3_1) {
                loadTools_3 = loadTools_3_1;
            },
            function (subClip_1_1) {
                subClip_1 = subClip_1_1;
            },
            function (ktx_1_1) {
                ktx_1 = ktx_1_1;
            },
            function (pvr_1_1) {
                pvr_1 = pvr_1_1;
            },
            function (testLoader_1_1) {
                testLoader_1 = testLoader_1_1;
            },
            function (Map_13_1) {
                Map_13 = Map_13_1;
            },
            function (joyStick_2_1) {
                joyStick_2 = joyStick_2_1;
            },
            function (imgNum_2_1) {
                imgNum_2 = imgNum_2_1;
            },
            function (animLoadPlayer_2_1) {
                animLoadPlayer_2 = animLoadPlayer_2_1;
            },
            function (miniGame_6_1) {
                miniGame_6 = miniGame_6_1;
            },
            function (uiFloat_1_1) {
                uiFloat_1 = uiFloat_1_1;
            },
            function (uiImageSlider_1_1) {
                uiImageSlider_1 = uiImageSlider_1_1;
            },
            function (ubiPopupIcon_2_1) {
                ubiPopupIcon_2 = ubiPopupIcon_2_1;
            },
            function (uiRoll_1_1) {
                uiRoll_1 = uiRoll_1_1;
            },
            function (uiScaleDown_1_1) {
                uiScaleDown_1 = uiScaleDown_1_1;
            },
            function (uiScaleAnimation_1_1) {
                uiScaleAnimation_1 = uiScaleAnimation_1_1;
            },
            function (multiToucher_2_1) {
                multiToucher_2 = multiToucher_2_1;
            },
            function (uiSpring_1_1) {
                uiSpring_1 = uiSpring_1_1;
            },
            function (sequenceFrame_1_1) {
                sequenceFrame_1 = sequenceFrame_1_1;
            },
            function (uiBtnDown_1_1) {
                uiBtnDown_1 = uiBtnDown_1_1;
            }
        ],
        execute: function () {
            (function (creatType) {
                creatType[creatType["all"] = 0] = "all";
                creatType[creatType["noClip"] = 1] = "noClip";
                creatType[creatType["noMesh"] = 2] = "noMesh";
            })(creatType || (creatType = {}));
            exports_94("creatType", creatType);
            exports_94("testCreat", testCreat = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function testCreat() {
                }
                Object.defineProperty(testCreat, "pathReplaceMap", {
                    /** 需要截获处理的资源路径 和 重定向后新的资源路径  { 截获路径:重定向路径 }*/
                    get: function () {
                        return this._pathReplaceMap;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(testCreat, "CDNURL", {
                    /** 项目资源 根路径 URL */
                    get: function () { return this._CDNURL; },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 新资源加载工具 使用类初始
                 * @param CDNURL    资源CDN RUL
                 * @param systemQuality 游戏资源质量等级（高、中、低）
                 * @param systemOS  OS 类型
                 * @param carePathReplaceMap    设置需要截获处理的资源路径和重定向的资源路径 { 截获路径:重定向路径 }
                 */
                testCreat.init = function (CDNURL, systemQuality, systemOS, carePathReplaceMap) {
                    this._CDNURL = CDNURL;
                    this.systemOS = systemOS;
                    // this.systemOS = 7;
                    this.systemQuality = systemQuality;
                    if (carePathReplaceMap) {
                        this._pathReplaceMap = carePathReplaceMap;
                    }
                };
                testCreat.setGetMesh = function () {
                    // m4m.framework.F14EmissionBaseData.getMesh = (json, assetmgr, assetbundle) => {
                    //     if (testCreat.meshMap.has(json.mesh)) {
                    //         return testCreat.meshMap.get(json.mesh);
                    //     }
                    //     return null;
                    // }
                };
                testCreat.getFilesByType = function (path, fileName, type, callBack) {
                    if (!testCreat.isSetGetMesh) {
                        testCreat.isSetGetMesh = true;
                        testCreat.setGetMesh();
                    }
                    var readFileList = [];
                    switch (type) {
                        case creatType.noClip:
                            readFileList.push(path + fileName + "/resources/" + fileName + testCreat.noClipEnd);
                            break;
                        case creatType.noMesh:
                            readFileList.push(path + fileName + "/resources/" + fileName + testCreat.noMeshEnd);
                            readFileList.push(path + fileName + "/resources/" + fileName + testCreat.meshEnd);
                            break;
                        default:
                            readFileList.push(path + fileName + "/resources/" + fileName + testCreat.allEnd);
                    }
                    // console.error("开始加载   1111111111111111111111    " + fileName + "              ");
                    // let resList:Array<CResBundlesData>=new Array();
                    var aaa = new testLoader_1.testLoader();
                    readFileList.forEach(function (url) {
                        // tslint:disable-next-line: no-shadowed-variable
                        var type = 0;
                        if (url.endsWith("_Json.json")) {
                            type = 1;
                        }
                        aaa.add(url, null, type);
                        // let creData=new CResBundlesData();
                        // creData.url=url;
                        // creData.loadType=type;
                        // resList.push(creData);
                        // CResBundleLoaderManage.Instance.addList(path + fileName,resList,(v) => {
                    });
                    //     let info = []
                    //     v.forEach(element => {
                    //         if (element) {
                    //             if (!element.length) {
                    //                 let url = element["_url_"];
                    //                 testReadTool.timer.set(url + 2, Date.now());
                    //                 let bd = testReadTool.readInfoByBuffer(url, element);
                    //                 info = info.concat(bd)
                    //             } else {
                    //                 info = info.concat(element)
                    //             }
                    //         }
                    //     });
                    //     callBack(info);
                    // });
                    // resList.length=0;
                    // resList=null;
                    aaa.start(function (v) {
                        var info = [];
                        v.forEach(function (element) {
                            if (element) {
                                if (!element.length) {
                                    var url = element["_url_"];
                                    testReadTool_1.testReadTool.timer.set(url + 2, Date.now());
                                    var bd = testReadTool_1.testReadTool.readInfoByBuffer(url, element);
                                    // console.error(info);
                                    info = info.concat(bd);
                                }
                                else {
                                    info = info.concat(element);
                                }
                            }
                        });
                        callBack(info);
                    });
                };
                Object.defineProperty(testCreat, "systemQuality", {
                    set: function (v) {
                        switch (v) {
                            case 0:
                                testCreat.qualityString = "LOW_";
                                break;
                            case 1:
                                testCreat.qualityString = "MID_";
                                break;
                            default:
                                testCreat.qualityString = "";
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(testCreat, "systemOS", {
                    set: function (v) {
                        testCreat._systemOS = v;
                        switch (v) {
                            case 1:
                                testCreat.osString = "_10x10.astc.bin.js";
                                // testCreat.osString = ".ktx.bin.js";
                                break;
                            case 2:
                                testCreat.osString = "_10x10.astc.bin.js";
                                // testCreat.osString = ".pvr.bin.js";
                                break;
                            default:
                                testCreat.osString = "";
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                testCreat.disposeResByUrl = function (path) {
                    if (testCreat.pfbResList.has(path)) {
                        var aaa = testCreat.pfbResList.get(path);
                        aaa.forEach(function (v) {
                            if (v.dispose) {
                                v.dispose();
                            }
                        });
                        aaa = null;
                        testCreat.pfbResList.delete(path);
                    }
                    if (testCreat.pfbList.has(path)) {
                        testCreat.pfbList.get(path)
                            .dispose();
                        testCreat.pfbList.delete(path);
                    }
                };
                // static test2(path: string, filePath: string, fun: (pfb) => void) {
                testCreat.createPfb = function (path, filePath) {
                    return __awaiter(this, void 0, void 0, function () {
                        var savePath, temp, obj, pfb;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    savePath = path + filePath + "/";
                                    if (testCreat.pfbList.get(savePath)) {
                                        return [2 /*return*/, testCreat.pfbList.get(savePath)];
                                    }
                                    if (!this.loadMap.get(path + filePath)) {
                                        temp = testCreat.creatTranByBuffer(path, filePath);
                                        this.loadMap.set(path + filePath, temp);
                                    }
                                    else {
                                        temp = this.loadMap.get(path + filePath);
                                    }
                                    return [4 /*yield*/, temp];
                                case 1:
                                    obj = _a.sent();
                                    // let obj = await testCreat.creatTranByBuffer(path, filePath);
                                    if (!obj) {
                                        return [2 /*return*/, null];
                                    }
                                    pfb = new m4m.framework.prefab(path);
                                    pfb.apply(obj);
                                    testCreat.pfbList.set(savePath, pfb);
                                    this.loadMap.delete(path + filePath);
                                    //替换 getCloneTrans接口 ， 稳定后移入引擎
                                    pfb.getCloneTrans = function () {
                                        var t;
                                        t = testCreat.createTran(savePath);
                                        // let t = pfb["trans"] as m4m.framework.transform;
                                        var aps = t.gameObject.getComponentsInChildren("aniplayer");
                                        if (!aps || aps.length == 0) {
                                            return t;
                                        }
                                        var clips = [];
                                        var _loop_5 = function (index) {
                                            var ap = aps[index];
                                            animLoadPlayer_2.AnimLoadPlayer.getClipNames(ap, clips);
                                            var clipNames = ap["clipnames"];
                                            var cDic = animLoadPlayer_2.AnimLoadPlayer["animClipDic"];
                                            var setClips = [];
                                            // if (clipNames.length) {
                                            for (var key in clipNames) {
                                                var clip = clipNames[key];
                                                var clipName = "".concat(filePath, "_").concat(key);
                                                // let clipName = key;
                                                if (clip["name"]) {
                                                    clip["name"].name = clipName; //
                                                }
                                                cDic.set(clipName, clip);
                                                setClips.push(clip);
                                            }
                                            // } else {
                                            if (setClips.length == 0) {
                                                // tslint:disable-next-line: no-for-in-array
                                                for (var key in ap.clips) {
                                                    var clip = ap.clips[key];
                                                    var clipName = "".concat(filePath, "_").concat(clip.getName());
                                                    // let clipName = key;
                                                    if (clip["name"]) {
                                                        clip["name"].name = clipName; //
                                                    }
                                                }
                                            }
                                            // }
                                            //
                                            clipNames = ap["clipnames"] = {};
                                            setClips.forEach(function (clip) {
                                                if (clip) {
                                                    ap.addClip(clip);
                                                }
                                            });
                                        };
                                        for (var index = 0; index < aps.length; index++) {
                                            _loop_5(index);
                                        }
                                        return t;
                                    };
                                    return [2 /*return*/, pfb];
                            }
                        });
                    });
                };
                testCreat.createPfb2D = function (path, filePath) {
                    return __awaiter(this, void 0, void 0, function () {
                        var savePath, obj, pfb;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    savePath = path + filePath + "/";
                                    if (testCreat.pfbList.get(savePath)) {
                                        return [2 /*return*/, testCreat.pfbList.get(savePath)];
                                    }
                                    return [4 /*yield*/, testCreat.creatTran2DByBuffer(path, filePath)];
                                case 1:
                                    obj = _a.sent();
                                    if (!obj) {
                                        return [2 /*return*/, null];
                                    }
                                    pfb = new m4m.framework.prefab(path);
                                    pfb["trans"] = obj;
                                    testCreat.pfbList.set(savePath, pfb);
                                    // pfb.getCloneTrans2D = () => {
                                    //     let res: m4m.framework.transform2D;
                                    //     res = testCreat.createTran(savePath) as m4m.framework.transform2D;
                                    //     return res;
                                    // }
                                    return [2 /*return*/, pfb];
                            }
                        });
                    });
                };
                /**
                 * 加载二进制获取数据并生成生成PREFAB
                 * @param path
                 * @param filePath
                 */
                // static creatPfbByBuffer(path: string, filePath: string, fun: (pfb) => void) {
                testCreat.creatTranByBuffer = function (path, filePath) {
                    return __awaiter(this, void 0, void 0, function () {
                        var dataList, savePath, urlMap, list, temp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    dataList = [];
                                    savePath = path + filePath + "/";
                                    urlMap = testCreat.pfbResList.get(savePath);
                                    if (!urlMap) {
                                        urlMap = new Map_13.cMap();
                                        testCreat.pfbResList.set(savePath, urlMap);
                                    }
                                    list = urlMap.get(savePath);
                                    if (!!list) return [3 /*break*/, 2];
                                    temp = void 0;
                                    // if (!this.loadMap.get(path + filePath)) {
                                    temp = new Promise(function (resolve) {
                                        testCreat.getFilesByType(path, filePath, 2, resolve);
                                    });
                                    return [4 /*yield*/, temp];
                                case 1:
                                    //     this.loadMap.set(path + filePath, temp);
                                    // } else {
                                    //     // tslint:disable-next-line: no-parameter-reassignment
                                    //     temp = this.loadMap.get(path + filePath);
                                    // }
                                    dataList = _a.sent();
                                    // this.loadMap.delete(path + filePath);
                                    urlMap.set(savePath, dataList);
                                    _a.label = 2;
                                case 2: return [4 /*yield*/, testCreat.create(savePath)];
                                case 3: return [2 /*return*/, _a.sent()];
                            }
                        });
                    });
                };
                testCreat.creatTran2DByBuffer = function (path, filePath) {
                    return __awaiter(this, void 0, void 0, function () {
                        var dataList, savePath, temp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    dataList = [];
                                    savePath = path + filePath + "/";
                                    if (!testCreat.pfbResList.get(savePath)) {
                                        testCreat.pfbResList.set(savePath, new Map_13.cMap());
                                    }
                                    if (!!testCreat.pfbResList.get(savePath)
                                        .get(savePath)) return [3 /*break*/, 2];
                                    temp = new Promise(function (resolve) {
                                        testCreat.getFilesByType(path, filePath, 2, resolve);
                                    });
                                    return [4 /*yield*/, temp];
                                case 1:
                                    dataList = _a.sent();
                                    testCreat.pfbResList.get(savePath)
                                        .set(savePath, dataList);
                                    _a.label = 2;
                                case 2: return [4 /*yield*/, testCreat.create(savePath)];
                                case 3: return [2 /*return*/, _a.sent()];
                            }
                        });
                    });
                };
                // static loadImg(url: string, cb: (img,err?) => void) {
                //     // if (assetMgr.mapImage[guid])
                //     //     return cb(assetMgr.mapImage[guid]);
                //     // let loading = assetMgr.mapLoading[guid];
                //     // if (!loading)
                //     // {
                //     //     loading = { readyok: false, cbQueue: [] };
                //     //     assetMgr.setLoading(guid, loading);
                //     // }
                //     // loading.cbQueue.push(cb);
                //     testCreat._loadImg(url, (img) => {
                //         cb.bind(this, img);
                //         // if (bundle && bundle.isunload == true)
                //         // {
                //         //     console.error(`img下载取消:${url} , bundle:${bundle.name} 已释放`);
                //         //     // loading.cbQueue = [];
                //         //     return;
                //         // }
                //         // assetMgr.mapImage[guid] = img;
                //         // loading.readyok = true;
                //         // loading.data = img;
                //         // while (loading.cbQueue.length > 0)
                //         //     loading.cbQueue.shift()(img);
                //     });
                // }
                testCreat.loadJson = function (url) {
                    return new Promise(function (resolve) {
                        testCreat._loadJson(url, function (bin, urlStr) {
                            resolve(bin);
                        });
                    });
                };
                // tslint:disable-next-line: max-line-length
                testCreat._loadJson = function (url, fun, onprocess) {
                    if (onprocess === void 0) { onprocess = null; }
                    if (m4m["__wx__"]) {
                        var path = this._CDNURL + url;
                        miniGame_6.miniGame.request({
                            url: path,
                            header: {},
                            success: function (res) {
                                fun(res.data, null, false);
                            },
                            fail: function () {
                                fun(null, null, true);
                            },
                        });
                    }
                    else {
                        loadTools_3.loadTools.xhrLoad(url, fun, onprocess, "json", function (req) {
                            fun(req.response, null);
                        });
                    }
                };
                //微信可复写
                testCreat._loadImg = function (url, cb) {
                    var img = new Image();
                    //webgl跨域渲染要这样玩 [crossOrigin = ""]否则服务器允许跨域也没用
                    img.crossOrigin = "";
                    img.src = url;
                    img.onload = function () {
                        if (cb) {
                            cb(img, null);
                        }
                    };
                    img.onerror = function (_err) {
                        console.error(_err);
                        if (cb) {
                            cb(img, _err);
                        }
                    };
                };
                // tslint:disable-next-line: cyclomatic-complexity
                testCreat.create = function (path) {
                    return __awaiter(this, void 0, void 0, function () {
                        var isTran2D, pfbres, dataList, insidMap, dataMap, imgLoad, i, element, cname, url, temp, i, meshdata, meshName, smesh, i, matData, mat, i, data, particData, i, data, particData, trans, compMap, trans;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    isTran2D = false;
                                    if (path.indexOf("/ui") != -1) {
                                        isTran2D = true;
                                    }
                                    pfbres = testCreat.pfbResList.get(path);
                                    dataList = pfbres.get(path);
                                    if (!dataList || dataList.length <= 0) {
                                        console.error("加载数据出错：" + path);
                                    }
                                    insidMap = {};
                                    dataMap = {};
                                    imgLoad = new testLoader_1.testLoader();
                                    for (i = 0; i < dataList.length; i++) {
                                        element = dataList[i];
                                        if (element.insid != null) {
                                            insidMap[element.insid] = element;
                                        }
                                        cname = element.className;
                                        if (!dataMap[cname]) {
                                            dataMap[cname] = [];
                                        }
                                        if (cname == "ImageSetting") {
                                            //先加载好会用到的贴图文件
                                            dataMap["ImageSetting"].push(element);
                                            url = testCreat.imgPathFix(path, element.imageName);
                                            if (!pfbres.has(url)) {
                                                // if (this.loadImgMap.get(url)) {
                                                if (testCreat._systemOS == 7 || url.endsWith(".png") || url.endsWith(".jpg")) {
                                                    imgLoad.add(url, null, 2);
                                                }
                                                else {
                                                    imgLoad.add(url, null, 0);
                                                }
                                                //     this.loadImgMap.set(url, true);
                                                // }
                                            }
                                        }
                                        else {
                                            dataMap[cname].push(element);
                                        }
                                    }
                                    temp = new Promise(function (resolve) {
                                        imgLoad.start(function (v) {
                                            if (v) {
                                                v.forEach(function (element) {
                                                    if (element) {
                                                        var url = element["_url_"];
                                                        if (!pfbres.has(url)) {
                                                            pfbres.set(url, element);
                                                        }
                                                        // if (this.loadImgMap.get(url)) {
                                                        //     this.loadImgMap.delete(url);
                                                        // }
                                                    }
                                                });
                                            }
                                            resolve(null);
                                        });
                                    });
                                    return [4 /*yield*/, temp];
                                case 1:
                                    _a.sent();
                                    // }
                                    if (!isTran2D) {
                                        //组装mesh
                                        if (dataMap["Mesh"]) {
                                            for (i = 0; i < dataMap["Mesh"].length; i++) {
                                                meshdata = dataMap["Mesh"][i];
                                                meshName = meshdata.fileName.replace(".cmesh", ".mesh");
                                                if (!pfbres.has(meshName)) {
                                                    smesh = testCreat.createMesh(meshdata, m4m.framework.assetMgr.Instance.webgl);
                                                    pfbres.set(meshName, smesh);
                                                    if (!testCreat.meshMap.has(meshName)) {
                                                        testCreat.meshMap.set(meshName, smesh);
                                                    }
                                                }
                                            }
                                        }
                                        if (dataMap["Mat"]) {
                                            for (i = 0; i < dataMap["Mat"].length; i++) {
                                                matData = dataMap["Mat"][i];
                                                if (!pfbres.has(matData.fileName)) {
                                                    mat = testCreat.setMat(matData, m4m.framework.sceneMgr.app, path, dataMap);
                                                    pfbres.set(matData.fileName, mat);
                                                }
                                            }
                                        }
                                        if (dataMap["ParticleSystem"]) {
                                            for (i = 0; i < dataMap["ParticleSystem"].length; i++) {
                                                data = dataMap["ParticleSystem"][i];
                                                particData = dataMap["ParticleSystem"][i];
                                                if (!pfbres.has(data.fileName)) {
                                                    // let mat = testCreat.setMat(particData, m4m.framework.sceneMgr.app, path, dataMap);
                                                    pfbres.set(data.fileName, particData);
                                                }
                                            }
                                        }
                                        if (dataMap["f14EffectSystem"]) {
                                            for (i = 0; i < dataMap["f14EffectSystem"].length; i++) {
                                                data = dataMap["f14EffectSystem"][i];
                                                particData = dataMap["f14EffectSystem"][i];
                                                if (!pfbres.has(data.fileName)) {
                                                    // let mat = testCreat.setMat(particData, m4m.framework.sceneMgr.app, path, dataMap);
                                                    pfbres.set(data.fileName, particData);
                                                }
                                            }
                                        }
                                    }
                                    if (!isTran2D) {
                                        //组装Prefab
                                        if (dataMap["Prefab"] && dataMap["Prefab"].length > 0) {
                                            trans = testCreat.makeAPrefab(dataMap["Prefab"][0], insidMap);
                                            //组装material
                                            //添加Prefab上的组件
                                            testCreat.setCompsToTran(trans, dataMap["Prefab"][0], insidMap, path);
                                            dataMap = null;
                                            insidMap = null;
                                            // htmlImageList.clear();
                                            return [2 /*return*/, trans];
                                            // tslint:disable-next-line: unnecessary-else
                                        }
                                        else {
                                            console.error(" dataMap[Prefab]  为空 ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！ ");
                                            dataMap = null;
                                            insidMap = null;
                                            // htmlImageList.clear();
                                            return [2 /*return*/, null];
                                        }
                                    }
                                    else {
                                        compMap = [];
                                        if (dataMap["Prefab2D"] && dataMap["Prefab2D"].length > 0) {
                                            trans = testCreat.makeAPrefab2D(dataMap["Prefab2D"][0], insidMap);
                                            testCreat.setCompsToTran2D(trans, dataMap["Prefab2D"][0], insidMap, compMap, path);
                                            testCreat.referenceComps(insidMap, compMap);
                                            dataMap = null;
                                            insidMap = null;
                                            // htmlImageList.clear();
                                            return [2 /*return*/, trans];
                                            // tslint:disable-next-line: unnecessary-else
                                        }
                                        else {
                                            console.error(" dataMap[Prefab2D]  为空  ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！");
                                            dataMap = null;
                                            insidMap = null;
                                            // htmlImageList.clear();
                                            return [2 /*return*/, null];
                                        }
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                testCreat.createTran = function (path) {
                    var isTran2D = false;
                    if (path.indexOf("/ui") != -1) {
                        isTran2D = true;
                    }
                    // if (testCreat.pfbList.has(path)) {
                    //     return testCreat.pfbList.get(path).getCloneTrans();
                    // }
                    var pfbres = testCreat.pfbResList.get(path);
                    var dataList = pfbres.get(path);
                    if (!dataList || dataList.length <= 0) {
                        console.error("加载数据出错：" + path);
                    }
                    // testReadTool.timer.set(path + "resources/" + filePath + 5, Date.now());
                    var insidMap = {};
                    var dataMap = {};
                    // let matMap: { [key: string]: any } = {};
                    // let htmlImageList: cMap<any> = new cMap<any>();
                    // let wx = m4m["__wx__"];
                    //分类数据
                    // let imgLoad = new testLoader()
                    for (var i = 0; i < dataList.length; i++) {
                        var element = dataList[i];
                        if (element.insid != null) {
                            insidMap[element.insid] = element;
                        }
                        var cname = element.className;
                        if (!dataMap[cname]) {
                            dataMap[cname] = [];
                        }
                        if (cname == "ImageSetting") {
                            // //先加载好会用到的贴图文件
                            // dataMap["ImageSetting"].push(element as ImageSetting);
                            // let url = testCreat.imgPathFix(path, element.imageName);
                            // if (!testCreat.htmlImageList.has(url)) {
                            //     if (testCreat._systemOS == 7) {
                            //         imgLoad.add(url, null, 2);
                            //     }
                            //     else {
                            //         imgLoad.add(url, null, 0);
                            //     }
                            // }
                        }
                        else {
                            dataMap[cname].push(element);
                        }
                    }
                    // if (!isTran2D) {
                    //     //组装mesh
                    //     if (dataMap["Mesh"]) {
                    //         for (let i = 0; i < dataMap["Mesh"].length; i++) {
                    //             const meshdata = dataMap["Mesh"][i];
                    //             let meshName = meshdata.fileName.replace(".cmesh", ".mesh");
                    //             if (!testCreat.meshMap.has(meshName)) {
                    //                 var smesh = testCreat.createMesh(meshdata, m4m.framework.assetMgr.Instance.webgl);
                    //                 testCreat.meshMap.set(meshName, smesh);
                    //             }
                    //         }
                    //     }
                    //     if (dataMap["Mat"]) {
                    //         for (let i = 0; i < dataMap["Mat"].length; i++) {
                    //             let matData: Mat = dataMap["Mat"][i];
                    //             if (!testCreat.matMap.has(matData.fileName)) {
                    //                 let mat = testCreat.setMat(matData, m4m.framework.sceneMgr.app, path, dataMap);
                    //                 testCreat.matMap.set(matData.fileName, mat);
                    //             }
                    //         }
                    //     }
                    // }
                    if (!isTran2D) {
                        //组装Prefab
                        if (dataMap["Prefab"] && dataMap["Prefab"].length > 0) {
                            var trans = testCreat.makeAPrefab(dataMap["Prefab"][0], insidMap);
                            //组装material
                            //添加Prefab上的组件
                            testCreat.setCompsToTran(trans, dataMap["Prefab"][0], insidMap, path);
                            dataMap = null;
                            insidMap = null;
                            // htmlImageList.clear();
                            return trans;
                            // tslint:disable-next-line: unnecessary-else
                        }
                        else {
                            console.error(" dataMap[Prefab]  为空 ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！ ");
                            dataMap = null;
                            insidMap = null;
                            // htmlImageList.clear();
                            return null;
                        }
                    }
                    else {
                        var compMap = [];
                        if (dataMap["Prefab2D"] && dataMap["Prefab2D"].length > 0) {
                            var trans = testCreat.makeAPrefab2D(dataMap["Prefab2D"][0], insidMap);
                            testCreat.setCompsToTran2D(trans, dataMap["Prefab2D"][0], insidMap, compMap, path);
                            testCreat.referenceComps(insidMap, compMap);
                            dataMap = null;
                            insidMap = null;
                            // htmlImageList.clear();
                            return trans;
                            // tslint:disable-next-line: unnecessary-else
                        }
                        else {
                            console.error(" dataMap[Prefab2D]  为空  ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！");
                            dataMap = null;
                            insidMap = null;
                            // htmlImageList.clear();
                            return null;
                        }
                    }
                };
                testCreat.referenceComps = function (insidMap, compMap) {
                    for (var index = 0; index < compMap.length; index++) {
                        var element = compMap[index];
                        testCreat.referenceComp(element, insidMap);
                    }
                };
                // tslint:disable-next-line: cyclomatic-complexity
                testCreat.referenceComp = function (compInfo, insidMap) {
                    var name = compInfo.cmop || compInfo.className;
                    switch (name) {
                        case "button":
                            var compButton = compInfo["_comp"];
                            if (insidMap[compInfo.targetImage]) {
                                var image = insidMap[compInfo.targetImage].getComponent("image2D");
                                compButton.targetImage = image;
                            }
                            break;
                        case "progressbar":
                            var compProgressbar = compInfo["_comp"];
                            if (insidMap[compInfo.barBg]) {
                                compProgressbar.barBg = insidMap[compInfo.barBg].getComponent("image2D");
                            }
                            if (insidMap[compInfo.barOverImg]) {
                                compProgressbar.barOverImg = insidMap[compInfo.barOverImg].getComponent("image2D");
                            }
                            break;
                        case "ubiPopupIcon":
                            var compUbiPopupIcon = compInfo["_comp"];
                            if (insidMap[compInfo.icon]) {
                                compUbiPopupIcon.icon = insidMap[compInfo.icon].getComponent("rawImage2D");
                            }
                            if (insidMap[compInfo.lab]) {
                                compUbiPopupIcon.lab = insidMap[compInfo.lab].getComponent("label");
                            }
                            break;
                        case "joyStick":
                            var compJoyStick = compInfo["_comp"];
                            if (insidMap[compInfo.bottomImg]) {
                                compJoyStick.bottomImg = insidMap[compInfo.bottomImg].getComponent("image2D");
                            }
                            if (insidMap[compInfo.overImg]) {
                                compJoyStick.overImg = insidMap[compInfo.overImg].getComponent("image2D");
                            }
                            break;
                        case "imgNum":
                            var compImgNum = compInfo["_comp"];
                            if (insidMap[compInfo.template]) {
                                compImgNum.template = insidMap[compInfo.template].getComponent("image2D");
                            }
                            break;
                        case "uiImageSlider":
                            var compuiImageSlider = compInfo["_comp"];
                            if (insidMap[compInfo.scrollRect]) {
                                compuiImageSlider.scrollRect = insidMap[compInfo.scrollRect].getComponent("scrollRect");
                            }
                            break;
                        case "uiFloat":
                            var compUiFloat = compInfo["_comp"];
                            if (insidMap[compInfo.floatIcon]) {
                                compUiFloat.floatIcon = insidMap[compInfo.floatIcon].getComponent("rawImage2D");
                            }
                            if (insidMap[compInfo.clickBtn]) {
                                compUiFloat.clickBtn = insidMap[compInfo.clickBtn].getComponent("button");
                            }
                            break;
                        case "uiRoll":
                            var compUiRoll = compInfo["_comp"];
                            if (insidMap[compInfo.bg1]) {
                                compUiRoll.bg1 = insidMap[compInfo.bg1].getComponent("rawImage2D");
                            }
                            if (insidMap[compInfo.bg2]) {
                                compUiRoll.bg2 = insidMap[compInfo.bg2].getComponent("rawImage2D");
                            }
                            compInfo["_comp"] = compUiRoll;
                            return compUiRoll;
                        default:
                            if (name.indexOf("Handle") == -1) {
                                console.error("==========================未完成的2D组件解析：" + name);
                            }
                            var handleComp = compInfo["_comp"];
                            for (var index = 0; index < compInfo.referenceName.length; index++) {
                                var refName = compInfo.referenceName[index];
                                // if (refName == "imgnum") {
                                //     console.error(refName)
                                // }
                                var reType = compInfo.referenceType[index];
                                var reInsid = compInfo.referenceInsdi[index];
                                if (insidMap[reInsid]) {
                                    if (reType == "transform2D") {
                                        handleComp[refName] = insidMap[reInsid];
                                    }
                                    else {
                                        handleComp[refName] = insidMap[reInsid].getComponent(reType);
                                    }
                                }
                            }
                    }
                };
                testCreat.imgPathFix = function (path, imageName) {
                    var fileName = imageName;
                    if (testCreat.osString && testCreat.fileList.indexOf(imageName) == -1 && !fileName.startsWith("Lightmap")) {
                        if (imageName.endsWith(".png")) {
                            fileName = fileName.replace(".png", testCreat.osString);
                        }
                        else if (imageName.endsWith(".jpg")) {
                            fileName = fileName.replace(".jpg", testCreat.osString);
                        }
                    }
                    var url = "";
                    if (!fileName.startsWith("Lightmap")) {
                        url = path + "resources/" + testCreat.qualityString + fileName;
                    }
                    else {
                        url = path + "resources/" + fileName;
                    }
                    return url;
                };
                // tslint:disable-next-line: cyclomatic-complexity
                testCreat.setMat = function (matData, app, path, dataMap) {
                    var mat = new m4m.framework.material();
                    var sh = m4m.framework.sceneMgr.app.getAssetMgr()
                        .getShader(matData.shader);
                    mat.setShader(sh);
                    var mapUniform = matData.mapUniform.forEach ? matData.mapUniform["data"] : matData.mapUniform;
                    for (var key in mapUniform) {
                        var value = mapUniform[key];
                        if (value.value == null) {
                            continue;
                        }
                        switch (value.type) {
                            case m4m.render.UniformTypeEnum.Float:
                                mat.setFloat(key.toString(), Number.parseFloat(value.value));
                                break;
                            case m4m.render.UniformTypeEnum.Float4:
                                var values = value.value.match(m4m.framework.RegexpUtil.vector4Regexp);
                                try {
                                    if (values != null) {
                                        // tslint:disable-next-line: max-line-length
                                        var _float4 = new m4m.math.vector4(parseFloat(values[1]), parseFloat(values[2]), parseFloat(values[3]), parseFloat(values[4]));
                                        mat.setVector4(key.toString(), _float4);
                                    }
                                }
                                catch (e) {
                                    //数据不合法就不提交了
                                    console.error("Material Mapuniform float4 无效:value (" + value.value + ")！");
                                }
                                break;
                            case m4m.render.UniformTypeEnum.Texture:
                            case m4m.render.UniformTypeEnum.CubeTexture:
                                var _texture = new m4m.framework.texture(value.value);
                                var mainImgData = void 0;
                                for (var j = 0; j < dataMap["ImageSetting"].length; j++) {
                                    var element = dataMap["ImageSetting"][j];
                                    if (element.fileName == value.value) {
                                        mainImgData = element;
                                        break;
                                    }
                                }
                                if (!mainImgData) {
                                    continue;
                                }
                                var _name = mainImgData.imageName;
                                var _filterMode = mainImgData.filterMode;
                                var _format = mainImgData.format;
                                var _mipmap = mainImgData.mipmap;
                                var _wrap = mainImgData.wrap;
                                var _premultiplyAlpha = mainImgData.premultiplyAlpha;
                                if (_premultiplyAlpha == undefined) {
                                    _premultiplyAlpha = true;
                                }
                                var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                                if (_format == "RGB") {
                                    _textureFormat = m4m.render.TextureFormatEnum.RGB;
                                }
                                else if (_format == "Gray") {
                                    _textureFormat = m4m.render.TextureFormatEnum.Gray;
                                }
                                var _linear = true;
                                if (_filterMode.indexOf("linear") < 0) {
                                    _linear = false;
                                }
                                var _repeat = false;
                                if (_wrap.indexOf("Repeat") >= 0) {
                                    _repeat = true;
                                }
                                _texture.realName = _name;
                                if (mainImgData) {
                                    var url = testCreat.imgPathFix(path, mainImgData.imageName);
                                    if (testCreat.pfbResList == null) {
                                        return;
                                    }
                                    var pfbR = testCreat.pfbResList.get(path);
                                    if (pfbR == null) {
                                        return;
                                    }
                                    var img = pfbR.get(url);
                                    var tType = testCreat.tNormal;
                                    if (url.indexOf(".pvr.bin") >= 0) {
                                        tType = testCreat.tPVR;
                                    }
                                    else if (url.indexOf(".dds.bin") >= 0) {
                                        tType = testCreat.tDDS;
                                    }
                                    else if (url.indexOf(".ktx") >= 0) {
                                        tType = testCreat.tKTX;
                                    }
                                    else if (url.indexOf(".astc") >= 0) {
                                        tType = testCreat.tASCT;
                                    }
                                    if (!img) {
                                        return mat;
                                    }
                                    //构建贴图
                                    // console.error("=================================   " + url);
                                    // tslint:disable-next-line: switch-default
                                    // if (!this.loadImgMap.get(url)) {
                                    switch (tType) {
                                        case testCreat.tNormal:
                                            var t2d = new m4m.render.glTexture2D(app.getAssetMgr().webgl, _textureFormat);
                                            t2d.uploadImage(img, _mipmap, _linear, _premultiplyAlpha, _repeat);
                                            _texture.glTexture = t2d;
                                            break;
                                        case testCreat.tPVR:
                                            var pvr = new pvr_1.testPvrParse(app.getAssetMgr().webgl);
                                            _texture.glTexture = pvr.parse(img);
                                            break;
                                        case testCreat.tKTX:
                                            _texture.glTexture = ktx_1.KTXParse.parse(app.getAssetMgr().webgl, img);
                                            break;
                                        case testCreat.tASCT:
                                            _texture.glTexture = m4m.framework.ASTCParse.parse(app.getAssetMgr().webgl, img);
                                            break;
                                        case testCreat.tDDS:
                                            throw new Error("暂不支持DDS");
                                        // assetMgr.webgl.pixelStorei(assetMgr.webgl.UNPACK_FLIP_Y_WEBGL, 1);
                                        // let textureUtil = new WebGLTextureUtil(assetMgr.webgl, true);
                                        // textureUtil.loadDDS(_textureSrc, null, (texture, error, stats) =>
                                        // {
                                        //     let t2d = new m4m.render.glTexture2D(assetMgr.webgl);
                                        //     t2d.format = m4m.render.TextureFormatEnum.PVRTC2_RGB;
                                        //     t2d.texture = texture;
                                        //     _texture.glTexture = t2d;
                                        // });
                                        // break;
                                        default:
                                    }
                                    // this.loadImgMap.set(url, _texture);
                                    mat.setTexture(key.toString(), _texture);
                                    // } else {
                                    //     mat.setTexture(key.toString(), this.loadImgMap.get(url));
                                    // }
                                }
                                break;
                            default:
                        }
                    }
                    return mat;
                };
                //组装Prefab
                testCreat.makeAPrefab = function (pfInfo, insidMap) {
                    var trans = new m4m.framework.transform();
                    trans.name = pfInfo.tranName;
                    if (pfInfo.insid != null) {
                        insidMap[pfInfo.insid] = trans;
                    }
                    m4m.math.vec3Clone(pfInfo.localTranslate, trans.localTranslate);
                    m4m.math.vec3Clone(pfInfo.localScale, trans.localScale);
                    m4m.math.quatClone(pfInfo.localRotate, trans.localRotate);
                    //递归组装子对象
                    if (pfInfo.children) {
                        for (var i = 0; i < pfInfo.children.length; i++) {
                            var childTranInfo = pfInfo.children[i];
                            var childTran = testCreat.makeAPrefab(childTranInfo, insidMap);
                            trans.addChild(childTran);
                        }
                    }
                    return trans;
                };
                testCreat.makeAPrefab2D = function (pfInfo, insidMap) {
                    var trans = new m4m.framework.transform2D();
                    trans.name = pfInfo.tranName;
                    if (pfInfo.insid != null) {
                        insidMap[pfInfo.insid] = trans;
                    }
                    trans.prefab = pfInfo.prefab;
                    trans.layer = pfInfo.layer;
                    trans.tag = pfInfo.tag;
                    trans.isStatic = pfInfo.isStatic;
                    trans.width = pfInfo.width;
                    trans.height = pfInfo.height;
                    m4m.math.vec2Clone(pfInfo.pivot, trans.pivot);
                    trans.visible = pfInfo._visible;
                    m4m.math.vec2Clone(pfInfo.localTranslate, trans.localTranslate);
                    m4m.math.vec2Clone(pfInfo.localScale, trans.localScale);
                    trans.localRotate = pfInfo.localRotate;
                    trans.isMask = pfInfo.isMask;
                    trans.layoutState = pfInfo.layoutState;
                    trans.layoutPercentState = pfInfo.layoutPercentState;
                    // trans["layoutValueMap"] = pfInfo.layoutValueMap;
                    trans.setLayoutValue(1, pfInfo.layoutValueMap.n1);
                    trans.setLayoutValue(2, pfInfo.layoutValueMap.n2);
                    trans.setLayoutValue(4, pfInfo.layoutValueMap.n4);
                    trans.setLayoutValue(8, pfInfo.layoutValueMap.n8);
                    trans.setLayoutValue(16, pfInfo.layoutValueMap.n16);
                    trans.setLayoutValue(32, pfInfo.layoutValueMap.n32);
                    //递归组装子对象
                    if (pfInfo.children) {
                        for (var i = 0; i < pfInfo.children.length; i++) {
                            var childTranInfo = pfInfo.children[i];
                            var childTran = testCreat.makeAPrefab2D(childTranInfo, insidMap);
                            trans.addChild(childTran);
                        }
                    }
                    return trans;
                };
                //添加组件到Prefab
                testCreat.setCompsToTran = function (trans, pfInfo, insidMap, path) {
                    trans.gameObject.tag = pfInfo.gameObject.tag;
                    trans.gameObject.layer = pfInfo.gameObject.layer;
                    // trans["_aabb"] = new m4m.framework.aabb(new m4m.math.vector3(-1, -1, -1), new m4m.math.vector3(1, 1, 1));
                    for (var i = 0; i < pfInfo.gameObject.components.length; i++) {
                        var compInfo = pfInfo.gameObject.components[i];
                        var rawComp = testCreat.makeAComp(trans, compInfo, insidMap, path);
                        if (rawComp) {
                            trans.gameObject.addComponentDirect(rawComp);
                        }
                        else {
                            console.error(compInfo.cmop + "       " + trans.name);
                        }
                    }
                    //递归组装子对象
                    for (var i = 0; i < trans.children.length; i++) {
                        var childTran = trans.children[i];
                        var childTranInfo = pfInfo.children[i];
                        testCreat.setCompsToTran(childTran, childTranInfo, insidMap, path);
                    }
                };
                testCreat.setCompsToTran2D = function (trans, pfInfo, insidMap, compMap, path) {
                    for (var i = 0; i < pfInfo.components.length; i++) {
                        var compInfo = pfInfo.components[i];
                        var rawComp = testCreat.makeAComp2D(trans, compInfo, insidMap, compMap, path);
                        if (rawComp) {
                            trans.addComponentDirect(rawComp);
                        }
                    }
                    //递归组装子对象
                    for (var i = 0; i < trans.children.length; i++) {
                        var childTran = trans.children[i];
                        var childTranInfo = pfInfo.children[i];
                        testCreat.setCompsToTran2D(childTran, childTranInfo, insidMap, compMap, path);
                    }
                };
                //组装动画片段
                testCreat.makeAClip = function (element, pfbName, animName) {
                    if (pfbName === void 0) { pfbName = null; }
                    if (animName === void 0) { animName = null; }
                    var animc;
                    if (!element) {
                        return null;
                    }
                    if (!animName) {
                        if (!pfbName) {
                            animc = new m4m.framework.animationClip(element.aniclipName + ".aniclip.bin");
                        }
                        else {
                            animc = new m4m.framework.animationClip(pfbName + "_" + element.aniclipName + ".aniclip.bin");
                        }
                    }
                    else {
                        if (!pfbName) {
                            animc = new m4m.framework.animationClip(animName);
                        }
                        else {
                            animc = new m4m.framework.animationClip(pfbName + "_" + animName);
                        }
                    }
                    // if (!animName) {
                    //     animc = new m4m.framework.animationClip(pfbName + "_" + element.name + ".aniclip.bin");
                    // } else {
                    //     animc = new m4m.framework.animationClip(pfbName + "_" + animName);
                    // }
                    animc.fps = element.fps;
                    animc.hasScaled = element.hasScaled;
                    animc.loop = element.loop;
                    animc.boneCount = element.boneCount;
                    animc.bones = [];
                    for (var j = 0; j < element.bones.length; j++) {
                        var bone = element.bones[j];
                        animc.bones.push(bone);
                    }
                    element.indexDic.forEach(function (value, key) {
                        animc.indexDic[key] = value;
                    });
                    animc.subclipCount = element.subclipCount;
                    animc.fps = element.fps;
                    animc.fps = element.fps;
                    for (var j = 0; j < element.subclips.length; j++) {
                        var clipC = element.subclips[j];
                        if (clipC) {
                            var addClip = new subClip_1.subClip();
                            addClip.endframe = clipC.endframe;
                            addClip.loop = clipC.loop;
                            addClip.name = clipC.name;
                            addClip.startframe = clipC.startframe;
                            animc.subclips.push(addClip);
                        }
                    }
                    animc.frameCount = element.frameCount;
                    element.frames.forEach(function (value, key) {
                        animc.frames[key] = value;
                    });
                    return animc;
                };
                // tslint:disable-next-line: cyclomatic-complexity
                testCreat.makeAComp2D = function (trans, compInfo, insidMap, compMap, path) {
                    var name = compInfo.cmop || compInfo.className;
                    switch (name) {
                        case "button":
                            var compButton = new m4m.framework.button();
                            compButton.transition = compInfo.transition;
                            compButton["_origianlSpriteName"] = compInfo._origianlSpriteName;
                            compButton["_pressedSpriteName"] = compInfo._pressedSpriteName;
                            m4m.math.colorClone(compInfo.normalColor, compButton.normalColor);
                            m4m.math.colorClone(compInfo.pressedColor, compButton.pressedColor);
                            compButton.fadeDuration = compInfo.fadeDuration;
                            compInfo["_comp"] = compButton;
                            compMap.push(compInfo);
                            return compButton;
                        case "image2D":
                            var compImage2D = new m4m.framework.image2D();
                            m4m.math.colorClone(compInfo.color, compImage2D.color);
                            compImage2D.imageType = compInfo.imageType;
                            compImage2D.fillMethod = compInfo.fillMethod;
                            compImage2D.fillAmmount = compInfo.fillAmmount;
                            compImage2D["_spriteName"] = compInfo._spriteName;
                            compImage2D["_imageBorder"].l = compInfo._imageBorder.l;
                            compImage2D["_imageBorder"].t = compInfo._imageBorder.t;
                            compImage2D["_imageBorder"].r = compInfo._imageBorder.r;
                            compImage2D["_imageBorder"].b = compInfo._imageBorder.b;
                            return compImage2D;
                        case "label":
                            var compLabel = new m4m.framework.label();
                            compLabel.text = compInfo.text;
                            compLabel.font = new m4m.framework.font(compInfo._fontName);
                            compLabel.fontsize = compInfo.fontsize;
                            compLabel.linespace = compInfo.linespace;
                            compLabel.horizontalType = compInfo.horizontalType;
                            compLabel.verticalType = compInfo.verticalType;
                            compLabel.horizontalOverflow = compInfo.horizontalOverflow;
                            compLabel.verticalOverflow = compInfo.verticalOverflow;
                            m4m.math.colorClone(compInfo.color, compLabel.color);
                            m4m.math.colorClone(compInfo.color2, compLabel.color2);
                            return compLabel;
                        case "scrollRect":
                            var compScrollRect = new m4m.framework.scrollRect();
                            compScrollRect.content = insidMap[compInfo.content];
                            compScrollRect.horizontal = compInfo.horizontal;
                            compScrollRect.vertical = compInfo.vertical;
                            compScrollRect.inertia = compInfo.inertia;
                            compScrollRect.decelerationRate = compInfo.decelerationRate;
                            return compScrollRect;
                        case "rawImage2D":
                            var compRawImage2D = new m4m.framework.rawImage2D();
                            // compRawImage2D.image=
                            m4m.math.colorClone(compInfo.color, compRawImage2D.color);
                            return compRawImage2D;
                        case "uiScaleDown":
                            return new uiScaleDown_1.uiScaleDown();
                        case "uiScaleAnimation":
                            return new uiScaleAnimation_1.uiScaleAnimation();
                        case "multiToucher":
                            return new multiToucher_2.multiToucher();
                        case "uiSpring":
                            return new uiSpring_1.uiSpring();
                        case "sequenceFrame":
                            return new sequenceFrame_1.sequenceFrame();
                        case "uiBtnDown":
                            return new uiBtnDown_1.uiBtnDown();
                        case "progressbar":
                            var compProgressbar = new m4m.framework.progressbar();
                            compProgressbar.value = compInfo.value;
                            compProgressbar.cutPanel = insidMap[compInfo.cutPanel];
                            compInfo["_comp"] = compProgressbar;
                            compMap.push(compInfo);
                            return compProgressbar;
                        case "ubiPopupIcon":
                            var compUbiPopupIcon = new ubiPopupIcon_2.ubiPopupIcon();
                            compInfo["_comp"] = compUbiPopupIcon;
                            compMap.push(compInfo);
                            return compUbiPopupIcon;
                        case "joyStick":
                            var compJoyStick = new joyStick_2.joyStick();
                            compJoyStick.moveRange = compInfo.moveRange;
                            compInfo["_comp"] = compJoyStick;
                            compMap.push(compInfo);
                            return compJoyStick;
                        case "uiRoll":
                            var compUiRoll = new uiRoll_1.uiRoll();
                            compUiRoll.bgPan1 = insidMap[compInfo.bgPan1];
                            compUiRoll.bgPan2 = insidMap[compInfo.bgPan2];
                            compInfo["_comp"] = compUiRoll;
                            compMap.push(compInfo);
                            return compUiRoll;
                        case "imgNum":
                            var compImgNum = new imgNum_2.imgNum();
                            compImgNum.gap = compInfo.gap;
                            compInfo["_comp"] = compImgNum;
                            compMap.push(compInfo);
                            return compImgNum;
                        case "slideArea":
                            var compSlideArea = new m4m.framework.slideArea();
                            compSlideArea.horizontal = compInfo.horizontal;
                            compSlideArea.vertical = compInfo.vertical;
                            return compSlideArea;
                        case "uiImageSlider":
                            var compuiImageSlider = new uiImageSlider_1.uiImageSlider();
                            compuiImageSlider.content = insidMap[compInfo.content];
                            compuiImageSlider.imageTrans = insidMap[compInfo.imageTrans];
                            compuiImageSlider.imageBgTrans = insidMap[compInfo.imageBgTrans];
                            compInfo["_comp"] = compuiImageSlider;
                            compMap.push(compInfo);
                            return compuiImageSlider;
                        case "uiFloat":
                            var compUiFloat = new uiFloat_1.uiFloat();
                            compInfo["_comp"] = compUiFloat;
                            compMap.push(compInfo);
                            return compUiFloat;
                        default:
                            if (name.indexOf("Handle") == -1) {
                                console.error("==========================未完成的2D组件解析：" + name);
                            }
                            var handleComp = trans.addComponent(name);
                            compInfo["_comp"] = handleComp;
                            compMap.push(compInfo);
                            return null;
                    }
                };
                //组装组件
                // tslint:disable-next-line: cyclomatic-complexity
                testCreat.makeAComp = function (trans, compInfo, insidMap, path) {
                    var name = compInfo.cmop || compInfo.className;
                    var pfbres = testCreat.pfbResList.get(path);
                    switch (name) {
                        case "asbone":
                            var compAsBone = new m4m.framework.asbone();
                            return compAsBone;
                        case "boxcollider":
                            var compBox = new m4m.framework.boxcollider();
                            var compInfoBox = compInfo;
                            m4m.math.vec3Clone(compInfoBox.size, compBox.size);
                            m4m.math.vec3Clone(compInfoBox.center, compBox.center);
                            return compBox;
                        case "aniplayer":
                            var compAnip = new m4m.framework.aniplayer();
                            var compInfoAnip = compInfo;
                            compAnip.clips = [];
                            if (compInfoAnip.clips) {
                                for (var i = 0; i < compInfoAnip.clips.length; i++) {
                                    var element = compInfoAnip.clips[i];
                                    if (!element.fileName) {
                                        continue;
                                    }
                                    var animc = testCreat.makeAClip(element);
                                    if (animc) {
                                        compAnip.clips.push(animc);
                                        compAnip.addClip(animc);
                                    }
                                }
                            }
                            if (compAnip.clips.length == 0) {
                                if (compInfoAnip.animNames) {
                                    for (var i = 0; i < compInfoAnip.animNames.length; i++) {
                                        var element = compInfoAnip.animNames[i];
                                        // const element = pfbName + "_" + compInfoAnip.animNames[i];
                                        var animClip = new m4m.framework.animationClip(element);
                                        compAnip.clips.push(animClip);
                                        // compAnip.addClip(animClip);
                                    }
                                }
                            }
                            compAnip.bones = [];
                            if (compInfoAnip.bones) {
                                for (var i = 0; i < compInfoAnip.bones.length; i++) {
                                    var tPos = compInfoAnip.bones[i];
                                    var addTpos = new m4m.framework.tPoseInfo();
                                    if (tPos) {
                                        addTpos.name = tPos.tranName;
                                        addTpos.tposep = new m4m.math.vector3();
                                        addTpos.tposeq = new m4m.math.quaternion();
                                        m4m.math.vec3Clone(tPos.tposep, addTpos.tposep);
                                        m4m.math.quatClone(tPos.tposeq, addTpos.tposeq);
                                        compAnip.bones.push(addTpos);
                                    }
                                }
                            }
                            compAnip.startPos = [];
                            if (compInfoAnip.startPos) {
                                for (var i = 0; i < compInfoAnip.startPos.length; i++) {
                                    var spos = compInfoAnip.startPos[i];
                                    var addSpos = new m4m.framework.PoseBoneMatrix();
                                    addSpos.t = new m4m.math.vector3();
                                    addSpos.r = new m4m.math.quaternion();
                                    m4m.math.vec3Clone(spos.t, addSpos.t);
                                    m4m.math.quatClone(spos.r, addSpos.r);
                                    compAnip.startPos.push(addSpos);
                                }
                            }
                            testCreat.aniplayer = compAnip;
                            return compAnip;
                        case "skinnedMeshRenderer":
                            var compSkin = new m4m.framework.skinnedMeshRenderer();
                            var compInfoSkin = compInfo;
                            compSkin.materials = [];
                            if (compInfoSkin.materials) {
                                for (var j = 0; j < compInfoSkin.materials.length; j++) {
                                    var mats = compInfoSkin.materials[j];
                                    compSkin.materials.push(pfbres.get(mats));
                                }
                            }
                            compSkin.center = new m4m.math.vector3();
                            compSkin.size = new m4m.math.vector3();
                            m4m.math.vec3Clone(compInfoSkin.center, compSkin.center);
                            m4m.math.vec3Clone(compInfoSkin.size, compSkin.size);
                            // compSkin.mesh = await testCreat.getMeshFromMap(meshMap, compInfoSkin.mesh, path);
                            compSkin.mesh = pfbres.get(compInfoSkin.mesh);
                            // if (compSkin.mesh) {
                            //     let max = compSkin.mesh["_max"] as m4m.math.vector3;
                            //     let min = compSkin.mesh["_min"] as m4m.math.vector3;
                            //     trans["_aabb"] = new m4m.framework.aabb(min, max);
                            //     m4m.framework.transform["aabbStoreMap"][compSkin.mesh.getGUID()] = [min, max];
                            // }
                            compSkin.bones = [];
                            if (compInfoSkin.bones) {
                                for (var j = 0; j < compInfoSkin.bones.length; j++) {
                                    var insid = compInfoSkin.bones[j];
                                    compSkin.bones.push(insidMap[insid]);
                                }
                            }
                            compSkin.rootBone = insidMap[compInfoSkin.rootBone];
                            compSkin.player = testCreat.aniplayer;
                            return compSkin;
                        case "meshFilter":
                            var compMF = new m4m.framework.meshFilter();
                            var compInfoMF = compInfo;
                            // compMF.mesh = await testCreat.getMeshFromMap(meshMap, compInfoMF.mesh, path);
                            compMF.mesh = pfbres.get(compInfoMF.mesh);
                            // if (compMF.mesh) {
                            //     let max = compMF.mesh["_max"] as m4m.math.vector3;
                            //     let min = compMF.mesh["_min"] as m4m.math.vector3;
                            //     trans["_aabb"] = new m4m.framework.aabb(min, max);
                            //     m4m.framework.transform["aabbStoreMap"][compMF.mesh.getGUID()] = [min, max];
                            // }
                            return compMF;
                        case "meshRenderer":
                            var compMR = new m4m.framework.meshRenderer();
                            var compInfoMR = compInfo;
                            compMR.materials = [];
                            if (compInfoMR.materials) {
                                for (var j = 0; j < compInfoMR.materials.length; j++) {
                                    var mats = compInfoMR.materials[j];
                                    compMR.materials.push(pfbres.get(mats));
                                    // compSkin.materials.push(testCreat.matMap.get(mats));
                                }
                            }
                            compMR.lightmapIndex = compInfoMR.lightmapIndex;
                            compMR.layer = compInfoMR.layer;
                            compMR.lightmapScaleOffset = new m4m.math.quaternion();
                            if (compInfoMR.lightmapScaleOffset) {
                                m4m.math.quatClone(compInfoMR.lightmapScaleOffset, compMR.lightmapScaleOffset);
                            }
                            return compMR;
                        case "spherecollider":
                            var compSpherecollider = new m4m.framework.spherecollider();
                            return compSpherecollider;
                        // case "godray":
                        //     let compGodray = new godray();
                        //     return compGodray;
                        case "meshcollider":
                            var compMeshcollider = new m4m.framework.meshcollider();
                            return compMeshcollider;
                        // case "water":
                        //     let compWater = new water();
                        //     let compInfoWater = compInfo as waterComp;
                        //     compInfoWater.copyFrom = compInfoWater.copyFrom;
                        //     compInfoWater.defNumVertsPerRow = compInfoWater.defNumVertsPerRow;
                        //     return compWater;
                        // case "particlesystem":
                        // // let particleData = pfbres.get(compInfo.particleSystemData) as m4m.framework.ParticleSystemData;
                        // // let particleComp = new m4m.framework.ParticleSystem();
                        // // let particleCompData = new m4m.framework.ParticleSystemData(compInfo.particleSystemData);
                        // // particleCompData.objectData = particleData;
                        // // particleCompData.value = compInfo.particleSystemData;
                        // // particleComp.particleSystemData = particleCompData;
                        // // particleComp.material = pfbres.get(compInfo.material);
                        // // particleComp.sortingFudge = compInfo.sortingFudge;
                        // // return particleComp;
                        // case "f14effCmop":
                        //     // let f14effCmopData = pfbres.get(compInfo.f14eff);
                        //     // let f14effCmop = new ISpParticleSystem(f14effCmopData.f14dffName);
                        //     // // f14effCmop.f14eff=JSON.parse(f14effCmopData.jsonData);
                        //     // let f14 = new m4m.framework.f14eff(f14effCmopData.f14dffName);
                        //     // f14.Parse(f14effCmopData.jsonData, m4m.framework.sceneMgr.app.getAssetMgr());
                        //     // f14effCmop.f14eff = f14;
                        //     // for (let i = 0; i < f14.data.layers.length; i++) {
                        //     //     let elementdata = f14.data.layers[i].elementdata;
                        //     // }
                        //     // return f14effCmop;
                        //     break;
                        default:
                            console.error("==========================未完成的组件解析：" + name);
                    }
                };
                // private static async getMeshFromMap(meshMap, meshName: string, path: string) {
                //     if (!meshName || !path) return null;
                //     let getMesh = meshMap[meshName];
                //     if (!getMesh) {
                //         let meshInfo = await testReadTool.loadAssetBoundleFiles(path + "resources/" + meshName + ".js", true) as any;
                //         // if (meshInfo&&meshInfo.lenght > 0) {
                //         var smesh = testCreat.createMesh(meshInfo[0] as Mesh, m4m.framework.assetMgr.Instance.webgl);
                //         meshMap[meshName] = smesh;
                //         return smesh;
                //         // }
                //     }
                //     return getMesh;
                // }
                //组装Mesh
                testCreat.createMesh = function (meshData, webgl) {
                    var _mesh = new m4m.framework.mesh(meshData.meshName + ".mesh.bin");
                    _mesh.maximun = m4m.poolv3(meshData.maximum);
                    _mesh.minimun = m4m.poolv3(meshData.minimum);
                    _mesh.defaultAsset = true;
                    _mesh.data = new m4m.render.meshData();
                    // _mesh.data.pos = meshData.position;
                    // _mesh.data.color = meshData.color;
                    // _mesh.data.normal = meshData.normal;
                    // _mesh.data.uv = meshData.UV0;
                    // _mesh.data.uv2 = meshData.UV1;
                    // _mesh.data.tangent = meshData.tangent;
                    // _mesh.data.blendIndex = meshData.blendIndex;
                    // _mesh.data.blendWeight = meshData.blendWeight;
                    _mesh.data.trisindex = meshData.trisindex;
                    _mesh.submesh = [];
                    if (meshData.subMesh) {
                        for (var i = 0; i < meshData.subMesh.length; i++) {
                            var element = meshData.subMesh[i];
                            var subMesh = new m4m.framework.subMeshInfo();
                            subMesh.line = element.line;
                            subMesh.matIndex = element.matIndex;
                            subMesh.size = element.size;
                            subMesh.start = element.start;
                            subMesh.useVertexIndex = element.useVertexIndex;
                            _mesh.submesh.push(subMesh);
                        }
                    }
                    var vf = meshData.originVF;
                    _mesh.data.originVF = vf;
                    var v32 = meshData.tmpVArr;
                    // _mesh.data.tmpVArr = meshData.tmpVArr;
                    _mesh.data.vertexBufferData = meshData.tmpVArr;
                    // var v32 = _mesh.data.genVertexDataArray(vf);
                    var i16 = _mesh.data.genIndexDataArray();
                    // var i16 = _mesh.data.genIndexDataArray();
                    _mesh.glMesh = new m4m.render.glMesh();
                    _mesh.glMesh.initBuffer(webgl, vf, meshData.posCount);
                    // _mesh.maximun=new m4m.math.vector3();
                    // _mesh.minimun=new m4m.math.vector3();
                    // _mesh.glMesh.initBuffer(webgl, vf, _mesh.data.pos.length);
                    // _mesh.glMesh = new m4m.render.glMesh();
                    // _mesh.glMesh.initBuffer(webgl, vf, _mesh.data.pos.length);
                    _mesh.glMesh.uploadVertexData(webgl, v32);
                    _mesh.glMesh.addIndex(webgl, i16.length);
                    _mesh.glMesh.uploadIndexData(webgl, 0, i16);
                    return _mesh;
                };
                testCreat.creatAimClip = function (url, animName) {
                    if (animName === void 0) { animName = null; }
                    return __awaiter(this, void 0, void 0, function () {
                        var pfbName, clipFileInfo, clip;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    pfbName = animName;
                                    return [4 /*yield*/, testReadTool_1.testReadTool.loadAssetBoundleFiles(url, true)];
                                case 1:
                                    clipFileInfo = _a.sent();
                                    clip = testCreat.makeAClip(clipFileInfo[0], pfbName);
                                    return [2 /*return*/, clip];
                            }
                        });
                    });
                };
                testCreat.loadImgMap = new Map_13.cMap();
                testCreat.pfbList = new Map_13.cMap();
                testCreat.qualityString = "";
                testCreat.osString = "";
                testCreat.loadMap = new Map_13.cMap();
                testCreat.isSetGetMesh = false;
                testCreat.allEnd = ".bin.js";
                testCreat.noClipEnd = "_split.bin.js";
                testCreat.noMeshEnd = "_Json.json";
                testCreat.meshEnd = "_Mesh.bin.js";
                testCreat.tNormal = "t_Normal";
                testCreat.tPVR = "t_PVR";
                testCreat.tDDS = "t_DDS";
                testCreat.tKTX = "t_KTX";
                testCreat.tASCT = "t_ASTC";
                testCreat.pfbResList = new Map_13.cMap();
                testCreat.meshMap = new Map_13.cMap();
                testCreat._systemOS = 0;
                testCreat.fileList = ["laser-bolt.png"];
                // 资源路径 替换map
                testCreat._pathReplaceMap = {};
                return testCreat;
            }()));
            //暴露出 类，微信前端使用
            if (m4m) {
                if (!m4m["test"]) {
                    m4m["test"] = {};
                }
                m4m["test"].testCreat = testCreat;
            }
        }
    };
});
System.register("UIBase/imgSpriteArrange", ["Data/Map"], function (exports_95, context_95) {
    "use strict";
    var Map_14, imgSpriteArrange;
    var __moduleName = context_95 && context_95.id;
    return {
        setters: [
            function (Map_14_1) {
                Map_14 = Map_14_1;
            }
        ],
        execute: function () {
            exports_95("imgSpriteArrange", imgSpriteArrange = /** @class */ (function (_super) {
                __extends(imgSpriteArrange, _super);
                // tslint:disable-next-line: class-name
                function imgSpriteArrange() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    //*****************为不影响原组件功能 新起一个组件 后续完整后替掉原组件*************************
                    _this.NumsMap = new Map_14.cMap();
                    _this.gap = 0; //排列图片之间的间距 默认0
                    //                                     x    +    -    .    %    k    m    /   折扣   层   第   :   名  ~   D   H
                    _this.assetBundleName = "";
                    _this.ImgArr = [];
                    _this.baseName = "";
                    _this.cacheColor = new m4m.math.color(1, 1, 1, 1);
                    _this.inited = false;
                    return _this;
                    // private ckGenimg(len: number) {
                    //     //暂时处理 后续优化 余群枝
                    //     if (this.ImgArr) {
                    //         this.ImgArr.forEach((img) => {
                    //             img.transform.visible = false;
                    //         });
                    //         this.ImgArr.length = 0;
                    //         this.transform.removeAllChild();
                    //     }
                    //     let needlen = len - this.ImgArr.length;
                    //     if (needlen < 0) { return; }
                    //     let opt = m4m.framework.layoutOption;
                    //     for (let i = len - needlen; i < len; i++) {
                    //         let imgtran = this.template.transform.clone();
                    //         this.transform.addChild(this.addShell(imgtran, i));
                    //         let img = imgtran.getComponent("image2D") as m4m.framework.image2D;
                    //         m4m.math.colorClone(this.cacheColor, img.color);
                    //         this.ImgArr.push(img);
                    //     }
                    // }
                    // private addShell(tran: m4m.framework.transform2D, pos: number) {
                    //     let opt = m4m.framework.layoutOption;
                    //     let shell = new m4m.framework.transform2D();
                    //     shell.width = this.gap;
                    //     shell.layoutState = this.shellLayoutState;//opt.V_CENTER | opt.LEFT;
                    //     tran.layoutState = this.tranLayoutState;//opt.V_CENTER | opt.H_CENTER;
                    //     shell.transform.setLayoutValue(opt.LEFT, this.gap * pos);
                    //     shell.addChild(tran);
                    //     return shell;
                    // }
                }
                imgSpriteArrange_1 = imgSpriteArrange;
                // /** 设置 模板对象 sprite 的AssetBundleName （默认情况不用处理 , 读取不到 再考虑设置） */
                // public setSpriteAssetBundleName(abName: string) {
                //     this.assetBundleName = abName;
                // }
                /** 设置 值 */
                imgSpriteArrange.prototype.setNum = function (num) {
                    this.init();
                    if (num == undefined || isNaN(num)) {
                        return;
                    }
                    // tslint:disable-next-line: newline-per-chained-call
                    var str = Math.floor(num).toString();
                    // this.ckGenimg(str.length);
                    this.refreshImgs(str);
                };
                /** 设置 string值 */
                imgSpriteArrange.prototype.setStr = function (str) {
                    this.init();
                    if (str == undefined) {
                        return;
                    }
                    // tslint:disable-next-line: newline-per-chained-call
                    // this.ckGenimg(str.length);
                    this.refreshImgs(str);
                };
                /** 设置 颜色 */
                imgSpriteArrange.prototype.setColor = function (color) {
                    if (!color) {
                        return;
                    }
                    m4m.math.colorClone(color, this.cacheColor);
                    this.ImgArr.forEach(function (img) {
                        if (img) {
                            m4m.math.colorClone(color, img.color);
                            img.transform.markDirty();
                        }
                    });
                };
                imgSpriteArrange.prototype.onPlay = function () {
                    // this.template.transform.visible = false;
                    //this.setNum(1234567890);
                };
                imgSpriteArrange.prototype.update = function (delta) {
                };
                imgSpriteArrange.prototype.remove = function () {
                    if (this.ImgArr) {
                        this.ImgArr.length = 0;
                        this.ImgArr = null;
                    }
                    this.NumsMap.clear();
                };
                imgSpriteArrange.prototype.subsIconParse = function () {
                    var nameArr = this.template.transform.name.split("_");
                    var iconName = nameArr[0];
                    //.atlas.json
                    this.baseName = this.template["_spriteName"];
                    var index = this.baseName.indexOf(imgSpriteArrange_1.iconSprStr);
                    if (index != -1) {
                        var uiName = this.baseName.substring(0, index + imgSpriteArrange_1.iconSprStr.length);
                        this.baseName = uiName + iconName;
                        // console.error(a);
                        // console.error(a + iconName);
                    }
                    else {
                        console.error("imgSpriteArrange 组件取图片名出错！");
                        return;
                    }
                    var lastOne = this.baseName[this.baseName.length - 1];
                    this.baseName = isNaN(Number(lastOne)) ? this.baseName : this.baseName.substring(0, this.baseName.length - 1);
                    var assetmgr = m4m.framework.sceneMgr.app.getAssetMgr();
                    this.numImgToMap(assetmgr);
                };
                imgSpriteArrange.prototype.init = function () {
                    if (this.inited) {
                        return;
                    }
                    /* this.baseName = (this.template["_spriteName"] as string);
                     this.baseName = this.baseName.substring(0, this.baseName.length - 1);
             
                     let assetmgr = GameMgr.assetMgr;
                     this.numImgToMap(assetmgr);*/
                    this.subsIconParse();
                    this.inited = true;
                };
                imgSpriteArrange.prototype.numImgToMap = function (assetmgr) {
                    if (this.baseName == "") {
                        return;
                    }
                    // if (this.assetBundleName == null) {
                    //     console.error(" atlas 未设置 asset 路径！！");
                    //     return;
                    // }
                    this.NumsMap.clear();
                    for (var i = 0; i < 10; i++) {
                        var sp = assetmgr.getAssetByName("".concat(this.baseName).concat(i), this.assetBundleName);
                        if (!sp) {
                            // console.error(`imgNum 组件 sprite 无法获取 : ${this.baseName}${i} ,请检查 模板的配套资源`);
                            continue;
                        }
                        this.NumsMap.set(i, sp);
                    }
                    for (var i = 0; i < imgSpriteArrange_1.extSupArr.length; i++) {
                        var str = imgSpriteArrange_1.extSupArr[i];
                        var sp = assetmgr.getAssetByName("".concat(this.baseName).concat(str), this.assetBundleName);
                        if (!sp) {
                            // console.error(`imgNum 组件 sprite 无法获取 : ${this.baseName}${str} ,请检查 模板的配套资源`);
                            continue;
                        }
                        this.NumsMap.set(str, sp);
                    }
                };
                imgSpriteArrange.prototype.refreshImgs = function (str) {
                    this.ImgArr.forEach(function (img) {
                        img.transform.visible = false;
                    });
                    // this.gap = 1;
                    var num = str.length;
                    var ww = 0;
                    var hh = 0; //暂时用和图片一样高度处理 如果有特殊情况再修改
                    var pos = 0;
                    for (var i = 0; i < num; i++) {
                        var val = str[i];
                        var img = this.ImgArr[i];
                        if (img == null) {
                            var imgtran = this.template.transform.clone();
                            imgtran.layoutState = m4m.framework.layoutOption.V_CENTER | m4m.framework.layoutOption.LEFT;
                            this.transform.addChild(imgtran);
                            img = imgtran.getComponent("image2D");
                            this.ImgArr.push(img);
                        }
                        img.transform.visible = true;
                        if (!img.sprite || img.sprite.getName() != "".concat(this.baseName).concat(val)) {
                            // console.log(this.baseName);
                            var spt = this.NumsMap.get(val);
                            if (!spt || !spt.texture) {
                                console.error("\u56FE\u7247\u6570\u636E\u672A\u53D6\u5230\uFF01".concat(this.baseName).concat(val));
                                continue;
                            }
                            img.sprite = spt;
                            img.transform.width = img.sprite.rect.w;
                            img.transform.height = img.sprite.rect.h; //余群枝新增
                            hh = img.transform.height;
                        }
                        img.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, pos);
                        // img.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, 0);
                        img.transform.markDirty();
                        var arrangeW = void 0;
                        if (i == num - 1) {
                            arrangeW = img.transform.width;
                        }
                        else {
                            arrangeW = img.transform.width + this.gap;
                        }
                        pos += arrangeW;
                        ww = pos;
                        // console.error(pos + ` ${this.baseName}${val}` + "   " + img.sprite.rect.w + "  :  " + img.sprite.rect.h);
                    }
                    // console.error(ww);
                    this.transform.width = ww;
                    this.transform.height = hh;
                    this.transform.markDirty();
                };
                var imgSpriteArrange_1;
                imgSpriteArrange.iconSprStr = ".atlas.json_";
                /*
                s=：
                b=%
                c=层
                d=.
                x=×
                i=第
                j=+
                n=-
                k=千
                m=万
                f=/
                z=折
                */
                imgSpriteArrange.extSupArr = ["x", "j", "n", "d", "b", "k", "m", "f", "z", "c", "i", "s", "o", "w", "t", "h"];
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], imgSpriteArrange.prototype, "template", void 0);
                imgSpriteArrange = imgSpriteArrange_1 = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], imgSpriteArrange);
                return imgSpriteArrange;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiEventDiscard", [], function (exports_96, context_96) {
    "use strict";
    var uiEventDiscard;
    var __moduleName = context_96 && context_96.id;
    return {
        setters: [],
        execute: function () {
            exports_96("uiEventDiscard", uiEventDiscard = /** @class */ (function (_super) {
                __extends(uiEventDiscard, _super);
                // tslint:disable-next-line: class-name
                function uiEventDiscard() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 强制要命中UI 矩形 才隔断事件 */
                    _this.foucsHited = false;
                    return _this;
                }
                uiEventDiscard_1 = uiEventDiscard;
                uiEventDiscard.prototype.onPointEvent = function (canvas, ev, oncap) {
                    if (oncap) {
                        return;
                    }
                    var v2 = uiEventDiscard_1.helpV2;
                    m4m.math.vec2Set(v2, ev.x, ev.y);
                    if (this.foucsHited && !this.transform.ContainsCanvasPoint(v2)) {
                        return;
                    }
                    ev.eated = true;
                };
                var uiEventDiscard_1;
                uiEventDiscard.helpV2 = new m4m.math.vector2();
                uiEventDiscard = uiEventDiscard_1 = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiEventDiscard);
                return uiEventDiscard;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Tools/ZIPTool", [], function (exports_97, context_97) {
    "use strict";
    var ZIPTool;
    var __moduleName = context_97 && context_97.id;
    return {
        setters: [],
        execute: function () {
            /**
             * zip 工具
             */
            ZIPTool = /** @class */ (function () {
                function ZIPTool() {
                }
                /**
                 * 加载Zip 文件
                 * @param file 完整 zip 文件路径
                 * @returns ZipPackage
                 */
                ZIPTool.loadZip = function (file) {
                    return __awaiter(this, void 0, void 0, function () {
                        var blob, val;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!JSZip) {
                                        console.error("\u6CA1\u6709\u52A0\u8F7D jszip.js \u65E0\u6CD5\u4F7F\u7528JSZip \u529F\u80FD\u3002");
                                        return [2 /*return*/];
                                    }
                                    return [4 /*yield*/, new Promise(function (res, rej) {
                                            m4m.io.loadBlob(file, function (_blob, _err, isFail) {
                                                if (isFail) {
                                                    rej();
                                                }
                                                res(_blob);
                                            });
                                        })];
                                case 1:
                                    blob = _a.sent();
                                    return [4 /*yield*/, JSZip.loadAsync(blob)];
                                case 2:
                                    val = _a.sent();
                                    return [2 /*return*/, val];
                            }
                        });
                    });
                };
                return ZIPTool;
            }());
            exports_97("ZIPTool", ZIPTool);
        }
    };
});
System.register("Tools/commTool", ["Loader/loadMgr", "Data/Map", "engine", "Tools/engineParallel/spInterface", "Tools/engineParallel/m4m/gdPrefab", "Tools/engineParallel/wxEngine/wxPrefab", "Loader/otherPlan/testCreat", "Tools/miniGame", "UIBase/metaUIManager", "animation/animLoadPlayer", "Tools/ZIPTool"], function (exports_98, context_98) {
    "use strict";
    var loadMgr_1, Map_15, engine_4, spInterface_16, gdPrefab_1, wxPrefab_1, testCreat_3, miniGame_7, metaUIManager_2, animLoadPlayer_3, ZIPTool_1, commTool;
    var __moduleName = context_98 && context_98.id;
    return {
        setters: [
            function (loadMgr_1_1) {
                loadMgr_1 = loadMgr_1_1;
            },
            function (Map_15_1) {
                Map_15 = Map_15_1;
            },
            function (engine_4_1) {
                engine_4 = engine_4_1;
            },
            function (spInterface_16_1) {
                spInterface_16 = spInterface_16_1;
            },
            function (gdPrefab_1_1) {
                gdPrefab_1 = gdPrefab_1_1;
            },
            function (wxPrefab_1_1) {
                wxPrefab_1 = wxPrefab_1_1;
            },
            function (testCreat_3_1) {
                testCreat_3 = testCreat_3_1;
            },
            function (miniGame_7_1) {
                miniGame_7 = miniGame_7_1;
            },
            function (metaUIManager_2_1) {
                metaUIManager_2 = metaUIManager_2_1;
            },
            function (animLoadPlayer_3_1) {
                animLoadPlayer_3 = animLoadPlayer_3_1;
            },
            function (ZIPTool_1_1) {
                ZIPTool_1 = ZIPTool_1_1;
            }
        ],
        execute: function () {
            exports_98("commTool", commTool = /** @class */ (function () {
                /** 通用 Tool */
                // tslint:disable-next-line: class-name
                function commTool() {
                }
                //------------ other -----------------
                /**
                 * 改变层级（递归）
                 * @param tran
                 * @returns
                 */
                commTool.changeLayerGUI = function (tran, targetLayer) {
                    var r = tran.gameObject.rawHandle.renderer;
                    if (r) {
                        r[this.cachLayerTag] = tran.gameObject.layer;
                        // tran.gameObject.layer = metaUIManager.ActiveSelf.layerIndexOverUI3d;
                        tran.gameObject.layer = targetLayer;
                    }
                    // let len = tran.children.length;
                    var len = tran.childrenCount;
                    if (!tran.rawHandle.hasRendererCompChild) {
                        return;
                    }
                    for (var i = 0; i < len; i++) {
                        // let sub = tran.children[i];
                        var sub = tran.getChildByIdx(i);
                        this.changeLayerGUI(sub, targetLayer);
                    }
                };
                /**
                 * 等待 全屏点击了一下
                 */
                commTool.waitFullScreenOnceDown = function () {
                    var ipt = m4m.framework.sceneMgr.app.getInputMgr();
                    var cb;
                    var obj = {
                        onDown: function () {
                            ipt.removePointListener(m4m.event.PointEventEnum.PointDown, obj.onDown, obj);
                            cb();
                        },
                    };
                    var _p = new Promise(function (resolve) {
                        cb = resolve;
                        ipt.addPointListener(m4m.event.PointEventEnum.PointDown, obj.onDown, obj);
                    });
                    return _p;
                };
                /**
                 * 对组件 进行点击模拟
                 * @param compObj   组件对象（必须实现I2DPointListener接口的组件 ）
                 * @param _uiPointX  输入的 坐标点X
                 * @param _uiPointY  输入的 坐标点Y
                 */
                // tslint:disable-next-line: max-line-length
                commTool.clickSimulation = function (compObj, uiPointX, uiPointY) {
                    //模拟按钮点击
                    var _uiPointX = uiPointX;
                    var _uiPointY = uiPointY;
                    var trans = compObj.transform;
                    if (_uiPointX == null || _uiPointY == null) {
                        var wpos = trans.getWorldTranslate();
                        var w = trans.width;
                        var h = trans.height;
                        var p = trans.pivot;
                        //确保点中自己 的中心位置
                        _uiPointX = _uiPointX == null ? wpos.x + (0.5 - p.x) * w : _uiPointX;
                        _uiPointY = _uiPointY == null ? wpos.y + (0.5 - p.y) * h : _uiPointY;
                    }
                    var uipoint = commTool.helpV2;
                    m4m.math.vec2Set(uipoint, _uiPointX, _uiPointY);
                    var mPos = commTool.helpV2v1;
                    var pEv = new m4m.framework.PointEvent();
                    pEv.eated = false;
                    trans.canvas.CanvasPosToModelPos(uipoint, mPos);
                    pEv.x = mPos.x;
                    pEv.y = mPos.y;
                    pEv.type = m4m.event.PointEventEnum.PointDown;
                    compObj.onPointEvent(null, pEv, false);
                    pEv.type = m4m.event.PointEventEnum.PointUp;
                    compObj.onPointEvent(null, pEv, false);
                };
                /**
                 * 通过 UI全局路径 获取 UI对象
                 * @param UICanvas ui的canvas 对象
                 * @param uiPath UI全局路径
                 */
                commTool.getUIByPath = function (UICanvas, uiPath) {
                    return this.getTransByPath(UICanvas.getRoot(), uiPath);
                };
                /**
                 * 通过 3D节点全局路径 获取 节点对象
                 * @param nodePath 节点全局路径
                 */
                commTool.get3DNodeByPath = function (nodePath) {
                    return this.getTransByPath(m4m.framework.sceneMgr.scene.getRoot(), nodePath);
                };
                /**
                 * 通过 节点全局路径 获取 节点对象
                 * @param nodeRoot root 节点
                 * @param nodePath 全局路径
                 */
                commTool.getTransByPath = function (nodeRoot, nodePath) {
                    var nodes = nodePath.split(";");
                    nodes.shift();
                    var currNode = nodeRoot;
                    for (var i = 0, len = nodes.length; i < len; i++) {
                        var str = nodes[i];
                        var repeatIdx = 0;
                        var uiName = str;
                        var idx = str.lastIndexOf(" ");
                        if (idx != -1) {
                            repeatIdx = Number(str.substr(idx + 1)); //节点在同层级有 重名对象，需要用索引来定位
                            if (!isNaN(repeatIdx)) {
                                uiName = str.substr(0, idx);
                            }
                            else {
                                repeatIdx = 0;
                            }
                        }
                        currNode = this.getTransByArr(currNode.children, uiName, repeatIdx);
                        if (!currNode) {
                            break;
                        }
                    }
                    return currNode;
                };
                /**
                 * 获取 节点 通过 path
                 * @param arr
                 * @param uiName
                 * @param repeatIdx
                 */
                commTool.getTransByArr = function (arr, uiName, repeatIdx) {
                    var result;
                    var repeatCount = -1;
                    for (var i = 0, len = arr.length; i < len; i++) {
                        var ui = arr[i];
                        if (ui.name == uiName) {
                            result = ui;
                            repeatCount++;
                        }
                        if (repeatCount == repeatIdx) {
                            break;
                        }
                    }
                    return result;
                };
                /**
                 * 获取 UI 的全局路径(字符串)
                 * @param ui
                 */
                commTool.getUIPathStr = function (ui) {
                    return this.getTransPathStr(ui);
                };
                /**
                 * 获取 3d节点 的全局路径(字符串)
                 * @param ui
                 */
                commTool.get3DPathStr = function (node) {
                    return this.getTransPathStr(node);
                };
                /**
                 * 获取 trans 的全局路径(字符串)
                 * @param TransNode trans节点
                 */
                commTool.getTransPathStr = function (TransNode) {
                    var path = this.getTransPath(TransNode);
                    var pathStr = "";
                    path.forEach(function (v, i) {
                        if (v) {
                            pathStr += v[0];
                            if (v[1] != null) {
                                pathStr += " ".concat(v[1]);
                            }
                            if (i < path.length - 1) {
                                pathStr += ";";
                            }
                        }
                    });
                    return pathStr;
                };
                /**
                 * 获取 节点 的全局路径
                 * @param TransNode trans对象节点
                 */
                commTool.getTransPath = function (TransNode) {
                    var pathArr = [];
                    var curr = TransNode;
                    while (true) {
                        if (!curr) {
                            break;
                        }
                        var parent_1 = curr.parent;
                        var idx = -1;
                        if (parent_1) {
                            var children = parent_1.children;
                            //是否 有同名对象在 parent 中
                            if (children.length > 1) {
                                var has = false;
                                var _idx = 0;
                                for (var i = 0, len = children.length; i < len; i++) {
                                    var v = children[i];
                                    if (v.name != curr.name) {
                                        continue;
                                    }
                                    if (curr == v) {
                                        break;
                                    }
                                    has = true;
                                    _idx++;
                                }
                                if (has) {
                                    idx = _idx;
                                }
                            }
                        }
                        var node = [curr.name];
                        if (idx != -1) {
                            node.push(idx);
                        }
                        pathArr.unshift(node);
                        curr = parent_1;
                    }
                    return pathArr;
                };
                /**
                 * 将节点 改造成 UI事件屏蔽节点
                 * @param trans UI节点对象
                 * @param foucsHited 是否强制 点中UI才屏蔽
                 * @returns
                 */
                commTool.makeUIEventDiscard = function (trans, foucsHited) {
                    if (foucsHited === void 0) { foucsHited = false; }
                    var uied = trans.getComponent("uiEventDiscard");
                    if (!uied) {
                        uied = trans.addComponent("uiEventDiscard");
                    }
                    uied.foucsHited = foucsHited;
                };
                /**
                 * 屏幕坐标转换到UI 世界坐标
                 * @param x screenPos.x
                 * @param y screenPos.y
                 * @param outUiPos ui世界坐标
                 */
                commTool.screenPosToUIpos = function (x, y, outUiPos) {
                    if (isNaN(x) || isNaN(y) || !outUiPos) {
                        return;
                    }
                    m4m.math.vec2Set(outUiPos, x, y);
                    metaUIManager_2.metaUIManager.ActiveSelf.overlay.calScreenPosToCanvasPos(outUiPos, outUiPos);
                };
                /**
                 * UI 世界坐标转换到 屏幕坐标
                 * @param x UIPos.x
                 * @param y UIPos.y
                 * @param outScreenPos 屏幕坐标
                 */
                commTool.UIPosToScreenPos = function (x, y, outScreenPos) {
                    if (isNaN(x) || isNaN(y) || !outScreenPos) {
                        return;
                    }
                    m4m.math.vec2Set(outScreenPos, x, y);
                    metaUIManager_2.metaUIManager.ActiveSelf.overlay.calCanvasPosToScreenPos(outScreenPos, outScreenPos);
                };
                /**
                 * 通过屏幕坐标 获取 3D 空间坐标
                 * @param x screenPos.x
                 * @param y screenPos.y
                 * @param out3DPos 3D 空间坐标
                 * @param watchCam 观察相机
                 * @param zDepth 相对于相机观察平面的距离(相机Z 深度)
                 */
                commTool.calcu3DPosByScreenPos = function (x, y, out3DPos, watchCam, zDepth) {
                    if (zDepth === void 0) { zDepth = 5; }
                    if (isNaN(x) || isNaN(y) || !out3DPos || !watchCam) {
                        return;
                    }
                    var sPos = this.helpV2;
                    m4m.math.vec2Set(sPos, x, y);
                    var camTrans = watchCam.gameObject.transform;
                    var eType = camTrans.engineType;
                    //相机
                    //射线
                    //射线接触平面
                    switch (eType) {
                        case spInterface_16.engineParallelType.none:
                            var app = m4m.framework.sceneMgr.app;
                            var rawCam = watchCam.rawHandle;
                            var planePoint = this.helpV3;
                            var planeN = this.helpV3v1;
                            rawCam.gameObject.transform.getForwardInWorld(planeN);
                            m4m.math.vec3ScaleByNum(planeN, zDepth, planePoint);
                            m4m.math.vec3Add(planePoint, camTrans.getWorldPosition(), planePoint);
                            var ray = rawCam.creatRayByScreen(sPos, app);
                            ray.intersectPlane(planePoint, planeN, out3DPos);
                            break;
                        case spInterface_16.engineParallelType.wxEngine:
                            //
                            break;
                        default:
                    }
                };
                /**
                 * 通过给定UI 坐标计算3D空间 坐标
                 * @param cam 相机
                 * @param canvas UI的canvas
                 * @param _3DPos 3d 空间坐标
                 * @param outUIPos ui坐标
                 */
                // tslint:disable-next-line: max-line-length
                commTool.calcuUIPosBy3DPos = function (cam, canvas, _3DPos, outUIPos) {
                    var clipP = this.helpV3;
                    var _cam = m4m.framework.sceneMgr.scene.mainCamera;
                    _cam.calcClipPosFromWorldPos(m4m.framework.sceneMgr.app, _3DPos, clipP);
                    //clipP 当做 vec2，不做转换 节省性能。
                    canvas.clipPosToCanvasPos(clipP, outUIPos);
                };
                /**
                 * 设置UI 渲染组件的 shader
                 * @param shaderResName
                 * @param renderer 渲染组件对象（image2D、rawImage、label..）
                 * @param needNewMaterial 切换成新的材质,替换老的材质
                 */
                commTool.setUIShader = function (shaderResName, renderer, needNewMaterial) {
                    if (needNewMaterial === void 0) { needNewMaterial = false; }
                    if (!shaderResName || !renderer) {
                        return;
                    }
                    var r = renderer;
                    if (!r.setShaderByName || !r.getMaterial) {
                        return;
                    }
                    var mat = r.getMaterial();
                    r.setShaderByName(shaderResName);
                    if (mat && r._uimat && needNewMaterial) {
                        r._uimat = mat = mat.clone();
                    }
                    // tslint:disable-next-line: newline-per-chained-call
                    if (!mat || mat.getShader().getName() == shaderResName) {
                        return;
                    }
                    var assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                    var sh = assetMgr.getShader(shaderResName);
                    if (sh) {
                        mat.setShader(sh);
                    }
                };
                /**
                 * 获取2d组件 通过指定类(帮助获取组件的父类)
                 * @param classType 类
                 * @param gameObj 游戏对象，组件容器
                 */
                commTool.getComponentByType2d = function (classType, gameObj) {
                    return this._getComponentByType(classType, gameObj);
                };
                /**
                 * 获取组件 通过指定类(帮助获取组件的父类)
                 * @param classType 类
                 * @param gameObj 游戏对象，组件容器
                 */
                commTool.getComponentByType = function (classType, gameObj) {
                    return this._getComponentByType(classType, gameObj);
                };
                commTool._getComponentByType = function (classType, gameObj) {
                    if (!classType || !gameObj) {
                        return;
                    }
                    var comps = gameObj.components;
                    if (!comps) {
                        return;
                    }
                    var len = comps.length;
                    for (var i = 0; i < len; i++) {
                        var comp = comps[i].comp;
                        // if(comp instanceof classType){
                        if (this.instanceof_proto(classType, comp)) {
                            return comp;
                        }
                    }
                };
                commTool.instanceof_proto = function (classType, instance) {
                    if (!classType || !classType.name || !instance || !instance.constructor) {
                        return false;
                    }
                    var insP = instance.constructor;
                    while (insP && insP.name) {
                        if (classType.name == insP.name) {
                            return true;
                        }
                        insP = Object.getPrototypeOf(insP);
                    }
                    return false;
                };
                /**
                 * 克隆aabb 数据
                 * @param traget 目标transom 节点对象
                 * @param outAABB aabb 对象
                 */
                commTool.cloneAABB = function (traget, outAABB) {
                    if (!traget || !outAABB) {
                        return;
                    }
                    m4m.math.vec3Clone(traget.getAabbMax(), outAABB.maximum);
                    m4m.math.vec3Clone(traget.getAabbMin(), outAABB.minimum);
                    m4m.math.vec3Clone(traget.getAabbCenter(), outAABB.center);
                };
                /**
                 * 添加 相机到场景
                 * @param cam
                 */
                commTool.addCameraToscene = function (cam) {
                    var tran = cam.gameObject.transform;
                    switch (tran.engineType) {
                        case spInterface_16.engineParallelType.none:
                            var gdCam = cam.rawHandle;
                            if (gdCam) {
                                var _s = m4m.framework.sceneMgr.scene;
                                if (_s.renderCameras.indexOf(gdCam) != -1) {
                                    return;
                                }
                                _s.renderCameras.push(gdCam);
                                _s.renderContext.push(new m4m.framework.renderContext(_s.webgl));
                            }
                            break;
                        default:
                    }
                };
                /**
                 * 删除 场景中 相机
                 * @param cam
                 */
                commTool.removeCameraFromScene = function (cam) {
                    var tran = cam.gameObject.transform;
                    switch (tran.engineType) {
                        case spInterface_16.engineParallelType.none:
                            var gdCam = cam.rawHandle;
                            if (gdCam) {
                                var _s = m4m.framework.sceneMgr.scene;
                                var idx = _s.renderCameras.indexOf(gdCam);
                                if (idx == -1) {
                                    return;
                                }
                                _s.renderCameras.splice(idx, 1);
                                _s.renderContext.splice(idx, 1);
                            }
                            break;
                        default:
                    }
                };
                /**
                 * 收集指定对象节点层级下的 所有 目标名 的节点
                 * @param tran3d 指定对象节点
                 * @param targetName 目标名
                 * @param outFindList 收集的节点列表
                 */
                commTool.finds = function (tran3d, targetName, outFindList) {
                    if (!tran3d || targetName == null) {
                        return;
                    }
                    if (tran3d.name == targetName) {
                        outFindList.push(tran3d);
                    }
                    // let len = tran3d.children.length;
                    var len = tran3d.childrenCount;
                    if (len > 0) {
                        for (var i = 0; i < len; i++) {
                            this.finds(tran3d.getChildByIdx(i), targetName, outFindList);
                        }
                    }
                };
                /**
                 * 收集指定对象节点层级下的 所有 目标名 的节点
                 * @param tran2d 指定对象节点
                 * @param targetName 目标名
                 * @param outFindList 收集的节点列表
                 */
                commTool.finds_2d = function (tran2d, targetName, outFindList) {
                    if (!tran2d || targetName == null) {
                        return;
                    }
                    if (tran2d.name == targetName) {
                        outFindList.push(tran2d);
                    }
                    // let len = tran3d.children.length;
                    var len = tran2d.children.length;
                    if (len > 0) {
                        for (var i = 0; i < len; i++) {
                            this.finds_2d(tran2d.children[i], targetName, outFindList);
                        }
                    }
                };
                /**
                 * 搜索指定对象节点层级下的 目标名 的节点
                 * @param tran2d 指定对象节点
                 * @param targetName 目标名
                 */
                commTool.find_2d = function (tran2d, targetName) {
                    if (tran2d.name == targetName) {
                        return tran2d;
                    }
                    if (tran2d.children) {
                        for (var _i = 0, _a = tran2d.children; _i < _a.length; _i++) {
                            var val = _a[_i];
                            var res = this.find_2d(val, targetName);
                            if (res != null) {
                                return res;
                            }
                        }
                    }
                    return null;
                };
                /**
                 * 遍历 transfrom 所有子节点
                 * @param t transform对象
                 * @param fn 遍历检测方法 (函数 返回值 true ，中断遍历)
                 * @returns
                 */
                commTool.forEachTransformTree = function (t, fn) {
                    if (!t || !fn) {
                        return;
                    }
                    var needBreak = fn(t);
                    if (needBreak) {
                        return true;
                    }
                    if (t.childrenCount > 0) {
                        for (var i = 0, len = t.childrenCount; i < len; i++) {
                            var _needBreak = this.forEachTransformTree(t.getChildByIdx(i), fn);
                            if (_needBreak) {
                                return true;
                            }
                        }
                    }
                };
                /**
                 * 遍历 transfrom2D 所有子节点
                 * @param t transfrom2D 对象
                 * @param fn 遍历检测方法 (函数 返回值 true ，中断遍历)
                 * @returns
                 */
                commTool.forEachTransform2DTree = function (t, fn) {
                    if (!t || !fn) {
                        return;
                    }
                    var needBreak = fn(t);
                    if (needBreak) {
                        return true;
                    }
                    if (t.children.length > 0) {
                        for (var i = 0, len = t.children.length; i < len; i++) {
                            var _needBreak = this.forEachTransform2DTree(t.children[i], fn);
                            if (_needBreak) {
                                return true;
                            }
                        }
                    }
                };
                /**
                 * 解析 动画时间轴事件
                 * @param data json 格式 ，{动画名:{时间点:[触发函数名,函数传参1,...]}}
                 */
                commTool.parseAnimTimeEvent = function (_animPlayH, data) {
                    if (!data) {
                        return;
                    }
                    var obj = JSON.parse(data);
                    for (var key in obj) {
                        var _clip = obj[key];
                        for (var time in _clip) {
                            var temp = _clip[time];
                            var actFunName = temp[0];
                            var valStr = temp[1];
                            _animPlayH.setTimeEvent(key, Number(time), actFunName, valStr);
                        }
                    }
                };
                /**
                 * 构造一个 ImgNum 对象
                 * @param templete 数值 模板对象
                 */
                commTool.makeImgNum = function (templete, shellLayoutState, tranLayoutState) {
                    if (shellLayoutState === void 0) { shellLayoutState = null; }
                    if (tranLayoutState === void 0) { tranLayoutState = null; }
                    var result;
                    var numTran = templete.transform.clone();
                    templete.transform.parent.addChild(numTran);
                    numTran.name = "imgNum_compTran";
                    numTran.removeAllChild();
                    numTran.removeAllComponents();
                    result = numTran.addComponent("imgNum");
                    result.template = templete;
                    if (shellLayoutState) {
                        result.shellLayoutState = shellLayoutState;
                    }
                    if (tranLayoutState) {
                        result.tranLayoutState = tranLayoutState;
                    }
                    return result;
                };
                /**
                 * 构造一个 ImgNum 对象
                 * @param templete 数值 模板对象
                 */
                // tslint:disable-next-line: max-line-length
                commTool.makeImgSpriteArrange = function (templete) {
                    var result;
                    var numTran = new m4m.framework.transform2D();
                    templete.transform.parent.addChild(numTran);
                    numTran.name = "imgNum_compTran";
                    //图片容器 布局 默认居中显示
                    numTran.layoutState = m4m.framework.layoutOption.V_CENTER | m4m.framework.layoutOption.H_CENTER;
                    result = numTran.addComponent("imgSpriteArrange");
                    result.template = templete;
                    return result;
                };
                /**
                 * 构造一个 SequenceFrame 序列帧 对象
                 * @param sfTran  最后一帧模板对象
                 */
                commTool.makeSequenceFrame = function (sfTran) {
                    var result;
                    result = sfTran.transform.addComponent("sequenceFrame");
                    return result;
                };
                /**
                 * 获取字典中的K-V 的数量
                 * @param dic 字典对象
                 */
                commTool.getDicSubSize = function (dic) {
                    var len = 0;
                    for (var key in dic) {
                        len++;
                    }
                    return len;
                };
                /**
                 * 将相对 “当前游戏对象” 的坐标转化为基于世界坐标系的坐标
                 * @param target 当前对象
                 * @param point 以当前对象为基坐标的位置点
                 * @param resultV3 场景世界坐标
                 */
                //Transforms position from local space to world space.
                commTool.TransformPoint = function (target, point, resultV3) {
                    if (!target || !point) {
                        return;
                    }
                    var mtx = target.getWorldMatrix();
                    m4m.math.matrixTransformVector3(point, mtx, resultV3);
                };
                /**
                 * 异步加载预设体
                 * @param dirPath 文件路径
                 * @param prefabName 预设体资源名
                 * @param priority 优先级 默认0
                 */
                commTool.loadPrefeb = function (dirPath, prefabName, priority) {
                    if (priority === void 0) { priority = 0; }
                    return __awaiter(this, void 0, void 0, function () {
                        var url, isTestCreatMode, testPath, realPath, pfb, testUrl, isUIPath, assetUrl, Ipfb;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!dirPath || !prefabName) {
                                        return [2 /*return*/];
                                    }
                                    url = "";
                                    isTestCreatMode = false;
                                    testPath = testCreat_3.testCreat.pathReplaceMap[dirPath];
                                    realPath = dirPath;
                                    if (testPath) {
                                        realPath = testPath;
                                        isTestCreatMode = true;
                                    }
                                    if (!isTestCreatMode) return [3 /*break*/, 5];
                                    url = "".concat(realPath).concat(prefabName, "/resources/") + prefabName;
                                    testUrl = realPath;
                                    isUIPath = url.indexOf("/ui/") == -1;
                                    if (!isUIPath) return [3 /*break*/, 2];
                                    return [4 /*yield*/, testCreat_3.testCreat.createPfb(testUrl, prefabName)];
                                case 1:
                                    pfb = _a.sent();
                                    return [3 /*break*/, 4];
                                case 2: return [4 /*yield*/, testCreat_3.testCreat.createPfb2D(testUrl, prefabName)];
                                case 3:
                                    pfb = _a.sent();
                                    _a.label = 4;
                                case 4: return [3 /*break*/, 7];
                                case 5:
                                    url = "".concat(realPath).concat(prefabName, "/").concat(prefabName, ".assetbundle.json");
                                    assetUrl = url.replace(m4m.framework.assetMgr.cdnRoot, "");
                                    if (this.PrefebMap.get(url)) {
                                        return [2 /*return*/, this.PrefebMap.get(url)];
                                    }
                                    return [4 /*yield*/, loadMgr_1.loadMgr.Instance.syncLoad(url, priority)];
                                case 6:
                                    _a.sent();
                                    pfb = m4m.framework.sceneMgr.app.getAssetMgr()
                                        .getAssetByName("".concat(prefabName, ".prefab.json"), assetUrl);
                                    _a.label = 7;
                                case 7:
                                    if (!pfb) {
                                        return [2 /*return*/];
                                    }
                                    Ipfb = new gdPrefab_1.gdPrefab(pfb);
                                    this.PrefebMap.set(url, Ipfb);
                                    return [2 /*return*/, Ipfb];
                            }
                        });
                    });
                };
                /**
                 * 异步加载预设体 （微信引擎加载）
                 * @param url 文件url
                 */
                commTool.loadPrefebURLWXEngin = function (url) {
                    var _this = this;
                    return new Promise(function (resolveFun, rejectFun) {
                        var wxP = _this.PrefebMap.get(url);
                        if (wxP) {
                            resolveFun(wxP);
                            return;
                        }
                        //加载逻辑
                        engine_4.default.loader.load(url).promise
                            .then(function (p) {
                            //加载完毕
                            wxP = new wxPrefab_1.wxPrefab(p);
                            _this.PrefebMap.set(url, wxP);
                            resolveFun(wxP);
                        }, rejectFun);
                    });
                };
                /**
                 * 异步加载预设体, 通过路径 + 资源名 （微信引擎加载）
                 * @param dirPath
                 * @param prefabName
                 */
                commTool.loadPrefebWXEngin = function (dirPath, prefabName) {
                    return this.loadPrefebURLWXEngin("".concat(dirPath).concat(prefabName, ".prefab"));
                };
                //获取m4m的cache prefab
                commTool.getCachePfbm4m = function (prefabKey, isTest) {
                    if (isTest === void 0) { isTest = true; }
                    var pfabe = testCreat_3.testCreat.pfbList.get(prefabKey);
                    if (pfabe) {
                        return new gdPrefab_1.gdPrefab(pfabe);
                    }
                };
                commTool.getCachePrefabKeyType = function (prefabKey, eType) {
                    switch (eType) {
                        case spInterface_16.engineParallelType.none: return this.getCachePfbm4m(prefabKey);
                        case spInterface_16.engineParallelType.wxEngine: return this.PrefebMap.get(prefabKey);
                        default: return this.PrefebMap.get(prefabKey);
                    }
                };
                /**
                 * 获取已经缓存了的 prefab资源
                 * @param prefabKey 取值key
                 */
                commTool.getCachePrefabKey = function (prefabKey, eType) {
                    if (eType === void 0) { eType = null; }
                    var result;
                    if (eType == null) {
                        //没有指定类型 ，逐类型查找
                        var idx = 0;
                        var len = this.careTypeList.length;
                        while (!result && idx < len) {
                            var currEtype = this.careTypeList[idx];
                            result = this.getCachePrefabKeyType(prefabKey, currEtype);
                            idx++;
                        }
                    }
                    else {
                        result = this.getCachePrefabKeyType(prefabKey, eType);
                    }
                    return result;
                };
                //获取prefab key通过制定类型
                commTool.getPrefabKeyType = function (dirPath, prefabName, eType) {
                    switch (eType) {
                        case spInterface_16.engineParallelType.none: return "".concat(dirPath).concat(prefabName, "/");
                        case spInterface_16.engineParallelType.wxEngine: return "".concat(dirPath).concat(prefabName, ".prefab");
                        default: return "";
                    }
                };
                /**
                 * 异步加载预设体, 通过路径 + 资源名 （微信引擎加载）
                 * @param dirPath 文件路径
                 * @param prefabName prefab名字
                 */
                commTool.getCachePrefab = function (dirPath, prefabName, eType) {
                    if (eType === void 0) { eType = null; }
                    var result;
                    if (eType == null) {
                        //没有指定类型 ，逐类型查找
                        var idx = 0;
                        var len = this.careTypeList.length;
                        while (!result && idx < len) {
                            var currEtype = this.careTypeList[idx];
                            var prefabKey = this.getPrefabKeyType(dirPath, prefabName, currEtype);
                            result = this.getCachePrefabKeyType(prefabKey, currEtype);
                            idx++;
                        }
                    }
                    else {
                        var prefabKey = this.getPrefabKeyType(dirPath, prefabName, eType);
                        result = this.getCachePrefabKeyType(prefabKey, eType);
                    }
                    return result;
                };
                // private static limitColliders = ["spherecollider", "meshcollider", "boxcollider"];
                //清理 多余 collder
                // private static remove3dCollider(pfb: m4m.framework.prefab) {
                //     if (!pfb) return;
                //     let orgTrans = pfb["trans"] as ISpTransform;
                //     if (!orgTrans) return;
                //     if (orgTrans instanceof m4m.framework.transform2D) return;
                //     let colliders: m4m.framework.ICollider[] = [];
                //     let len = commTool.limitColliders.length;
                //     for (let i = 0; i < len; i++) {
                //         let cType = commTool.limitColliders[i];
                //         let cc = orgTrans.gameObject.rawHandle.getComponentsInChildren(cType) as any;
                //         if (cc && cc.length) {
                //             colliders = cc;
                //             break;
                //         }
                //     }
                //     //删除 不需要的 collider
                //     let cLen = colliders.length;
                //     for (let i = 0; i < cLen; i++) {
                //         let c = colliders[i];
                //         if (c && c.gameObject) {
                //             // console.error(`removeComponent c${c.gameObject.transform.name}`);
                //             c.gameObject.removeComponent(c as any);
                //         }
                //     }
                // }
                /**
                 * 异步加载预设体 资源URL
                 * @param prefabURL
                 * @param priority
                 */
                commTool.loadPrefebURL = function (prefabURL, priority) {
                    if (priority === void 0) { priority = 0; }
                    return __awaiter(this, void 0, void 0, function () {
                        var dirPath, prefabName;
                        return __generator(this, function (_a) {
                            if (!prefabURL) {
                                return [2 /*return*/];
                            }
                            dirPath = this.getABPathByURL(prefabURL);
                            if (!dirPath) {
                                return [2 /*return*/];
                            }
                            prefabName = this.getResNameByURL(prefabURL);
                            if (!prefabName) {
                                return [2 /*return*/];
                            }
                            // console.error(`开始 loadPrefebURL :${prefabURL} , this.loadPrefeb`);
                            return [2 /*return*/, this.loadPrefeb(dirPath, prefabName, priority)];
                        });
                    });
                };
                /**
                 * 获取AB包资源路径 通过URL
                 * @param URL
                 */
                commTool.getABPathByURL = function (URL) {
                    if (!URL) {
                        return;
                    }
                    var pIdx = URL.lastIndexOf("/");
                    if (pIdx == -1) {
                        return;
                    }
                    var str = URL.substring(0, pIdx);
                    pIdx = str.lastIndexOf("/");
                    return str.substring(0, pIdx + 1);
                };
                /**
                 * 获取资源名 通过URL
                 * @param URL
                 */
                commTool.getResNameByURL = function (URL) {
                    if (!URL) {
                        return;
                    }
                    var pIdx = URL.lastIndexOf("/");
                    if (pIdx == -1) {
                        return;
                    }
                    var str = URL.substring(pIdx + 1);
                    var _pIdx = str.indexOf(".");
                    return str.substring(0, _pIdx);
                };
                /**
                 * 同步加载 文本数据
                 * @param url
                 */
                commTool.syncloadText = function (url) {
                    return __awaiter(this, void 0, void 0, function () {
                        var _text, loadP;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _text = this.loadedTextsMap.get(url);
                                    if (_text) {
                                        return [2 /*return*/, _text];
                                    }
                                    loadP = new Promise(function (resolve) {
                                        m4m.io.loadText(url, function (_txt, _err, isfail) {
                                            resolve(_txt);
                                        });
                                    });
                                    return [4 /*yield*/, loadP];
                                case 1:
                                    _text = _a.sent();
                                    this.loadedTextsMap.set(url, _text);
                                    return [2 /*return*/, _text];
                            }
                        });
                    });
                };
                commTool.ImgByLoad = function (url, backFun) {
                    var _this = this;
                    m4m.io.loadImg(url, function (_tex, err) {
                        if (err) {
                            console.error(err);
                            if (backFun) {
                                backFun(null, err);
                            }
                        }
                        else {
                            _this.imgIdCounter++;
                            //构建 img
                            var _texture = new m4m.framework.texture("_loadTex_".concat(_this.imgIdCounter));
                            var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                            var t2d = new m4m.render.glTexture2D(m4m.framework.sceneMgr.app.webgl, _textureFormat);
                            t2d.uploadImage(_tex, false, true, false, false, false); //非2次幂 图 不能显示设置repeat
                            _texture.glTexture = t2d;
                            _texture.use();
                            //清理 HTMLImageElement 的缓存
                            // let guid = (_tex as any).guid;
                            // if (guid != null) {
                            delete m4m.framework.assetMgr.mapImage[url];
                            delete m4m.framework.assetMgr.mapLoading[url];
                            // }
                            if (backFun) {
                                backFun(_texture);
                            }
                        }
                    });
                };
                /** 微信性能引擎版贴图 */
                commTool.ImgByLoadWX = function (url, backFun) {
                    m4m.io.loadImg(url, function (_tex, err) {
                        if (err) {
                            console.error(err);
                            if (backFun) {
                                backFun(null, err);
                            }
                        }
                        else {
                            var _texture = new engine_4.default.Texture2D({ filterMode: 1, wrapU: 2, wrapV: 2 });
                            _texture.initWithImage(_tex, false, false);
                            if (backFun) {
                                backFun(_texture);
                            }
                        }
                    });
                };
                /**
                 * 加载贴图
                 * @param url 资源RUL
                 * @param callBack
                 * @param needCache 是否缓存贴图对象（频繁加载的贴图推荐使用）
                 */
                commTool.loaderTextureFun = function (url, callBack, needCache) {
                    if (needCache === void 0) { needCache = false; }
                    // tslint:disable-next-line: no-parameter-reassignment
                    // url = encodeURI(url);
                    if (commTool.loadedTexsDic.has(url)) {
                        if (callBack) {
                            var textu = commTool.loadedTexsDic.get(url);
                            callBack(textu);
                        }
                    }
                    else {
                        commTool.ImgByLoad(url, function (_tex, _err) {
                            if (_err) {
                                if (callBack) {
                                    callBack(_tex, _err);
                                }
                                console.error("H5加载  " + url + "  出错！！！！");
                            }
                            else {
                                if (_tex) {
                                    if (needCache) {
                                        commTool.loadedTexsDic.set(url, _tex);
                                    }
                                    if (callBack) {
                                        callBack(_tex, _err);
                                    }
                                }
                            }
                        });
                    }
                };
                /** 加载贴图 wx接口 */
                commTool.loaderTextureFunWX = function (url, callBack, needCache) {
                    if (needCache === void 0) { needCache = false; }
                    // tslint:disable-next-line: no-parameter-reassignment
                    // url = encodeURI(url);
                    if (commTool.loadedTexsDicWX.has(url)) {
                        if (callBack) {
                            var textu = commTool.loadedTexsDicWX.get(url);
                            callBack(textu);
                        }
                    }
                    else {
                        commTool.ImgByLoadWX(url, function (_tex, _err) {
                            if (_err || !_tex) {
                                console.error("wx加载  " + url + "  出错！！！！");
                                return;
                            }
                            if (needCache) {
                                commTool.loadedTexsDicWX.set(url, _tex);
                            }
                            if (callBack) {
                                callBack(_tex, _err);
                            }
                        });
                    }
                };
                /**
                 * 加载指定类型的贴图
                 * @param url 地址
                 * @param callBack 回调方法
                 * @param needCache 是否需要缓存
                 * @param _etype 引擎类型
                 */
                commTool.loaderTextureByType = function (url, callBack, needCache, etype) {
                    if (needCache === void 0) { needCache = false; }
                    if (etype === void 0) { etype = null; }
                    var _etype = etype == null ? miniGame_7.miniGame.engineParallel : etype;
                    switch (_etype) {
                        case spInterface_16.engineParallelType.none:
                            this.loaderTextureFun(url, callBack, needCache);
                            break;
                        case spInterface_16.engineParallelType.wxEngine:
                            this.loaderTextureFunWX(url, callBack, needCache);
                            break;
                        default: var temp = void 0;
                    }
                };
                /**
                 * 加载 的贴图缓存容器 , sync 版
                 * @param rul
                 * @param needCache 是否缓存贴图对象（频繁加载的贴图推荐使用）
                 */
                commTool.syncLoadTexture = function (rul, needCache) {
                    var _this = this;
                    if (needCache === void 0) { needCache = false; }
                    return new Promise(function (resolve, rej) {
                        _this.loaderTextureFun(rul, function (_tex, _err) {
                            if (_err) {
                                rej(_err);
                            }
                            else {
                                resolve(_tex);
                            }
                        }, needCache);
                    });
                };
                /**
                * 加载gltf 资源
                * @param gltfFolder  gltf 资源目录
                * @param file gltf 资源文件
                * @param IBLSettings IBL 的参数设置
                * @returns
                */
                // tslint:disable-next-line: max-line-length
                commTool.loadGLTF = function (gltfFolder, file, IBLSettings) {
                    if (IBLSettings === void 0) { IBLSettings = null; }
                    return __awaiter(this, void 0, void 0, function () {
                        var app, IBL, exposure, specularIntensity, diffuseIntensity, gltf, node;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    app = m4m.framework.sceneMgr.app;
                                    IBL = IBLSettings;
                                    exposure = IBL && IBL.exposure != null ? IBL.exposure : 1;
                                    specularIntensity = IBL && IBL.specularIntensity != null ? IBL.specularIntensity : 1;
                                    diffuseIntensity = IBL && IBL.diffuseIntensity != null ? IBL.diffuseIntensity : 1;
                                    return [4 /*yield*/, loadMgr_1.loadMgr.Instance.syncLoadGain("".concat(gltfFolder).concat(file))];
                                case 1:
                                    gltf = _a.sent();
                                    return [4 /*yield*/, gltf.load(app.getAssetMgr(), app.webgl, gltfFolder, null, null, null, exposure, specularIntensity, diffuseIntensity)];
                                case 2:
                                    node = _a.sent();
                                    node.localScale.x *= -1;
                                    return [2 /*return*/, node];
                            }
                        });
                    });
                };
                /**
                 * 获取gltf模型对象
                 * @param gltf gltf模型资源对象
                 * @param gltfFolder gltf 资源文件所在目录
                 * @param IBLSettings IBL 的参数设置
                 */
                // tslint:disable-next-line: max-line-length
                commTool.getGLTFModel = function (gltf, gltfFolder, IBLSettings) {
                    if (IBLSettings === void 0) { IBLSettings = null; }
                    return __awaiter(this, void 0, void 0, function () {
                        var app, IBL, exposure, specularIntensity, diffuseIntensity, node;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    app = m4m.framework.sceneMgr.app;
                                    IBL = IBLSettings;
                                    exposure = IBL && IBL.exposure != null ? IBL.exposure : 4;
                                    specularIntensity = IBL && IBL.specularIntensity != null ? IBL.specularIntensity : 1;
                                    diffuseIntensity = IBL && IBL.diffuseIntensity != null ? IBL.diffuseIntensity : 1;
                                    return [4 /*yield*/, gltf.load(app.getAssetMgr(), app.webgl, gltfFolder, null, null, null, exposure, specularIntensity, diffuseIntensity)];
                                case 1:
                                    node = _a.sent();
                                    node.localScale.x *= -1;
                                    return [2 /*return*/, node];
                            }
                        });
                    });
                };
                /**
                 *  卸载清理 贴图
                 * @param url 需卸载原Url
                 */
                commTool.unLoadTexture = function (url) {
                    var _tex = this.loadedTexsDic.get(url);
                    if (!_tex) {
                        return;
                    }
                    _tex.unuse(true);
                    this.loadedTexsDic.delete(url);
                };
                /**
                 * 加载 cube 纹理
                 * @param folder
                 * @param images
                 * @returns
                 */
                commTool.loadCubeTexture = function (folder, images) {
                    if (images === void 0) { images = ["negx.hdr", "negy.hdr", "negz.hdr", "posx.hdr", "posy.hdr", "posz.hdr"]; }
                    return __awaiter(this, void 0, void 0, function () {
                        var tex, cubeTex;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (this.loadedTexsDic.has(folder)) {
                                        return [2 /*return*/, this.loadedTexsDic.get(folder)];
                                    }
                                    return [4 /*yield*/, Promise.all(images.map(function (n) { return loadMgr_1.loadMgr.Instance.syncLoadGain("".concat(folder).concat(n)); }))];
                                case 1:
                                    tex = _a.sent();
                                    cubeTex = this.makeCubeTex(tex, folder.split("/")
                                        .pop());
                                    if (!cubeTex) {
                                        return [2 /*return*/];
                                    }
                                    this.loadedTexsDic.set(folder, cubeTex);
                                    return [2 /*return*/, cubeTex];
                            }
                        });
                    });
                };
                /**
                 * 加载 cube 纹理 通过zip包
                 * @param filePath zip文件完全路径
                 * @param images 子图名
                 * @returns
                 */
                commTool.loadCubeTextureZip = function (filePath, images) {
                    if (images === void 0) { images = ["negx.hdr", "negy.hdr", "negz.hdr", "posx.hdr", "posy.hdr", "posz.hdr"]; }
                    return __awaiter(this, void 0, void 0, function () {
                        var texs, zipP, webgl, files, i, len, imgStr, f, bytes, _texture, cubeTex;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (this.loadedTexsDic.has(filePath)) {
                                        return [2 /*return*/, this.loadedTexsDic.get(filePath)];
                                    }
                                    texs = [];
                                    return [4 /*yield*/, ZIPTool_1.ZIPTool.loadZip(filePath)];
                                case 1:
                                    zipP = _a.sent();
                                    webgl = m4m.framework.sceneMgr.app.webgl;
                                    files = zipP.files;
                                    i = 0, len = images.length;
                                    _a.label = 2;
                                case 2:
                                    if (!(i < len)) return [3 /*break*/, 5];
                                    imgStr = images[i];
                                    f = files[imgStr];
                                    if (!f) {
                                        console.error("zip \u5305 :".concat(filePath, " \u4E2D\u4E0D\u5B58\u5728\u56FE \uFF1A ").concat(imgStr, "\uFF0C\u8BF7\u68C0\u67E5"));
                                        return [2 /*return*/];
                                    }
                                    return [4 /*yield*/, f.async("arraybuffer")];
                                case 3:
                                    bytes = _a.sent();
                                    _texture = new m4m.framework.texture(imgStr);
                                    _texture.glTexture = new HdrParser(webgl).get2DTexture(bytes);
                                    _texture.use();
                                    texs.push(_texture);
                                    _a.label = 4;
                                case 4:
                                    i++;
                                    return [3 /*break*/, 2];
                                case 5:
                                    cubeTex = this.makeCubeTex(texs, filePath.split("/")
                                        .pop());
                                    if (!cubeTex) {
                                        return [2 /*return*/];
                                    }
                                    this.loadedTexsDic.set(filePath, cubeTex);
                                    return [2 /*return*/, cubeTex];
                            }
                        });
                    });
                };
                commTool.makeCubeTex = function (subTexs, cubeTexName) {
                    if (cubeTexName === void 0) { cubeTexName = "cubeTex"; }
                    if (!subTexs) {
                        return;
                    }
                    if (subTexs.length != 6) {
                        console.error("\u7EC4\u6210 cubeTexture \u5FC5\u987B\u67096\u5F20\u5B50\u56FE");
                        return;
                    }
                    var cubeTex = new m4m.framework.texture(cubeTexName);
                    cubeTex.glTexture = new m4m.render.glTextureCube(m4m.framework.sceneMgr.app.webgl, m4m.render.TextureFormatEnum.RGBA, true, true);
                    cubeTex.use();
                    cubeTex.glTexture.uploadImages(subTexs[0], subTexs[1], subTexs[2], subTexs[3], subTexs[4], subTexs[5], WebGLRenderingContext.LINEAR_MIPMAP_LINEAR, WebGLRenderingContext.LINEAR, WebGLRenderingContext.TEXTURE_CUBE_MAP);
                    return cubeTex;
                };
                /**
                 * 从当前 transform 遍历所有节点
                 * @param tran transform对象
                 * @param ergodicFun 遍历时回调方法
                 */
                commTool.ergodicTranNode = function (tran, ergodicFun) {
                    if (!tran || !ergodicFun) {
                        return;
                    }
                    var len = tran.children.length;
                    if (len > 0) {
                        for (var i = 0; i < len; i++) {
                            var c = tran.children[i];
                            ergodicFun(c);
                            this.ergodicTranNode(c, ergodicFun);
                        }
                    }
                };
                /**
                 * 开启 test Asset animclip 资源模式
                 * @param matchStr url 识别匹配的字符串
                 */
                commTool.enableAnimclipAssetVerTest = function (matchStr) {
                    animLoadPlayer_3.AnimLoadPlayer.extendCreatClipOption = {
                        matchStr: matchStr,
                        attachSuffix: ".js",
                        creatFun: testCreat_3.testCreat.creatAimClip,
                    };
                };
                //------------------------------------------------------------------------------------------------------------------------------------------
                //卡片点击 进入 事件上传
                commTool.viaShare = function (query, tdTool, joinTool) {
                    if (!query) {
                        return -1;
                    }
                    // 分享入口埋点
                    var shareType = query.shareType, subID = query.subID, abTag = query.abTag;
                    if (shareType == null && abTag == null) {
                        console.warn("viaShare \u5206\u4EAB\u5361\u7247\u70B9\u51FB\u5931\u8D25 shareType\uFF1A".concat(shareType, "  abTag : ").concat(abTag));
                        return -1;
                    }
                    var tdpar = {};
                    if (subID == null) {
                        subID = 0;
                    }
                    var key = "shareType_".concat(shareType);
                    tdpar[key] = "id_" + subID;
                    var label = tdTool.viaShare + abTag;
                    joinTool.tdcustomEvent(label, label, tdpar);
                    console.log("\u5361\u7247\u70B9\u51FB \u8FDB\u5165 \u4E8B\u4EF6\u4E0A\u4F20 viaShare : ".concat(key));
                    return shareType;
                };
                //------------ tween -----------------
                /** 缓动方法 IN => Out
                 * p : 过程进度
                 * MaxVal : 过程的最大值
                 * mathIn : in 过程的 tween方法
                 * mathOut : out 过程的 tween方法
                */
                commTool.tweenInOut = function (p, MaxVal, methodIn, methodOut) {
                    var mth;
                    var tp;
                    if (p <= 0.5) {
                        mth = methodIn;
                        tp = p * 2;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * MaxVal / 2;
                    }
                    mth = methodOut;
                    tp = p * 2 - 1;
                    return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * MaxVal / 2 + MaxVal / 2;
                };
                //------------ color -----------------
                //16进制颜色转10进制
                commTool.color16To10 = function (str, out) {
                    if (!out) {
                        return;
                    }
                    if (out instanceof m4m.math.color) {
                        out.r = parseInt(str.substring(0, 2), 16) / 255;
                        out.g = parseInt(str.substring(2, 4), 16) / 255;
                        out.b = parseInt(str.substring(4, 6), 16) / 255;
                        out.a = 1;
                    }
                    else {
                        out.x = parseInt(str.substring(0, 2), 16) / 255;
                        out.y = parseInt(str.substring(2, 4), 16) / 255;
                        out.z = parseInt(str.substring(4, 6), 16) / 255;
                        out.w = 1;
                    }
                };
                //常量系数
                commTool.toDeg = 57.29578; // Rad2Deg
                commTool.toRadian = 0.0174532924; // Deg2Rad
                commTool.cachLayerTag = "__cachLayerTag__";
                commTool.hasCachLayerTag = "__hasCachLayer__";
                //------------ load -----------------
                /** 加载过的prefab 存放Map */
                // static PrefebMap: cMap<m4m.framework.prefab> = new cMap();
                commTool.PrefebMap = new Map_15.cMap();
                //--------------------------------------------------------  文本加载   ----------------------------------------------------------------------------
                commTool.loadedTextsMap = new Map_15.cMap();
                commTool.helpV2 = new m4m.math.vector2();
                commTool.helpV2v1 = new m4m.math.vector2();
                commTool.helpV3 = new m4m.math.vector3();
                commTool.helpV3v1 = new m4m.math.vector3();
                commTool.helpQuat = new m4m.math.quaternion();
                commTool.AttachSubToSceneTag = "_AttachSubToSceneTag_";
                // 类型排查列表
                commTool.careTypeList = [spInterface_16.engineParallelType.wxEngine, spInterface_16.engineParallelType.none];
                commTool.setUIShaderCount = 0;
                //------------------------------------------------------------------------------------------------------------------------------------
                //--------------------------------------------------------  贴图方法   ----------------------------------------------------------------------------
                /** 图面 id 极速器 */
                commTool.imgIdCounter = 0;
                /** 加载 的贴图缓存容器 */
                commTool.loadedTexsDic = new Map_15.cMap();
                /** wx 加载 的贴图缓存容器 */
                commTool.loadedTexsDicWX = new Map_15.cMap();
                return commTool;
            }()));
        }
    };
});
System.register("Data/HtmlLabelText", ["Tools/commTool", "Data/Map"], function (exports_99, context_99) {
    "use strict";
    var commTool_5, Map_16, HtmlLabelText, HtmlLabelBaseData, HtmlLabelData, HtmlTagData;
    var __moduleName = context_99 && context_99.id;
    return {
        setters: [
            function (commTool_5_1) {
                commTool_5 = commTool_5_1;
            },
            function (Map_16_1) {
                Map_16 = Map_16_1;
            }
        ],
        execute: function () {
            exports_99("HtmlLabelText", HtmlLabelText = /** @class */ (function () {
                function HtmlLabelText(parentTrans, lab) {
                    if (lab === void 0) { lab = null; }
                    this.textList = [];
                    //可设置行间距
                    this.linespace = 0;
                    this.labSize = 0;
                    this.baseList = [];
                    //中转
                    this.transitList = [];
                    this.lineDic = new Map_16.cMap();
                    this.endNum = 0;
                    this.transform = new m4m.framework.transform2D();
                    this._list = new Array();
                    this.parentTrans = parentTrans;
                    this.parentTrans.addChild(this.transform);
                    if (lab) {
                        this.labSize = lab.fontsize;
                        // console.error("HtmlLabelText ", this.labSize);
                    }
                }
                //font 标签数据
                HtmlLabelText.getFontTagDataFun = function () {
                    if (this.fontTagList == null) {
                        this.fontTagList = [];
                        var fontTag = new HtmlTagData();
                        fontTag.tagStart = "<font";
                        fontTag.tagEnd = "</font>";
                        fontTag.titleTagEnd = ">";
                        this.fontTagList.push(fontTag);
                        var colorTag = new HtmlTagData();
                        colorTag.tagStart = "[color";
                        colorTag.tagEnd = "[/color]";
                        colorTag.titleTagEnd = "]";
                        this.fontTagList.push(colorTag);
                    }
                    return this.fontTagList;
                };
                //image 标签数据
                HtmlLabelText.getImageTagDataFun = function () {
                    if (this.imageTagList == null) {
                        this.imageTagList = [];
                        var imageTag = new HtmlTagData();
                        imageTag.tagStart = "[img]";
                        imageTag.tagEnd = "[/img]";
                        imageTag.titleTagEnd = "";
                        this.imageTagList.push(imageTag);
                        // let colorTag = new HtmlTagData();
                        // colorTag.tagStart = "[color";
                        // colorTag.tagEnd = "[/color]";
                        // colorTag.titleTagEnd = "]";
                        // this.imageTagList.push(colorTag);
                    }
                    return this.imageTagList;
                };
                HtmlLabelText.prototype.setText = function (str) {
                    // tslint:disable-next-line: max-line-length
                    // str = "00000<font color='#00FF00'>111111水的力量，<font color='#00FF00'>222222立即获得<font color='#00FF00'>333333 120分钟</font></font>444444的</font>555555必须要有这句<font color='#00FF00'><font color='#00FF00'>666666挂机收益</font>777777这</font>8888888这这<font color='#00FF00'>9999999是测试文本</font>AAA结尾\n(玩家经验除外)<font color='#00FF00'><font color='#00FF00'>BBB挂机收益</font>CCC这</font>DDD这这<font color='#00FF00'>EEE是测试文本</font>FFF";
                    // tslint:disable-next-line: no-parameter-reassignment
                    //str = "[color=#ffbf6d]穿戴[img]ui://f86p4w0vosq7l3g51h[/img]4件套装激活效果，[img]ui://f86p4w0vosq7l3g51h[/img]攻击+8%，生命+8%[/color]";
                    var fontTagList = HtmlLabelText.getFontTagDataFun();
                    //获取字体标签相应数据
                    for (var i = 0; i < fontTagList.length; i++) {
                        var tagData = fontTagList[i];
                        if (str.indexOf(tagData.tagStart) != -1) {
                            HtmlLabelText.fontStart = tagData.tagStart;
                            HtmlLabelText.fontEnd = tagData.tagEnd;
                            HtmlLabelText.fontTagEnd = tagData.titleTagEnd;
                            break;
                        }
                    }
                    var imageTagList = HtmlLabelText.getImageTagDataFun();
                    //获取字体标签相应数据
                    for (var i = 0; i < imageTagList.length; i++) {
                        var tagData = imageTagList[i];
                        if (str.indexOf(tagData.tagStart) != -1) {
                            HtmlLabelText.imageStart = tagData.tagStart;
                            HtmlLabelText.imageEnd = tagData.tagEnd;
                            // HtmlLabelText.fontTagEnd = tagData.titleTagEnd;
                            break;
                        }
                    }
                    this.clear();
                    var lineArr = str.split("\n"); //处理换行
                    for (var i = 0; i < lineArr.length; i++) {
                        var text = lineArr[i];
                        // console.error(text);
                        this.splitStrText(text, i);
                    }
                    //提取文本属性 font
                    this.extractTextAttr();
                    this.baseList.length = 0;
                    console.error(this.transitList);
                    this.extractImageAttr();
                    this.transitList.length = 0;
                    console.error(this.textList);
                    this.create();
                };
                //提取图片属性
                HtmlLabelText.prototype.extractImageAttr = function () {
                    for (var i = 0; i < this.transitList.length; i++) {
                        var labelData = this.transitList[i];
                        // labelData.text
                        if (labelData.text.indexOf(HtmlLabelText.imageStart) != -1) {
                            this.extractImageAttrFun(labelData.text, labelData.line, labelData.color);
                            labelData.dispose();
                        }
                        else {
                            this.textList.push(labelData);
                        }
                    }
                };
                //提取图片属性**
                HtmlLabelText.prototype.extractImageAttrFun = function (str, line, color) {
                    var startIndex = str.indexOf(HtmlLabelText.imageStart);
                    if (startIndex != -1) {
                        var headText = void 0;
                        var end = void 0;
                        if (startIndex == 0) {
                            var endIndex = str.indexOf(HtmlLabelText.imageEnd);
                            if (endIndex == -1) {
                                console.error("extractImageAttrFun 当前html 标签出错！！！");
                                return;
                            }
                            end = endIndex + HtmlLabelText.imageEnd.length;
                        }
                        else {
                            end = startIndex;
                        }
                        headText = str.substring(0, end);
                        // console.error(startIndex + "  " + end);
                        var bodyText = str.substring(end);
                        console.log(str);
                        console.warn("图片1 ", headText);
                        console.warn("图片2 ", bodyText);
                        if (headText.length > 0) {
                            console.error("********* ", headText);
                            var imageIndex = headText.indexOf(HtmlLabelText.imageStart);
                            if (imageIndex != -1) {
                                // 如果是图片
                                var imageName = this.getImageNameFun(headText);
                                this.addImageData(imageName, line, color);
                            }
                            else {
                                this.addTextData(headText, line, color);
                            }
                        }
                        if (bodyText.length > 0) {
                            // console.error("bodyText  ", bodyText);
                            this.extractImageAttrFun(bodyText, line, color);
                        }
                    }
                    else {
                        console.error("*********end ", str);
                        this.addTextData(str, line, color);
                    }
                };
                //提取文本属性
                HtmlLabelText.prototype.extractTextAttr = function () {
                    // let aa = "<font color='#00ff00'>水的力量，<font color='#000066'>立即获得<font color='#00CC00'>120分钟</font></font>的</font>";
                    // this.extractTextAttrFun(aa, HtmlLabelText.fontStart.length, 0);
                    for (var i = 0; i < this.baseList.length; i++) {
                        var labelData = this.baseList[i];
                        console.error("提取文本属性 ", labelData.text);
                        var startIndex = labelData.text.indexOf(HtmlLabelText.fontStart);
                        if (startIndex != -1) {
                            startIndex += HtmlLabelText.fontStart.length;
                        }
                        else {
                            startIndex = HtmlLabelText.fontStart.length;
                        }
                        this.extractTextAttrFun(labelData.text, startIndex, labelData.line);
                    }
                };
                //提取文本属性**
                HtmlLabelText.prototype.extractTextAttrFun = function (str, index, line) {
                    var startIndex = str.indexOf(HtmlLabelText.fontStart, index);
                    if (startIndex != -1) {
                        var headText = str.substring(0, startIndex);
                        console.error("headText ", headText);
                        var text = this.getTexFun(headText);
                        var color = this.getTextColorFun(headText);
                        this.addTransitTextData(text, line, color);
                        var endIndex = str.lastIndexOf(HtmlLabelText.fontEnd);
                        if (endIndex != -1) {
                            //内文本
                            var withinText = str.substring(startIndex, endIndex);
                            console.warn("withinText ", withinText);
                            //如果内部文本还有 标签
                            var withinIndex = withinText.lastIndexOf(HtmlLabelText.fontEnd);
                            if (withinIndex != -1) {
                                this.extractTextAttrFun(withinText, HtmlLabelText.fontStart.length, line);
                                var endText = withinText.substring(withinIndex + HtmlLabelText.fontEnd.length);
                                var texted = this.getTexFun(endText);
                                console.error("endText ", endText, color);
                                this.addTransitTextData(texted, line, color);
                            }
                        }
                    }
                    else {
                        startIndex = str.indexOf(HtmlLabelText.fontStart);
                        if (startIndex != -1) {
                            console.warn("单文本标签 withinText ", str);
                            var withinIndex = str.lastIndexOf(HtmlLabelText.fontEnd);
                            if (withinIndex != -1) {
                                var endText = str.substring(0, withinIndex);
                                console.error("单文本标签 Text ", endText);
                                var text = this.getTexFun(endText);
                                console.error("单文本标签 Text2 ", text);
                                var color = this.getTextColorFun(endText);
                                this.addTransitTextData(text, line, color);
                            }
                        }
                        else {
                            this.addTransitTextData(str, line, null);
                        }
                    }
                };
                HtmlLabelText.prototype.splitStrText = function (str, line) {
                    if (str.length <= 0) {
                        return;
                    }
                    var startIndex = str.indexOf(HtmlLabelText.fontStart);
                    if (startIndex != -1) {
                        this.endNum = -1;
                        var aaaaaa = str.substring(startIndex);
                        this.detectionTextFun(aaaaaa, HtmlLabelText.fontStart.length);
                        // console.error("endNum", this.endNum);
                        var end = void 0;
                        if (this.endNum != -1) {
                            end = startIndex + this.endNum + HtmlLabelText.fontEnd.length;
                        }
                        else {
                            var endIndex = str.indexOf(HtmlLabelText.fontEnd);
                            if (endIndex == -1) {
                                console.error("当前html 标签出错！！！");
                                return;
                            }
                            end = endIndex + HtmlLabelText.fontEnd.length;
                        }
                        var headText = str.substring(0, end);
                        // console.error(startIndex + "  " + end);
                        var bodyText = str.substring(end);
                        console.log(str);
                        console.warn("文本1 ", headText);
                        console.warn("文本2 ", bodyText);
                        if (headText.length > 0) {
                            // console.error("********* ", headText);
                            var headStartIndex = headText.indexOf(HtmlLabelText.fontStart);
                            //截取开头文本
                            if (headStartIndex != -1) { //截取开头文本
                                var headTitleText = headText.substring(0, headStartIndex);
                                if (headTitleText && headTitleText.length > 0) {
                                    this.baseList.push(this.getTextBaseData(headTitleText, line));
                                }
                                var bodyTitleText = headText.substring(headStartIndex);
                                this.baseList.push(this.getTextBaseData(bodyTitleText, line));
                            }
                            else {
                                this.baseList.push(this.getTextBaseData(headText, line));
                            }
                            //截取结尾文本
                            var endIndex = headText.lastIndexOf(HtmlLabelText.fontEnd);
                            if (endIndex != -1) { //截取结尾文本
                                var endText = headText.substring(endIndex + HtmlLabelText.fontEnd.length);
                                if (endText && endText.length > 0) {
                                    this.baseList.push(this.getTextBaseData(endText, line));
                                }
                            }
                        }
                        if (bodyText.length > 0) {
                            // console.error(bodyText);
                            this.splitStrText(bodyText, line);
                        }
                        // 
                    }
                    else {
                        // console.error("$$$$$$$ ", str);
                        this.baseList.push(this.getTextBaseData(str, line));
                    }
                };
                HtmlLabelText.prototype.detectionTextFun = function (str, index) {
                    var startIndex = str.indexOf(HtmlLabelText.fontStart, index);
                    if (startIndex != -1) {
                        var aaaaaa = str.substring(0, startIndex);
                        // console.error("检测文本  ", aaaaaa);
                        var endIndex = aaaaaa.lastIndexOf(HtmlLabelText.fontEnd);
                        if (endIndex != -1) {
                            this.endNum = endIndex;
                            // console.error("找到当前 end 标签 " + endIndex);
                        }
                        else {
                            this.detectionTextFun(str, startIndex + HtmlLabelText.fontStart.length);
                        }
                    }
                };
                //图片数据
                HtmlLabelText.prototype.addImageData = function (imageName, line, color) {
                    if (imageName && imageName.length > 0) {
                        this.textList.push(this.getImageData(imageName, line, color));
                    }
                };
                //文本数据
                HtmlLabelText.prototype.addTextData = function (str, line, color) {
                    if (str && str.length > 0) {
                        this.textList.push(this.getTextData(str, line, color));
                    }
                };
                //存储 临时文本
                HtmlLabelText.prototype.addTransitTextData = function (str, line, color) {
                    if (str && str.length > 0) {
                        this.transitList.push(this.getTextData(str, line, color));
                    }
                };
                HtmlLabelText.prototype.clear = function () {
                    this._list.length = 0;
                    this.lineDic.clear();
                    this.baseList.length = 0;
                    this.transitList.length = 0;
                    for (var i = 0; i < this.textList.length; i++) {
                        var labelData = this.textList[i];
                        labelData.dispose();
                    }
                    this.textList.length = 0;
                    this.transform.removeAllChild();
                };
                HtmlLabelText.prototype.dispose = function () {
                    this.clear();
                    this._list = null;
                    this.baseList = null;
                    this.transitList = null;
                    this.textList = null;
                };
                //取图片
                HtmlLabelText.prototype.getImageNameFun = function (text) {
                    var str;
                    var index = text.indexOf(HtmlLabelText.imageStart);
                    if (index != -1) {
                        str = text.substring(index + HtmlLabelText.imageStart.length);
                        var endIndex = str.indexOf(HtmlLabelText.imageEnd);
                        if (endIndex != -1) {
                            str = str.substring(0, endIndex);
                        }
                    }
                    else {
                        console.error("转入的图片数据出错!");
                    }
                    return str;
                };
                //取文本
                HtmlLabelText.prototype.getTexFun = function (text) {
                    var str;
                    var index = text.indexOf(HtmlLabelText.fontTagEnd);
                    if (index != -1) {
                        str = text.substring(index + 1);
                    }
                    else {
                        str = text;
                    }
                    return str;
                };
                HtmlLabelText.prototype.getTextColorFun = function (text) {
                    var color;
                    var colorStr;
                    var colorIndex = text.indexOf("color");
                    if (colorIndex != -1) {
                        colorStr = text.substring(colorIndex + 5);
                        var jinIndex = colorStr.indexOf("#");
                        if (jinIndex != -1) {
                            colorStr = colorStr.substring(jinIndex + 1);
                        }
                        var endIndex = colorStr.indexOf(HtmlLabelText.fontTagEnd);
                        if (endIndex != -1) {
                            colorStr = colorStr.substring(0, endIndex);
                        }
                        colorStr = colorStr.replace("'", "");
                        color = m4m.poolcolor();
                        commTool_5.commTool.color16To10(colorStr, color);
                    }
                    return color;
                };
                HtmlLabelText.prototype.getImageData = function (imageName, line, color) {
                    var data = new HtmlLabelData();
                    data.imageName = imageName;
                    data.line = line;
                    data.color = color;
                    return data;
                };
                HtmlLabelText.prototype.getTextData = function (str, line, color) {
                    var data = new HtmlLabelData();
                    data.text = str;
                    data.line = line;
                    data.color = color;
                    return data;
                };
                HtmlLabelText.prototype.getTextBaseData = function (str, line) {
                    var data = new HtmlLabelBaseData();
                    data.text = str;
                    data.line = line;
                    return data;
                };
                HtmlLabelText.prototype.create = function () {
                    var lineWW = 0;
                    var lineHH = 0;
                    var line = 0;
                    for (var i = 0; i < this.textList.length; i++) {
                        var labelData = this.textList[i];
                        if (labelData.text == "" || labelData.text == null) {
                            continue;
                        }
                        var lineTrans = void 0;
                        if (!this.lineDic.has(labelData.line)) {
                            lineTrans = new m4m.framework.transform2D();
                            this.lineDic.set(labelData.line, lineTrans);
                            this.transform.addChild(lineTrans);
                        }
                        if (lineTrans == null) {
                            lineTrans = this.lineDic.get(labelData.line);
                        }
                        var labelClass = this.getLabel();
                        labelClass.text = labelData.text;
                        if (labelData.color) {
                            labelClass.color = labelData.color;
                        }
                        labelClass.horizontalOverflow = true;
                        // labelClass.verticalType = m4m.framework.VerticalType.Top;
                        if (this.labSize > 0) {
                            labelClass.fontsize = this.labSize;
                        }
                        else {
                            labelClass.fontsize = 24;
                        }
                        labelClass.fontsize = 14;
                        var labTrans = labelClass.transform;
                        lineTrans.addChild(labTrans);
                        // lineTrans.width = 200;
                        // lineTrans.height = 200;
                        // lineTrans.markDirty();
                        var lab = labelClass;
                        //--------刷新 getDrawBounds ------
                        this.transform.updateTran(true);
                        lab.getMaterial();
                        lab.updateData(lab.font);
                        //--------------------------------
                        var rect = lab.getDrawBounds();
                        var labww = rect.w;
                        var labhh = rect.h;
                        labTrans.width = labww;
                        labTrans.height = labhh;
                        if (line != labelData.line) {
                            lineWW = 0;
                            lineHH += labhh + this.linespace;
                        }
                        line = labelData.line;
                        labTrans.setLayoutValue(m4m.framework.layoutOption.LEFT, lineWW);
                        labTrans.setLayoutValue(m4m.framework.layoutOption.TOP, lineHH);
                        labTrans.markDirty();
                        lineWW += labww;
                        //行 trans
                        lineTrans.width = labww;
                        lineTrans.height = labhh;
                        lineTrans.markDirty();
                        console.error(labelData.text, labww, labhh);
                        this._list.push(labTrans);
                    }
                    this.transform.width = 200;
                    this.transform.height = 50;
                    this.transform.markDirty();
                };
                HtmlLabelText.prototype.getLabel = function () {
                    var trans = new m4m.framework.transform2D();
                    var lab = trans.addComponent("label");
                    trans.layoutState = m4m.framework.layoutOption.LEFT | m4m.framework.layoutOption.TOP;
                    return lab;
                };
                HtmlLabelText.fontStart = "<font";
                HtmlLabelText.fontEnd = "</font>";
                HtmlLabelText.fontTagEnd = ">";
                HtmlLabelText.imageStart = "[img]";
                HtmlLabelText.imageEnd = "[/img]";
                return HtmlLabelText;
            }()));
            HtmlLabelBaseData = /** @class */ (function () {
                function HtmlLabelBaseData() {
                }
                return HtmlLabelBaseData;
            }());
            exports_99("HtmlLabelBaseData", HtmlLabelBaseData);
            HtmlLabelData = /** @class */ (function (_super) {
                __extends(HtmlLabelData, _super);
                function HtmlLabelData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                HtmlLabelData.prototype.dispose = function () {
                    if (this.color) {
                        m4m.poolcolor_del(this.color);
                        // this.color = null;
                    }
                };
                return HtmlLabelData;
            }(HtmlLabelBaseData));
            exports_99("HtmlLabelData", HtmlLabelData);
            HtmlTagData = /** @class */ (function () {
                function HtmlTagData() {
                }
                return HtmlTagData;
            }());
            exports_99("HtmlTagData", HtmlTagData);
        }
    };
});
System.register("Data/RotateComponents", [], function (exports_100, context_100) {
    "use strict";
    var RotateComponents;
    var __moduleName = context_100 && context_100.id;
    return {
        setters: [],
        execute: function () {
            exports_100("RotateComponents", RotateComponents = /** @class */ (function (_super) {
                __extends(RotateComponents, _super);
                function RotateComponents() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    //一定时间后回调   (如果有回调方法)
                    _this.timeCallBack = 20;
                    //旋转速度
                    _this.angleSpeed = (Math.PI / 180) * 90;
                    _this.gapTime = 1; //每1秒 轮一次
                    _this.newDaTime = 0;
                    _this.dnum = 0;
                    _this._start = false;
                    return _this;
                }
                RotateComponents.prototype.update = function (delta) {
                    if (this._start == false) {
                        return;
                    }
                    this.transform.localRotate = this.transform.localRotate + (this.angleSpeed * delta);
                    this.transform.markDirty();
                    if (this.callBackFun) {
                        this.newDaTime += delta;
                        if (this.newDaTime >= this.gapTime) {
                            this.newDaTime = 0;
                            this.dnum++;
                            if (this.dnum >= this.timeCallBack) //等了xx秒
                             {
                                // console.error("xx秒后回调");
                                this.dnum = 0;
                                this.callBackFun();
                                this.stop();
                            }
                        }
                    }
                };
                RotateComponents.prototype.start = function () {
                    this._start = true;
                    this.transform.localRotate = 0;
                    this.newDaTime = 0;
                    this.dnum = 0;
                };
                RotateComponents.prototype.stop = function () {
                    this._start = false;
                };
                RotateComponents = __decorate([
                    m4m.reflect.node2DComponent
                ], RotateComponents);
                return RotateComponents;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Data/ScrollRectExtend", [], function (exports_101, context_101) {
    "use strict";
    var ScrollRectExtend;
    var __moduleName = context_101 && context_101.id;
    return {
        setters: [],
        execute: function () {
            exports_101("ScrollRectExtend", ScrollRectExtend = /** @class */ (function (_super) {
                __extends(ScrollRectExtend, _super);
                function ScrollRectExtend() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.offsetUpY = 0;
                    _this.offsetDownY = 0;
                    return _this;
                }
                ScrollRectExtend.prototype.onPlay = function () {
                    //
                    this.scrollRect = this.transform.getComponent("scrollRect");
                    if (this.scrollRect == null) {
                        console.error("当前scrollRect 组件未找到！");
                        return;
                    }
                    this.scrollRect.onMoveFun = this.onMoveFun.bind(this);
                    this.worldPos = this.transform.getWorldTranslate();
                    if (this.scrollRect.horizontal) { //水平
                        this.worldEndPos = new m4m.math.vector2(this.worldPos.x + this.transform.width, this.worldPos.y);
                    }
                    else {
                        this.worldEndPos = new m4m.math.vector2(this.worldPos.x, this.worldPos.y + this.transform.height);
                    }
                    this.upDateTrans();
                };
                ScrollRectExtend.prototype.setList = function (list) {
                    this._list = list;
                };
                ScrollRectExtend.prototype.upDateTrans = function () {
                    this.onMoveFun();
                };
                ScrollRectExtend.prototype.onMoveFun = function () {
                    // console.error("滑动 " + x + "   " + y);
                    if (this._list != null && this.worldPos) {
                        for (var i = 0; i < this._list.length; i++) {
                            var cell = this._list[i];
                            var cellTrans = cell.transform;
                            var cellPos = cellTrans.getWorldTranslate();
                            if (this.scrollRect.horizontal) { //水平
                                if ((cellPos.x + this.offsetUpY) > this.worldPos.x && (cellPos.x - this.offsetDownY) < this.worldEndPos.x) {
                                    cellTrans.visible = true;
                                }
                                else {
                                    cellTrans.visible = false;
                                }
                            }
                            else {
                                if ((cellPos.y + this.offsetUpY) > this.worldPos.y && (cellPos.y - this.offsetDownY) < this.worldEndPos.y) {
                                    cellTrans.visible = true;
                                }
                                else {
                                    cellTrans.visible = false;
                                }
                            }
                        }
                    }
                };
                ScrollRectExtend = __decorate([
                    m4m.reflect.node2DComponent
                ], ScrollRectExtend);
                return ScrollRectExtend;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Data/SliderComponent", [], function (exports_102, context_102) {
    "use strict";
    var SliderComponent;
    var __moduleName = context_102 && context_102.id;
    return {
        setters: [],
        execute: function () {
            exports_102("SliderComponent", SliderComponent = /** @class */ (function (_super) {
                __extends(SliderComponent, _super);
                function SliderComponent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SliderComponent.prototype.onPlay = function () {
                    //
                };
                Object.defineProperty(SliderComponent.prototype, "setSliderBtn", {
                    set: function (value) {
                        if (this.btn) {
                            console.error("SliderComponent 组件已设置过按钮对象！");
                            return;
                        }
                        this.btn = value;
                        this.btn.addListener(m4m.event.UIEventEnum.PointerDown, this.btnDown_event, this);
                        this.progressbar = this.transform.getComponent("progressbar");
                        if (this.progressbar == null) {
                            console.error("progressbar 组件未找到！");
                            return;
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                //按钮 按下
                SliderComponent.prototype.btnDown_event = function () {
                };
                SliderComponent = __decorate([
                    m4m.reflect.node2DComponent
                ], SliderComponent);
                return SliderComponent;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Data/TabData", ["Data/UIComponentBaseData"], function (exports_103, context_103) {
    "use strict";
    var UIComponentBaseData_2, TabData;
    var __moduleName = context_103 && context_103.id;
    return {
        setters: [
            function (UIComponentBaseData_2_1) {
                UIComponentBaseData_2 = UIComponentBaseData_2_1;
            }
        ],
        execute: function () {
            TabData = /** @class */ (function (_super) {
                __extends(TabData, _super);
                function TabData() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.enabled = true;
                    return _this;
                }
                TabData.prototype.Clone = function () {
                    var data = new TabData();
                    data.width = this.width;
                    data.height = this.height;
                    data.selectIcon = this.selectIcon;
                    return data;
                };
                return TabData;
            }(UIComponentBaseData_2.UIComponentBaseData));
            exports_103("TabData", TabData);
        }
    };
});
System.register("Data/Tab", [], function (exports_104, context_104) {
    "use strict";
    var Tab;
    var __moduleName = context_104 && context_104.id;
    return {
        setters: [],
        execute: function () {
            exports_104("Tab", Tab = /** @class */ (function (_super) {
                __extends(Tab, _super);
                function Tab() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.name = "Tab";
                    return _this;
                }
                Object.defineProperty(Tab.prototype, "tabData", {
                    get: function () {
                        return this.baseData;
                    },
                    set: function (value) {
                        this.baseData = value;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Tab.prototype, "index", {
                    get: function () {
                        return this.tabData.index;
                    },
                    enumerable: false,
                    configurable: true
                });
                Tab.prototype.onPlay = function () {
                    // console.error(this.transform.name + "   " + this.transform.width);
                    this.btn = this.transform.getComponent("button");
                    if (this.btn == null) {
                        this.btn = this.transform.addComponent("button");
                    }
                    else {
                        console.error("当前tab已加 button 组件 不需要添加！");
                    }
                    // this.btn.addListener(m4m.event.UIEventEnum.PointerClick, this.pointerClickFun, this);
                    this.btn.addListener(m4m.event.UIEventEnum.PointerDown, this.pointerClickFun, this);
                };
                //克隆生成的UI带引用关系对象
                Tab.prototype.setTabClass = function (value) {
                    // this.tabClass = value;
                };
                //选中当前Tab 时的fun
                Tab.prototype.selectFun = function (selectbool) {
                    if (this.baseData) {
                        if (this.baseData.selectIcon) {
                            this.baseData.selectIcon.visible = selectbool;
                        }
                        // console.log(selectbool);
                    }
                    else {
                        console.error("CellData 未赋值！");
                    }
                };
                //初始化
                Tab.prototype.initData = function (value) {
                    //
                };
                Tab.prototype.setData = function (value) {
                    //
                };
                Tab.prototype.dispose = function () {
                    //removeListener
                    this.btn.removeListener(m4m.event.UIEventEnum.PointerDown, this.pointerClickFun, this);
                };
                Tab.prototype.pointerClickFun = function () {
                    if (this.clickCallBackFun) {
                        this.clickCallBackFun(this.index);
                    }
                };
                Tab = __decorate([
                    m4m.reflect.node2DComponent
                ], Tab);
                return Tab;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("Data/TabListData", ["Data/UIComponentBaseData"], function (exports_105, context_105) {
    "use strict";
    var UIComponentBaseData_3, TabListData;
    var __moduleName = context_105 && context_105.id;
    return {
        setters: [
            function (UIComponentBaseData_3_1) {
                UIComponentBaseData_3 = UIComponentBaseData_3_1;
            }
        ],
        execute: function () {
            TabListData = /** @class */ (function () {
                function TabListData() {
                    //默认竖排
                    this.layoutType = UIComponentBaseData_3.DirectionType.Vertical;
                    this.offset = 10;
                    this.initXPlace = 0;
                    this.initYPlace = 0;
                }
                return TabListData;
            }());
            exports_105("TabListData", TabListData);
        }
    };
});
System.register("Data/TabList", ["PSDUI/UiTools", "Data/UIComponentBaseData"], function (exports_106, context_106) {
    "use strict";
    var UiTools_2, UIComponentBaseData_4, TabList;
    var __moduleName = context_106 && context_106.id;
    return {
        setters: [
            function (UiTools_2_1) {
                UiTools_2 = UiTools_2_1;
            },
            function (UIComponentBaseData_4_1) {
                UIComponentBaseData_4 = UIComponentBaseData_4_1;
            }
        ],
        execute: function () {
            TabList = /** @class */ (function () {
                function TabList(base) {
                    this.name = "TabList";
                    this._width = 0;
                    this._height = 0;
                    this.baseData = base;
                    this._list = new Array();
                    this.create();
                }
                Object.defineProperty(TabList.prototype, "visible", {
                    set: function (value) {
                        for (var i = 0; i < this._list.length; i++) {
                            var cell = this._list[i];
                            cell.transform.visible = value;
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TabList.prototype, "tabListData", {
                    get: function () {
                        return this.baseData;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TabList.prototype, "SelectIndex", {
                    set: function (value) {
                        // console.error("选中tab " + value);
                        var selectCell = this._list[value];
                        if (selectCell.tabData.enabled == false) {
                            return;
                        }
                        for (var i = 0; i < this._list.length; i++) {
                            var cell = this._list[i];
                            var selectBool = value == cell.index;
                            cell.selectFun(selectBool);
                            if (selectBool) {
                                if (this.selectCallBackFun) {
                                    this.selectCallBackFun(value);
                                }
                            }
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                TabList.prototype.create = function () {
                    //初始化gird组件的格子
                    var offset = this.tabListData.offset;
                    var tabWidth = this.tabListData.tabData.width;
                    var tabHeight = this.tabListData.tabData.height;
                    var layoutOptX = this.tabListData.tabLayoutX;
                    var layoutOptY = this.tabListData.tabLayoutY;
                    var x = this.tabListData.initXPlace;
                    var y = this.tabListData.initYPlace;
                    if (this.downFun == null) {
                        this.downFun = this.tab_singleClickHandler.bind(this);
                    }
                    var tabName = "Tab";
                    if (this.tabListData.tabName) {
                        tabName = this.tabListData.tabName;
                    }
                    for (var i = 0; i < this.tabListData.list.length; i++) {
                        var str = this.tabListData.list[i];
                        var tabData = this.tabListData.tabData.Clone();
                        tabData.index = i;
                        var tabClass = UiTools_2.UiTools.cloneUi(this.tabListData.tab);
                        var tabTrans = tabClass.transform;
                        var tab = tabTrans.addComponent(tabName);
                        tab.tabData = tabData;
                        tab.clickCallBackFun = this.downFun;
                        tab.setTabClass(tabClass);
                        tab.initData(str);
                        if (layoutOptX != null || layoutOptY != null) {
                            //
                            if (layoutOptX) {
                                tabTrans.setLayoutValue(layoutOptX, x);
                            }
                            if (layoutOptY) {
                                tabTrans.setLayoutValue(layoutOptY, y);
                            }
                        }
                        else {
                            //如果没有使用布局设置
                            tabTrans.localTranslate.x = x;
                            tabTrans.localTranslate.y = y;
                            tabTrans.localTranslate = tabTrans.localTranslate;
                        }
                        this.tabListData.parentTrans.addChild(tabTrans);
                        tabTrans.markDirty();
                        this._list.push(tab);
                        if (this.tabListData.layoutType == UIComponentBaseData_4.DirectionType.Horizontal) {
                            x += tabWidth + offset;
                        }
                        else {
                            y += tabHeight + offset;
                        }
                    }
                    this._width = x;
                    this._height = y;
                };
                //
                TabList.prototype.setList = function (dataList) {
                    if (dataList == null) {
                        return;
                    }
                    var tabWidth = this.tabListData.tabData.width;
                    var tabHeight = this.tabListData.tabData.height;
                    var offset = this.tabListData.offset;
                    this._width = 0;
                    this._height = 0;
                    for (var i = 0; i < this._list.length; i++) {
                        if (i < dataList.length) {
                            var data = dataList[i];
                            this._list[i].setData(data);
                            if (this.tabListData.layoutType == UIComponentBaseData_4.DirectionType.Horizontal) {
                                this._width += tabWidth + offset;
                            }
                            else {
                                this._height += tabHeight + offset;
                            }
                        }
                        else {
                            this._list[i].setData(null);
                        }
                    }
                };
                TabList.prototype.getWidth = function () {
                    return this._width;
                };
                TabList.prototype.getHeight = function () {
                    return this._height;
                };
                TabList.prototype.dispose = function () {
                    for (var i = 0; i < this._list.length; i++) {
                        var tab = this._list[i];
                        tab.dispose();
                        tab = null;
                    }
                    this._list.length = 0;
                    this._list = null;
                };
                TabList.prototype.tab_singleClickHandler = function (index) {
                    if (index < 0 || index >= this._list.length) {
                        console.error("当前点击的对象所引未取到！" + index);
                        return;
                    }
                    this.SelectIndex = index;
                };
                return TabList;
            }());
            exports_106("TabList", TabList);
        }
    };
});
System.register("Data/ViewBaseData", [], function (exports_107, context_107) {
    "use strict";
    var __moduleName = context_107 && context_107.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("Data/aStar", [], function (exports_108, context_108) {
    "use strict";
    var node, nodePool, aStar;
    var __moduleName = context_108 && context_108.id;
    return {
        setters: [],
        execute: function () {
            // tslint:disable-next-line: class-name
            node = /** @class */ (function () {
                function node(x, y, G, H, p) {
                    if (p === void 0) { p = null; }
                    this.x = x;
                    this.y = y;
                    this.Gcost = G;
                    this.Hcost = H;
                    this.parent = p;
                }
                Object.defineProperty(node.prototype, "F", {
                    get: function () { return this.Gcost + this.Hcost; },
                    enumerable: false,
                    configurable: true
                });
                return node;
            }());
            nodePool = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function nodePool() {
                }
                nodePool.new_node = function (x, y, G, H, p) {
                    if (p === void 0) { p = null; }
                    var n = this.nodelist.pop();
                    if (n) {
                        n.x = x;
                        n.y = y;
                        n.Gcost = G;
                        n.Hcost = H;
                        n.parent = p;
                    }
                    else {
                        n = new node(x, y, G, H, p);
                    }
                    return n;
                };
                nodePool.delete_node = function (n) {
                    if (!n) {
                        return;
                    }
                    n.parent = null;
                    n.x = n.y = n.Gcost = n.Hcost = 0;
                    this.nodelist.push(n);
                };
                nodePool.nodelist = [];
                return nodePool;
            }());
            /**
             * A* pathFind Pathfinding Algorithm
             */
            // tslint:disable-next-line: class-name
            aStar = /** @class */ (function () {
                function aStar() {
                    this.openList = [];
                    this.closeList = [];
                    this.cupPoints = [{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }];
                }
                /**
                 * 寻找获取 start点 到 end点 的最短路径 ，计算返回是否成功 ， outPath ： 路径坐标数组[x,y,x1,y1...]
                 * Find the shortest path between "start" "end" two points
                 *
                 * @argument start_x coordinate x of Start Point
                 * @argument start_y coordinate y of Start Point
                 * @argument end_x coordinate y of End Point
                 * @argument end_y coordinate y of End Point
                 * @argument outPath Calculation result of Path , format is [x,y,x1,y1,x2,y2.........]
                 */
                // tslint:disable-next-line: variable-name
                aStar.prototype.findPath = function (start_x, start_y, end_x, end_y, outPath) {
                    var result = false;
                    this.endx = end_x;
                    this.endy = end_y;
                    //将起点加入close表
                    var orgH = this.calcH(start_x, start_y, end_x, end_y);
                    this.closeList.push(nodePool.new_node(start_x, start_y, 0, orgH));
                    var endNode;
                    var cout = 0;
                    var lastLen = 0;
                    //jump out "while" when the closelist not have any new add
                    while (lastLen < this.closeList.length) {
                        lastLen = this.closeList.length;
                        //获取close表的最后一个节点S
                        var snode = this.closeList[this.closeList.length - 1];
                        //获取S点周围所有符合加入条件的点，加入open列表
                        this.findAddNeighbor(snode);
                        //计算open列表F值最低的格子T
                        var minFnode = void 0;
                        var minIdx = 0;
                        for (var i = this.openList.length - 1; i >= 0; i--) {
                            var n = this.openList[i];
                            if (!n) {
                                continue;
                            }
                            if (n.x == end_x && n.y == end_y) {
                                endNode = n;
                                break;
                            }
                            if (!minFnode || n.F < minFnode.F || (minFnode.F == n.F && n.Gcost < minFnode.Gcost)) {
                                minFnode = n;
                                minIdx = i;
                            }
                            if (i == 0) {
                                this.openList.splice(minIdx, 1); //openlist 中删除
                            }
                        }
                        if (endNode) {
                            break;
                        } //找到了 目标点
                        if (!minFnode) {
                            continue;
                        }
                        //T从open表中删除加入close表
                        this.closeList.push(minFnode);
                        //console.error(`while ${cout++} _ :x: ${minFnode.x}  y :${minFnode.y} `);
                    }
                    if (endNode) {
                        while (endNode) {
                            outPath.push(endNode.y); //y
                            outPath.push(endNode.x); //x
                            endNode = endNode.parent;
                        }
                        outPath.reverse();
                        result = true;
                    }
                    //清理
                    this.openList.forEach(function (n) {
                        if (n) {
                            nodePool.delete_node(n);
                        }
                    });
                    this.closeList.forEach(function (n) {
                        if (n) {
                            nodePool.delete_node(n);
                        }
                    });
                    this.openList.length = 0;
                    this.closeList.length = 0;
                    return result;
                };
                // tslint:disable-next-line: variable-name
                aStar.prototype.calcH = function (now_x, now_y, end_x, end_y) {
                    return Math.abs(end_x - now_x) + Math.abs(end_y - now_y);
                };
                aStar.prototype.findAddNeighbor = function (n) {
                    this.cupPoints[0].x = n.x - 1;
                    this.cupPoints[0].y = n.y; //left
                    this.cupPoints[1].x = n.x;
                    this.cupPoints[1].y = n.y - 1; //top
                    this.cupPoints[2].x = n.x + 1;
                    this.cupPoints[2].y = n.y; //right
                    this.cupPoints[3].x = n.x;
                    this.cupPoints[3].y = n.y + 1; //botoom
                    for (var i = 0; i < this.cupPoints.length; i++) {
                        var point = this.cupPoints[i];
                        if (this.filterNeighbor(point.x, point.y)) {
                            var H = this.calcH(point.x, point.y, this.endx, this.endy);
                            this.openList.unshift(nodePool.new_node(point.x, point.y, n.Gcost + 1, H, n));
                        }
                    }
                };
                aStar.prototype.filterNeighbor = function (x, y) {
                    var result = true;
                    if (this.listHas(this.openList, x, y) || this.listHas(this.closeList, x, y)) {
                        return false;
                    }
                    if (this.outFilter && !this.outFilter(x, y)) {
                        return false;
                    }
                    return result;
                };
                aStar.prototype.listHas = function (ns, x, y) {
                    for (var i = 0; i < ns.length; i++) {
                        var n = ns[i];
                        if (n.x == x && n.y == y) {
                            return true;
                        }
                    }
                    return false;
                };
                return aStar;
            }());
            exports_108("aStar", aStar);
        }
    };
});
System.register("Data/rtree", [], function (exports_109, context_109) {
    "use strict";
    var Rectangle, RTree;
    var __moduleName = context_109 && context_109.id;
    return {
        setters: [],
        execute: function () {
            /* Rectangle - Generic rectangle object - Not yet used */
            Rectangle = /** @class */ (function () {
                function Rectangle(ix, iy, iw, ih) {
                    if (ix.x) {
                        this._x = ix.x;
                        this._y = ix.y;
                        if (ix.w !== 0 && !ix.w && ix.x2) {
                            this._w = ix.x2 - ix.x;
                            this._h = ix.y2 - ix.y;
                        }
                        else {
                            this._w = ix.w;
                            this._h = ix.h;
                        }
                        this._x2 = this._x + this._w;
                        this._y2 = this._y + this._h; // For extra fastitude
                    }
                    else {
                        this._x = ix;
                        this._y = iy;
                        this._w = iw;
                        this._h = ih;
                        this._x2 = this._x + this._w;
                        this._y2 = this._y + this._h; // For extra fastitude
                    }
                }
                Object.defineProperty(Rectangle.prototype, "x1", {
                    get: function () { return this._x; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Rectangle.prototype, "x", {
                    get: function () { return this._x; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Rectangle.prototype, "y", {
                    get: function () { return this._y; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Rectangle.prototype, "y1", {
                    get: function () { return this._y; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Rectangle.prototype, "x2", {
                    get: function () { return this._x2; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Rectangle.prototype, "y2", {
                    get: function () { return this._y2; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Rectangle.prototype, "w", {
                    get: function () { return this._w; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Rectangle.prototype, "h", {
                    get: function () { return this._h; },
                    enumerable: false,
                    configurable: true
                });
                /* returns true if rectangle 1 overlaps rectangle 2
                * [ boolean ] = overlap_rectangle(rectangle a, rectangle b)
                * @static function
                */
                Rectangle.overlap_rectangle = function (a, b) {
                    return (a.x < (b.x + b.w) && (a.x + a.w) > b.x && a.y < (b.y + b.h) && (a.y + a.h) > b.y);
                };
                /* returns true if rectangle a is contained in rectangle b
                * [ boolean ] = contains_rectangle(rectangle a, rectangle b)
                * @static function
                */
                Rectangle.contains_rectangle = function (a, b) {
                    return ((a.x + a.w) <= (b.x + b.w) && a.x >= b.x && (a.y + a.h) <= (b.y + b.h) && a.y >= b.y);
                };
                /* expands rectangle A to include rectangle B, rectangle B is untouched
                * [ rectangle a ] = expand_rectangle(rectangle a, rectangle b)
                * @static function
                */
                Rectangle.expand_rectangle = function (a, b) {
                    var nx = Math.min(a.x, b.x);
                    var ny = Math.min(a.y, b.y);
                    a.w = Math.max(a.x + a.w, b.x + b.w) - nx;
                    a.h = Math.max(a.y + a.h, b.y + b.h) - ny;
                    a.x = nx;
                    a.y = ny;
                    return (a);
                };
                /* generates a minimally bounding rectangle for all rectangles in
                * array "nodes". If rect is set, it is modified into the MBR. Otherwise,
                * a new rectangle is generated and returned.
                * [ rectangle a ] = make_MBR(rectangle array nodes, rectangle rect)
                * @static function
                */
                Rectangle.make_MBR = function (nodes, _rect) {
                    if (nodes.length < 1) {
                        return ({ x: 0, y: 0, w: 0, h: 0 });
                    }
                    var rect = _rect;
                    //throw "make_MBR: nodes must contain at least one rectangle!";
                    if (!rect) {
                        rect = { x: nodes[0].x, y: nodes[0].y, w: nodes[0].w, h: nodes[0].h };
                    }
                    else {
                        rect.x = nodes[0].x;
                    }
                    rect.y = nodes[0].y;
                    rect.w = nodes[0].w;
                    rect.h = nodes[0].h;
                    for (var i = nodes.length - 1; i > 0; i--) {
                        this.expand_rectangle(rect, nodes[i]);
                    }
                    return (rect);
                };
                Rectangle.squarified_ratio = function (l, w, fill) {
                    // Area of new enlarged rectangle
                    var lperi = (l + w) / 2; // Average size of a side of the new rectangle
                    var larea = l * w; // Area of new rectangle
                    // return the ratio of the perimeter to the area - the closer to 1 we are, 
                    // the more "square" a rectangle is. conversly, when approaching zero the 
                    // more elongated a rectangle is
                    var lgeo = larea / (lperi * lperi);
                    return (larea * fill / lgeo);
                };
                Rectangle.prototype.toJSON = function () {
                    // tslint:disable-next-line: max-line-length
                    return ("{\"x\":" + this._x.toString() + ", \"y\":" + this._y.toString() + ", \"w\":" + this._w.toString() + ", \"h\":" + this._h.toString() + "}");
                };
                Rectangle.prototype.overlap = function (a) {
                    return (this.x < a.x2 && this.x2 > a.x && this.y < a.y2 && this.y2 > a.y);
                };
                Rectangle.prototype.expand = function (a) {
                    var nx = Math.min(this.x, a.x);
                    var ny = Math.min(this.y, a.y);
                    this._w = Math.max(this.x2, a.x2) - nx;
                    this._h = Math.max(this.y2, a.y2) - ny;
                    this._x = nx;
                    this._y = ny;
                    return this;
                };
                Rectangle.prototype.setRect = function (ix, iy, iw, ih) {
                    if (ix.x) {
                        this._x = ix.x;
                        this._y = ix.y;
                        if (ix.w !== 0 && !ix.w && ix.x2) {
                            this._w = ix.x2 - ix.x;
                            this._h = ix.y2 - ix.y;
                        }
                        else {
                            this._w = ix.w;
                            this._h = ix.h;
                        }
                        this._x2 = this._x + this._w;
                        this._y2 = this._y + this._h; // For extra fastitude
                    }
                    else {
                        this._x = ix;
                        this._y = iy;
                        this._w = iw;
                        this._h = ih;
                        this._x2 = this._x + this._w;
                        this._y2 = this._y + this._h; // For extra fastitude
                    }
                };
                return Rectangle;
            }());
            /**
             * RTree - A simple r-tree structure for great results.
             * @constructor
             */
            RTree = /** @class */ (function () {
                function RTree(width) {
                    // Variables to control tree-dimensions
                    this._MinWidth = 3; // Minimum width of any node before a merge
                    this._MaxWidth = 6; // Maximum width of any node before a split
                    this._T = { x: 0, y: 0, w: 0, h: 0, id: "root", nodes: [] }; // Start with an empty root-tree
                    // hide our idCache inside this closure
                    this.idCache = {};
                    this.hitStack = [];
                    this.hsBuoy = 0;
                    if (!isNaN(width)) {
                        this._MinWidth = Math.floor(width / 2);
                        this._MaxWidth = width;
                    }
                }
                /* quick 'n' dirty function for plugins or manually drawing the tree
                 * [ tree ] = RTree.get_tree(): returns the raw tree data. useful for adding
                 * @public
                 * !! DEPRECATED !!
                 */
                RTree.prototype.get_tree = function () {
                    return this._T;
                };
                /* quick 'n' dirty function for plugins or manually loading the tree
                 * [ tree ] = RTree.set_tree(sub-tree, where to attach): returns the raw tree data. useful for adding
                 * @public
                 * !! DEPRECATED !!
                 */
                RTree.prototype.set_tree = function (newTree, _where) {
                    var where = _where;
                    if (!where) {
                        where = this._T;
                    }
                    return this._attach_data(where, newTree);
                };
                /* non-recursive search function
                 * [ nodes | objects ] = RTree.search(rectangle, [return node data], [array to fill])
                 * @public
                 */
                RTree.prototype.search = function (rect, returnNode, returnArray) {
                    if (arguments.length < 1) {
                        throw new Error("Wrong number of arguments. RT.Search requires at least a bounding rectangle.");
                    }
                    switch (arguments.length) {
                        case 1:
                            arguments[1] = false; // Add an "return node" flag - may be removed in future
                        // tslint:disable-next-line: no-switch-case-fall-through
                        case 2:
                            arguments[2] = []; // Add an empty array to contain results
                        // tslint:disable-next-line: no-switch-case-fall-through
                        case 3:
                            arguments[3] = this._T; // Add root node to end of argument list
                        // tslint:disable-next-line: no-switch-case-fall-through
                        default:
                            arguments.length = 4;
                    }
                    return (this._search_subtree.apply(this, arguments));
                };
                /**
                 * 拓展搜索方法 （返回 索引列表长度）
                 * @param rect 搜索矩形范围
                 * @param out 返回的索引列表
                 */
                RTree.prototype.searchExtend = function (rect, out) {
                    return this._search_subtreeExtend(rect, out, this._T);
                };
                /* partially-recursive toJSON function
                 * [ string ] = RTree.toJSON([rectangle], [tree])
                 * @public
                 */
                RTree.prototype.toJSON = function (rect, tree) {
                    var hitStack = []; // Contains the elements that overlap
                    var countStack = []; // Contains the elements that overlap
                    var returnStack = {}; // Contains the elements that overlap
                    var maxDepth = 3; // This triggers recursion and tree-splitting
                    var currentDepth = 1;
                    var returnString = "";
                    if (rect && !Rectangle.overlap_rectangle(rect, this._T)) {
                        return "";
                    }
                    if (!tree) {
                        countStack.push(this._T.nodes.length);
                        hitStack.push(this._T.nodes);
                        // tslint:disable-next-line: max-line-length
                        returnString += "var main_tree = {x:" + this._T.x.toFixed() + ",y:" + this._T.y.toFixed() + ",w:" + this._T.w.toFixed() + ",h:" + this._T.h.toFixed() + ",nodes:[";
                    }
                    else {
                        maxDepth += 4;
                        countStack.push(tree.nodes.length);
                        hitStack.push(tree.nodes);
                        // tslint:disable-next-line: max-line-length
                        returnString += "var main_tree = {x:" + tree.x.toFixed() + ",y:" + tree.y.toFixed() + ",w:" + tree.w.toFixed() + ",h:" + tree.h.toFixed() + ",nodes:[";
                    }
                    do {
                        var nodes = hitStack.pop();
                        var i = countStack.pop() - 1;
                        if (i >= 0 && i < nodes.length - 1) {
                            returnString += ",";
                        }
                        while (i >= 0) {
                            var ltree = nodes[i];
                            if (!rect || Rectangle.overlap_rectangle(rect, ltree)) {
                                if (ltree.nodes) { // Not a Leaf
                                    if (currentDepth >= maxDepth) {
                                        var len = returnStack.length;
                                        var nam = this._name_to_id("saved_subtree");
                                        // tslint:disable-next-line: max-line-length
                                        returnString += "{x:" + ltree.x.toFixed() + ",y:" + ltree.y.toFixed() + ",w:" + ltree.w.toFixed() + ",h:" + ltree.h.toFixed() + ",load:'" + nam + ".js'}";
                                        returnStack[nam] = this.toJSON(rect, ltree);
                                        if (i > 0) {
                                            returnString += ",";
                                        }
                                    }
                                    else {
                                        // tslint:disable-next-line: max-line-length
                                        returnString += "{x:" + ltree.x.toFixed() + ",y:" + ltree.y.toFixed() + ",w:" + ltree.w.toFixed() + ",h:" + ltree.h.toFixed() + ",nodes:[";
                                        currentDepth += 1;
                                        countStack.push(i);
                                        hitStack.push(nodes);
                                        nodes = ltree.nodes;
                                        i = ltree.nodes.length;
                                    }
                                }
                                else if (ltree.leaf) { // A Leaf !!
                                    var data = ltree.leaf.toJSON ? ltree.leaf.toJSON() : JSON.stringify(ltree.leaf);
                                    // tslint:disable-next-line: max-line-length
                                    returnString += "{x:" + ltree.x.toFixed() + ",y:" + ltree.y.toFixed() + ",w:" + ltree.w.toFixed() + ",h:" + ltree.h.toFixed() + ",leaf:" + data + "}";
                                    if (i > 0) {
                                        returnString += ",";
                                    }
                                }
                                else if (ltree.load) { // A load
                                    // tslint:disable-next-line: max-line-length
                                    returnString += "{x:" + ltree.x.toFixed() + ",y:" + ltree.y.toFixed() + ",w:" + ltree.w.toFixed() + ",h:" + ltree.h.toFixed() + ",load:'" + ltree.load + "'}";
                                    if (i > 0) {
                                        returnString += ",";
                                    }
                                }
                            }
                            i -= 1;
                        }
                        if (i < 0) {
                            returnString += "]}";
                            currentDepth -= 1;
                        }
                    } while (hitStack.length > 0);
                    returnString += ";";
                    for (var myKey in returnStack) {
                        returnString += "\nvar " + myKey + " = function(){" + returnStack[myKey] + " return(main_tree);};";
                    }
                    return (returnString);
                };
                /* non-recursive function that deletes a specific
                 * [ number ] = RTree.remove(rectangle, obj)
                 */
                RTree.prototype.remove = function (rect, obj) {
                    if (arguments.length < 1) {
                        throw new Error("Wrong number of arguments. RT.remove requires at least a bounding rectangle.");
                    }
                    switch (arguments.length) {
                        case 1:
                            arguments[1] = false; // obj == false for conditionals
                        // tslint:disable-next-line: no-switch-case-fall-through
                        case 2:
                            arguments[2] = this._T; // Add root node to end of argument list
                        // tslint:disable-next-line: no-switch-case-fall-through
                        default:
                            arguments.length = 3;
                    }
                    if (arguments[1] === false) { // Do area-wide delete
                        var numberdeleted = 0;
                        var retArray = [];
                        do {
                            numberdeleted = retArray.length;
                            retArray = retArray.concat(this._removeSubtree.apply(this, arguments));
                        } while (numberdeleted != retArray.length);
                        return retArray;
                    }
                    return (this._removeSubtree.apply(this, arguments));
                };
                /* non-recursive insert function
                 * [] = RTree.insert(rectangle, object to insert)
                 */
                RTree.prototype.insert = function (rect, obj) {
                    if (arguments.length < 2) {
                        throw new Error("Wrong number of arguments. RT.Insert requires at least a bounding rectangle and an object.");
                    }
                    return (this._insert_subtree({ x: rect.x, y: rect.y, w: rect.w, h: rect.h, leaf: obj }, this._T));
                };
                RTree.prototype.isArray = function (o) {
                    return Object.prototype.toString.call(o) === "[object Array]";
                };
                /* @function
                 * @description Function to generate unique strings for element IDs
                 * @param {String} n			The prefix to use for the IDs generated.
                 * @return {String}				A guarenteed unique ID.
                 */
                RTree.prototype._name_to_id = function (idPrefix) {
                    // return the api: our function that returns a unique string with incrementing number appended to given idPrefix
                    var idVal = 0;
                    if (idPrefix in this.idCache) {
                        idVal = this.idCache[idPrefix]++;
                    }
                    else {
                        this.idCache[idPrefix] = 0;
                    }
                    return idPrefix + "_" + idVal;
                };
                /* find the best specific node(s) for object to be deleted from
                 * [ leaf node parent ] = _remove_subtree(rectangle, object, root)
                 * @private
                 */
                // tslint:disable-next-line: cyclomatic-complexity
                RTree.prototype._removeSubtree = function (rect, obj, root) {
                    var hitStack = []; // Contains the elements that overlap
                    var countStack = []; // Contains the elements that overlap
                    var retArray = [];
                    var currentDepth = 1;
                    if (!rect || !Rectangle.overlap_rectangle(rect, root)) {
                        return retArray;
                    }
                    var retObj;
                    retObj = { x: rect.x, y: rect.y, w: rect.w, h: rect.h, target: obj };
                    countStack.push(root.nodes.length);
                    hitStack.push(root);
                    do {
                        var tree = hitStack.pop();
                        var i = countStack.pop() - 1;
                        if ("target" in retObj) { // We are searching for a target
                            while (i >= 0) {
                                var ltree = tree.nodes[i];
                                if (Rectangle.overlap_rectangle(retObj, ltree)) {
                                    if ((retObj.target && "leaf" in ltree && ltree.leaf === retObj.target)
                                        || (!retObj.target && ("leaf" in ltree || Rectangle.contains_rectangle(ltree, retObj)))) { // A Match !!
                                        // Yup we found a match...
                                        // we can cancel search and start walking up the list
                                        if ("nodes" in ltree) { // If we are deleting a node not a leaf...
                                            retArray = this._search_subtree(ltree, true, [], ltree);
                                            tree.nodes.splice(i, 1);
                                        }
                                        else {
                                            retArray = tree.nodes.splice(i, 1);
                                        }
                                        // Resize MBR down...
                                        Rectangle.make_MBR(tree.nodes, tree);
                                        delete retObj.target;
                                        if (tree.nodes.length < this._MinWidth) { // Underflow
                                            retObj.nodes = this._search_subtree(tree, true, [], tree);
                                        }
                                        break;
                                    }
                                    else if ("nodes" in ltree) { // Not a Leaf
                                        currentDepth += 1;
                                        countStack.push(i);
                                        hitStack.push(tree);
                                        tree = ltree;
                                        i = ltree.nodes.length;
                                    }
                                }
                                i -= 1;
                            }
                        }
                        else if ("nodes" in retObj) { // We are unsplitting
                            tree.nodes.splice(i + 1, 1); // Remove unsplit node
                            // ret_obj.nodes contains a list of elements removed from the tree so far
                            if (tree.nodes.length > 0) {
                                Rectangle.make_MBR(tree.nodes, tree);
                            }
                            for (var t = 0; t < retObj.nodes.length; t++) {
                                this._insert_subtree(retObj.nodes[t], tree);
                            }
                            retObj.nodes.length = 0;
                            if (hitStack.length == 0 && tree.nodes.length <= 1) { // Underflow..on root!
                                retObj.nodes = this._search_subtree(tree, true, retObj.nodes, tree);
                                tree.nodes.length = 0;
                                hitStack.push(tree);
                                countStack.push(1);
                            }
                            else if (hitStack.length > 0 && tree.nodes.length < this._MinWidth) { // Underflow..AGAIN!
                                retObj.nodes = this._search_subtree(tree, true, retObj.nodes, tree);
                                tree.nodes.length = 0;
                            }
                            else {
                                delete retObj.nodes; // Just start resizing
                            }
                        }
                        else { // we are just resizing
                            Rectangle.make_MBR(tree.nodes, tree);
                        }
                        currentDepth -= 1;
                    } while (hitStack.length > 0);
                    return (retArray);
                };
                /* choose the best damn node for rectangle to be inserted into
                 * [ leaf node parent ] = _choose_leaf_subtree(rectangle, root to start search at)
                 * @private
                 */
                RTree.prototype._choose_leaf_subtree = function (rect, root) {
                    var bestChoiceIndex = -1;
                    var bestChoiceStack = [];
                    var bestChoiceArea;
                    var loadCallback = function (localTree, localNode) {
                        return (function (data) {
                            localTree._attach_data(localNode, data);
                        });
                    };
                    bestChoiceStack.push(root);
                    var nodes = root.nodes;
                    do {
                        if (bestChoiceIndex != -1) {
                            bestChoiceStack.push(nodes[bestChoiceIndex]);
                            nodes = nodes[bestChoiceIndex].nodes;
                            bestChoiceIndex = -1;
                        }
                        for (var i = nodes.length - 1; i >= 0; i--) {
                            var ltree = nodes[i];
                            if ("leaf" in ltree) {
                                // Bail out of everything and start inserting
                                bestChoiceIndex = -1;
                                break;
                            } /*else if(ltree.load) {
                            throw( "Can't insert into partially loaded tree ... yet!");
                            //jQuery.getJSON(ltree.load, load_callback(this, ltree));
                            //delete ltree.load;
                        }*/
                            // Area of new enlarged rectangle
                            var oldLratio = Rectangle.squarified_ratio(ltree.w, ltree.h, ltree.nodes.length + 1);
                            // Enlarge rectangle to fit new rectangle
                            var nw = Math.max(ltree.x + ltree.w, rect.x + rect.w) - Math.min(ltree.x, rect.x);
                            var nh = Math.max(ltree.y + ltree.h, rect.y + rect.h) - Math.min(ltree.y, rect.y);
                            // Area of new enlarged rectangle
                            var lratio = Rectangle.squarified_ratio(nw, nh, ltree.nodes.length + 2);
                            if (bestChoiceIndex < 0 || Math.abs(lratio - oldLratio) < bestChoiceArea) {
                                bestChoiceArea = Math.abs(lratio - oldLratio);
                                bestChoiceIndex = i;
                            }
                        }
                    } while (bestChoiceIndex != -1);
                    return (bestChoiceStack);
                };
                /* split a set of nodes into two roughly equally-filled nodes
                 * [ an array of two new arrays of nodes ] = linear_split(array of nodes)
                 * @private
                 */
                RTree.prototype._linear_split = function (nodes) {
                    var n = this._pick_linear(nodes);
                    while (nodes.length > 0) {
                        this._pick_next(nodes, n[0], n[1]);
                    }
                    return (n);
                };
                /* insert the best source rectangle into the best fitting parent node: a or b
                 * [] = pick_next(array of source nodes, target node array a, target node array b)
                 * @private
                 */
                RTree.prototype._pick_next = function (nodes, a, b) {
                    // Area of new enlarged rectangle
                    var areaA = Rectangle.squarified_ratio(a.w, a.h, a.nodes.length + 1);
                    var areaB = Rectangle.squarified_ratio(b.w, b.h, b.nodes.length + 1);
                    var highAreaDelta;
                    var highAreaNode;
                    var lowestGrowthGroup;
                    for (var i = nodes.length - 1; i >= 0; i--) {
                        var l = nodes[i];
                        var newAreaA = void 0;
                        newAreaA = {};
                        newAreaA.x = Math.min(a.x, l.x);
                        newAreaA.y = Math.min(a.y, l.y);
                        newAreaA.w = Math.max(a.x + a.w, l.x + l.w) - newAreaA.x;
                        newAreaA.h = Math.max(a.y + a.h, l.y + l.h) - newAreaA.y;
                        var changeNewAreaA = Math.abs(Rectangle.squarified_ratio(newAreaA.w, newAreaA.h, a.nodes.length + 2) - areaA);
                        var newAreaB = void 0;
                        newAreaB = {};
                        newAreaB.x = Math.min(b.x, l.x);
                        newAreaB.y = Math.min(b.y, l.y);
                        newAreaB.w = Math.max(b.x + b.w, l.x + l.w) - newAreaB.x;
                        newAreaB.h = Math.max(b.y + b.h, l.y + l.h) - newAreaB.y;
                        var changeNewAreaB = Math.abs(Rectangle.squarified_ratio(newAreaB.w, newAreaB.h, b.nodes.length + 2) - areaB);
                        if (!highAreaNode || !highAreaDelta || Math.abs(changeNewAreaB - changeNewAreaA) < highAreaDelta) {
                            highAreaNode = i;
                            highAreaDelta = Math.abs(changeNewAreaB - changeNewAreaA);
                            lowestGrowthGroup = changeNewAreaB < changeNewAreaA ? b : a;
                        }
                    }
                    var tempNode = nodes.splice(highAreaNode, 1)[0];
                    if (a.nodes.length + nodes.length + 1 <= this._MinWidth) {
                        a.nodes.push(tempNode);
                        Rectangle.expand_rectangle(a, tempNode);
                    }
                    else if (b.nodes.length + nodes.length + 1 <= this._MinWidth) {
                        b.nodes.push(tempNode);
                        Rectangle.expand_rectangle(b, tempNode);
                    }
                    else {
                        lowestGrowthGroup.nodes.push(tempNode);
                        Rectangle.expand_rectangle(lowestGrowthGroup, tempNode);
                    }
                };
                /* pick the "best" two starter nodes to use as seeds using the "linear" criteria
                 * [ an array of two new arrays of nodes ] = pick_linear(array of source nodes)
                 * @private
                 */
                RTree.prototype._pick_linear = function (nodes) {
                    var lowestHighX = nodes.length - 1;
                    var highestLowX = 0;
                    var lowestHighY = nodes.length - 1;
                    var highestLowY = 0;
                    var t1;
                    var t2;
                    for (var i = nodes.length - 2; i >= 0; i--) {
                        var l = nodes[i];
                        // tslint:disable-next-line: max-line-length
                        if (l.x > nodes[highestLowX].x) {
                            highestLowX = i;
                        }
                        else if (l.x + l.w < nodes[lowestHighX].x + nodes[lowestHighX].w) {
                            lowestHighX = i;
                        }
                        // tslint:disable-next-line: max-line-length
                        if (l.y > nodes[highestLowY].y) {
                            highestLowY = i;
                        }
                        else if (l.y + l.h < nodes[lowestHighY].y + nodes[lowestHighY].h) {
                            lowestHighY = i;
                        }
                    }
                    var dx = Math.abs((nodes[lowestHighX].x + nodes[lowestHighX].w) - nodes[highestLowX].x);
                    var dy = Math.abs((nodes[lowestHighY].y + nodes[lowestHighY].h) - nodes[highestLowY].y);
                    if (dx > dy) {
                        if (lowestHighX > highestLowX) {
                            t1 = nodes.splice(lowestHighX, 1)[0];
                            t2 = nodes.splice(highestLowX, 1)[0];
                        }
                        else {
                            t2 = nodes.splice(highestLowX, 1)[0];
                            t1 = nodes.splice(lowestHighX, 1)[0];
                        }
                    }
                    else {
                        if (lowestHighY > highestLowY) {
                            t1 = nodes.splice(lowestHighY, 1)[0];
                            t2 = nodes.splice(highestLowY, 1)[0];
                        }
                        else {
                            t2 = nodes.splice(highestLowY, 1)[0];
                            t1 = nodes.splice(lowestHighY, 1)[0];
                        }
                    }
                    return ([{ x: t1.x, y: t1.y, w: t1.w, h: t1.h, nodes: [t1] },
                        { x: t2.x, y: t2.y, w: t2.w, h: t2.h, nodes: [t2] }]);
                };
                RTree.prototype._attach_data = function (node, moreTree) {
                    node.nodes = moreTree.nodes;
                    node.x = moreTree.x;
                    node.y = moreTree.y;
                    node.w = moreTree.w;
                    node.h = moreTree.h;
                    return (node);
                };
                /* non-recursive internal search function
                 * [ nodes | objects ] = _search_subtree(rectangle, [return node data], [array to fill], root to begin search at)
                 * @private
                 */
                RTree.prototype._search_subtree = function (rect, returnNode, returnArray, root) {
                    var hitStack = []; // Contains the elements that overlap
                    if (!Rectangle.overlap_rectangle(rect, root)) {
                        return (returnArray);
                    }
                    var loadCallback = function (localTree, localNode) {
                        return (function (data) {
                            localTree._attach_data(localNode, data);
                        });
                    };
                    hitStack.push(root.nodes);
                    do {
                        var nodes = hitStack.pop();
                        for (var i = nodes.length - 1; i >= 0; i--) {
                            var ltree = nodes[i];
                            if (Rectangle.overlap_rectangle(rect, ltree)) {
                                if ("nodes" in ltree) { // Not a Leaf
                                    hitStack.push(ltree.nodes);
                                }
                                else if ("leaf" in ltree) { // A Leaf !!
                                    if (!returnNode) {
                                        returnArray.push(ltree.leaf);
                                    }
                                    else {
                                        returnArray.push(ltree);
                                    }
                                } /*	else if("load" in ltree) { // We need to fetch a URL for some more tree data
                                jQuery.getJSON(ltree.load, load_callback(this, ltree));
                                delete ltree.load;
                            //	i++; // Replay this entry
                            }*/
                            }
                        }
                    } while (hitStack.length > 0);
                    return (returnArray);
                };
                /* non-recursive internal insert function
                 * [] = _insert_subtree(rectangle, object to insert, root to begin insertion at)
                 * @private
                 */
                RTree.prototype._insert_subtree = function (node, root) {
                    var bc; // Best Current node
                    // Initial insertion is special because we resize the Tree and we don't
                    // care about any overflow (seriously, how can the first object overflow?)
                    if (root.nodes.length == 0) {
                        root.x = node.x;
                        root.y = node.y;
                        root.w = node.w;
                        root.h = node.h;
                        root.nodes.push(node);
                        return;
                    }
                    // Find the best fitting leaf node
                    // choose_leaf returns an array of all tree levels (including root)
                    // that were traversed while trying to find the leaf
                    var treeStack = this._choose_leaf_subtree(node, root);
                    var retObj = node; //{x:rect.x,y:rect.y,w:rect.w,h:rect.h, leaf:obj};
                    // Walk back up the tree resizing and inserting as needed
                    do {
                        //handle the case of an empty node (from a split)
                        if (bc && "nodes" in bc && bc.nodes.length == 0) {
                            var pbc = bc; // Past bc
                            bc = treeStack.pop();
                            for (var t = 0; t < bc.nodes.length; t++) {
                                if (bc.nodes[t] === pbc || bc.nodes[t].nodes.length == 0) {
                                    bc.nodes.splice(t, 1);
                                    break;
                                }
                            }
                        }
                        else {
                            bc = treeStack.pop();
                        }
                        // If there is data attached to this ret_obj
                        if ("leaf" in retObj || "nodes" in retObj || this.isArray(retObj)) {
                            // Do Insert
                            if (this.isArray(retObj)) {
                                for (var ai = 0; ai < retObj.length; ai++) {
                                    Rectangle.expand_rectangle(bc, retObj[ai]);
                                }
                                bc.nodes = bc.nodes.concat(retObj);
                            }
                            else {
                                Rectangle.expand_rectangle(bc, retObj);
                                bc.nodes.push(retObj); // Do Insert
                            }
                            if (bc.nodes.length <= this._MaxWidth) { // Start Resizeing Up the Tree
                                retObj = { x: bc.x, y: bc.y, w: bc.w, h: bc.h };
                            }
                            else { // Otherwise Split this Node
                                // linear_split() returns an array containing two new nodes
                                // formed from the split of the previous node's overflow
                                var a = this._linear_split(bc.nodes);
                                retObj = a; //[1];
                                if (treeStack.length < 1) { // If are splitting the root..
                                    bc.nodes.push(a[0]);
                                    treeStack.push(bc); // Reconsider the root element
                                    retObj = a[1];
                                } /*else {
                                    delete bc;
                                }*/
                            }
                        }
                        else { // Otherwise Do Resize
                            //Just keep applying the new bounding rectangle to the parents..
                            Rectangle.expand_rectangle(bc, retObj);
                            retObj = { x: bc.x, y: bc.y, w: bc.w, h: bc.h };
                        }
                    } while (treeStack.length > 0);
                };
                RTree.prototype._search_subtreeExtend = function (rect, returnArray, root) {
                    var hitStack = this.hitStack; // Contains the elements that overlap
                    this.hsBuoy = 0;
                    if (!Rectangle.overlap_rectangle(rect, root)) {
                        return 0;
                    }
                    // hit_stack.push(root.nodes);
                    this.hsBuoy++;
                    hitStack[this.hsBuoy] = root.nodes;
                    var idx = 0;
                    do {
                        // var nodes = hit_stack.pop();
                        var nodes = hitStack[this.hsBuoy];
                        this.hsBuoy--;
                        for (var i = nodes.length - 1; i >= 0; i--) {
                            var ltree = nodes[i];
                            if (Rectangle.overlap_rectangle(rect, ltree)) {
                                if ("nodes" in ltree) { // Not a Leaf
                                    // hit_stack.push(ltree.nodes);
                                    this.hsBuoy++;
                                    hitStack[this.hsBuoy] = ltree.nodes;
                                }
                                else if ("leaf" in ltree) { // A Leaf !!
                                    returnArray[idx] = ltree.leaf;
                                    idx++;
                                }
                            }
                        }
                        // } while (hit_stack.length > 0);
                    } while (this.hsBuoy > 0);
                    //all set to null
                    var len = hitStack.length;
                    for (var i = 0; i < len; i++) {
                        if (!hitStack[i]) {
                            break;
                        }
                        hitStack[i] = null;
                    }
                    return idx;
                };
                return RTree;
            }());
            exports_109("RTree", RTree);
        }
    };
});
// 未用上先注掉 
// export class Shae {
//     /*
//      *
//      * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
//      * in FIPS PUB 180-1
//      *
//      * By lizq
//      *
//      * 2006-11-11
//      *
//      */
//     /*
//      *
//      * Configurable variables.
//      *
//      */
//     public hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase */
//     public chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode */
//     /*
//      *
//      * The main public to calculate message digest
//      *
//      */
//     public hex_sha1(s) {
//         return this.binb2hex(this.core_sha1(this.AlignSHA1(s)));
//     }
//     /*
//      *
//      * Perform a simple self-test to see if the VM is working
//      *
//      */
//     public sha1_vm_test() {
//         return this.hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
//     }
//     /*
//      *
//      * Calculate the SHA-1 of an array of big-endian words, and a bit length
//      *
//      */
//     public core_sha1(blockArray) {
//         let x = blockArray; // append padding
//         let w = Array(80);
//         let a = 1732584193;
//         let b = -271733879;
//         let c = -1732584194;
//         let d = 271733878;
//         let e = -1009589776;
//         for (let i = 0; i < x.length; i += 16) // 每次处理512位 16*32
//         {
//             let olda = a;
//             let oldb = b;
//             let oldc = c;
//             let oldd = d;
//             let olde = e;
//             for (let j = 0; j < 80; j++) // 对每个512位进行80步操作
//             {
//                 if (j < 16) {
//                     w[j] = x[i + j];
//                 }else {
//                     w[j] = this.rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
//                 }
//                 let t = this.safe_add(this.safe_add(this.rol(a, 5), this.sha1_ft(j, b, c, d))
//                 , this.safe_add(this.safe_add(e, w[j]), this.sha1_kt(j)));
//                 e = d;
//                 d = c;
//                 c = this.rol(b, 30);
//                 b = a;
//                 a = t;
//             }
//             a = this.safe_add(a, olda);
//             b = this.safe_add(b, oldb);
//             c = this.safe_add(c, oldc);
//             d = this.safe_add(d, oldd);
//             e = this.safe_add(e, olde);
//         }
//         return new Array(a, b, c, d, e);
//     }
//     /*
//      *
//      * Perform the appropriate triplet combination public for the current
//      * iteration
//      *
//      * 返回对应F函数的值
//      *
//      */
//     public sha1_ft(t, b, c, d) {
//         if (t < 20) {
//             return (b & c) | ((~b) & d);
//         }
//         if (t < 40) {
//             return b ^ c ^ d;
//         }
//         if (t < 60) {
//             return (b & c) | (b & d) | (c & d);
//         }
//         return b ^ c ^ d; // t<80
//     }
//     /*
//      *
//      * Determine the appropriate additive constant for the current iteration
//      *
//      * 返回对应的Kt值
//      *
//      */
//     public sha1_kt(t) {
//         return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514;
//     }
//     /*
//      *
//      * Add integers, wrapping at 2^32. This uses 16-bit operations internally
//      *
//      * to work around bugs in some JS interpreters.
//      *
//      * 将32位数拆成高16位和低16位分别进行相加，从而实现 MOD 2^32 的加法
//      *
//      */
//     public safe_add(x, y) {
//         let lsw = (x & 0xFFFF) + (y & 0xFFFF);
//         let msw = (x >> 16) + (y >> 16) + (lsw >> 16);
//         return (msw << 16) | (lsw & 0xFFFF);
//     }
//     /*
//      *
//      * Bitwise rotate a 32-bit number to the left.
//      *
//      * 32位二进制数循环左移
//      *
//      */
//     public rol(num, cnt) {
//         return (num << cnt) | (num >>> (32 - cnt));
//     }
//     /*
//      *
//      * The standard SHA1 needs the input string to fit into a block
//      *
//      * This public align the input string to meet the requirement
//      *
//      */
//     public AlignSHA1(str) {
//         let nblk = ((str.length + 8) >> 6) + 1;
//         let blks = new Array(nblk * 16);
//         let i: number;
//         for (i = 0; i < nblk * 16; i++) {
//             blks[i] = 0;
//         }
//         for (i = 0; i < str.length; i++) {
//             blks[i >> 2] |= str.charCodeAt(i) << (24 - (i & 3) * 8);
//         }
//         blks[i >> 2] |= 0x80 << (24 - (i & 3) * 8);
//         blks[nblk * 16 - 1] = str.length * 8;
//         return blks;
//     }
//     /*
//      *
//      * Convert an array of big-endian words to a hex string.
//      *
//      */
//     public binb2hex(binarray) {
//         // tslint:disable-next-line: variable-name
//         let hex_tab = this.hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
//         let str = "";
//         for (let i = 0; i < binarray.length * 4; i++) {
//             str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) +
//                 hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);
//         }
//         return str;
//     }
//     /*
//      * 获取游戏hash_key值
//      */
//     public getGameKey(uid, sid): string {
//         let jData: string[] = [];
//         let hData: string[] = [];
//         let cData: string[] = [];
//         let addict: string = "1";
//         let sha1key: string = "abcdef!@#$%6d2";
//         let source: string = "cafe";
//         let time: string = Math.round(new Date().getTime() / 1000)
//         .toString();
//         let fsid: string = sid;
//         cData.push(uid);
//         cData.push(time);
//         cData.push(sid);
//         cData.push(fsid);
//         cData.push(addict);
//         cData.push(source);
//         jData.push(cData.join("_"));
//         jData.push(sha1key);
//         let jString = jData.join("_");
//         let hString = this.hex_sha1(jString);
//         hData.push(hString);
//         hData.push(cData.join("|"));
//         return hData.join("|");
//     }
//     /**
//      * utf.js - UTF-8 <=> UTF-16 convertion
//      * Uint8Array To string
//      * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
//      * Version: 1.0
//      * LastModified: Dec 25 1999
//      * This library is free.  You can redistribute it and/or modify it.
//      *
//      * @param array
//      */
//     public GetUtf8ArrayToStr(array) {
//         // tslint:disable-next-line: one-variable-per-declaration
//         let out, i, len, c;
//         // tslint:disable-next-line: one-variable-per-declaration
//         let char2, char3;
//         out = "";
//         len = array.length;
//         i = 0;
//         while (i < len) {
//             c = array[i++];
//             switch (c >> 4) {
//                 case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
//                     // 0xxxxxxx
//                     out += String.fromCharCode(c);
//                     break;
//                 case 12: case 13:
//                     // 110x xxxx   10xx xxxx
//                     char2 = array[i++];
//                     out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
//                     break;
//                 case 14:
//                     // 1110 xxxx  10xx xxxx  10xx xxxx
//                     char2 = array[i++];
//                     char3 = array[i++];
//                     out += String.fromCharCode(((c & 0x0F) << 12) |
//                         ((char2 & 0x3F) << 6) |
//                         ((char3 & 0x3F) << 0));
//                     break;
//                 default : out = "";
//             }
//         }
//         return out;
//     }
// }
System.register("Loader/otherPlan/CombineLoader", ["Loader/otherPlan/LoaderManage"], function (exports_110, context_110) {
    "use strict";
    var LoaderManage_3, CombineLoader;
    var __moduleName = context_110 && context_110.id;
    return {
        setters: [
            function (LoaderManage_3_1) {
                LoaderManage_3 = LoaderManage_3_1;
            }
        ],
        execute: function () {
            CombineLoader = /** @class */ (function () {
                function CombineLoader() {
                    //总需要加载的文件数量
                    this.fileCount = 0;
                    //当前已经加载文件数量
                    this.fileLoadedCount = 0;
                    //加载文件完成的进度
                    this.sucessProgress = 0;
                    //总进度
                    this.progress = 0;
                    this.list = new Array();
                }
                CombineLoader.prototype.add = function (url, callback, progress) {
                    var loader = LoaderManage_3.LoaderManage.Instance.load(url, callback, url);
                    this.list.push(loader);
                    this.fileCount++;
                    return null;
                };
                CombineLoader.prototype.loaderEnd = function (loader) {
                    var index = this.list.indexOf(loader);
                    if (index != -1) {
                        this.list.splice(index, 1);
                    }
                    this.fileLoadedCount++;
                    this.sucessProgress = this.fileLoadedCount / this.fileCount;
                };
                CombineLoader.prototype.start = function () {
                    for (var i = 0; i < this.list.length; i++) {
                        var loader = this.list[i];
                        loader.load();
                        this.callback = this.LoadProgress.bind(this);
                        loader.addProgressCallBack(this.callback);
                        loader.endFunction = this.loaderEnd.bind(this);
                    }
                };
                CombineLoader.prototype.LoadProgress = function (progress, fileLoadedCount, fileCount, bytesLoaded, bytesTotal) {
                    //总进度
                    this.progress = bytesLoaded / bytesTotal / this.fileCount + this.sucessProgress;
                };
                return CombineLoader;
            }());
            exports_110("CombineLoader", CombineLoader);
        }
    };
});
System.register("Loader/otherPlan/dataType/key", [], function (exports_111, context_111) {
    "use strict";
    var key;
    var __moduleName = context_111 && context_111.id;
    return {
        setters: [],
        execute: function () {
            exports_111("key", key = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function key() {
                    this.inTangent = 0;
                    this.outTangent = 0;
                    this.time = 0;
                    this.value = 0;
                }
                key.classType = m4m["key"] = key;
                return key;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/AnimationCurve1", [], function (exports_112, context_112) {
    "use strict";
    var AnimationCurve1;
    var __moduleName = context_112 && context_112.id;
    return {
        setters: [],
        execute: function () {
            exports_112("AnimationCurve1", AnimationCurve1 = /** @class */ (function () {
                function AnimationCurve1() {
                    this.postWrapMode = 0;
                    this.preWrapMode = 0;
                    this.keys = [];
                }
                AnimationCurve1.classType = m4m["AnimationCurve1"] = AnimationCurve1;
                return AnimationCurve1;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/AssetBundle", ["Data/Map"], function (exports_113, context_113) {
    "use strict";
    var Map_17, AssetBundlea;
    var __moduleName = context_113 && context_113.id;
    return {
        setters: [
            function (Map_17_1) {
                Map_17 = Map_17_1;
            }
        ],
        execute: function () {
            exports_113("AssetBundlea", AssetBundlea = /** @class */ (function () {
                function AssetBundlea() {
                    this.className = "";
                    this.fileName = "";
                    this.pathName = "";
                    this.fileSize = new Map_17.cMap();
                    this.files = [];
                    this.totalLength = 0;
                    this.version = "";
                    this.createtime = "";
                }
                AssetBundlea.classType = m4m["AssetBundle"] = AssetBundlea;
                return AssetBundlea;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/alphaKey", [], function (exports_114, context_114) {
    "use strict";
    var alphaKey;
    var __moduleName = context_114 && context_114.id;
    return {
        setters: [],
        execute: function () {
            exports_114("alphaKey", alphaKey = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function alphaKey() {
                    this.alpha = 0;
                    this.time = 0;
                }
                alphaKey.classType = m4m["alphaKey"] = alphaKey;
                return alphaKey;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/colorKey", [], function (exports_115, context_115) {
    "use strict";
    var colorKey;
    var __moduleName = context_115 && context_115.id;
    return {
        setters: [],
        execute: function () {
            exports_115("colorKey", colorKey = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function colorKey() {
                    this.color = m4m.poolcolor();
                    this.time = 0;
                }
                colorKey.classType = m4m["colorKey"] = colorKey;
                return colorKey;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/Gradient", [], function (exports_116, context_116) {
    "use strict";
    var Gradient;
    var __moduleName = context_116 && context_116.id;
    return {
        setters: [],
        execute: function () {
            exports_116("Gradient", Gradient = /** @class */ (function () {
                function Gradient() {
                    this.mode = 0;
                    this.alphaKeys = [];
                    this.colorKeys = [];
                }
                Gradient.classType = m4m["Gradient"] = Gradient;
                return Gradient;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/ParticleSystem", ["Loader/otherPlan/dataType/Gradient", "Loader/otherPlan/dataType/AnimationCurve1", "Loader/otherPlan/dataType/AssetBundleFileInfo"], function (exports_117, context_117) {
    "use strict";
    var Gradient_1, AnimationCurve1_1, AssetBundleFileInfo_6, ParticleSystem, ParticleMainModule, MinMaxCurve, MinMaxGradient, ParticleEmissionModule, burst, ParticleShapeModule, ParticleVelocityOverLifetimeModule, ParticleLimitVelocityOverLifetimeModule, ParticleInheritVelocityModule, ColorBySpeed, SizeOverLifetime, Noise, TextureSheetAnimation;
    var __moduleName = context_117 && context_117.id;
    return {
        setters: [
            function (Gradient_1_1) {
                Gradient_1 = Gradient_1_1;
            },
            function (AnimationCurve1_1_1) {
                AnimationCurve1_1 = AnimationCurve1_1_1;
            },
            function (AssetBundleFileInfo_6_1) {
                AssetBundleFileInfo_6 = AssetBundleFileInfo_6_1;
            }
        ],
        execute: function () {
            exports_117("ParticleSystem", ParticleSystem = /** @class */ (function (_super) {
                __extends(ParticleSystem, _super);
                function ParticleSystem() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.main = new ParticleMainModule();
                    _this.emission = new ParticleEmissionModule();
                    _this.shape = new ParticleShapeModule();
                    _this.velocityOverLifetime = new ParticleVelocityOverLifetimeModule();
                    _this.limitVelocityOverLifetime = new ParticleLimitVelocityOverLifetimeModule();
                    _this.inheritVelocity = new ParticleInheritVelocityModule();
                    _this.forceOverLifetime = new ParticleVelocityOverLifetimeModule();
                    _this.colorOverLifetime = new ColorBySpeed();
                    _this.colorBySpeed = new ColorBySpeed();
                    _this.sizeOverLifetime = new SizeOverLifetime();
                    _this.sizeBySpeed = new SizeOverLifetime();
                    _this.rotationOverLifetime = new SizeOverLifetime();
                    _this.rotationBySpeed = new SizeOverLifetime();
                    _this.noise = new Noise();
                    _this.textureSheetAnimation = new TextureSheetAnimation();
                    return _this;
                }
                ParticleSystem.classType = m4m["ParticleSystem"] = ParticleSystem;
                return ParticleSystem;
            }(AssetBundleFileInfo_6.AssetBundleFileInfo)));
            ParticleMainModule = /** @class */ (function () {
                function ParticleMainModule() {
                    this.duration = 0;
                    this.loop = false;
                    this.prewarm = false;
                    this.startDelay = new MinMaxCurve();
                    this.startLifetime = new MinMaxCurve();
                    this.startSpeed = new MinMaxCurve();
                    this.useStartSize3D = false;
                    this.useStartRotation3D = false;
                    this.startSize = new MinMaxCurve();
                    this.startSizeX = new MinMaxCurve();
                    this.startSizeY = new MinMaxCurve();
                    this.startSizeZ = new MinMaxCurve();
                    this.gravityModifier = new MinMaxCurve();
                    this.maxParticles = 0;
                    this.playOnAwake = false;
                    this.randomizeRotationDirection = 0;
                    this.scalingMode = 0;
                    this.simulationSpace = 0;
                    this.simulationSpeed = 0;
                    this.startColor = new MinMaxGradient();
                    this.startRotation = new MinMaxCurve();
                    this.startRotationX = new MinMaxCurve();
                    this.startRotationY = new MinMaxCurve();
                    this.startRotationZ = new MinMaxCurve();
                }
                ParticleMainModule.classType = m4m["ParticleMainModule"] = ParticleMainModule;
                return ParticleMainModule;
            }());
            MinMaxCurve = /** @class */ (function () {
                function MinMaxCurve() {
                    this.constant = 0;
                    this.constantMax = 0;
                    this.constantMin = 0;
                    this.curve = new AnimationCurve1_1.AnimationCurve1();
                    this.curveMax = new AnimationCurve1_1.AnimationCurve1();
                    this.curveMin = new AnimationCurve1_1.AnimationCurve1();
                    this.curveMultiplier = 0;
                    this.mode = 0;
                }
                MinMaxCurve.classType = m4m["MinMaxCurve"] = MinMaxCurve;
                return MinMaxCurve;
            }());
            MinMaxGradient = /** @class */ (function () {
                function MinMaxGradient() {
                    this.color = m4m.poolcolor();
                    this.colorMax = m4m.poolcolor();
                    this.colorMin = m4m.poolcolor();
                    this.gradient = new Gradient_1.Gradient();
                    this.gradientMax = new Gradient_1.Gradient();
                    this.gradientMin = new Gradient_1.Gradient();
                }
                MinMaxGradient.classType = m4m["MinMaxGradient"] = MinMaxGradient;
                return MinMaxGradient;
            }());
            ParticleEmissionModule = /** @class */ (function () {
                function ParticleEmissionModule() {
                    this.enabled = false;
                    this.rateOverDistance = new MinMaxCurve();
                    this.rateOverTime = new MinMaxCurve();
                    this.bursts = [];
                }
                ParticleEmissionModule.classType = m4m["ParticleEmissionModule"] = ParticleEmissionModule;
                return ParticleEmissionModule;
            }());
            burst = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function burst() {
                    this.cycleCount = 0;
                    this.maxCount = 0;
                    this.minCount = 0;
                    this.repeatInterval = 0;
                    this.time = 0;
                }
                burst.classType = m4m["burst"] = burst;
                return burst;
            }());
            ParticleShapeModule = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function ParticleShapeModule() {
                    this.alignToDirection = false;
                    this.angle = 0;
                    this.arc = 0;
                    this.arcMode = 0;
                    this.arcSpeed = new MinMaxCurve();
                    this.arcSpread = 0;
                    this.box = m4m.poolv3();
                    this.enabled = false;
                    this.length = 0;
                    this.radius = 0;
                    this.radiusMode = 0;
                    this.radiusSpeed = new MinMaxCurve();
                    this.radiusSpread = 0;
                    this.randomDirectionAmount = 0;
                    this.shapeType = 0;
                    this.sphericalDirectionAmount = 0;
                }
                ParticleShapeModule.classType = m4m["ParticleShapeModule"] = ParticleShapeModule;
                return ParticleShapeModule;
            }());
            ParticleVelocityOverLifetimeModule = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function ParticleVelocityOverLifetimeModule() {
                    this.enabled = false;
                    this.space = 0;
                    this.x = new MinMaxCurve();
                    this.y = new MinMaxCurve();
                    this.z = new MinMaxCurve();
                }
                ParticleVelocityOverLifetimeModule.classType = m4m["ParticleVelocityOverLifetimeModule"] = ParticleVelocityOverLifetimeModule;
                return ParticleVelocityOverLifetimeModule;
            }());
            ParticleLimitVelocityOverLifetimeModule = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function ParticleLimitVelocityOverLifetimeModule() {
                    this.dampen = 0;
                    this.enabled = false;
                    this.limit = new MinMaxCurve();
                    this.limitX = new MinMaxCurve();
                    this.limitY = new MinMaxCurve();
                    this.limitZ = new MinMaxCurve();
                    this.separateAxes = false;
                    this.space = 0;
                }
                ParticleLimitVelocityOverLifetimeModule.classType = m4m["ParticleLimitVelocityOverLifetimeModule"] = ParticleLimitVelocityOverLifetimeModule;
                return ParticleLimitVelocityOverLifetimeModule;
            }());
            ParticleInheritVelocityModule = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function ParticleInheritVelocityModule() {
                    this.enabled = false;
                    this.curve = new MinMaxCurve();
                    this.mode = 0;
                }
                ParticleInheritVelocityModule.classType = m4m["ParticleInheritVelocityModule"] = ParticleInheritVelocityModule;
                return ParticleInheritVelocityModule;
            }());
            ColorBySpeed = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function ColorBySpeed() {
                    this.color = new MinMaxGradient();
                    this.enabled = false;
                    this.range = m4m.poolv2();
                }
                ColorBySpeed.classType = m4m["ColorBySpeed"] = ColorBySpeed;
                return ColorBySpeed;
            }());
            SizeOverLifetime = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function SizeOverLifetime() {
                    this.enabled = false;
                    this.range = m4m.poolv2();
                    this.separateAxes = false;
                    this.size = new MinMaxCurve();
                    this.x = new MinMaxCurve();
                    this.y = new MinMaxCurve();
                    this.z = new MinMaxCurve();
                }
                SizeOverLifetime.classType = m4m["SizeOverLifetime"] = SizeOverLifetime;
                return SizeOverLifetime;
            }());
            Noise = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function Noise() {
                    this.enabled = false;
                    this.damping = false;
                    this.frequency = 0;
                    this.octaveCount = 0;
                    this.octaveMultiplier = 0;
                    this.octaveScale = 0;
                    this.quality = 0;
                    this.remap = new MinMaxCurve();
                    this.remapEnabled = false;
                    this.remapMultiplier = 0;
                    this.remapX = new MinMaxCurve();
                    this.remapXMultiplier = 0;
                    this.remapY = new MinMaxCurve();
                    this.remapYMultiplier = 0;
                    this.remapZ = new MinMaxCurve();
                    this.remapZMultiplier = 0;
                    this.scrollSpeed = new MinMaxCurve();
                    this.scrollSpeedMultiplier = 0;
                    this.separateAxes = false;
                    this.strength = new MinMaxCurve();
                    this.strengthMultiplier = 0;
                    this.strengthX = new MinMaxCurve();
                    this.strengthXMultiplier = 0;
                    this.strengthY = new MinMaxCurve();
                    this.strengthYMultiplier = 0;
                    this.strengthZ = new MinMaxCurve();
                    this.strengthZMultiplier = 0;
                }
                Noise.classType = m4m["Noise"] = Noise;
                return Noise;
            }());
            TextureSheetAnimation = /** @class */ (function () {
                // tslint:disable-next-line: max-classes-per-file class-name
                function TextureSheetAnimation() {
                    this.animation = 0;
                    this.cycleCount = 0;
                    this.enabled = false;
                    this.flipU = 0;
                    this.flipV = 0;
                    this.frameOverTime = new MinMaxGradient();
                    this.numTilesX = 0;
                    this.numTilesY = 0;
                    this.rowIndex = 0;
                    this.startFrame = new MinMaxGradient();
                    this.useRandomRow = false;
                    this.uvChannelMask = 0;
                }
                TextureSheetAnimation.classType = m4m["TextureSheetAnimation"] = TextureSheetAnimation;
                return TextureSheetAnimation;
            }());
        }
    };
});
System.register("Loader/otherPlan/dataType/exC2DComponent", [], function (exports_118, context_118) {
    "use strict";
    var exC2DComponent;
    var __moduleName = context_118 && context_118.id;
    return {
        setters: [],
        execute: function () {
            exports_118("exC2DComponent", exC2DComponent = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function exC2DComponent() {
                    this.cmop = "";
                }
                exC2DComponent.classType = m4m["exC2DComponent"] = exC2DComponent;
                return exC2DComponent;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/Prefab2D", ["Loader/otherPlan/dataType/AssetBundleFileInfo"], function (exports_119, context_119) {
    "use strict";
    var AssetBundleFileInfo_7, Prefab2D, numberdic, Border;
    var __moduleName = context_119 && context_119.id;
    return {
        setters: [
            function (AssetBundleFileInfo_7_1) {
                AssetBundleFileInfo_7 = AssetBundleFileInfo_7_1;
            }
        ],
        execute: function () {
            exports_119("Prefab2D", Prefab2D = /** @class */ (function (_super) {
                __extends(Prefab2D, _super);
                function Prefab2D() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.className = "";
                    _this.prefab = "";
                    _this.layer = 0;
                    _this.tag = "";
                    _this.tranName = "";
                    _this.isStatic = false;
                    _this.children = [];
                    _this.width = 0;
                    _this.height = 0;
                    _this.pivot = m4m.poolv2();
                    _this._visible = false;
                    _this.localTranslate = m4m.poolv2();
                    _this.localScale = m4m.poolv2();
                    _this.localRotate = 0;
                    _this.isMask = false;
                    _this.layoutState = 0;
                    _this.layoutPercentState = 0;
                    _this.layoutValueMap = new numberdic();
                    _this.insid = 0;
                    _this.components = [];
                    return _this;
                }
                Prefab2D.classType = m4m["Prefab2D"] = Prefab2D;
                return Prefab2D;
            }(AssetBundleFileInfo_7.AssetBundleFileInfo)));
            numberdic = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function numberdic() {
                    this.n1 = 0;
                    this.n2 = 0;
                    this.n4 = 0;
                    this.n8 = 0;
                    this.n16 = 0;
                    this.n32 = 0;
                }
                numberdic.classType = m4m["numberdic"] = numberdic;
                return numberdic;
            }());
            exports_119("Border", Border = /** @class */ (function () {
                function Border() {
                    this.l = 0;
                    this.t = 0;
                    this.r = 0;
                    this.b = 0;
                }
                Border.classType = m4m["Border"] = Border;
                return Border;
            }()));
        }
    };
});
System.register("Loader/otherPlan/dataType/f14EffectSystem", ["Loader/otherPlan/dataType/AssetBundleFileInfo"], function (exports_120, context_120) {
    "use strict";
    var AssetBundleFileInfo_8, f14EffectSystem, layer, Singlemeshdata, frame, att;
    var __moduleName = context_120 && context_120.id;
    return {
        setters: [
            function (AssetBundleFileInfo_8_1) {
                AssetBundleFileInfo_8 = AssetBundleFileInfo_8_1;
            }
        ],
        execute: function () {
            exports_120("f14EffectSystem", f14EffectSystem = /** @class */ (function (_super) {
                __extends(f14EffectSystem, _super);
                // tslint:disable-next-line: class-name
                function f14EffectSystem() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.className = "";
                    _this.Name = "";
                    _this.lifeTime = 0;
                    _this.beloop = false;
                    _this.layers = [];
                    return _this;
                }
                f14EffectSystem.classType = m4m["f14EffectSystem"] = f14EffectSystem;
                return f14EffectSystem;
            }(AssetBundleFileInfo_8.AssetBundleFileInfo)));
            layer = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function layer() {
                    this.Name = "";
                    this.type = "";
                    this.singlemeshdata = new Singlemeshdata();
                    this.frames = [];
                }
                layer.classType = m4m["layer"] = layer;
                return layer;
            }());
            Singlemeshdata = /** @class */ (function () {
                function Singlemeshdata() {
                    this.mesh = "";
                    this.material = "";
                    this.position = "";
                    this.scale = "";
                    this.euler = "";
                    this.color = "";
                    // tslint:disable-next-line: variable-name
                    this.tex_ST = "";
                    this.enableTexAnimation = false;
                    this.uvType = "";
                    this.uSpeed = 0;
                    this.vSpeed = 0;
                    this.row = 0;
                    this.column = 0;
                    this.count = 0;
                    this.beBillboard = false;
                    this.bindAxis = "";
                }
                Singlemeshdata.classType = m4m["Singlemeshdata"] = Singlemeshdata;
                return Singlemeshdata;
            }());
            frame = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function frame() {
                    this.frameindex = 0;
                    this.vec3Atts = [];
                    this.vec4Atts = [];
                    this.colorAtts = [];
                }
                frame.classType = m4m["frame"] = frame;
                return frame;
            }());
            att = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function att() {
                    this.name = "";
                    this.value = "";
                }
                att.classType = m4m["att"] = att;
                return att;
            }());
        }
    };
});
System.register("PSDUI/UiDataManager", ["Data/Map"], function (exports_121, context_121) {
    "use strict";
    var Map_18, UiDataManager, labelBinder, tran2DBinder, FunctionBinder;
    var __moduleName = context_121 && context_121.id;
    return {
        setters: [
            function (Map_18_1) {
                Map_18 = Map_18_1;
            }
        ],
        execute: function () {
            exports_121("UiDataManager", UiDataManager = /** @class */ (function () {
                function UiDataManager() {
                }
                /**清除所有Label绑定 */
                UiDataManager.clearAllBindLabels = function () {
                    this.uiLabelBinders.clear();
                };
                /**
                 * 清除指定绑定名下所有Label绑定
                 * @param bindName 绑定名
                 */
                UiDataManager.clearBindLabels = function (bindName) {
                    this.uiLabelBinders.delete(bindName);
                };
                /**
                 * 将已有的绑定信息加入Label绑定列表
                 * @param binder 绑定信息
                 */
                UiDataManager.addBindLabl = function (binder) {
                    if (!binder) {
                        return null;
                    }
                    var links = this.uiLabelBinders.get(binder.linkName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkLabel == binder.linkLabel) {
                                console.error(element.linkName + " 当前Label 已绑定 不需要重复绑定！方法 addBindLabl");
                                return null;
                            }
                        }
                        links.push(binder);
                    }
                    else {
                        var newLinks = [];
                        newLinks.push(binder);
                        this.uiLabelBinders.set(binder.linkName, newLinks);
                    }
                };
                /**
                 * 添加一个新的Label绑定
                 * @param bindName 绑定变量名
                 * @param bindlabel 绑定的label组件
                 * @param bindText 绑定的文字结构（文字中 {0} 作为标识，{0} 会替换为被绑定的数据，如果没有 {0} 则会将被绑定的数据添加到最后，如果不指定就全部替换为被绑定的数据）
                 * @returns 绑定信息
                 */
                UiDataManager.bindLabelData = function (bindName, bindlabel, bindText) {
                    if (bindText === void 0) { bindText = ""; }
                    if (!bindlabel) {
                        return null;
                    }
                    var links = this.uiLabelBinders.get(bindName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkLabel == bindlabel) {
                                console.error(bindName + " 当前Label 已绑定 不需要重复绑定！");
                                return null;
                            }
                        }
                    }
                    var linker = new labelBinder();
                    linker.linkName = bindName;
                    linker.linkLabel = bindlabel;
                    if (!bindText) {
                        linker.linkText = "{0}";
                    }
                    else if (bindText.indexOf("{0}") == -1) {
                        linker.linkText = bindText + "{0}";
                    }
                    else {
                        linker.linkText = bindText;
                    }
                    if (links) {
                        links.push(linker);
                    }
                    else {
                        var newLink = [];
                        newLink.push(linker);
                        this.uiLabelBinders.set(bindName, newLink);
                    }
                    return linker;
                };
                /**
                 * 修改Label信息
                 * @param bindName 绑定变量名
                 * @param text 传入信息
                 */
                UiDataManager.changeLabelData = function (bindName, text) {
                    var links = this.uiLabelBinders.get(bindName);
                    this.needUnBindLabelList.length = 0;
                    if (links && links.length > 0) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkLabel && element.linkLabel.transform && element.linkText) {
                                element.linkLabel.text = element.linkText.replace("{0}", text);
                                element.linkLabel.transform.markDirty();
                            }
                            else {
                                this.needUnBindLabelList.push(element);
                            }
                        }
                    }
                    for (var i = 0; i < this.needUnBindLabelList.length; i++) {
                        var element = this.needUnBindLabelList[i];
                        if (element) {
                            this.unBindLabelDataByBinder(element);
                        }
                    }
                    this.needUnBindLabelList.length = 0;
                };
                /**
                 * 清除一个Label绑定
                 * @param binder 绑定信息
                 */
                UiDataManager.unBindLabelDataByBinder = function (binder) {
                    if (!binder) {
                        console.error(binder + " 解绑 Label 出错！");
                        return;
                    }
                    var links = this.uiLabelBinders.get(binder.linkName);
                    if (links) {
                        var index = links.indexOf(binder);
                        if (index != -1) {
                            links.splice(index, 1);
                        }
                    }
                };
                /**
                 * 清除一个Label绑定
                 * @param bindName 绑定变量名
                 */
                UiDataManager.unBindLabelData = function (bindName, bindlabel) {
                    if (!bindlabel) {
                        console.error("解绑 Label 出错！");
                        return;
                    }
                    var links = this.uiLabelBinders.get(bindName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkLabel == bindlabel) {
                                links.splice(i, 1);
                                return;
                            }
                        }
                    }
                    console.error(bindName + " 当前需要解绑Label 未找到！");
                };
                /**清除所有Tran绑定 */
                UiDataManager.clearAllBindTrans = function () {
                    this.uiTranBinders.clear();
                };
                /**
                 * 清除指定绑定名下所有Tran绑定
                 * @param bindName 绑定名
                 */
                UiDataManager.clearBindTrans = function (bindName) {
                    this.uiTranBinders.delete(bindName);
                };
                /**
                 * 将已有的绑定信息加入Tran绑定列表
                 * @param binder 绑定信息
                 */
                UiDataManager.addBindTrans = function (binder) {
                    if (!binder) {
                        return null;
                    }
                    var links = this.uiTranBinders.get(binder.linkName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkTran == binder.linkTran) {
                                console.error(element.linkName + " 当前trans 已绑定 不需要重复绑定！方法 addBindTrans");
                                return null;
                            }
                        }
                        links.push(binder);
                    }
                    else {
                        var newLinks = [];
                        newLinks.push(binder);
                        this.uiTranBinders.set(binder.linkName, newLinks);
                    }
                };
                /**
                 * 添加一个新的Tran绑定
                 * @param bindName 绑定变量名
                 * @param bindTran 绑定的trans组件
                 * @returns 绑定信息
                 */
                UiDataManager.bindTransData = function (bindName, bindTran) {
                    if (!bindTran) {
                        return null;
                    }
                    var links = this.uiTranBinders.get(bindName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkTran == bindTran) {
                                console.error(bindName + " 当前trans 已绑定 不需要重复绑定！");
                                return null;
                            }
                        }
                    }
                    var linker = new tran2DBinder();
                    linker.linkName = bindName;
                    linker.linkTran = bindTran;
                    if (links) {
                        links.push(linker);
                    }
                    else {
                        var newLink = [];
                        newLink.push(linker);
                        this.uiTranBinders.set(bindName, newLink);
                    }
                    return linker;
                };
                /**
                 * 修改Tran信息
                 * @param bindName 绑定变量名
                 * @param isVisible 是否显示
                 */
                UiDataManager.changeTransData = function (bindName, isVisible) {
                    var links = this.uiTranBinders.get(bindName);
                    this.needUnBindTransList.length = 0;
                    if (links && links.length > 0) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element) {
                                element.linkTran.visible = isVisible;
                            }
                            else {
                                this.needUnBindTransList.push(element);
                            }
                        }
                    }
                    for (var i = 0; i < this.needUnBindTransList.length; i++) {
                        var element = this.needUnBindTransList[i];
                        if (element) {
                            this.unBindTransDataByBinder(element);
                        }
                    }
                    this.needUnBindTransList.length = 0;
                };
                /**
                 * 清除一个Tran绑定
                 * @param binder 绑定信息
                 */
                UiDataManager.unBindTransDataByBinder = function (binder) {
                    if (!binder) {
                        console.error(binder + " 解绑 Trans 出错！");
                        return;
                    }
                    var links = this.uiTranBinders.get(binder.linkName);
                    if (links) {
                        var index = links.indexOf(binder);
                        if (index != -1) {
                            links.splice(index, 1);
                        }
                    }
                };
                /**
                 * 清除一个Trans绑定
                 * @param bindName 绑定变量名
                 */
                UiDataManager.unBindTransData = function (bindName, bindTran) {
                    if (!bindTran) {
                        console.error("解绑 Trans 出错！");
                        return;
                    }
                    var links = this.uiTranBinders.get(bindName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkTran == bindTran) {
                                links.splice(i, 1);
                                return;
                            }
                        }
                    }
                    console.error(bindName + " 当前需要解绑Trans 未找到！");
                };
                /**清除所有Function绑定 */
                UiDataManager.clearAllBindFunction = function () {
                    this.functionBinders.clear();
                };
                /**
                 * 清除指定绑定名下所有Function绑定
                 * @param bindName 绑定名
                 */
                UiDataManager.clearBindFunction = function (bindName) {
                    this.functionBinders.delete(bindName);
                };
                /**
                 * 将已有的绑定信息加入Function绑定列表
                 * @param binder 绑定信息
                 */
                UiDataManager.addBindFunction = function (binder) {
                    if (!binder) {
                        return null;
                    }
                    var links = this.functionBinders.get(binder.linkName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkFun == binder.linkFun) {
                                console.error(element.linkName + " 当前Function 已绑定 不需要重复绑定！方法 addBindFunction");
                                return null;
                            }
                        }
                        links.push(binder);
                    }
                    else {
                        var newLinks = [];
                        newLinks.push(binder);
                        this.functionBinders.set(binder.linkName, newLinks);
                    }
                };
                /**
                 * 添加一个新的Function绑定
                 * @param bindName 绑定变量名
                 * @param fun function
                 * @returns 绑定信息
                 */
                UiDataManager.bindFunctionData = function (bindName, fun) {
                    if (!fun) {
                        return null;
                    }
                    var links = this.functionBinders.get(bindName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkFun == fun) {
                                console.error(bindName + " 当前Function 已绑定 不需要重复绑定！");
                                return null;
                            }
                        }
                    }
                    var linker = new FunctionBinder();
                    linker.linkName = bindName;
                    linker.linkFun = fun;
                    if (links) {
                        links.push(linker);
                    }
                    else {
                        var newLink = [];
                        newLink.push(linker);
                        this.functionBinders.set(bindName, newLink);
                    }
                    return linker;
                };
                /**
                 * 修改Function信息
                 * @param bindName 绑定变量名
                 * @param data
                 */
                UiDataManager.changeFunctionData = function (bindName, data) {
                    var links = this.functionBinders.get(bindName);
                    this.needUnBindFunctionList.length = 0;
                    if (links && links.length > 0) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkFun) {
                                element.linkFun(data);
                            }
                            else {
                                this.needUnBindFunctionList.push(element);
                            }
                        }
                    }
                    for (var i = 0; i < this.needUnBindFunctionList.length; i++) {
                        var element = this.needUnBindFunctionList[i];
                        if (element) {
                            this.unBindFunctionDataByBinder(element);
                        }
                    }
                    this.needUnBindFunctionList.length = 0;
                };
                /**
                 * 清除一个Function绑定
                 * @param binder 绑定信息
                 */
                UiDataManager.unBindFunctionDataByBinder = function (binder) {
                    if (!binder) {
                        console.error(binder + " 解绑 function 出错！");
                        return;
                    }
                    var links = this.functionBinders.get(binder.linkName);
                    if (links) {
                        var index = links.indexOf(binder);
                        if (index != -1) {
                            links.splice(index, 1);
                        }
                    }
                };
                /**
                 * 清除一个Function绑定
                 * @param bindName 绑定变量名
                 */
                UiDataManager.unBindFunctionData = function (bindName, fun) {
                    if (!fun) {
                        console.error("解绑 function 出错！");
                        return;
                    }
                    var links = this.functionBinders.get(bindName);
                    if (links) {
                        for (var i = 0; i < links.length; i++) {
                            var element = links[i];
                            if (element && element.linkFun == fun) {
                                console.log(links.length);
                                links.splice(i, 1);
                                console.log("解绑 function 成功！" + links.length);
                                return;
                            }
                        }
                    }
                    console.error(bindName + " 当前需要解绑Function 未找到！");
                };
                UiDataManager.uiLabelBinders = new Map_18.cMap();
                UiDataManager.needUnBindLabelList = [];
                UiDataManager.uiTranBinders = new Map_18.cMap();
                UiDataManager.needUnBindTransList = [];
                UiDataManager.functionBinders = new Map_18.cMap();
                UiDataManager.needUnBindFunctionList = [];
                return UiDataManager;
            }()));
            // tslint:disable-next-line: class-name
            labelBinder = /** @class */ (function () {
                function labelBinder() {
                    this.linkName = "";
                    this.linkText = "";
                }
                return labelBinder;
            }());
            exports_121("labelBinder", labelBinder);
            // tslint:disable-next-line: class-name
            tran2DBinder = /** @class */ (function () {
                function tran2DBinder() {
                    this.linkName = "";
                }
                return tran2DBinder;
            }());
            exports_121("tran2DBinder", tran2DBinder);
            FunctionBinder = /** @class */ (function () {
                function FunctionBinder() {
                    this.linkName = "";
                }
                return FunctionBinder;
            }());
            exports_121("FunctionBinder", FunctionBinder);
        }
    };
});
System.register("PSDUI/newLoadTools", [], function (exports_122, context_122) {
    "use strict";
    var newLoadTools;
    var __moduleName = context_122 && context_122.id;
    return {
        setters: [],
        execute: function () {
            exports_122("newLoadTools", newLoadTools = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function newLoadTools() {
                }
                /**
                 *
                 * @param url 加载路径
                 * @param fun 加载结果回调函数
                 * @param onprocess 加载进度
                 * @param loadedFun 正常加载完成后回调
                 */
                newLoadTools.xhrLoad = function (url, fun, onprocess, responseType, loadedFun) {
                    var _this = this;
                    if (onprocess === void 0) { onprocess = null; }
                    var req = new XMLHttpRequest();
                    var isLoaded = false;
                    req.open("GET", url);
                    req.responseType = responseType;
                    req.onreadystatechange = function () {
                        if (req.readyState == 4) {
                            if (req.status == 200) {
                                if (_this.urlCaseDic[url]) {
                                    delete _this.urlCaseDic[url];
                                }
                                isLoaded = true;
                                loadedFun(req);
                                // if (fun)
                                //     fun(req, null, false);
                            }
                            else {
                                switch (req.status) {
                                    case 404:
                                        if (fun) {
                                            fun(null, new Error("got a 404:" + url));
                                        }
                                        console.error("got a 404:" + url);
                                        _this.urlCaseDic[url] = _this.retryCount;
                                        break;
                                    default: var temp = void 0;
                                }
                            }
                        }
                    };
                    req.onprogress = function (ev) {
                        if (onprocess) {
                            onprocess(ev.loaded, ev.total);
                        }
                    };
                    req.onerror = function (ev) {
                        if (fun) {
                            fun(null, new Error("URL : ".concat(url, " \n onerr on req: ")), true);
                        }
                    };
                    req.onloadend = function () {
                        //console.error(" is onload");
                        if (!isLoaded) {
                            // this.loadFail(req, url, fun, onprocess, responseType, loadedFun);
                            if (fun) {
                                fun(null, new Error("URL : ".concat(url, " \n onerr on req: ")), true);
                            }
                        }
                    };
                    // try
                    // {
                    req.send();
                    // } catch (err)
                    // {
                    //     fun(null, err);
                    // }
                };
                // static loadFail(xhr: XMLHttpRequest, url, fun, onprocess, responseType, loadedFun) {
                //     console.error(`下载失败: ${url}  status:${xhr.status}, ${this.retryTime}/ms 后重试  testtesttesttesttest`);
                //     this.urlCaseDic[url] = this.urlCaseDic[url] || 0;
                //     if (this.urlCaseDic[url] >= this.retryCount) {
                //         this.urlCaseDic[url] = 0;
                //         if (fun)
                //             fun(null, new Error("load this url fail  ：" + url), true);  //throw error after retry some times
                //         console.error(`------ load this url fail URL:${url}  `);
                //     } else {
                //         setTimeout(() => {
                //             this.urlCaseDic[url]++;
                //             this.xhrLoad(url, fun, onprocess, responseType, loadedFun);
                //         }, this.retryTime);
                //     }
                // }
                // /**
                //  * @public
                //  * @language zh_CN
                //  * @classdesc
                //  * 加载text资源
                //  * @param url 加载路径
                //  * @param fun 加载结果回调函数
                //  * @param onprocess 加载进度
                //  * @version m4m-m4m 1.0
                //  */
                // tslint:disable-next-line: max-line-length
                // static loadText(url: string, fun: (_txt: string, _err: Error, isloadFail?: boolean) => void, onprocess: (curLength: number, totalLength: number) => void = null): void {
                //     this.xhrLoad(url, fun, onprocess, "text", (req) => {
                //         fun(req.responseText, null);
                //     });
                // }
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 加载text资源
                 * @param url 加载路径
                 * @param fun 加载结果回调函数
                 * @param onprocess 加载进度
                 * @version m4m-m4m 1.0
                 */
                newLoadTools.loadJson = function (url, fun, onprocess) {
                    if (onprocess === void 0) { onprocess = null; }
                    this.xhrLoad(url, fun, onprocess, "json", function (req) {
                        fun(req.response, null);
                    });
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 加载arraybuffer资源
                 * @param url 加载路径
                 * @param fun 加载结果回调函数
                 * @param onprocess 加载进度
                 */
                newLoadTools.loadArrayBuffer = function (url, fun, onprocess) {
                    if (onprocess === void 0) { onprocess = null; }
                    //req.responseType = "arraybuffer";//ie 一定要在open之后修改responseType
                    this.xhrLoad(url, fun, onprocess, "arraybuffer", function (req) {
                        fun(req.response, null, false);
                    });
                };
                newLoadTools.urlCaseDic = {};
                newLoadTools.retryTime = 1000;
                newLoadTools.retryCount = 9999;
                return newLoadTools;
            }()));
        }
    };
});
System.register("PSDUI/newLoader", ["Data/Map", "Loader/otherPlan/testCreat", "Tools/miniGame", "PSDUI/newLoaderManager", "PSDUI/newLoadTools"], function (exports_123, context_123) {
    "use strict";
    var Map_19, testCreat_4, miniGame_8, newLoaderManager_1, newLoadTools_1, newLoader, CallBackData;
    var __moduleName = context_123 && context_123.id;
    return {
        setters: [
            function (Map_19_1) {
                Map_19 = Map_19_1;
            },
            function (testCreat_4_1) {
                testCreat_4 = testCreat_4_1;
            },
            function (miniGame_8_1) {
                miniGame_8 = miniGame_8_1;
            },
            function (newLoaderManager_1_1) {
                newLoaderManager_1 = newLoaderManager_1_1;
            },
            function (newLoadTools_1_1) {
                newLoadTools_1 = newLoadTools_1_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            newLoader = /** @class */ (function () {
                function newLoader() {
                    /// <summary>
                    /// 优先级,数值越高越优先
                    /// </summary>
                    this.priority = 0;
                    /// <summary>
                    /// 加载失败的重试次数
                    /// </summary>
                    /// <returns></returns>
                    this.timeoutCount = 3;
                    /// <summary>
                    /// 加载失败的重试次数
                    /// </summary>
                    /// <returns></returns>
                    this.timeout = 3;
                    /// <summary>
                    /// 资源的引用次数
                    /// </summary>
                    this.userCount = 0;
                    /// <summary>
                    /// 加载进度
                    /// </summary>
                    /// <returns></returns>
                    this.progress = 0;
                    ///已经加载的字节大小
                    this.bytesLoaded = 0;
                    //总需求加载大小
                    this.bytesTotal = 0;
                    this.timer = new Map_19.cMap();
                    //总需要加载的文件数量
                    this.fileCount = 0;
                    //当前已经加载文件数量
                    this.fileLoadedCount = 0;
                    this.loaderType = newLoaderManager_1.LoadType.ARRAYBUFFER;
                    this.loaderEvents = new Array();
                    this.removeList = new Array();
                }
                newLoader._loadJson = function (url, fun, onprocess) {
                    if (onprocess === void 0) { onprocess = null; }
                    if (miniGame_8.miniGame.miniType != miniGame_8.miniAPIType.none) {
                        var path = testCreat_4.testCreat.CDNURL + url;
                        miniGame_8.miniGame.request({
                            url: path,
                            success: function (res) {
                                fun(res.data, null, false);
                            },
                            fail: function () {
                                fun(null, null, true);
                            },
                        });
                    }
                    else {
                        newLoadTools_1.newLoadTools.xhrLoad(url, fun, onprocess, "json", function (req) {
                            fun(req.response, null);
                        });
                    }
                };
                //微信可复写
                newLoader._loadImg = function (url, cb) {
                    var img = new Image();
                    //webgl跨域渲染要这样玩 [crossOrigin = ""]否则服务器允许跨域也没用
                    img.crossOrigin = "";
                    img.src = url;
                    img.onload = function () {
                        if (cb) {
                            cb(img, null);
                        }
                    };
                    img.onerror = function (_err) {
                        console.error(_err);
                        if (cb) {
                            cb(img, _err);
                        }
                    };
                };
                newLoader.prototype.load = function () {
                    var _this = this;
                    if (this.bin && this.endFunction) {
                        this.endFunction(this, this.bin);
                        return this.bin;
                    }
                    this.timer.set(this.url, Date.now());
                    try {
                        switch (this.loaderType) {
                            case newLoaderManager_1.LoadType.ARRAYBUFFER:
                                return new Promise(function (resolve) {
                                    // console.error("开始加载       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                    newLoadTools_1.newLoadTools.loadArrayBuffer(_this.url, function (bin, urlStr, isLoadFail) {
                                        if (isLoadFail) {
                                            newLoaderManager_1.newLoaderManager.Instance.addFail(_this);
                                            // LoaderManage.Instance.addFail(this);
                                            // console.error("11111111111111111111111111111111");
                                            resolve(null);
                                        }
                                        else {
                                            // console.error("加载成功       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                                // if (BeginnerGuidManger.needGuid) {
                                                //     jsManager.noviceGuideFun(url, 1)
                                                // }
                                            }
                                            resolve(bin);
                                        }
                                    });
                                });
                            case newLoaderManager_1.LoadType.IMAGE:
                                return new Promise(function (resolve) {
                                    if (miniGame_8.miniGame.miniType != miniGame_8.miniAPIType.none) {
                                        m4m.framework.assetMgr.prototype["_loadImg"](_this.url, function (bin) {
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                            }
                                            resolve(bin);
                                        });
                                    }
                                    else {
                                        newLoader._loadImg(_this.url, function (bin) {
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                                // if (BeginnerGuidManger.needGuid) {
                                                //     jsManager.noviceGuideFun(url, 1)
                                                // }
                                            }
                                            resolve(bin);
                                        });
                                    }
                                });
                            case newLoaderManager_1.LoadType.JSON:
                                return new Promise(function (resolve) {
                                    // console.error("开始加载       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                    newLoader._loadJson(_this.url, function (bin, urlStr, isLoadFail) {
                                        if (isLoadFail) {
                                            newLoaderManager_1.newLoaderManager.Instance.addFail(_this);
                                            resolve(null);
                                        }
                                        else {
                                            // console.error("加载成功       " + this.url + "         " + (this.timer.get(this.url) - Date.now()) + "     ");
                                            if (bin) {
                                                bin["_url_"] = _this.url;
                                                _this.bin = bin;
                                                _this.endFunction(_this, bin);
                                            }
                                            resolve(bin);
                                        }
                                    });
                                });
                            default:
                        }
                    }
                    catch (er) {
                        console.error(this.url + " 报错 " + er);
                    }
                };
                newLoader.prototype.dispose = function () {
                    for (var i = 0; i < this.loaderEvents.length; i++) {
                        var data = this.loaderEvents[i];
                        data.dispose();
                        data = null;
                    }
                    this.loaderEvents.length = 0;
                    this.endFunction = null;
                    this._progressCallBack = null;
                };
                //设置加载进度回调
                newLoader.prototype.addProgressCallBack = function (value) {
                    this._progressCallBack = value;
                };
                newLoader.prototype.addCallBack = function (callBack, obj) {
                    var cb = new CallBackData();
                    cb.callback = callBack;
                    cb.data = obj;
                    this.loaderEvents.push(cb);
                };
                newLoader.prototype.removeCallBack = function (callBack) {
                    for (var i = 0; i < this.loaderEvents.length; i++) {
                        var cc = this.loaderEvents[i];
                        if (cc.callback == callBack) {
                            this.removeList.push(cc);
                        }
                    }
                    for (var k = 0; k < this.removeList.length; k++) {
                        var recallbackData = this.removeList[k];
                        var index = this.loaderEvents.indexOf(recallbackData);
                        if (index != -1) {
                            this.loaderEvents.splice(index, 1);
                        }
                    }
                    this.removeList.length = 0;
                };
                return newLoader;
            }());
            exports_123("newLoader", newLoader);
            CallBackData = /** @class */ (function () {
                function CallBackData() {
                }
                CallBackData.prototype.dispose = function () {
                    this.callback = null;
                    this.data = null;
                };
                return CallBackData;
            }());
        }
    };
});
System.register("PSDUI/newLoaderManager", ["PSDUI/newLoader", "Time/CTimer", "Data/Map"], function (exports_124, context_124) {
    "use strict";
    var newLoader_1, CTimer_3, Map_20, ResLoadType, LoadType, newLoaderManager;
    var __moduleName = context_124 && context_124.id;
    return {
        setters: [
            function (newLoader_1_1) {
                newLoader_1 = newLoader_1_1;
            },
            function (CTimer_3_1) {
                CTimer_3 = CTimer_3_1;
            },
            function (Map_20_1) {
                Map_20 = Map_20_1;
            }
        ],
        execute: function () {
            (function (ResLoadType) {
                ResLoadType[ResLoadType["NONE"] = 0] = "NONE";
                ResLoadType[ResLoadType["SCENE"] = 1] = "SCENE";
            })(ResLoadType || (ResLoadType = {}));
            exports_124("ResLoadType", ResLoadType);
            (function (LoadType) {
                LoadType[LoadType["ARRAYBUFFER"] = 0] = "ARRAYBUFFER";
                LoadType[LoadType["JSON"] = 1] = "JSON";
                LoadType[LoadType["IMAGE"] = 2] = "IMAGE";
            })(LoadType || (LoadType = {}));
            exports_124("LoadType", LoadType);
            exports_124("newLoaderManager", newLoaderManager = /** @class */ (function () {
                function newLoaderManager() {
                    // public loaders: Dictionary = new Dictionary();
                    this.loaders = new Map_20.cMap();
                    /// <summary>
                    /// 正在加载中的loader列表
                    /// </summary>
                    this.currentLoaders = new Array();
                    /// <summary>
                    /// 所有等待加载的Loader列表
                    /// </summary>
                    this.waitLoaders = new Array();
                    /// <summary>
                    /// 只要产生加载文件即生成一个id;
                    /// </summary>
                    this.index = 0;
                    this.loadFailBackList = new Array();
                    //每间隔 1200 毫秒取一次 加入重试load
                    var timeID = CTimer_3.CTimer.Instance.loopTimeUpdate(1200, this.failBackFun.bind(this));
                }
                Object.defineProperty(newLoaderManager, "Instance", {
                    get: function () {
                        if (this.instance == null) {
                            this.instance = new newLoaderManager();
                        }
                        return this.instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                newLoaderManager.prototype.load = function (url, onLoadFinished, data, loadType) {
                    if (data === void 0) { data = null; }
                    if (loadType === void 0) { loadType = LoadType.ARRAYBUFFER; }
                    var loader;
                    if (this.loaders.has(url)) {
                        loader = this.loaders.get(url);
                        if (loader && onLoadFinished) {
                            onLoadFinished(data);
                        }
                        else {
                            loader.addCallBack(onLoadFinished, data);
                        }
                    }
                    else {
                        loader = new newLoader_1.newLoader();
                        loader.loaderType = loadType;
                        this.loaders.set(url, loader);
                        loader.url = url;
                        loader.addCallBack(onLoadFinished, data);
                        // this.addLoader(loader);
                    }
                    return loader;
                };
                newLoaderManager.prototype.startLoader = function () {
                    if (this.waitLoaders.length == 0 || newLoaderManager.loaderCount <= this.currentLoaders.length) {
                        return;
                    }
                    var nextLoader = this.getNextLoader();
                    if (nextLoader != null) {
                        ///从等待加载的列表中移除,添加到当前加载列表中
                        var index = this.waitLoaders.indexOf(nextLoader);
                        if (index != -1) {
                            this.waitLoaders.splice(index, 1);
                        }
                        //Debug.LogError("加入加载列表中");
                        this.currentLoaders.push(nextLoader);
                        nextLoader.load();
                        ///判断下同时加载的数量是否达到默认设置的数量如果没有则继续开始新的加载
                        if (this.currentLoaders.length <= newLoaderManager.loaderCount) {
                            this.startLoader();
                        }
                    }
                };
                newLoaderManager.prototype.loaderEnd = function (loader) {
                    var index = this.currentLoaders.indexOf(loader);
                    if (index != -1) {
                        this.currentLoaders.splice(index, 1);
                    }
                    this.startLoader();
                };
                /// <summary>
                /// 添加loader
                /// </summary>
                /// <param name="loader"></param>
                newLoaderManager.prototype.addLoader = function (loader) {
                    this.index++;
                    loader.id = this.index;
                    loader.endFunction = this.loaderEnd.bind(this);
                    this.waitLoaders.push(loader);
                    this.startLoader();
                };
                /// <summary>
                /// 删除loader
                /// </summary>
                newLoaderManager.prototype.removeLoader = function (url) {
                    if (!this.loaders.has(url)) {
                        return;
                    }
                    var loader = this.loaders.get(url);
                    var index = this.waitLoaders.indexOf(loader);
                    if (index != -1) {
                        this.waitLoaders.splice(index, 1);
                    }
                    index = this.currentLoaders.indexOf(loader);
                    if (index != -1) {
                        this.currentLoaders.splice(index, 1);
                    }
                    this.loaders.delete(url);
                    loader.dispose();
                };
                //加入失败列表
                newLoaderManager.prototype.addFail = function (loader) {
                    var index = this.loadFailBackList.indexOf(loader);
                    console.error("重新加载     " + loader.url);
                    if (index == -1) {
                        this.loadFailBackList.push(loader);
                    }
                };
                /// <summary>
                /// 获取下一个需要加载的loader,根据需要加载的优先级进行排序
                /// </summary>
                newLoaderManager.prototype.getNextLoader = function () {
                    var loader = this.waitLoaders[0];
                    var temp;
                    for (var i = 0; i < this.waitLoaders.length; i++) {
                        temp = this.waitLoaders[i];
                        if (temp.priority > loader.priority) {
                            loader = temp;
                        }
                    }
                    return loader;
                };
                //失败重试
                newLoaderManager.prototype.failBackFun = function () {
                    if (this.loadFailBackList.length > 0) {
                        var loader = this.loadFailBackList.shift();
                        loader.load();
                        console.error(loader.url + "   下载失败  重新 下载loadArrayBuffer");
                    }
                    // for (let i: number = 0; i < this.loadFailBackList.length; i++) {
                    //     let loader: Loader = this.loadFailBackList[i];
                    //     setTimeout(() => {
                    //         let index = loader.url.lastIndexOf("&rand");
                    //         if (index != -1)
                    //             loader.url = loader.url.substring(0, index);
                    //         loader.url += "&randT=" + Date.now();
                    //         loader.load();
                    //         console.error(loader.url + "   下载失败  重新 下载loadArrayBuffer");
                    //     }, i * 200);
                    // }
                    // this.loadFailBackList.length = 0;
                };
                //-------------------项目配置----------------------------
                // /** 项目当前 小游戏平台 */
                // public static miniType: miniAPIType;
                // /** 项目当前CDN url */
                // public static CDNURL: string;
                // /** 小游戏  */
                // public static miniRequestFun: (opt) => any;
                //-----------------------------------------------------
                newLoaderManager.loaderCount = 10;
                return newLoaderManager;
            }()));
        }
    };
});
System.register("PSDUI/combinNewLoader", ["PSDUI/newLoaderManager"], function (exports_125, context_125) {
    "use strict";
    var newLoaderManager_2, LoadType, combinNewLoader;
    var __moduleName = context_125 && context_125.id;
    return {
        setters: [
            function (newLoaderManager_2_1) {
                newLoaderManager_2 = newLoaderManager_2_1;
            }
        ],
        execute: function () {
            (function (LoadType) {
                LoadType[LoadType["ARRAYBUFFER"] = 0] = "ARRAYBUFFER";
                LoadType[LoadType["JSON"] = 1] = "JSON";
                LoadType[LoadType["IMAGE"] = 2] = "IMAGE";
            })(LoadType || (LoadType = {}));
            // tslint:disable-next-line: class-name
            combinNewLoader = /** @class */ (function () {
                function combinNewLoader() {
                    //总需要加载的文件数量
                    this.fileCount = 0;
                    //当前已经加载文件数量
                    this.fileLoadedCount = 0;
                    //加载文件完成的进度
                    this.sucessProgress = 0;
                    //总进度
                    this.progress = 0;
                    this.list = new Array();
                    this.loadedFile = [];
                }
                combinNewLoader.prototype.add = function (url, callback, type) {
                    if (type === void 0) { type = LoadType.ARRAYBUFFER; }
                    var loader = newLoaderManager_2.newLoaderManager.Instance.load(url, callback, url, type);
                    this.list.push(loader);
                    this.fileCount++;
                    return;
                };
                combinNewLoader.prototype.loaderEnd = function (loader, file) {
                    if (file) {
                        this.fileLoadedCount++;
                        this.sucessProgress = this.fileLoadedCount / this.fileCount;
                        this.loadedFile.push(file);
                        if (this.loadCallBack && this.fileLoadedCount >= this.fileCount) {
                            this.loadCallBack(this.loadedFile);
                            this.list.length = 0;
                        }
                    }
                };
                combinNewLoader.prototype.start = function (callback) {
                    if (callback === void 0) { callback = null; }
                    this.loadCallBack = callback;
                    // this.list.forEach((loader) => {
                    //     loader.endFunction = this.loaderEnd.bind(this);
                    //     loader.load();
                    //     this.progressCallback = this.LoadProgress.bind(this);
                    //     loader.addProgressCallBack(this.progressCallback)
                    // })
                    if (this.fileCount <= 0) {
                        callback(null);
                        return;
                    }
                    for (var i = 0; i < this.list.length; i++) {
                        var loader = this.list[i];
                        loader.endFunction = this.loaderEnd.bind(this);
                        loader.load();
                        this.progressCallback = this.LoadProgress.bind(this);
                        loader.addProgressCallBack(this.progressCallback);
                    }
                };
                combinNewLoader.prototype.LoadProgress = function (progress, fileLoadedCount, fileCount, bytesLoaded, bytesTotal) {
                    //总进度
                    this.progress = bytesLoaded / bytesTotal / this.fileCount + this.sucessProgress;
                };
                return combinNewLoader;
            }());
            exports_125("combinNewLoader", combinNewLoader);
        }
    };
});
System.register("PSDUI/newUiBase", ["PSDUI/UiDataManager", "PSDUI/UiManager"], function (exports_126, context_126) {
    "use strict";
    var UiDataManager_1, UiManager_1, newUiBase;
    var __moduleName = context_126 && context_126.id;
    return {
        setters: [
            function (UiDataManager_1_1) {
                UiDataManager_1 = UiDataManager_1_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            }
        ],
        execute: function () {
            exports_126("newUiBase", newUiBase = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function newUiBase() {
                    this.uiName = "";
                    this.isShow = false;
                    this.isInited = false;
                    this.linkList = [];
                    this.tranLinkList = [];
                    /**其他面板show 时 不隐藏 */
                    this.notHideOnOtherShow = false;
                    /**打开时不影响其他uiPage */
                    this.noAffected = false;
                    this.uiLayer = UiManager_1.uiLayerType.baselayer;
                    /**当前UI是否会被记录 (用于返回上一步打开) */
                    this.isLogUi = false;
                    /** 当前UI是否会影响场景玩家操作 */
                    this.influenceSceneAction = true;
                }
                newUiBase.prototype.onInit = function () { };
                newUiBase.prototype.show = function () {
                    this.outLayer();
                    // console.error("显示 UI " + this.uiName);
                    // if (layer != null) {
                    //     this.uiLayer = layer;
                    // }
                    // if (notHideOnOtherShow != null) {
                    //     this.notHideOnOtherShow = notHideOnOtherShow;
                    // }
                    if (!this.isInited) {
                        this.init();
                    }
                    if (this.uiLayer == 3) {
                        this.notHideOnOtherShow = true;
                    }
                    this.isShow = true;
                    var layTran = this.getParent();
                    this.pushToLayer();
                    if (this.transform.parent) {
                        this.transform.parent.removeChild(this.transform);
                    }
                    layTran.addChild(this.transform);
                    this.transform.visible = true;
                    if (this.onShow) {
                        this.onShow();
                    }
                    this.bind();
                    if (this.noAffected) {
                        //特殊界面不影响 其他 uiPage
                    }
                    else {
                        newUiBase.hideLayerAll(this);
                    }
                    //当前UI是否会影响场景玩家操作
                    if (this.influenceSceneAction) {
                        var index = newUiBase.signArr.indexOf(this.uiName);
                        if (index == -1) {
                            newUiBase.signArr.push(this.uiName);
                        }
                    }
                };
                newUiBase.prototype.hide = function () {
                    if (!this.isInited || !this.transform.visible) {
                        return;
                    }
                    this.isShow = false;
                    console.error("隐藏 UI " + this.uiName);
                    // this.uiLayer = uiLayerType.baselayer;
                    // this.notHideOnOtherShow = false;
                    if (this.onHide) {
                        this.onHide();
                    }
                    this.unbind();
                    this.outLayer();
                    this.transform.visible = false;
                    if (this.transform.parent) {
                        // console.error("移除显示 " + this.uiName);
                        this.transform.parent.removeChild(this.transform);
                    }
                    //当前UI是否会影响场景玩家操作
                    if (this.influenceSceneAction) {
                        var index = newUiBase.signArr.indexOf(this.uiName);
                        if (index != -1) {
                            newUiBase.signArr.splice(index, 1);
                        }
                    }
                    //大部分UI隐藏就释放资源 如果有常用的UI 添加到列表中不做hide释放处理
                    UiManager_1.UiManager.OnHideDisposeUi(this.uiName);
                };
                newUiBase.prototype.openLastUI = function () {
                    return UiManager_1.UiManager.openLastUI(this.uiName);
                };
                newUiBase.prototype.getLastUI = function () {
                    return UiManager_1.UiManager.openLastUI(this.uiName, false);
                };
                newUiBase.prototype.dispose = function () {
                    console.error("dispose UI " + this.uiName);
                    this.isShow = false;
                    // this.uiLayer = uiLayerType.baselayer;
                    // this.notHideOnOtherShow = false;
                    if (this.onDispose) {
                        this.onDispose();
                        // this.onDispose = null;
                    }
                    // if (this.onHide) {
                    //     this.onHide = null;
                    // }
                    // if (this.onShow) {
                    //     this.onShow = null;
                    // }
                    this.outLayer();
                    this.transform.visible = false;
                    if (this.transform.parent) {
                        this.transform.parent.removeChild(this.transform);
                    }
                    var index = newUiBase.pages.indexOf(this);
                    if (index != -1) {
                        newUiBase.pages.splice(index, 1);
                    }
                    this.unbind();
                    for (var i = 0; i < this.linkList.length; i = 0) {
                        // this.linkList[i] = null;
                        this.linkList.pop();
                    }
                    // this.linkList.pop
                    this.linkList.length = 0;
                    for (var i = 0; i < this.tranLinkList.length; i = 0) {
                        // this.linkList[i] = null;
                        this.tranLinkList.pop();
                    }
                    // this.tranLinkList.pop
                    this.tranLinkList.length = 0;
                    this.transform.dispose();
                };
                newUiBase.prototype.init = function () {
                    newUiBase.pages.push(this);
                    // let layTran = this.getParent();
                    // layTran.addChild(this.transform);
                    this.isInited = true;
                };
                newUiBase.hideLayerAll = function (without) {
                    var _this = this;
                    var layerTran = newUiBase.baselayerPages;
                    switch (without.uiLayer) {
                        case -1:
                            layerTran = newUiBase.downlayerPages;
                            break;
                        // case 0: layerTran = newUiBase.baselayerPages; break;
                        case 1:
                            layerTran = newUiBase.midlayerPages;
                            break;
                        case 2:
                            layerTran = newUiBase.highlayerPages;
                            break;
                        case 3:
                            layerTran = newUiBase.poplayerPages;
                            break;
                        default:
                    }
                    this.needHidePageList.length = 0;
                    layerTran.forEach(function (page) {
                        if (page != without && !page.notHideOnOtherShow) {
                            _this.needHidePageList.push(page);
                        }
                    });
                    this.needHidePageList.forEach(function (page) {
                        if (page) {
                            page.hide();
                        }
                    });
                    this.needHidePageList.length = 0;
                };
                newUiBase.prototype.getParent = function () {
                    var layTran = UiManager_1.UiManager.baselayer;
                    switch (this.uiLayer) {
                        case -1:
                            layTran = UiManager_1.UiManager.downlayer;
                            break;
                        // case 0: layTran = UiManager.baselayer; break;
                        case 1:
                            layTran = UiManager_1.UiManager.midlayer;
                            break;
                        case 2:
                            layTran = UiManager_1.UiManager.highlayer;
                            break;
                        case 3:
                            layTran = UiManager_1.UiManager.poplayer;
                            break;
                        default:
                    }
                    return layTran;
                };
                newUiBase.prototype.pushToLayer = function () {
                    switch (this.uiLayer) {
                        case -1:
                            newUiBase.downlayerPages.push(this);
                            break;
                        case 0:
                            newUiBase.baselayerPages.push(this);
                            break;
                        case 1:
                            newUiBase.midlayerPages.push(this);
                            break;
                        case 2:
                            newUiBase.highlayerPages.push(this);
                            break;
                        case 3:
                            newUiBase.poplayerPages.push(this);
                            break;
                        default:
                    }
                };
                newUiBase.prototype.outLayer = function () {
                    var layerTran = newUiBase.baselayerPages;
                    switch (this.uiLayer) {
                        case -1:
                            layerTran = newUiBase.downlayerPages;
                            break;
                        // case 0: layerTran = newUiBase.baselayerPages; break;
                        case 1:
                            layerTran = newUiBase.midlayerPages;
                            break;
                        case 2:
                            layerTran = newUiBase.highlayerPages;
                            break;
                        case 3:
                            layerTran = newUiBase.poplayerPages;
                            break;
                        default:
                    }
                    var index = layerTran.indexOf(this);
                    if (index != -1) {
                        layerTran.splice(index, 1);
                    }
                };
                newUiBase.prototype.unbind = function () {
                    for (var i = 0; i < this.linkList.length; i++) {
                        var linker = this.linkList[i];
                        UiDataManager_1.UiDataManager.unBindLabelDataByBinder(linker);
                    }
                    for (var i = 0; i < this.tranLinkList.length; i++) {
                        var linker = this.tranLinkList[i];
                        UiDataManager_1.UiDataManager.unBindTransDataByBinder(linker);
                    }
                };
                newUiBase.prototype.bind = function () {
                    for (var i = 0; i < this.linkList.length; i++) {
                        var linker = this.linkList[i];
                        UiDataManager_1.UiDataManager.addBindLabl(linker);
                    }
                    for (var i = 0; i < this.tranLinkList.length; i++) {
                        var linker = this.tranLinkList[i];
                        UiDataManager_1.UiDataManager.addBindTrans(linker);
                    }
                };
                //标记数组 
                newUiBase.signArr = [];
                // tslint:disable-next-line: member-ordering
                newUiBase.pages = [];
                // tslint:disable-next-line: member-ordering
                newUiBase.downlayerPages = [];
                // tslint:disable-next-line: member-ordering
                newUiBase.baselayerPages = [];
                // tslint:disable-next-line: member-ordering
                newUiBase.midlayerPages = [];
                // tslint:disable-next-line: member-ordering
                newUiBase.highlayerPages = [];
                // tslint:disable-next-line: member-ordering
                newUiBase.poplayerPages = [];
                //需要隐藏 面板临时数组
                newUiBase.needHidePageList = [];
                return newUiBase;
            }()));
        }
    };
});
System.register("Tools/consTool", [], function (exports_127, context_127) {
    "use strict";
    var consTool;
    var __moduleName = context_127 && context_127.id;
    return {
        setters: [],
        execute: function () {
            /** system 编译模式 ， 类对象扫描 收集工具 */
            // tslint:disable-next-line: class-name
            consTool = /** @class */ (function () {
                function consTool() {
                }
                consTool.init = function () {
                    m4m["__consTool"] = consTool;
                    //this.scanAllUsercode();
                    this.scan_new();
                };
                /** 标准 systemJs 使用 */
                consTool.scanAllUsercode = function () {
                    var symbolkey = Reflect.ownKeys(window["System"].registry)[1]; //固定位置
                    var missObj = window["System"].registry[symbolkey];
                    for (var key in missObj) {
                        if (typeof (key) == "string") {
                            var test = /__usercode__/.test(key);
                            if (test) {
                                var arr = key.split("/");
                                var endStr = arr[arr.length - 1];
                                var temp = missObj[key][endStr];
                                if (temp) {
                                    m4m["__consTool"][temp.name] = temp;
                                }
                            }
                        }
                    }
                };
                /** 小青 版systemJs 使用 */
                consTool.scan_new = function () {
                    var cached = "____CACHEDMAP____";
                    var tag = "__consTool";
                    if (!m4m[tag][cached]) {
                        m4m[tag][cached] = {};
                    }
                    var missObj = window["System"].models;
                    for (var key in missObj) {
                        if (m4m[tag][cached][key]) {
                            continue;
                        } //优化 性能
                        for (var k in missObj[key]) {
                            if (k.indexOf("____") != -1) {
                                continue;
                            } //排除 ____imports____ ....
                            var classObj = missObj[key][k];
                            if (classObj) {
                                m4m[tag][k] = classObj;
                                m4m[tag][cached][key] = true;
                            }
                        }
                    }
                };
                return consTool;
            }());
            exports_127("consTool", consTool);
        }
    };
});
System.register("PSDUI/UiManager", ["Data/Map", "PSDUI/newLoaderManager", "PSDUI/combinNewLoader", "UIBase/metaUIManager", "PSDUI/newUiBase", "Loader/LoaderLibManager", "Loader/loadMgr", "Tools/consTool", "Tools/miniGame"], function (exports_128, context_128) {
    "use strict";
    var Map_21, newLoaderManager_3, combinNewLoader_1, metaUIManager_3, newUiBase_1, LoaderLibManager_2, loadMgr_2, consTool_1, miniGame_9, UiManagerEventer, UiManager, uiLayerType;
    var __moduleName = context_128 && context_128.id;
    return {
        setters: [
            function (Map_21_1) {
                Map_21 = Map_21_1;
            },
            function (newLoaderManager_3_1) {
                newLoaderManager_3 = newLoaderManager_3_1;
            },
            function (combinNewLoader_1_1) {
                combinNewLoader_1 = combinNewLoader_1_1;
            },
            function (metaUIManager_3_1) {
                metaUIManager_3 = metaUIManager_3_1;
            },
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            },
            function (LoaderLibManager_2_1) {
                LoaderLibManager_2 = LoaderLibManager_2_1;
            },
            function (loadMgr_2_1) {
                loadMgr_2 = loadMgr_2_1;
            },
            function (consTool_1_1) {
                consTool_1 = consTool_1_1;
            },
            function (miniGame_9_1) {
                miniGame_9 = miniGame_9_1;
            }
        ],
        execute: function () {
            UiManagerEventer = /** @class */ (function (_super) {
                __extends(UiManagerEventer, _super);
                function UiManagerEventer() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return UiManagerEventer;
            }(m4m.AEvent));
            exports_128("UiManager", UiManager = /** @class */ (function (_super) {
                __extends(UiManager, _super);
                /**
                 * UI 管理类 （type2）
                 */
                function UiManager() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(UiManager, "eventer", {
                    /** uiManager 事件 控制对象 */
                    get: function () { return this._eventer; },
                    enumerable: false,
                    configurable: true
                });
                // private static instance: UiManager;
                // public static get Instance(): UiManager {
                //     if (this.instance == null) {
                //         this.instance = new UiManager();
                //     }
                //     return this.instance;
                // }
                UiManager.hideLayerAll = function (layer) {
                    var layerTran = newUiBase_1.newUiBase.baselayerPages;
                    switch (layer) {
                        case -1:
                            layerTran = newUiBase_1.newUiBase.downlayerPages;
                            break;
                        case 1:
                            layerTran = newUiBase_1.newUiBase.midlayerPages;
                            break;
                        case 2:
                            layerTran = newUiBase_1.newUiBase.highlayerPages;
                            break;
                        case 3:
                            layerTran = newUiBase_1.newUiBase.poplayerPages;
                            break;
                        default: var temp = void 0;
                    }
                    layerTran.forEach(function (page) {
                        page.hide();
                    });
                };
                UiManager.hideAllUi = function (without) {
                    if (without === void 0) { without = null; }
                    newUiBase_1.newUiBase.pages.forEach(function (page) {
                        if (!without || page.uiName != without) {
                            page.hide();
                        }
                    });
                };
                //用于测试时调用 项目游戏逻辑一般不会用到
                UiManager.getUiRootTest = function () {
                    return UiManager.uiRoot;
                };
                UiManager.logUi = function (UIName) {
                    if (this.uiLogList.length >= this.logLimit) {
                        this.uiLogList.shift();
                    }
                    this.logUiNow = true;
                    this.uiLogList.push(UIName);
                };
                UiManager.openLastUI = function (uiName, isOpenUI) {
                    if (isOpenUI === void 0) { isOpenUI = true; }
                    // if (this.uiLogList.length <= 0) {
                    //     return;
                    // }
                    // if (this.logUiNow && this.uiLogList.length <= 1) {
                    //     return;
                    // }
                    // let lastUiName = this.uiLogList.pop();
                    // if (this.logUiNow) {
                    //     lastUiName = this.uiLogList.pop();
                    // }
                    // this.showUi(lastUiName);
                    if (this.uiLogList.length <= 0) {
                        return null;
                    }
                    if (uiName == this.uiLogList[0]) {
                        return null;
                    }
                    var tempList = this.uiLogList.concat();
                    var lastUiName = tempList.pop();
                    if (lastUiName == uiName) {
                        lastUiName = tempList.pop();
                    }
                    if (isOpenUI) {
                        this.uiLogList = tempList;
                        this.showUi(lastUiName);
                    }
                    return lastUiName;
                };
                /**
                 * 获取UI当前 初始化 状态
                 * @param uiClassName UI名字
                 * @returns UI当前是否已经初始化
                 */
                UiManager.isUiInited = function (uiClassName) {
                    var className = uiClassName;
                    var ui = this.uiMap.get(className);
                    if (ui) {
                        return ui.isInited;
                    }
                    return false;
                };
                /**
                 * 获取UI当前显示状态
                 * @param uiClassName UI名字
                 * @returns UI当前是否显示
                 */
                UiManager.isUiShow = function (uiClassName) {
                    var className = uiClassName;
                    var ui = this.uiMap.get(className);
                    if (ui) {
                        return ui.isShow;
                    }
                    return false;
                };
                /**
                 * 加载UI
                 * @param uiClassName UI名字
                 * @param coverLayer 覆盖 UI 放置到的层级设定
                 * @param notHideOnOtherShow 其他UI打开时，自己不会被隐藏
                 * @param oninit 初始化方法
                 */
                UiManager.InitUi = function (uiClassName, oninit) {
                    if (oninit === void 0) { oninit = null; }
                    var className = uiClassName;
                    var ui = this.uiMap.get(className);
                    if (!ui) {
                        this.getUi(uiClassName, false, function () { }, oninit);
                        return;
                    }
                };
                /**
                 * 显示UI
                 * @param uiClassName UI名字
                 * @param coverLayer 覆盖 UI 放置到的层级设定
                 * @param notHideOnOtherShow 其他UI打开时，自己不会被隐藏
                 * @param oninit 初始化方法
                 */
                UiManager.showUi = function (uiClassName, oninit, needCallBack) {
                    if (oninit === void 0) { oninit = null; }
                    if (needCallBack === void 0) { needCallBack = true; }
                    var className = uiClassName;
                    this.logUiNow = false;
                    var ui = this.uiMap.get(className);
                    if (!ui) {
                        if (this.startLoadCallBack && needCallBack) {
                            this.startLoadCallBack(uiClassName);
                        }
                        this.getUi(uiClassName, true, function () { }, oninit);
                        return;
                    }
                    if (ui.isLogUi) {
                        this.logUi(uiClassName);
                    }
                    ui.show();
                };
                /**
                 * 隐藏UI
                 * @param uiClassName UI名字
                 */
                UiManager.hideUi = function (uiClassName) {
                    var ui = this.uiMap.get(uiClassName);
                    if (!ui) {
                        console.error("当前需要隐藏的UI未找到 " + uiClassName);
                        return;
                    }
                    ui.hide();
                };
                /**
                * 销毁UI
                * @param uiClassName UI类名字
                */
                UiManager.disposeUi = function (uiClassName) {
                    var ui = this.uiMap.get(uiClassName);
                    if (!ui) {
                        console.error("当前需要销毁的UI未找到 " + uiClassName);
                        return;
                    }
                    this.uiMap.delete(uiClassName);
                    if (this.nowLoadingMap.get(uiClassName)) {
                        this.nowLoadingMap.delete(uiClassName);
                    }
                    ui.dispose();
                };
                /**
                * 隐藏时 销毁UI 通用 直接在UI hide时会被调用
                * @param uiClassName UI类名字
                */
                UiManager.OnHideDisposeUi = function (uiClassName) {
                    //大部分UI隐藏就释放资源 如果有常用的UI 添加到列表中不做hide释放处理
                    if (this.dontDisposeUIList.indexOf(uiClassName) == -1) {
                        UiManager.disposeUi(uiClassName);
                    }
                };
                /**
                 * 获取UI对象
                 * @param uiClass UI类 对象
                 * @param isShowUi 是否显示UI
                 * @param callBack 获取UI后回调
                 * @param oninit 初始化方法
                 * @param coverLayer 覆盖 UI 放置到的层级设定
                 * @param notHideOnOtherShow 其他UI打开时，自己不会被隐藏
                 */
                UiManager.getUi = function (uiClassName, isShowUi, callBack, oninit) {
                    var _this = this;
                    if (isShowUi === void 0) { isShowUi = false; }
                    var className = uiClassName;
                    this.nowLoadingMap.set(className, true);
                    var ui = this.uiMap.get(className);
                    if (ui) {
                        if (ui.isLogUi && isShowUi) {
                            this.logUi(uiClassName);
                        }
                        if (callBack) {
                            callBack(ui);
                        }
                        if (isShowUi) {
                            ui.show();
                        }
                        return;
                    }
                    var uiClass = consTool_1.consTool[uiClassName + this.viewName]; //***************暂时处理 用 潜规则写法 
                    var classObj;
                    if (uiClass) {
                        classObj = new uiClass();
                        this.setCreatUi(classObj, callBack, className, uiClass, oninit, isShowUi);
                    }
                    else {
                        //加载 分包
                        var libSrc_1 = miniGame_9.miniGame.miniType == miniGame_9.miniAPIType.none ? "lib/node_modules/@types/".concat(uiClassName, ".js") : uiClassName;
                        var loadFun = miniGame_9.miniGame.miniType == miniGame_9.miniAPIType.none ? LoaderLibManager_2.LoaderLibManager.Instance.addLib : LoaderLibManager_2.LoaderLibManager.Instance.addSubpackage;
                        loadFun = loadFun.bind(LoaderLibManager_2.LoaderLibManager.Instance);
                        loadFun(libSrc_1, function (isSucc) {
                            if (!isSucc) {
                                console.error("找不到这个UI资源", libSrc_1);
                                return;
                            }
                            System.init();
                            consTool_1.consTool.init();
                            uiClass = consTool_1.consTool[uiClassName + _this.viewName]; //***************暂时处理 用 潜规则写法
                            if (uiClass == null) {
                                console.error(" 未找到 " + (uiClassName + _this.viewName));
                                return;
                            }
                            classObj = new uiClass();
                            _this.setCreatUi(classObj, callBack, className, uiClass, oninit, isShowUi);
                        });
                    }
                };
                UiManager.init = function (uiWidth, uiHeight, screenMatchRate, uiPrefabPath, atlasPath) {
                    if (this.isInited) {
                        return;
                    }
                    metaUIManager_3.metaUIManager._ActiveSelf = this;
                    _super.init.call(this, uiWidth, uiHeight, screenMatchRate, uiPrefabPath, atlasPath);
                };
                UiManager.setCreatUi = function (classObj, callBack, className, uiClass, oninit, isShowUi) {
                    var _this = this;
                    this.creatUi(classObj, function (obj) {
                        if (_this.nowLoadingMap.get(className)) {
                            //---- show hide 事件包装----------
                            var oldShow_1 = classObj.show;
                            classObj.show = function () {
                                oldShow_1.apply(classObj);
                                _this._eventer.Emit(_this.ON_SHOW_UI, className);
                            };
                            var oldHide_1 = classObj.hide;
                            classObj.hide = function () {
                                oldHide_1.apply(classObj);
                                _this._eventer.Emit(_this.ON_HIDE_UI, className);
                            };
                            //--------------------------------
                            classObj.transform = obj;
                            uiClass.Instance = classObj;
                            if (callBack) {
                                callBack(classObj);
                            }
                            if (oninit) {
                                classObj.onInite = oninit;
                            }
                            classObj.onInit();
                            //加载完成时回调
                            if (_this.endLoadCallBack) {
                                _this.endLoadCallBack(className);
                            }
                            _this.nowLoadingMap.set(className, false);
                            if (uiClass.Instance.isLogUi && isShowUi) {
                                _this.logUi(className);
                            }
                            _this.uiMap.set(className, classObj);
                            if (isShowUi) {
                                classObj.show();
                            }
                            //
                            _this._eventer.Emit(_this.ON_CREATE_UI, className);
                        }
                        else {
                            if (callBack) {
                                callBack(classObj);
                            }
                        }
                    });
                };
                UiManager.creatUi = function (uiClass, callBack) {
                    var _this = this;
                    var uiName = uiClass.uiName;
                    // let url = "Resources/newUi/" + uiName + "/resources/" + uiName + "_json.json";
                    var url = this.uiPrefabPath + uiName + "/" + uiName + "_json.json";
                    // let url = this.uiPrefabPath + uiName + "/resources/" + uiName + "_json.json";
                    var uijsonLoder = new combinNewLoader_1.combinNewLoader();
                    uijsonLoder.add(url, function () { }, newLoaderManager_3.LoadType.JSON);
                    loadMgr_2.loadMgr.Instance.syncLoadList(["".concat(this.atlasPath).concat(uiName, "/").concat(uiName, ".assetbundle.json")], 110)
                        .then(function () {
                        // loadMgr.Instance.syncLoadList([`${this.atlasPath}${uiName}/${uiName}.assetbundle.json`], 110).then(() => {
                        uijsonLoder.start(function (data) {
                            var jsonData = data[0];
                            if (!jsonData) {
                                console.error("ui资源json有错误在请检查文件  " + url);
                                return;
                            }
                            _this.jsonList.set(url, jsonData);
                            var uiInfo = jsonData[0];
                            if (!uiInfo) {
                                console.error("ui资源json有错误在请检查文件  " + url);
                                return;
                            }
                            var insidMap = {};
                            var compMap = [];
                            var trans = _this.makeTran(uiInfo, uiClass, insidMap);
                            _this.setCompsToTran2D(trans, uiInfo, insidMap, compMap, uiClass);
                            _this.referenceComps(insidMap, compMap);
                            if (callBack) {
                                callBack(trans);
                            }
                        });
                    });
                };
                UiManager.referenceComps = function (insidMap, compMap) {
                    for (var index = 0; index < compMap.length; index++) {
                        var element = compMap[index];
                        this.referenceComp(element, insidMap);
                    }
                };
                UiManager.setCompsToTran2D = function (trans, pfInfo, insidMap, compMap, uiClass) {
                    for (var i = 0; i < pfInfo.components.length; i++) {
                        var compInfo = pfInfo.components[i];
                        var rawComp = this.makeAComp2D(compInfo, insidMap, compMap, uiClass);
                        if (rawComp) {
                            trans.addComponentDirect(rawComp);
                        }
                    }
                    //递归组装子对象
                    for (var i = 0; i < trans.children.length; i++) {
                        var childTran = trans.children[i];
                        var childTranInfo = pfInfo.children[i];
                        this.setCompsToTran2D(childTran, childTranInfo, insidMap, compMap, uiClass[childTran.name]);
                    }
                };
                UiManager.makeTran = function (pfInfo, uiClass, insidMap) {
                    var trans = new m4m.framework.transform2D();
                    uiClass.transform = trans;
                    trans.name = pfInfo.tranName;
                    trans.prefab = pfInfo.prefab;
                    trans.layer = pfInfo.layer;
                    trans.tag = pfInfo.tag;
                    trans.isStatic = pfInfo.isStatic;
                    trans.width = pfInfo.width;
                    trans.height = pfInfo.height;
                    m4m.math.vec2Clone(pfInfo.pivot, trans.pivot);
                    trans.visible = pfInfo._visible;
                    m4m.math.vec2Clone(pfInfo.localTranslate, trans.localTranslate);
                    m4m.math.vec2Clone(pfInfo.localScale, trans.localScale);
                    trans.localRotate = pfInfo.localRotate;
                    trans.isMask = pfInfo.isMask;
                    trans.layoutState = pfInfo.layoutState;
                    trans.layoutPercentState = pfInfo.layoutPercentState;
                    trans.setLayoutValue(1, pfInfo.layoutValueMap.n1);
                    trans.setLayoutValue(2, pfInfo.layoutValueMap.n2);
                    trans.setLayoutValue(4, pfInfo.layoutValueMap.n4);
                    trans.setLayoutValue(8, pfInfo.layoutValueMap.n8);
                    trans.setLayoutValue(16, pfInfo.layoutValueMap.n16);
                    trans.setLayoutValue(32, pfInfo.layoutValueMap.n32);
                    if (pfInfo.insid != null) {
                        insidMap[pfInfo.insid] = trans;
                    }
                    //递归组装子对象
                    if (pfInfo.children) {
                        for (var i = 0; i < pfInfo.children.length; i++) {
                            var childTranInfo = pfInfo.children[i];
                            var childTran = this.makeTran(childTranInfo, uiClass[childTranInfo.tranName], insidMap);
                            trans.addChild(childTran);
                        }
                    }
                    return trans;
                };
                UiManager.makeAComp2D = function (compInfo, insidMap, compMap, uiClass) {
                    var name = compInfo.cmop || compInfo.className;
                    switch (name) {
                        case "button":
                            var compButton = new m4m.framework.button();
                            compButton.transition = compInfo.transition;
                            compButton["_origianlSpriteName"] = compInfo._origianlSpriteName;
                            compButton["_pressedSpriteName"] = compInfo._pressedSpriteName;
                            m4m.math.colorClone(compInfo.normalColor, compButton.normalColor);
                            m4m.math.colorClone(compInfo.pressedColor, compButton.pressedColor);
                            compButton.fadeDuration = compInfo.fadeDuration;
                            compInfo["_comp"] = compButton;
                            uiClass.button = compButton;
                            compMap.push(compInfo);
                            return compButton;
                        case "image2D":
                            var compImage2D = new m4m.framework.image2D();
                            m4m.math.colorClone(compInfo.color, compImage2D.color);
                            compImage2D.imageType = compInfo.imageType;
                            compImage2D.fillMethod = compInfo.fillMethod;
                            compImage2D.fillAmmount = compInfo.fillAmmount;
                            // compImage2D.sprite = m4m.framework.sceneMgr.app.getAssetMgr().getDefaultSprite("grid_sprite");
                            var assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                            var _sp = assetMgr.getDefaultSprite(compInfo._spriteName);
                            if (!_sp) {
                                _sp = assetMgr.getAssetByName(compInfo._spriteName);
                            }
                            compImage2D.sprite = _sp;
                            compImage2D["_spriteName"] = compInfo._spriteName;
                            compImage2D["_imageBorder"].l = compInfo._imageBorder.l;
                            compImage2D["_imageBorder"].t = compInfo._imageBorder.t;
                            compImage2D["_imageBorder"].r = compInfo._imageBorder.r;
                            compImage2D["_imageBorder"].b = compInfo._imageBorder.b;
                            uiClass.image = compImage2D;
                            return compImage2D;
                        case "label":
                            var compLabel = new m4m.framework.label();
                            compLabel.text = compInfo.text;
                            //compLabel.font = new m4m.framework.font(compInfo._fontName);
                            compLabel["_fontName"] = compInfo._fontName;
                            compLabel.fontsize = compInfo.fontsize;
                            compLabel.linespace = compInfo.linespace;
                            compLabel.horizontalType = compInfo.horizontalType;
                            compLabel.verticalType = compInfo.verticalType;
                            compLabel.horizontalOverflow = compInfo.horizontalOverflow;
                            compLabel.verticalOverflow = compInfo.verticalOverflow;
                            m4m.math.colorClone(compInfo.color, compLabel.color);
                            m4m.math.colorClone(compInfo.color2, compLabel.color2);
                            uiClass.label = compLabel;
                            return compLabel;
                        case "scrollRect":
                            var compScrollRect = new m4m.framework.scrollRect();
                            compScrollRect.content = insidMap[compInfo.content];
                            compScrollRect.horizontal = compInfo.horizontal;
                            compScrollRect.vertical = compInfo.vertical;
                            compScrollRect.inertia = compInfo.inertia;
                            compScrollRect.decelerationRate = compInfo.decelerationRate;
                            uiClass.scrollRect = compScrollRect;
                            return compScrollRect;
                        case "rawImage2D":
                            var compRawImage2D = new m4m.framework.rawImage2D();
                            m4m.math.colorClone(compInfo.color, compRawImage2D.color);
                            uiClass.rawImage2D = compRawImage2D;
                            return compRawImage2D;
                        case "progressbar":
                            var compProgressbar = new m4m.framework.progressbar();
                            compProgressbar.value = compInfo.value;
                            compProgressbar.cutPanel = insidMap[compInfo.cutPanel];
                            // compProgressbar.barOverImg = insidMap[compInfo.barOverImg];
                            // compProgressbar.barBg = insidMap[compInfo.barBg];
                            compInfo["_comp"] = compProgressbar;
                            compMap.push(compInfo);
                            uiClass.progressbar = compProgressbar;
                            return compProgressbar;
                        case "input":
                            var compinput = new m4m.framework.inputField();
                            compinput.characterLimit = compInfo.characterLimit;
                            compinput.LineType = compInfo.LineType;
                            compinput.ContentType = compInfo.ContentType;
                            // compinput.frameImage=insidMap[compInfo.frameImage];
                            // compinput.TextLabel=insidMap[compInfo.TextLabel];
                            // compinput.PlaceholderLabel=insidMap[compInfo.PlaceholderLabel];
                            compInfo["_comp"] = compinput;
                            compMap.push(compInfo);
                            uiClass.inputField = compinput;
                            return compinput;
                        default: return null;
                    }
                };
                UiManager.referenceComp = function (compInfo, insidMap) {
                    var name = compInfo.cmop || compInfo.className;
                    switch (name) {
                        case "button":
                            var compButton = compInfo["_comp"];
                            if (insidMap[compInfo.targetImage]) {
                                var image = insidMap[compInfo.targetImage].getComponent("image2D");
                                compButton.targetImage = image;
                            }
                            break;
                        case "progressbar":
                            var compProgressbar = compInfo["_comp"];
                            if (insidMap[compInfo.barBg]) {
                                compProgressbar.barBg = insidMap[compInfo.barBg].getComponent("image2D");
                            }
                            if (insidMap[compInfo.barOverImg]) {
                                compProgressbar.barOverImg = insidMap[compInfo.barOverImg].getComponent("image2D");
                            }
                            break;
                        case "input":
                            var compinput = compInfo["_comp"];
                            if (insidMap[compInfo.frameImage]) {
                                compinput.frameImage = insidMap[compInfo.frameImage].getComponent("image2D");
                            }
                            if (insidMap[compInfo.TextLabel]) {
                                compinput.TextLabel = insidMap[compInfo.TextLabel].getComponent("label");
                            }
                            if (insidMap[compInfo.PlaceholderLabel]) {
                                compinput.PlaceholderLabel = insidMap[compInfo.PlaceholderLabel].getComponent("label");
                            }
                            break;
                        default: var temp = void 0;
                    }
                };
                /** 创建UI 事件 */
                UiManager.ON_CREATE_UI = "onCreateUI";
                /** UI显示（show）事件 */
                UiManager.ON_SHOW_UI = "onShowUI";
                /** UI隐藏（hide）事件 */
                UiManager.ON_HIDE_UI = "onHideUI";
                UiManager.nowLoadingMap = new Map_21.cMap();
                UiManager.uiMap = new Map_21.cMap();
                UiManager.viewName = "View";
                UiManager.jsonList = new Map_21.cMap();
                UiManager._eventer = new UiManagerEventer();
                UiManager.isInited = false;
                UiManager.uiLogList = [];
                UiManager.logLimit = 3;
                UiManager.logUiNow = false;
                return UiManager;
            }(metaUIManager_3.metaUIManager)));
            (function (uiLayerType) {
                uiLayerType[uiLayerType["downlayer"] = -1] = "downlayer";
                uiLayerType[uiLayerType["baselayer"] = 0] = "baselayer";
                uiLayerType[uiLayerType["midlayer"] = 1] = "midlayer";
                uiLayerType[uiLayerType["highlayer"] = 2] = "highlayer";
                uiLayerType[uiLayerType["poplayer"] = 3] = "poplayer";
            })(uiLayerType || (uiLayerType = {}));
            exports_128("uiLayerType", uiLayerType);
        }
    };
});
System.register("RPC/RpcServerCall", ["RPC/RPCApi", "RPC/RPCManager"], function (exports_129, context_129) {
    "use strict";
    var RPCApi_1, RPCManager_1, RpcServerCall;
    var __moduleName = context_129 && context_129.id;
    return {
        setters: [
            function (RPCApi_1_1) {
                RPCApi_1 = RPCApi_1_1;
            },
            function (RPCManager_1_1) {
                RPCManager_1 = RPCManager_1_1;
            }
        ],
        execute: function () {
            exports_129("RpcServerCall", RpcServerCall = /** @class */ (function () {
                function RpcServerCall() {
                }
                RpcServerCall.Init = function () {
                    RPCApi_1.RPCMethods.Init();
                    window["RPCMethods"] = RPCApi_1.RPCMethods;
                    window["RpcServerCall"] = RpcServerCall;
                };
                RpcServerCall.CallScript = function (path, method) {
                    var params = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        params[_i - 2] = arguments[_i];
                    }
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (RPCManager_1.RPCManager.sock == null) {
                                if (this.uid) {
                                    return [2 /*return*/, RPCApi_1.RPCMethods.CallUserScript_http(RpcServerCall.uid, path, method, params)];
                                }
                                return [2 /*return*/, RPCApi_1.RPCMethods.CallScript_http(path, method, params)];
                            }
                            return [2 /*return*/, RPCApi_1.RPCMethods.CallScript_websocket(path, method, params)];
                        });
                    });
                };
                RpcServerCall.CallScriptRetCls = function (ctor, path, method) {
                    var params = [];
                    for (var _i = 3; _i < arguments.length; _i++) {
                        params[_i - 3] = arguments[_i];
                    }
                    return __awaiter(this, void 0, void 0, function () {
                        var ret;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, RPCApi_1.RPCMethods.CallScript_http(path, method, params)];
                                case 1:
                                    ret = _a.sent();
                                    if (!ret) {
                                        return [2 /*return*/];
                                    }
                                    ret.constructor = ctor;
                                    ret.save = function (fields) { return RPCManager_1.RPCManager.SaveObject(ret, fields); };
                                    ret.sync = function (fields) { return RPCManager_1.RPCManager.SyncObject(ret, fields); };
                                    return [2 /*return*/, ret];
                            }
                        });
                    });
                };
                RpcServerCall.CallScriptHttp = function (path, method) {
                    var params = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        params[_i - 2] = arguments[_i];
                    }
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, RPCApi_1.RPCMethods.CallScript_http(path, method, params)];
                        });
                    });
                };
                RpcServerCall.CallUserScriptHttp = function (uid, path, method) {
                    var params = [];
                    for (var _i = 3; _i < arguments.length; _i++) {
                        params[_i - 3] = arguments[_i];
                    }
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, RPCApi_1.RPCMethods.CallUserScript_http(uid, path, method, params)];
                        });
                    });
                };
                RpcServerCall.errorState = false;
                return RpcServerCall;
            }()));
        }
    };
});
System.register("RPC/RPCManager", ["RPC/RPCApi", "RPC/RpcServerCall"], function (exports_130, context_130) {
    "use strict";
    var RPCApi_2, RpcServerCall_1, RPCManager;
    var __moduleName = context_130 && context_130.id;
    /**
     * 同步对象装饰器
     * 实现此装饰器的对象会附加 sync[从服务器同步到本地],save[保存到服务器] 这两个方法
     * @param constructor
     */
    function SyncObject(constructor) {
        constructor.prototype.sync = function (fields) {
            return RPCManager.SyncObject(this, fields);
        };
        constructor.prototype.save = function (fields) {
            return RPCManager.SaveObject(this, fields);
        };
        constructor.getlistCount = function () {
            return RPCManager.GetlistCount(constructor.name);
        };
        constructor.getlist = function (offset, count) {
            return RPCManager.Getlist(constructor, offset, count);
        };
    }
    exports_130("SyncObject", SyncObject);
    return {
        setters: [
            function (RPCApi_2_1) {
                RPCApi_2 = RPCApi_2_1;
            },
            function (RpcServerCall_1_1) {
                RpcServerCall_1 = RpcServerCall_1_1;
            }
        ],
        execute: function () {
            exports_130("RPCManager", RPCManager = /** @class */ (function () {
                function RPCManager() {
                }
                RPCManager.Init = function () {
                    window["cpi"] = RPCApi_2.RPCMethods;
                    this.ptlHandles[1] = this.RPCSCallHandle.bind(this);
                    this.ptlHandles[2] = this.RPCCallResultHandle.bind(this);
                    this.ptlHandles[4] = this.SyncResultHandle.bind(this);
                    this.ptlHandles[6] = this.SaveResultHandle.bind(this);
                    this.ptlHandles[8] = this.ListCountHandle.bind(this);
                    this.ptlHandles[10] = this.ListHandle.bind(this);
                    RpcServerCall_1.RpcServerCall.Init();
                };
                RPCManager.RegHandle = function (key, func) {
                    this.serverCallMap[key] = func;
                };
                RPCManager.Send = function (method) {
                    var _this = this;
                    var params = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        params[_i - 1] = arguments[_i];
                    }
                    return new Promise(function (resolve, reject) {
                        if (!_this.sock || _this.sock.readyState != WebSocket.OPEN) {
                            return reject("[错误]未连接服务器");
                        }
                        if (++_this.pidIndex >= Number.MAX_SAFE_INTEGER) {
                            _this.pidIndex = 1;
                        }
                        var pid = _this.pidIndex;
                        var rpcptl = JSON.stringify({
                            __ptlNum__: 1,
                            pid: pid,
                            m: method,
                            p: params,
                        });
                        var tid = setTimeout(function () {
                            delete _this.callMap[pid];
                            reject("[\u9519\u8BEF]PRC \u8C03\u7528:".concat(method, "\u8D85\u65F6 "));
                        }, _this.timeOut);
                        _this.callMap[pid] = { resolve: resolve, reject: reject, cleanID: tid };
                        _this.sock.send(rpcptl);
                    });
                };
                RPCManager.SendHttp = function (method) {
                    var _this = this;
                    var params = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        params[_i - 1] = arguments[_i];
                    }
                    return new Promise(function (resolve, reject) {
                        _this.SendHttpSimple("".concat(_this.httpApi, "/rpc"), "POST", {
                            m: method,
                            p: params,
                        })
                            .then(function (text) {
                            try {
                                var json = JSON.parse(text);
                                var cret = json;
                                if (!cret.IsSuccess) {
                                    reject(cret.message);
                                }
                                else {
                                    resolve(cret.result);
                                }
                            }
                            catch (_a) {
                                reject("[\u9519\u8BEF]SendHttp \u89E3\u6790\u5931\u8D25:".concat(text));
                            }
                        })
                            .catch(function (e) {
                            reject(e);
                        });
                        // let xhr = new XMLHttpRequest();
                        // xhr.open("POST", `${this.httpApi}/prc`);
                        // xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                        // xhr.timeout = this.timeOut;
                        // xhr.ontimeout = () => {
                        //     reject(`[错误]SendHttp ${this.httpApi}/rpc ${method} 调用超时`);
                        // };
                        // xhr.onload = () => {
                        //     try {
                        //         let json = JSON.parse(xhr.responseText);
                        //         let cret = json as RPCCallRsult;
                        //         if (!cret.IsSuccess)
                        //             reject(cret.message);
                        //         else
                        //             resolve(cret.result);
                        //     } catch
                        //     {
                        //         reject(`[错误]SendHttp 解析失败:${xhr.responseText}`);
                        //     }
                        // };
                        // xhr.onerror = (e) => {
                        //     reject(`[错误]SendHttp ${this.httpApi}/rpc调用失败:${xhr.status}`);
                        // };
                        // xhr.send(JSON.stringify({
                        //     m: method,
                        //     p: params
                        // }));
                    });
                };
                RPCManager.SendHttpSimple = function (url, method, params) {
                    var _this = this;
                    if (params === void 0) { params = null; }
                    return new Promise(function (resolve, reject) {
                        var xhr = new XMLHttpRequest();
                        xhr.open(method, url);
                        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                        xhr.timeout = _this.timeOut;
                        xhr.ontimeout = function () {
                            reject("[\u9519\u8BEF]SendHttp ".concat(url, " ").concat(method, " \u8C03\u7528\u8D85\u65F6"));
                        };
                        xhr.onload = function () {
                            resolve(xhr.responseText);
                        };
                        xhr.onerror = function (e) {
                            reject("[\u9519\u8BEF]SendHttp ".concat(url, "\u8C03\u7528\u5931\u8D25:").concat(xhr.status));
                        };
                        var str = null;
                        if (params) {
                            str = JSON.stringify(params);
                        }
                        xhr.send(str);
                    });
                };
                RPCManager.Filter = function (e) {
                    var ptl = JSON.parse(e.data);
                    var handle = this.ptlHandles[ptl.PtlNum];
                    if (handle) {
                        handle(ptl);
                        return true;
                    }
                    return false;
                };
                //rpc被调用处理
                RPCManager.RPCSCallHandle = function (ptl) {
                    if (this.serverCallMap[ptl.m]) {
                        this.serverCallMap[ptl.m].apply(this, ptl.p);
                    }
                };
                //rpc返回处理
                RPCManager.RPCCallResultHandle = function (ptl) {
                    var info = this.callMap[ptl.pid];
                    if (info) {
                        delete this.callMap[ptl.pid];
                        clearTimeout(info.cleanID);
                        var cret = ptl.data;
                        if (!cret.IsSuccess) {
                            info.reject(cret.message);
                        }
                        else {
                            info.resolve(cret.result);
                        }
                    }
                };
                //同步数据返回处理
                RPCManager.SyncResultHandle = function (ptl) {
                    var info = this.syncMap[ptl.pid];
                    if (info) {
                        delete this.syncMap[ptl.pid];
                        clearTimeout(info.cleanID);
                        if (ptl.message) {
                            return info.reject(ptl.message);
                        }
                        for (var key in ptl.data) {
                            info.obj[key] = ptl.data[key];
                        }
                        info.resolve();
                    }
                };
                //保存数据返回处理
                RPCManager.SaveResultHandle = function (ptl) {
                    var info = this.syncMap[ptl.pid];
                    if (info) {
                        delete this.syncMap[ptl.pid];
                        clearTimeout(info.cleanID);
                        if (ptl.message) {
                            return info.reject(ptl.message);
                        }
                        info.resolve();
                    }
                };
                //列表长度返回处理
                RPCManager.ListCountHandle = function (ptl) {
                    var info = this.syncMap[ptl.pid];
                    if (info) {
                        delete this.syncMap[ptl.pid];
                        clearTimeout(info.cleanID);
                        if (ptl.message) {
                            return info.reject(ptl.message);
                        }
                        info.resolve(ptl.data);
                    }
                };
                //列表返回处理
                RPCManager.ListHandle = function (ptl) {
                    var info = this.syncMap[ptl.pid];
                    if (info) {
                        delete this.syncMap[ptl.pid];
                        clearTimeout(info.cleanID);
                        if (ptl.message) {
                            return info.reject(ptl.message);
                        }
                        var ctor = info.obj;
                        var list = [];
                        for (var _i = 0, _a = ptl.data; _i < _a.length; _i++) {
                            var item = _a[_i];
                            var inst = new ctor();
                            for (var key in item) {
                                inst[key] = item[key];
                            }
                            list.push(inst);
                        }
                        info.resolve(list);
                    }
                };
                /**
                 * 请求和服务器同步数据
                 * @param obj 需要同步的对象
                 * @param fields 需要同步的字段
                 */
                RPCManager.SyncObject = function (obj, fields) {
                    if (this.sock == null) {
                        return this.SyncObjectHttp(obj, fields);
                    }
                    return this.SyncObjectWS(obj, fields);
                };
                RPCManager.SyncObjectWS = function (obj, fields) {
                    var _this = this;
                    return new Promise(function (resolve, reject) {
                        if (!_this.sock && _this.sock.readyState != WebSocket.OPEN) {
                            return reject("[错误]同步对象失败 未连接服务器!!");
                        }
                        if (!obj.id) {
                            return reject("[\u9519\u8BEF]\u540C\u6B65\u5BF9\u8C61\u5931\u8D25 ".concat(obj.constructor.name, " \u7F3A\u5C11id\u5B57\u6BB5!!"));
                        }
                        if (++_this.syncPidIndex >= Number.MAX_SAFE_INTEGER) {
                            _this.syncPidIndex = 1;
                        }
                        var pid = _this.syncPidIndex;
                        var rpcptl = JSON.stringify({
                            __ptlNum__: 3,
                            pid: pid,
                            id: obj.id,
                            fields: fields,
                            name: obj.constructor.name,
                        });
                        var tid = setTimeout(function () {
                            delete _this.syncMap[pid];
                            reject("[\u9519\u8BEF]\u540C\u6B65\u5BF9\u8C61\u5931\u8D25 \u540C\u6B65\u8D85\u65F6!!");
                        }, _this.timeOut);
                        _this.syncMap[pid] = { resolve: resolve, reject: reject, cleanID: tid, obj: obj };
                        _this.sock.send(rpcptl);
                    });
                };
                RPCManager.SyncObjectHttp = function (obj, fields) {
                    var _this = this;
                    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var text, json, key, e_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.SendHttpSimple("".concat(this.httpApi, "/syncobj"), "POST", {
                                            id: obj.id, name: obj.constructor.name,
                                            fields: fields,
                                        })];
                                case 1:
                                    text = _a.sent();
                                    json = JSON.parse(text);
                                    if (json.message) {
                                        return [2 /*return*/, reject(json.message)];
                                    }
                                    for (key in json.data) {
                                        obj[key] = json.data[key];
                                    }
                                    resolve();
                                    return [3 /*break*/, 3];
                                case 2:
                                    e_1 = _a.sent();
                                    reject(e_1.stack);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                };
                /**
                 * 保存数据到服务器
                 * @param obj 需要保存的对象
                 * @param fields 需要保存的字段
                 */
                RPCManager.SaveObject = function (obj, fields) {
                    if (this.sock == null) {
                        return this.SaveObjectHttp(obj, fields);
                    }
                    return this.SaveObjectWS(obj, fields);
                };
                RPCManager.SaveObjectWS = function (obj, fields) {
                    var _this = this;
                    return new Promise(function (resolve, reject) {
                        if (!_this.sock && _this.sock.readyState != WebSocket.OPEN) {
                            return reject("[错误]保存对象失败 未连接服务器!!");
                        }
                        if (!obj.id) {
                            return reject("[\u9519\u8BEF]\u4FDD\u5B58\u5BF9\u8C61\u5931\u8D25 ".concat(obj.constructor.name, " \u7F3A\u5C11id\u5B57\u6BB5!!"));
                        }
                        if (++_this.syncPidIndex >= Number.MAX_SAFE_INTEGER) {
                            _this.syncPidIndex = 1;
                        }
                        var data = null;
                        if (fields && fields.length > 0) {
                            data = {};
                            for (var i = 0, len = fields.length; i < len; ++i) {
                                data[fields[i]] = obj[fields[i]];
                            }
                        }
                        else {
                            data = obj;
                        }
                        var pid = _this.syncPidIndex;
                        var rpcptl = JSON.stringify({
                            __ptlNum__: 5,
                            pid: pid,
                            id: obj.id,
                            data: data,
                            name: obj.constructor.name,
                        });
                        var tid = setTimeout(function () {
                            delete _this.syncMap[pid];
                            reject("[\u9519\u8BEF]\u4FDD\u5B58\u5BF9\u8C61\u5931\u8D25 \u540C\u6B65\u8D85\u65F6!!");
                        }, _this.timeOut);
                        _this.syncMap[pid] = { resolve: resolve, reject: reject, cleanID: tid, obj: null };
                        _this.sock.send(rpcptl);
                    });
                };
                RPCManager.SaveObjectHttp = function (obj, fields) {
                    var _this = this;
                    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var data, i, len, text, json, error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    data = null;
                                    if (fields && fields.length > 0) {
                                        data = {};
                                        for (i = 0, len = fields.length; i < len; ++i) {
                                            data[fields[i]] = obj[fields[i]];
                                        }
                                    }
                                    else {
                                        data = obj;
                                    }
                                    return [4 /*yield*/, this.SendHttpSimple("".concat(this.httpApi, "/syncsave"), "POST", {
                                            id: obj.id,
                                            name: obj.constructor.name,
                                            data: data,
                                        })];
                                case 1:
                                    text = _a.sent();
                                    json = JSON.parse(text);
                                    if (json.message) {
                                        return [2 /*return*/, reject(json.message)];
                                    }
                                    resolve();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_1 = _a.sent();
                                    reject(error_1.stack);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                };
                /**
                * 获取数据数量
                */
                RPCManager.GetlistCount = function (name) {
                    if (this.sock == null) {
                        return this.GetlistCountHttp(name);
                    }
                    return this.GetlistCountWS(name);
                };
                RPCManager.GetlistCountWS = function (name) {
                    var _this = this;
                    return new Promise(function (resolve, reject) {
                        if (!_this.sock && _this.sock.readyState != WebSocket.OPEN) {
                            return reject("[错误]获取列表长度失败 未连接服务器!!");
                        }
                        if (++_this.syncPidIndex >= Number.MAX_SAFE_INTEGER) {
                            _this.syncPidIndex = 1;
                        }
                        var pid = _this.syncPidIndex;
                        var rpcptl = JSON.stringify({
                            __ptlNum__: 7,
                            pid: pid,
                            name: name,
                        });
                        var tid = setTimeout(function () {
                            delete _this.syncMap[pid];
                            reject("[\u9519\u8BEF]\u83B7\u53D6\u5217\u8868\u957F\u5EA6\u5931\u8D25 \u540C\u6B65\u8D85\u65F6!!");
                        }, _this.timeOut);
                        _this.syncMap[pid] = { resolve: resolve, reject: reject, cleanID: tid, obj: null };
                        _this.sock.send(rpcptl);
                    });
                };
                RPCManager.GetlistCountHttp = function (name) {
                    var _this = this;
                    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var text, json, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.SendHttpSimple("".concat(this.httpApi, "/synccount"), "POST", { name: name })];
                                case 1:
                                    text = _a.sent();
                                    json = JSON.parse(text);
                                    if (json.message) {
                                        return [2 /*return*/, reject(json.message)];
                                    }
                                    resolve(json.data);
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_2 = _a.sent();
                                    reject(error_2.stack);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                };
                /**
                * 获取列表数据
                * @param offset 从什么位置获取 默认值:0
                * @param count 指定需要保存的字段 例如["name","desc"]
                */
                RPCManager.Getlist = function (ctor, offset, count) {
                    if (offset === void 0) { offset = 0; }
                    if (count === void 0) { count = 100; }
                    if (this.sock == null) {
                        return this.GetlistHttp(ctor, offset, count);
                    }
                    return this.GetlistWS(ctor, offset, count);
                };
                RPCManager.GetlistWS = function (ctor, offset, count) {
                    var _this = this;
                    if (offset === void 0) { offset = 0; }
                    if (count === void 0) { count = 100; }
                    return new Promise(function (resolve, reject) {
                        if (!_this.sock && _this.sock.readyState != WebSocket.OPEN) {
                            return reject("[错误]保存对象失败 未连接服务器!!");
                        }
                        if (++_this.syncPidIndex >= Number.MAX_SAFE_INTEGER) {
                            _this.syncPidIndex = 1;
                        }
                        var pid = _this.syncPidIndex;
                        var rpcptl = JSON.stringify({
                            __ptlNum__: 9,
                            pid: pid,
                            name: ctor.name,
                            offset: offset,
                            count: count,
                        });
                        var tid = setTimeout(function () {
                            delete _this.syncMap[pid];
                            reject("[\u9519\u8BEF]\u83B7\u53D6\u5217\u8868\u957F\u5EA6\u5931\u8D25 \u540C\u6B65\u8D85\u65F6!!");
                        }, _this.timeOut);
                        _this.syncMap[pid] = { resolve: resolve, reject: reject, cleanID: tid, obj: ctor };
                        _this.sock.send(rpcptl);
                    });
                };
                RPCManager.GetlistHttp = function (ctor, offset, count) {
                    var _this = this;
                    if (offset === void 0) { offset = 0; }
                    if (count === void 0) { count = 100; }
                    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var text, json, list, _i, _a, item, inst, key, error_3;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _b.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.SendHttpSimple("".concat(this.httpApi, "/synclist"), "POST", {
                                            name: ctor.name,
                                            offset: offset,
                                            count: count,
                                        })];
                                case 1:
                                    text = _b.sent();
                                    json = JSON.parse(text);
                                    if (json.message) {
                                        return [2 /*return*/, reject(json.message)];
                                    }
                                    list = [];
                                    for (_i = 0, _a = json.data; _i < _a.length; _i++) {
                                        item = _a[_i];
                                        inst = new ctor();
                                        for (key in item) {
                                            inst[key] = item[key];
                                        }
                                        list.push(inst);
                                    }
                                    resolve(list);
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_3 = _b.sent();
                                    reject(error_3.stack);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                };
                RPCManager.pidIndex = 0;
                RPCManager.syncPidIndex = 0;
                /**
                 * 调用RPC超时时间
                 */
                RPCManager.timeOut = 8000;
                RPCManager.callMap = {};
                RPCManager.syncMap = {};
                RPCManager.ptlHandles = {};
                RPCManager.serverCallMap = {};
                return RPCManager;
            }()));
            //注册 excel 解析使用工具类
            if (!m4m["__ExcDate__"]) {
                m4m["__ExcDate__"] = {};
            }
            m4m["__ExcDate__"].SyncObject = SyncObject;
        }
    };
});
System.register("RPC/RPCApi", ["RPC/RPCManager"], function (exports_131, context_131) {
    "use strict";
    var RPCManager_2, RPCMethods;
    var __moduleName = context_131 && context_131.id;
    return {
        setters: [
            function (RPCManager_2_1) {
                RPCManager_2 = RPCManager_2_1;
            }
        ],
        execute: function () {
            //#region 数据结构
            //#endregion
            /**
            * RPC输入输出类
            */
            RPCMethods = /** @class */ (function () {
                function RPCMethods() {
                }
                //#region 发送部分
                /**
                * 调用脚本方法 c->s
                * @param scriptPath
                * @param method
                * @param args
                * @returns any
                */
                RPCMethods.CallScript_websocket = function (scriptPath, method, args) {
                    return RPCManager_2.RPCManager.Send("CallScript", scriptPath, method, args);
                };
                /**
                * 调用脚本 c->s
                * @param scriptPath
                * @param method
                * @param args
                * @returns any
                */
                RPCMethods.CallScript_http = function (scriptPath, method, args) {
                    return RPCManager_2.RPCManager.SendHttp("CallScript", scriptPath, method, args);
                };
                /**
                * 用户脚本 c->s
                * @param uid
                * @param scriptPath
                * @param method
                * @param args
                * @returns any
                */
                RPCMethods.CallUserScript_http = function (uid, scriptPath, method, args) {
                    return RPCManager_2.RPCManager.SendHttp("CallUserScript", uid, scriptPath, method, args);
                };
                /**
                * 用户变量 c->s
                * @param uid
                * @param varname
                * @returns any
                */
                RPCMethods.GetUserVar_http = function (uid, varname) {
                    return RPCManager_2.RPCManager.SendHttp("GetUserVar", uid, varname);
                };
                //#endregion
                //#region 接收部分
                RPCMethods.Init = function () {
                };
                return RPCMethods;
            }());
            exports_131("RPCMethods", RPCMethods);
        }
    };
});
System.register("Scripts/CameraFollowCtr", ["Tools/engineParallel/parallelEngineTool"], function (exports_132, context_132) {
    "use strict";
    var parallelEngineTool_6, CameraFollowCtr;
    var __moduleName = context_132 && context_132.id;
    return {
        setters: [
            function (parallelEngineTool_6_1) {
                parallelEngineTool_6 = parallelEngineTool_6_1;
            }
        ],
        execute: function () {
            exports_132("CameraFollowCtr", CameraFollowCtr = /** @class */ (function () {
                function CameraFollowCtr() {
                    this._helpPointTarget = parallelEngineTool_6.getSpTransform(new m4m.framework.transform());
                    this._lookAtPoint = new m4m.math.vector3(0, 0, 0);
                    this._targetOffset = new m4m.math.vector3(0, 0, 0);
                    this._distance = 0;
                    this.minPanAngle = -Infinity;
                    this.maxPanAngle = Infinity;
                    this.minTileAngle = -89;
                    this.maxTileAngle = 89;
                    this._panAngle = 0;
                    this._tiltAngle = 0;
                    this._tiltRadian = 0;
                    this._lookDir = new m4m.math.vector3();
                    //暂停
                    this._pause = false;
                }
                Object.defineProperty(CameraFollowCtr.prototype, "distance", {
                    get: function () { return this._distance; },
                    set: function (v) { this._distance = v; this.calCameraDisAndLook(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(CameraFollowCtr.prototype, "panAngle", {
                    /** 平移角度 */
                    get: function () { return this._panAngle; },
                    set: function (v) {
                        this._panAngle = Math.max(this.minPanAngle, Math.min(this.maxPanAngle, v));
                        this.calCameraDisAndLook();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(CameraFollowCtr.prototype, "tiltAngle", {
                    /** 倾斜角 */
                    get: function () {
                        return this._tiltAngle;
                    },
                    set: function (v) {
                        this._tiltAngle = Math.max(this.minTileAngle, Math.min(this.maxTileAngle, v));
                        // this._tiltAngle = Math.max(this.minTileAngle, v);//测试
                        this._tiltRadian = v * Math.PI / 180;
                        this.calCameraDisAndLook();
                    },
                    enumerable: false,
                    configurable: true
                });
                CameraFollowCtr.prototype.onPlay = function () {
                };
                CameraFollowCtr.prototype.remove = function () {
                };
                CameraFollowCtr.prototype.start = function () {
                };
                /**
                 * 设置 相机的观察目标点
                 * @param position 观察目标点
                 */
                CameraFollowCtr.prototype.setTargetPoint = function (position) {
                    var _t = this._helpPointTarget;
                    m4m.math.vec3Clone(position, _t.localPosition);
                    _t.localPosition = _t.localPosition;
                    this.setTarget(_t);
                };
                /**
                 * 获取 实际跟随目标点
                 * @param outPos 获取的目标点
                 */
                CameraFollowCtr.prototype.getRealLookPoint = function (outPos) {
                    if (!this._target || !outPos) {
                        return;
                    }
                    m4m.math.vec3Clone(this._target.localPosition, outPos);
                    m4m.math.vec3Add(outPos, this._targetOffset, outPos);
                };
                /**
                 * 设置 相机的观察目标
                 * @param target 观察目标
                 */
                CameraFollowCtr.prototype.setTarget = function (target) {
                    this._target = target;
                    this.calCameraPos();
                    this.DoLookAtPoint();
                };
                /**
                 * 设置 相机的观察目标的偏移量
                 * @param x 坐标x
                 * @param y 坐标y
                 * @param z 坐标z
                 */
                CameraFollowCtr.prototype.setTargetOffset = function (x, y, z) {
                    this._targetOffset.x = x;
                    this._targetOffset.y = y;
                    this._targetOffset.z = z;
                    this.DoLookAtPoint();
                };
                /**
                 *  暂停跟随运动
                 * @param value
                 */
                CameraFollowCtr.prototype.pause = function (value) {
                    this._pause = value;
                };
                CameraFollowCtr.prototype.update = function (delta) {
                    //this.ckYGMove(delta);
                    //this.calCameraPos();
                };
                /**
                 * 计算一步相机的跟随。
                 */
                CameraFollowCtr.prototype.step = function () {
                    if (this._pause || !this.enabled) {
                        return;
                    }
                    this.calCameraPos();
                };
                /**
                 * 计算 目标点指向相机的 方向
                 * @param out 返回的方向
                 */
                CameraFollowCtr.prototype.calCamZDir = function (out) {
                    m4m.math.vec3Set(out, 0, 0, -1);
                    var qyaw = m4m.math.pool.new_quaternion();
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this._panAngle + 180, qyaw);
                    var qpitch = m4m.math.pool.new_quaternion();
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_right, this._tiltAngle, qpitch);
                    m4m.math.quatMultiply(qyaw, qpitch, qyaw);
                    m4m.math.quatTransformVector(qyaw, out, out);
                    m4m.math.pool.delete_quaternion(qyaw);
                    m4m.math.pool.delete_quaternion(qpitch);
                };
                CameraFollowCtr.prototype.calCameraDisAndLook = function () {
                    this.calCamDis();
                    this.calCameraPos();
                    this.DoLookAtPoint();
                };
                CameraFollowCtr.prototype.calCamDis = function () {
                    var forward = m4m.math.pool.new_vector3();
                    this.calCamZDir(forward);
                    m4m.math.vec3ScaleByNum(forward, this.distance, this._lookDir);
                    // this.calCameraPos();
                    m4m.math.pool.delete_vector3(forward);
                };
                CameraFollowCtr.prototype.DoLookAtPoint = function () {
                    if (!this._target) {
                        return;
                    }
                    m4m.math.vec3Add(this._target.localPosition, this._targetOffset, this._lookAtPoint);
                    var _trans = this.gameObject.transform;
                    _trans.lookatPoint(this._lookAtPoint);
                    _trans.localRotate = _trans.localRotate;
                };
                CameraFollowCtr.prototype.calCameraPos = function () {
                    if (!this._target) {
                        return;
                    }
                    var trans = this.gameObject.transform;
                    m4m.math.vec3Clone(this._target.localPosition, trans.localPosition);
                    m4m.math.vec3Add(this._lookDir, trans.localPosition, trans.localPosition);
                    trans.localPosition = trans.localPosition;
                };
                CameraFollowCtr = __decorate([
                    m4m.reflect.nodeComponent
                ], CameraFollowCtr);
                return CameraFollowCtr;
            }()));
        }
    };
});
System.register("Time/CDManage", ["Tools/FrameMgr", "Time/CDData", "Time/TimeUtil"], function (exports_133, context_133) {
    "use strict";
    var FrameMgr_5, CDData_1, TimeUtil_3, CDManage;
    var __moduleName = context_133 && context_133.id;
    return {
        setters: [
            function (FrameMgr_5_1) {
                FrameMgr_5 = FrameMgr_5_1;
            },
            function (CDData_1_1) {
                CDData_1 = CDData_1_1;
            },
            function (TimeUtil_3_1) {
                TimeUtil_3 = TimeUtil_3_1;
            }
        ],
        execute: function () {
            CDManage = /** @class */ (function () {
                function CDManage() {
                    this.currentSkillID = 0;
                    this._serverTime = 0;
                    this._initGameTime = 0;
                    FrameMgr_5.FrameMgr.Add(this.Update, this);
                    this.cdData = new CDData_1.CDData();
                }
                Object.defineProperty(CDManage, "Instance", {
                    get: function () {
                        if (this.instance == null) {
                            this.instance = new CDManage();
                        }
                        return this.instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /// <summary>
                /// 以服务器时间作为基准算出剩余时间。
                /// </summary>
                /// <param name="futureTime">服务器的未来时间</param>
                /// <returns></returns>
                CDManage.prototype.remainTime = function (futureTime) {
                    var serverTime = CDManage.instance.serverTime();
                    var tempServerTime = serverTime;
                    if (futureTime > tempServerTime) {
                        return futureTime - tempServerTime;
                        // tslint:disable-next-line: unnecessary-else
                    }
                    else {
                        return 0;
                    }
                };
                /// <summary>
                /// 取得服务器当前时间 毫秒
                /// </summary>
                /// <returns></returns>
                CDManage.prototype.serverTime = function () {
                    var serverTime = CDManage.instance._serverTime;
                    var getTimer = CDManage.instance.getTimer();
                    var initGameTime = CDManage.instance._initGameTime;
                    return serverTime + (getTimer - initGameTime);
                };
                /// <summary>
                /// 取得服务器当前时间 秒
                /// </summary>
                /// <returns></returns>
                CDManage.prototype.serverSecondsTime = function () {
                    var time = CDManage.instance.serverTime();
                    return time / 1000;
                };
                /// <summary>
                /// 设置服务器时间
                /// </summary>
                /// <param name="v"></param>
                CDManage.prototype.setServerTime = function (v) {
                    this._initGameTime = this.getTimer();
                    this._serverTime = v;
                };
                CDManage.prototype.getTimer = function () {
                    return TimeUtil_3.TimeUtil.realtimeSinceStartup;
                };
                /// <summary>
                /// 开始cd计算
                /// 
                /// cdTime1 固定时间 已走百分比CD
                /// </summary>
                /// <param name="cdID"></param>
                /// <param name="time"></param>
                CDManage.prototype.startCDTime = function (cdID, time, cdTime1) {
                    if (cdTime1 === void 0) { cdTime1 = 0; }
                    var cdData = this.getCDdata(cdID);
                    cdData.startTime = this.serverTime();
                    cdData.endTime = time;
                    if (cdTime1 == 0) {
                        cdData.cdTime = time - this.serverTime();
                    }
                    else {
                        cdData.cdTime = cdTime1;
                    }
                };
                /// <summary>
                /// 在物理时间内进行cd运算极其更新 如果某些平台出现cd不圆滑可以使用帧update
                /// </summary>
                CDManage.prototype.Update = function () {
                    var list = this.cdData.list;
                    for (var i = 0; i < list.count; i++) {
                        var cdData = list.values[i];
                        if (cdData != null && cdData.endTime != 0) {
                            cdData.cdUpdate();
                        }
                    }
                };
                /// <summary>
                /// 是否在cd中
                /// </summary>
                /// <param name="cdID"></param>
                /// <returns></returns>
                CDManage.prototype.isCDing = function (cdID) {
                    return this.getCDdata(cdID).endTime == 0 ? false : true;
                };
                CDManage.prototype.stopCD = function (id) {
                    var cdData = this.getCDdata(id);
                    cdData.endTime = 0;
                };
                /// <summary>
                /// 取出一个公共cd
                /// </summary>
                /// <param name="cdID"></param>
                /// <returns></returns>
                CDManage.prototype.getCDdata = function (cdID) {
                    if (this.cdData.list.ContainsKey(cdID)) {
                        return this.cdData.list.GetValue(cdID);
                        // tslint:disable-next-line: unnecessary-else
                    }
                    else {
                        var cdData = new CDData_1.CDData();
                        cdData.cdID = cdID;
                        this.cdData.list.Add(cdID, cdData);
                        return cdData;
                    }
                };
                return CDManage;
            }());
            exports_133("CDManage", CDManage);
        }
    };
});
System.register("Time/CDData", ["Data/Dictionary", "Time/CDManage"], function (exports_134, context_134) {
    "use strict";
    var Dictionary_4, CDManage_1, CDData;
    var __moduleName = context_134 && context_134.id;
    return {
        setters: [
            function (Dictionary_4_1) {
                Dictionary_4 = Dictionary_4_1;
            },
            function (CDManage_1_1) {
                CDManage_1 = CDManage_1_1;
            }
        ],
        execute: function () {
            CDData = /** @class */ (function () {
                function CDData() {
                    this.showLog = false;
                    this.list = new Dictionary_4.Dictionary();
                    this.cdID = 0;
                    this.startTime = 0;
                    this.endTime = 0;
                    this.cdTime = 0;
                }
                CDData.prototype.cdUpdate = function () {
                    var cd = this.GetCDPercentage();
                    if (cd > 100 || cd <= 0) {
                        this.endTime = 0;
                    }
                    //super.dispatchEvent(new UI.CUIEvent(UI.CUIEvent.CD_UPDATE, cd));
                };
                CDData.prototype.GetCDPercentage = function () {
                    var nowTime = CDManage_1.CDManage.Instance.serverTime();
                    if (this.endTime <= nowTime) {
                        return 0;
                    }
                    return (this.endTime - nowTime) / this.cdTime * 100;
                };
                return CDData;
            }());
            exports_134("CDData", CDData);
        }
    };
});
System.register("Time/FrameTimer", ["Tools/FrameMgr"], function (exports_135, context_135) {
    "use strict";
    var FrameMgr_6, timerNode, FrameTimer;
    var __moduleName = context_135 && context_135.id;
    return {
        setters: [
            function (FrameMgr_6_1) {
                FrameMgr_6 = FrameMgr_6_1;
            }
        ],
        execute: function () {
            timerNode = /** @class */ (function () {
                function timerNode(CallFun, time, isLoop) {
                    if (isLoop === void 0) { isLoop = false; }
                    this.time = 0;
                    this.timeCount = 0;
                    this.isStop = false;
                    this.CallFun = CallFun;
                    this.time = time;
                    this.isLoop = isLoop;
                    this.id = timerNode.getId();
                }
                timerNode.getId = function () {
                    this.idCount++;
                    return this.idCount;
                };
                timerNode.idCount = 0;
                return timerNode;
            }());
            //FrameMgr 帧调用 计时器
            //方便 用FrameMgr 设置动画计时
            FrameTimer = /** @class */ (function () {
                function FrameTimer() {
                    this.nodeDic = {};
                    this.removeList = [];
                }
                Object.defineProperty(FrameTimer, "Instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new FrameTimer();
                            this.init();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                FrameTimer.init = function () {
                    FrameMgr_6.FrameMgr.Add(this._instance.update, this._instance);
                };
                /** 暂停计时 */
                FrameTimer.prototype.stop = function (timeId) {
                    var node = this.nodeDic[timeId];
                    if (node) {
                        node.isStop = true;
                    }
                };
                /** 计时一次
                 * time 等待时间
                 * DoFun delat 帧间隔时间 、isEnd 是否是结束 、tick 间隔滴答（loop 模式才有）
                 */
                FrameTimer.prototype.once = function (endTime, DoFun) {
                    if (endTime < 0 || !DoFun) {
                        return -1;
                    }
                    var node = new timerNode(DoFun, endTime, false);
                    this.nodeDic[node.id] = node;
                    return node.id;
                };
                /** 计时一次
                 * time 循环时间间隔
                 * DoFun delat 帧间隔时间 、isEnd 是否是结束 、tick 间隔滴答（loop 模式才有）
                 */
                FrameTimer.prototype.loop = function (tickTime, DoFun) {
                    if (tickTime < 0 || !DoFun) {
                        return -1;
                    }
                    var node = new timerNode(DoFun, tickTime, true);
                    this.nodeDic[node.id] = node;
                    return node.id;
                };
                FrameTimer.prototype.update = function (delat) {
                    var _this = this;
                    this.removeList.length = 0;
                    for (var key in this.nodeDic) {
                        var node = this.nodeDic[key];
                        if (!node) {
                            continue;
                        }
                        var tick = false;
                        var isEnd = false;
                        var needCall = true;
                        node.timeCount += delat;
                        // let outDelat = node.timeCount;
                        var outDelat = delat;
                        //是否强制停止
                        if (node.isStop) {
                            this.removeList.push(key);
                            isEnd = true;
                        }
                        else if (node.timeCount > node.time) { //是否到点
                            //是否loop
                            if (node.isLoop) {
                                node.timeCount = 0;
                                tick = true;
                            }
                            else {
                                isEnd = true;
                                this.removeList.push(key);
                            }
                        }
                        // else {
                        //     needCall = false;
                        // }
                        if (needCall && node.CallFun) {
                            node.CallFun(outDelat, isEnd, tick);
                        }
                    }
                    this.removeList.forEach(function (key) {
                        var node = _this.nodeDic[key];
                        if (node) {
                            delete _this.nodeDic[key];
                        }
                    });
                };
                return FrameTimer;
            }());
            exports_135("FrameTimer", FrameTimer);
        }
    };
});
System.register("Tools/DebugLineTool2d", [], function (exports_136, context_136) {
    "use strict";
    var DebugLineTool2d;
    var __moduleName = context_136 && context_136.id;
    return {
        setters: [],
        execute: function () {
            exports_136("DebugLineTool2d", DebugLineTool2d = /** @class */ (function () {
                /** 调试 线条绘制工具 */
                function DebugLineTool2d() {
                }
                DebugLineTool2d.init = function (rootNode) {
                    if (!rootNode) {
                        return;
                    }
                    this.lineQueue = [];
                    this.lineRoot = new m4m.framework.transform2D();
                    this.lineRoot.name = "DebugLineTool2d_root";
                    rootNode.addChild(this.lineRoot);
                    var col = m4m.math.color;
                    //color
                    this.colors = [
                        new col(1, 0, 0, 1),
                        new col(1, 0.498, 0.152, 1),
                        new col(1, 0.941, 0, 1),
                        new col(0, 1, 0, 1),
                        new col(0, 0.9, 0.878, 1),
                        new col(0.419, 0.454, 0.847, 1),
                        new col(0.972, 0, 0.996, 1),
                        new col(1, 1, 1, 1),
                        new col(0, 0, 0, 1),
                        new col(0.6, 0.6, 0.6, 1),
                    ];
                    //templata
                    var ass = m4m.framework.sceneMgr.app.getAssetMgr();
                    //初始化模板
                    var tempT = new m4m.framework.transform2D();
                    tempT.pivot.y = 0.5;
                    tempT.height = 3;
                    tempT.name = "line";
                    this.template = tempT.addComponent("rawImage2D");
                    this.template.image = ass.getDefaultTexture(m4m.framework.defTexture.white);
                    this.template.color = this.colors[0];
                    this.inited = true;
                };
                /**
                 * 绘制线段
                 * @param start 起始点
                 * @param end 结束点
                 * @param thickness 线段宽度
                 * @param colorId 线段颜色[0:红 , 1:橙  ,2:黄 ,3:绿 ,4:青 ,5:蓝 ,6:紫 ,7:白,8:黑 ,9:灰]
                 * @param alpha 透明值 0 - 1
                 */
                DebugLineTool2d.drawLine = function (start, end, thickness, colorId, alpha) {
                    if (thickness === void 0) { thickness = 3; }
                    if (colorId === void 0) { colorId = 0; }
                    if (alpha === void 0) { alpha = 1; }
                    if (!this.inited || !start || !end) {
                        return;
                    }
                    //尝试从队列获取一个线段
                    //没有 =》 创建一个
                    this.currIndex++;
                    if (this.currIndex >= this.lineQueue.length) {
                        var lienTran = this.template.transform.clone();
                        lienTran.name = "DebugLine_".concat(this.currIndex);
                        this.lineRoot.addChild(lienTran);
                        var _line = lienTran.getComponent("rawImage2D");
                        this.lineQueue.push(_line);
                    }
                    var line = this.lineQueue[this.currIndex];
                    //颜色
                    m4m.math.colorClone(this.colors[colorId], line.color);
                    line.color.a = alpha;
                    //设置位置、旋转
                    //pos
                    var dir = m4m.poolv2();
                    // m4m.math.vec2Clone(start, line.transform.localTranslate);
                    line.transform.localTranslate.x = start.x;
                    line.transform.localTranslate.y = start.y;
                    // m4m.math.vec2Subtract(end, start, dir);
                    dir.x = end.x - start.x;
                    dir.y = end.y - start.y;
                    //长度
                    line.transform.width = m4m.math.vec2Length(dir);
                    //厚度
                    line.transform.height = thickness;
                    //旋转
                    m4m.math.vec2Normalize(dir, dir);
                    var dot = m4m.math.vec2Dot(this.right, dir);
                    var angle = Math.acos(Math.abs(dot));
                    if (dir.x < 0) {
                        if (dir.y < 0) {
                            angle = angle + this.toRad * 180;
                        }
                        else {
                            angle = this.toRad * 180 - angle;
                        }
                    }
                    else {
                        if (dir.y < 0) {
                            angle = this.toRad * 360 - angle;
                        }
                    }
                    line.transform.localRotate = angle;
                    line.transform.visible = true;
                    line.transform.markDirty();
                    m4m.poolv2_del(dir);
                };
                /**
                 * 绘制几何图形 通过 所有点
                 * @param points 路径点
                 * @param thickness 线段宽度
                 * @param colorId 线段颜色[0:红 , 1:橙  ,2:黄 ,3:绿 ,4:青 ,5:蓝 ,6:紫 ,7:白,8:黑 ,9:灰]
                 * @param isSeal 是否封闭
                 * @param alpha 透明值 0 - 1
                 */
                DebugLineTool2d.drawPoints = function (points, thickness, colorId, alpha, needClose) {
                    if (thickness === void 0) { thickness = 3; }
                    if (colorId === void 0) { colorId = 0; }
                    if (alpha === void 0) { alpha = 1; }
                    if (needClose === void 0) { needClose = true; }
                    for (var i = 1; i < points.length; i++) {
                        this.drawLine(points[i - 1], points[i], thickness, colorId, alpha);
                    }
                    if (needClose && points.length > 2) {
                        this.drawLine(points[points.length - 1], points[0], thickness, colorId, alpha);
                    }
                };
                /**
                 * 绘制圆形
                 * @param pos 圆中心点
                 * @param radius 圆半径
                 * @param thickness 线段宽度
                 * @param colorId 线段颜色[0:红 , 1:橙  ,2:黄 ,3:绿 ,4:青 ,5:蓝 ,6:紫 ,7:白,8:黑 ,9:灰]
                 * @param alpha 透明值 0 - 1
                 * @param sidesNum 边的数量
                 */
                DebugLineTool2d.drawCircle = function (pos, radius, thickness, colorId, alpha, sidesNum) {
                    if (thickness === void 0) { thickness = 3; }
                    if (colorId === void 0) { colorId = 0; }
                    if (alpha === void 0) { alpha = 1; }
                    if (sidesNum === void 0) { sidesNum = 16; }
                    var _sidesNum = sidesNum < 3 ? 3 : sidesNum;
                    var len = _sidesNum;
                    var deltaDeg = Math.PI * 1 * 2 / _sidesNum;
                    var pA = m4m.poolv2();
                    var pB = m4m.poolv2();
                    for (var i = 1; i < len; i++) {
                        var _deg = deltaDeg * (i - 1);
                        var _deg1 = deltaDeg * i;
                        this.setPointCircle(pos, radius, _deg, pA);
                        this.setPointCircle(pos, radius, _deg1, pB);
                        this.drawLine(pA, pB, thickness, colorId, alpha);
                    }
                    //最后一线
                    var deg = deltaDeg * (len - 1);
                    var deg1 = 0;
                    this.setPointCircle(pos, radius, deg, pA);
                    this.setPointCircle(pos, radius, deg1, pB);
                    this.drawLine(pA, pB, thickness, colorId, alpha);
                    m4m.poolv2_del(pA);
                    m4m.poolv2_del(pB);
                };
                DebugLineTool2d.setPointCircle = function (pos, radius, Deg, p) {
                    if (!p) {
                        return;
                    }
                    p.x = Math.sin(Deg);
                    p.y = Math.cos(Deg);
                    m4m.math.vec2ScaleByNum(p, radius, p);
                    p.x += pos.x;
                    p.y += pos.y;
                };
                /**
                 * 绘制矩形
                 * @param x 位置x
                 * @param y 位置x
                 * @param w 宽度
                 * @param h 高度
                 * @param thickness  线段宽度
                 * @param colorId 线段颜色[0:红 , 1:橙  ,2:黄 ,3:绿 ,4:青 ,5:蓝 ,6:紫 ,7:白,8:黑 ,9:灰]
                 * @param alpha 透明值 0 - 1
                 */
                DebugLineTool2d.drawRect = function (x, y, w, h, thickness, colorId, alpha) {
                    if (thickness === void 0) { thickness = 3; }
                    if (colorId === void 0) { colorId = 0; }
                    if (alpha === void 0) { alpha = 1; }
                    var p = m4m.poolv2();
                    var p1 = m4m.poolv2();
                    var p2 = m4m.poolv2();
                    var p3 = m4m.poolv2();
                    m4m.math.vec2Set(p, x, y);
                    m4m.math.vec2Set(p1, x + w, y);
                    m4m.math.vec2Set(p2, x + w, y + h);
                    m4m.math.vec2Set(p3, x, y + h);
                    //
                    this.drawLine(p, p1, thickness, colorId, alpha);
                    this.drawLine(p1, p2, thickness, colorId, alpha);
                    this.drawLine(p2, p3, thickness, colorId, alpha);
                    this.drawLine(p3, p, thickness, colorId, alpha);
                    m4m.poolv2_del(p);
                    m4m.poolv2_del(p1);
                    m4m.poolv2_del(p2);
                    m4m.poolv2_del(p3);
                };
                DebugLineTool2d.update = function () {
                    if (this.currIndex == -1) {
                        return;
                    }
                    //隐藏所有的线
                    for (var i = 0; i < this.currIndex + 1; i++) {
                        var line = this.lineQueue[i];
                        if (line) {
                            line.transform.visible = false;
                        }
                    }
                    this.currIndex = -1;
                    // console.error(` lineQueue len : ${this.lineQueue.length}`);
                };
                DebugLineTool2d.remove = function () {
                    this.lineQueue.length = 0;
                };
                DebugLineTool2d.right = new m4m.math.vector2(1, 0);
                DebugLineTool2d.toAngle = 57.29577951308232;
                DebugLineTool2d.toRad = 1 / 180 * Math.PI;
                DebugLineTool2d.inited = false;
                DebugLineTool2d.currIndex = -1;
                return DebugLineTool2d;
            }()));
        }
    };
});
System.register("Tools/DebugTextTool2d", ["Tools/DebugLineTool2d"], function (exports_137, context_137) {
    "use strict";
    var DebugLineTool2d_1, DebugTextTool2d;
    var __moduleName = context_137 && context_137.id;
    return {
        setters: [
            function (DebugLineTool2d_1_1) {
                DebugLineTool2d_1 = DebugLineTool2d_1_1;
            }
        ],
        execute: function () {
            exports_137("DebugTextTool2d", DebugTextTool2d = /** @class */ (function () {
                /**
                 * 调试 文本绘制工具
                 */
                function DebugTextTool2d() {
                }
                DebugTextTool2d.init = function (rootNode) {
                    if (!rootNode) {
                        return;
                    }
                    this.textQueue = [];
                    this.textRoot = new m4m.framework.transform2D();
                    this.textRoot.name = "DebugTextTool2d_root";
                    rootNode.addChild(this.textRoot);
                    //templata
                    var ass = m4m.framework.sceneMgr.app.getAssetMgr();
                    //初始化模板
                    var tempT = new m4m.framework.transform2D();
                    tempT.pivot.x = 0.5;
                    tempT.pivot.y = 0.5;
                    tempT.width = 160;
                    tempT.height = 30;
                    tempT.name = "Text";
                    this.template = tempT.addComponent("label");
                    var labTemp = this.template;
                    labTemp["_fontName"] = "defFont.font.json";
                    labTemp.fontsize = 24;
                    labTemp.text = "";
                    labTemp.color = new m4m.math.color(1, 1, 1, 1);
                    labTemp.horizontalOverflow = true;
                    labTemp.verticalOverflow = true;
                    labTemp.verticalType = m4m.framework.VerticalType.Center;
                    labTemp.horizontalType = m4m.framework.HorizontalType.Center;
                    this.inited = true;
                };
                /**
                 * 绘制文本
                 * @param centerPos 中心点位置
                 * @param text 文本内容
                 * @param fontSize 字体大小
                 * @param colorId 线段颜色[0:红 , 1:橙  ,2:黄 ,3:绿 ,4:青 ,5:蓝 ,6:紫 ,7:白,8:黑 ,9:灰]
                 * @param alpha 透明值 0 - 1
                 */
                DebugTextTool2d.drawText = function (centerPos, text, fontSize, colorId, alpha) {
                    if (fontSize === void 0) { fontSize = 24; }
                    if (colorId === void 0) { colorId = 0; }
                    if (alpha === void 0) { alpha = 1; }
                    this.currIndex++;
                    if (this.currIndex >= this.textQueue.length) {
                        var lienTran = this.template.transform.clone();
                        lienTran.name = "DebugText_".concat(this.currIndex);
                        this.textRoot.addChild(lienTran);
                        var _lab = lienTran.getComponent("label");
                        this.textQueue.push(_lab);
                    }
                    var lab = this.textQueue[this.currIndex];
                    //文本内容
                    if (text != lab.text) {
                        lab.text = text;
                    }
                    //字体大小
                    if (fontSize != lab.fontsize) {
                        lab.fontsize = fontSize;
                    }
                    //颜色
                    if (!this.colorEqual(lab.color, DebugLineTool2d_1.DebugLineTool2d.colors[colorId])) {
                        m4m.math.colorClone(DebugLineTool2d_1.DebugLineTool2d.colors[colorId], lab.color);
                    }
                    //透明度
                    if (lab.color.a != alpha) {
                        lab.color.a = alpha;
                    }
                    //设置位置、旋转
                    //pos
                    if (!m4m.math.vec2Equal(centerPos, lab.transform.localTranslate)) {
                        m4m.math.vec2Clone(centerPos, lab.transform.localTranslate);
                    }
                    lab.transform.visible = true;
                    lab.transform.markDirty();
                };
                DebugTextTool2d.colorEqual = function (c, c1) {
                    if (c.r != c1.r) {
                        return false;
                    }
                    if (c.g != c1.g) {
                        return false;
                    }
                    if (c.b != c1.b) {
                        return false;
                    }
                    return true;
                };
                DebugTextTool2d.update = function () {
                    if (this.currIndex == -1) {
                        return;
                    }
                    //隐藏所有的线
                    for (var i = 0; i < this.currIndex + 1; i++) {
                        this.textQueue[i].transform.visible = false;
                    }
                    this.currIndex = -1;
                    // console.error(` lineQueue len : ${this.lineQueue.length}`);
                };
                DebugTextTool2d.currIndex = -1;
                DebugTextTool2d.inited = false;
                return DebugTextTool2d;
            }()));
        }
    };
});
System.register("Tools/TaskManager", [], function (exports_138, context_138) {
    "use strict";
    var TaskManager;
    var __moduleName = context_138 && context_138.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 任务 管理器
             * 单个任务 ： Function(cb):void;
             */
            TaskManager = /** @class */ (function () {
                function TaskManager() {
                }
                // private static onTaskClear() {
                //     console.log(`任务完全清空！`);
                // }
                // public static addTask(task: TaskFun) {
                //     task(this.onTaskClear);
                // }
                /**
                 * 创建串行任务
                 * @param tasks 任务函数(多参数)
                 */
                TaskManager.serial = function () {
                    var tasks = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        tasks[_i] = arguments[_i];
                    }
                    return this.serialArray(tasks);
                };
                /**
                 * 创建串行任务
                 * @param tasks 任务函数队列
                 */
                TaskManager.serialArray = function (tasks) {
                    var _tasks = tasks.concat(); //copy 一个
                    var _cb;
                    var result = function (cb) {
                        if (!_cb) {
                            _cb = cb;
                        }
                        var t = _tasks.shift();
                        if (t) {
                            t(result);
                        }
                        else {
                            _cb();
                        }
                    };
                    return result;
                };
                /**
                 * 创建并行任务
                 * @param tasks 任务函数(多参数)
                 */
                TaskManager.parallel = function () {
                    var tasks = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        tasks[_i] = arguments[_i];
                    }
                    return this.parallelArray(tasks);
                };
                /**
                 * 创建并行任务
                 * @param tasks 任务函数队列
                 */
                TaskManager.parallelArray = function (tasks) {
                    var _tasks = tasks.concat(); //copy 一个
                    var result = function (cb) {
                        var len = _tasks.length;
                        var count = 0;
                        var counting = function () {
                            count++;
                            if (count >= len) {
                                cb();
                            }
                        };
                        if (len > 0) { //并行处理任务
                            for (var i = 0; i < len; i++) {
                                var t = tasks[i];
                                t(counting);
                            }
                        }
                        else { //任务为空直接跳过
                            cb();
                        }
                    };
                    return result;
                };
                return TaskManager;
            }());
            exports_138("TaskManager", TaskManager);
        }
    };
});
System.register("Tools/GuideMgr", ["Tools/TaskManager"], function (exports_139, context_139) {
    "use strict";
    var TaskManager_1, GuideMgr;
    var __moduleName = context_139 && context_139.id;
    return {
        setters: [
            function (TaskManager_1_1) {
                TaskManager_1 = TaskManager_1_1;
            }
        ],
        execute: function () {
            exports_139("GuideMgr", GuideMgr = /** @class */ (function () {
                /**
                 * 引导功能 管理器
                 * 使用 1. init()  2.guideRun(id)
                 */
                function GuideMgr() {
                }
                /**
                 * <装饰 类 对象>
                 * 绑定 当前类到指定 GuideTypeID ，该类 绑定bindStep 的静态函数，归为该引导。
                 * 使用方式 ：@GuideMgr.bindType([引导ID]])
                 * @param _guideID 引导类型的ID
                 */
                GuideMgr.bindType = function (_guideID) {
                    var _this = this;
                    return function (constructor) {
                        var className = constructor.name;
                        var _CMap = _this.tempClassNameStepFunsMap;
                        var _TMap = _this.typeStepFunsMap;
                        var stepListC = _CMap[className];
                        var stepListT = _TMap[_guideID];
                        if (!stepListT) {
                            stepListT = _TMap[_guideID] = [];
                        }
                        if (!stepListC || stepListC.length < 1) {
                            return;
                        }
                        for (var i = 0, len = stepListC.length; i < len; i++) {
                            stepListT[i] = stepListC[i];
                        }
                        //清理
                        delete _CMap[className];
                        stepListC.length = 0;
                    };
                };
                /**
                 * <装饰 函数 对象>
                 * 绑定 引导单步的执行函数 (被标记的函数 必须是一个 static (cb:Function)=>void )
                 * 使用方式 ：@GuideMgr.bindStep([步骤号])
                 * @param stepID 执行步ID （标记第几步执行 ，ID 从1 开始计数）
                 */
                GuideMgr.bindStep = function (stepID) {
                    var _step = Math.floor(Math.abs(stepID));
                    var _map = this.tempClassNameStepFunsMap;
                    return function (target, propertyKey, descriptor) {
                        var className = target.name;
                        var _stepList = _map[className];
                        if (!_stepList) {
                            _stepList = _map[className] = [];
                        }
                        _stepList[_step] = target[propertyKey];
                    };
                };
                /**
                 * <装饰 函数 对象>
                 * 绑定 引导Action 函数
                 * 使用方式 ： @GuideMgr.bindActFun
                 */
                GuideMgr.bindActFun = function (target, propertyKey, descriptor) {
                    /** 绑定 到 actFunsMap */
                    GuideMgr.actFunMap[propertyKey] = [target[propertyKey], target];
                };
                GuideMgr.init = function (GuideBaseClassObj) {
                    this.GuideBaseClassObj = GuideBaseClassObj;
                    //表格解析
                    this.excelParse();
                };
                /**
                 * 开始跑 引导 ，返回一个 Promise
                 * @param GuideID 引导的ID
                 * @returns Promise,完成时则 引导完成。
                 */
                GuideMgr.guideRun = function (GuideID) {
                    return __awaiter(this, void 0, void 0, function () {
                        var stepList, _p;
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (GuideID == null) {
                                return [2 /*return*/];
                            }
                            stepList = this.typeStepFunsMap[GuideID];
                            if (!stepList || stepList.length < 1) {
                                console.error("\u6267\u884C ID [".concat(GuideID, "] \u5F15\u5BFC\u5931\u8D25,\u6B65\u9AA4\u6570\u636E\u4E3A \u7A7A \u3002"));
                                return [2 /*return*/];
                            }
                            console.log("==> \u5F15\u5BFC\u5F00\u59CB");
                            _p = new Promise(function (resolve) {
                                //等待 引导完成 调用 resolve
                                _this.activeGuides.push([GuideID, resolve]);
                                if (_this.currGuide == null) {
                                    _this.nextGuide();
                                }
                            });
                            return [2 /*return*/, _p];
                        });
                    });
                };
                //从表格解析 配置的数据
                GuideMgr.excelParse = function () {
                    var _this = this;
                    this.GuideBaseClassObj.list.forEach(function (val, key) {
                        var _guideB = val;
                        var _map = _this.typeStepFunsMap;
                        var stepList = _map[_guideB.guideID];
                        if (!stepList) {
                            stepList = _map[_guideB.guideID] = [];
                        }
                        // stepList[_guideB.stepID];
                        var jsonStr = "[".concat(_guideB.actions, "]");
                        var pList = JSON.parse(jsonStr);
                        var _actmap = _this.actFunMap;
                        var acts = [];
                        var _loop_6 = function (i, len) {
                            var _a;
                            var p = pList[i];
                            if (p.length < 1) {
                                return "continue";
                            }
                            var actName = p[0];
                            var actParam = p[1] ? p[1] : [];
                            //
                            if (!_actmap[actName]) {
                                console.error("action \u51FD\u6570 \"".concat(actName, "\" \uFF0C \u83B7\u53D6\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u914D\u7F6E\u6216\u8005\u5B9E\u73B0\u7ED1\u5B9A\u8BE5\u51FD\u6570\u3002"));
                                return "continue";
                            }
                            var fun;
                            var thisObj;
                            _a = _actmap[actName], fun = _a[0], thisObj = _a[1];
                            if (!fun || !thisObj) {
                                console.warn("action \u51FD\u6570 \u201C".concat(actName, "\u201D \u6CA1\u627E\u5230\u5177\u4F53\u5B9E\u73B0\uFF01"));
                                return "continue";
                            }
                            acts.push(function (cb) {
                                var result = fun.apply(thisObj, actParam);
                                if (!result || !result.then) {
                                    cb();
                                }
                                else {
                                    //返回值是一个promise,  异步函数步骤
                                    result.then(cb);
                                }
                            });
                        };
                        for (var i = 0, len = pList.length; i < len; i++) {
                            _loop_6(i, len);
                        }
                        if (acts.length > 0 && _guideB.desc) {
                            //打印 描述
                            acts.unshift(function (cb) {
                                if (GuideMgr.DebugPrint) {
                                    console.log("\u6B65\u9AA4\u63CF\u8FF0\uFF1A".concat(_guideB.desc));
                                }
                                cb();
                            });
                        }
                        var _step = Math.floor(Math.abs(_guideB.stepID));
                        stepList[_step] = function (cb) {
                            var combFun = TaskManager_1.TaskManager.serialArray(acts);
                            combFun(cb);
                        };
                    });
                };
                GuideMgr.nextGuide = function () {
                    var _a;
                    var _this = this;
                    if (this.activeGuides.length < 1) {
                        return;
                    }
                    var guide;
                    var endCB;
                    _a = this.activeGuides.shift(), guide = _a[0], endCB = _a[1];
                    if (guide == null) {
                        this.guideEnd();
                        return;
                    }
                    //运行 guide流程
                    this.currGuide = guide;
                    var stepList = this.typeStepFunsMap[guide];
                    //检查打印 空步骤 函数
                    for (var i = 0, len = stepList.length; i < len; i++) {
                        if (!stepList[i]) {
                            console.warn("\u5F15\u5BFCID [".concat(guide, "] , \u6B65\u9AA4 [").concat(i, "] \u4E3A\u7A7A,\u8BE5\u6B65\u5C06\u4F1A\u4E2D\u65AD\u4E0D\u5F80\u4E0B\u6267\u884C,\u8BF7\u68C0\u67E5\u914D\u7F6E\uFF01"));
                        }
                    }
                    //添加 步骤打印信息
                    if (this.DebugPrint) {
                        var arr = [];
                        var _loop_7 = function (i, len) {
                            var _fun = stepList[i];
                            if (!_fun) {
                                return "continue";
                            }
                            arr.push(function (cb) {
                                // tslint:disable-next-line: newline-per-chained-call
                                console.log("==> \u5F15\u5BFCID [".concat(guide, "] \u6B65\u9AA4(").concat(i, ")"));
                                _fun(cb);
                            });
                        };
                        for (var i = 0, len = stepList.length; i < len; i++) {
                            _loop_7(i, len);
                        }
                        stepList = arr;
                    }
                    //组织 步骤
                    var fun = TaskManager_1.TaskManager.serialArray(stepList);
                    //开始执行 引导 , 结束后回调 guideEnd
                    fun(function () {
                        endCB();
                        _this.guideEnd();
                    });
                };
                GuideMgr.guideEnd = function () {
                    console.log("==> \u5F15\u5BFC\u7ED3\u675F");
                    this.currGuide = null;
                    this.nextGuide();
                };
                /** 需要打印 步骤信息 */
                GuideMgr.DebugPrint = false;
                /** 引导 类型 */
                GuideMgr.typeStepFunsMap = {};
                /** excel 配置的 action 函数map  */
                GuideMgr.actFunMap = {};
                /**  */
                GuideMgr.tempClassNameStepFunsMap = {};
                /** 当前激活的单元实例队列 */
                GuideMgr.activeGuides = [];
                /** 当前 单元 */
                GuideMgr.currGuide = null;
                return GuideMgr;
            }()));
        }
    };
});
System.register("Tools/IconUtil", ["Tools/commTool"], function (exports_140, context_140) {
    "use strict";
    var commTool_6, IconUtil;
    var __moduleName = context_140 && context_140.id;
    return {
        setters: [
            function (commTool_6_1) {
                commTool_6 = commTool_6_1;
            }
        ],
        execute: function () {
            exports_140("IconUtil", IconUtil = /** @class */ (function () {
                function IconUtil() {
                }
                /** 清理 */
                IconUtil.clear = function () {
                    this.cacheUIMat = {};
                };
                /**
                 * 改变 ui节点树下所有 img的shader
                 * @param _uiTreeRoot ui节点树 根节点
                 * @param uiShaderName shader  名
                 * @param needCache 是否缓存老的 材质
                 */
                IconUtil.changeImgShaderByTree = function (_uiTreeRoot, uiShaderName, needCache) {
                    var _this = this;
                    if (needCache === void 0) { needCache = false; }
                    this.EachTransformImgTree(_uiTreeRoot, function (r) {
                        var t = r.transform;
                        if (needCache) {
                            var id = t.insId.getInsID();
                            _this.cacheUICSahderName[id] = r["_CustomShaderName"];
                            var mat = r.getMaterial();
                            if (mat) {
                                _this.cacheUIMat[id] = mat;
                            }
                            // let n = mat.getShader().getName();
                            // if (n.indexOf("grey") != -1) {
                            //     debugger;
                            // }
                        }
                        commTool_6.commTool.setUIShader(uiShaderName, r, true);
                    });
                };
                /**
                 * 恢复 ui节点树下所有 之前有缓存的老 材质
                 * @param _uiTreeRoot ui节点树 根节点
                 */
                IconUtil.recoverImgShaderByTree = function (_uiTreeRoot) {
                    var _this = this;
                    this.EachTransformImgTree(_uiTreeRoot, function (r) {
                        var t = r.transform;
                        var id = t.insId.getInsID();
                        var mat = _this.cacheUIMat[id];
                        if (mat) {
                            r["_uimat"] = mat;
                            delete _this.cacheUIMat[id];
                        }
                        r["_CustomShaderName"] = _this.cacheUICSahderName[id];
                        delete _this.cacheUICSahderName[id];
                    });
                };
                IconUtil.EachTransformImgTree = function (_uiTreeRoot, actFun) {
                    commTool_6.commTool.forEachTransform2DTree(_uiTreeRoot, function (t) {
                        // let a: m4m.framework.image2D;
                        var r = t.renderer;
                        if (r && !(r instanceof (m4m.framework.label))) {
                            actFun(r);
                        }
                    });
                };
                //设置图片灰白
                IconUtil.setIconGrayedShader = function (r) {
                    commTool_6.commTool.setUIShader(this.greyUIShaderName, r, false);
                };
                //还原图片原色
                IconUtil.setIconOriginShader = function (r) {
                    commTool_6.commTool.setUIShader(this.defuiShaderName, r, false);
                };
                //设置字体显示彩色流光
                IconUtil.setColorWordsLabelShader = function (r) {
                    commTool_6.commTool.setUIShader(this.labelMulColorShader, r, true);
                };
                //还原普通字体显示
                IconUtil.setCommonLabelShader = function (r) {
                    commTool_6.commTool.setUIShader(this.defuiFontShaderName, r, false);
                };
                IconUtil.uiSahderCacheTag = "__uiSahderCacheTag__";
                /*原UIshader
                 **/
                IconUtil.defuiShaderName = "shaders/defui";
                /*原UIshader(mask)
                 **/
                IconUtil.defMaSkUIShaderName = "shaders/defmaskui";
                /*图片灰白shader
                **/
                IconUtil.greyUIShaderName = "grey_ui.shader.json";
                /** 图片灰白  裁剪版本 */
                IconUtil.greyMaskUIShaderName = "grey_mask_ui.shader.json";
                /** 文本彩色流光 shader */
                IconUtil.labelMulColorShader = "mul_color_flow_font.shader.json";
                /*
                原字体shader
                **/
                IconUtil.defuiFontShaderName = "shaders/defuifont";
                IconUtil.cacheUIMat = {};
                IconUtil.cacheUICSahderName = {};
                return IconUtil;
            }()));
        }
    };
});
System.register("Tools/KeyFramePlayTool", ["Time/FrameTimer"], function (exports_141, context_141) {
    "use strict";
    var FrameTimer_1, KFPool, KFPlayer, KeyFramePlayTool;
    var __moduleName = context_141 && context_141.id;
    return {
        setters: [
            function (FrameTimer_1_1) {
                FrameTimer_1 = FrameTimer_1_1;
            }
        ],
        execute: function () {
            KFPool = /** @class */ (function () {
                function KFPool() {
                }
                KFPool.new_Obj = function () {
                    var result;
                    result = this._poolArr.pop();
                    if (!result) {
                        result = new KFPlayer();
                    }
                    delete result[this._isInPool];
                    return result;
                };
                KFPool.delete_Obj = function (player) {
                    if (player || player[this._isInPool]) {
                        return;
                    }
                    player.reset();
                    player[this._isInPool] = true;
                    this._poolArr.push(player);
                };
                KFPool._isInPool = "__isInPool__";
                KFPool._poolArr = [];
                return KFPool;
            }());
            KFPlayer = /** @class */ (function () {
                function KFPlayer() {
                    this._currIndex = 0;
                    this._playTime = 0;
                    this._timeID = -1;
                }
                KFPlayer.prototype.setData = function (keyFrameData, callback) {
                    this._keyFrameData = keyFrameData;
                    this._callback = callback;
                    this.playKeyFrame();
                    this.ckTimeOver(0, false); //先跑一次
                };
                KFPlayer.prototype.reset = function () {
                    this.stop();
                    this._currIndex = this._playTime = 0;
                    this._keyFrameData = null;
                    this._callback = null;
                    this._timeID = -1;
                };
                KFPlayer.prototype.stop = function () {
                    FrameTimer_1.FrameTimer.Instance.stop(this._timeID);
                };
                KFPlayer.prototype.ckTimeOver = function (delat, isEnd) {
                    var _pt = this._playTime += delat;
                    var kfd = this._keyFrameData;
                    if (!isEnd) {
                        var _from = kfd[this._currIndex];
                        var _to = kfd[this._currIndex + 1];
                        var rate = (_pt - _from[0]) / (_to[0] - _from[0]);
                        var linerVal = m4m.math.numberLerp(_from[1], _to[1], rate); // 计算线性差值
                        this._callback(linerVal, false);
                    }
                    else {
                        this._currIndex++;
                        var _isEnd = this._currIndex >= kfd.length - 1;
                        this._callback(kfd[this._currIndex][1], _isEnd);
                        if (_isEnd) {
                            return;
                        } //所有帧都播完了
                        //下一帧
                        this.playKeyFrame();
                    }
                };
                /** 从当前帧播放 */
                KFPlayer.prototype.playKeyFrame = function () {
                    var kfd = this._keyFrameData;
                    var currIdx = this._currIndex;
                    var nextIdx = currIdx + 1;
                    var timeLen = kfd[nextIdx][0] - kfd[currIdx][0];
                    this._timeID = FrameTimer_1.FrameTimer.Instance.once(timeLen, this.ckTimeOver.bind(this));
                };
                return KFPlayer;
            }());
            exports_141("KeyFramePlayTool", KeyFramePlayTool = /** @class */ (function () {
                /**
                 * 关键帧 播放工具
                 */
                function KeyFramePlayTool() {
                }
                /**
                 * 播放线性关键帧
                 * @param keyFrameData 关键帧数据数组 (kfData : [时间点,数值])
                 * @param callback 回调函数
                 * @returns 播放ID
                 */
                KeyFramePlayTool.playLinear = function (keyFrameData, callback) {
                    var _this = this;
                    if (!keyFrameData || !callback || keyFrameData.length < 2) {
                        return -1;
                    }
                    this._playIDCount++;
                    var result = this._playIDCount;
                    var _p = KFPool.new_Obj();
                    this._playIdMap[result] = _p;
                    _p.setData(keyFrameData, function (dt, isEnd) {
                        callback(dt, isEnd);
                        if (isEnd) {
                            _this.stop(result);
                        }
                    });
                    return result;
                };
                /**
                 * 停止播放
                 * @param playId 播放ID
                 */
                KeyFramePlayTool.stop = function (playId) {
                    var _kfp = this._playIdMap[playId];
                    if (!_kfp) {
                        return;
                    }
                    KFPool.delete_Obj(_kfp);
                    delete this._playIdMap[playId];
                };
                KeyFramePlayTool.test = function () {
                    var count = 0;
                    FrameTimer_1.FrameTimer.Instance.once(5, function (dt, isend) {
                        count += dt;
                        console.log("********** dt:".concat(dt, " , isend : ").concat(isend, " "));
                    });
                };
                KeyFramePlayTool._playIDCount = 0;
                KeyFramePlayTool._playIdMap = {};
                return KeyFramePlayTool;
            }()));
        }
    };
});
System.register("Tools/Over3dModelMgr", ["UIBase/metaUIManager"], function (exports_142, context_142) {
    "use strict";
    var metaUIManager_4, Over3dModelMgr;
    var __moduleName = context_142 && context_142.id;
    return {
        setters: [
            function (metaUIManager_4_1) {
                metaUIManager_4 = metaUIManager_4_1;
            }
        ],
        execute: function () {
            exports_142("Over3dModelMgr", Over3dModelMgr = /** @class */ (function () {
                /** UI之上 3D 渲染 管理类 */
                function Over3dModelMgr() {
                }
                Over3dModelMgr.tryInit = function () {
                    if (this.inited) {
                        return;
                    }
                    this.inited = true;
                    this._canvas = metaUIManager_4.metaUIManager.ActiveSelf.overlay.canvas;
                    this.asp = this._canvas.pixelWidth / this._canvas.pixelHeight;
                    this.camSize = metaUIManager_4.metaUIManager.ActiveSelf.modelCam.size;
                };
                /**
                 * 获取3d坐标通过UI坐标
                 * @param UIPos UI世界坐标
                 * @param outPos3d  返回的 3d空间世界坐标
                 */
                Over3dModelMgr.get3dPos = function (UIPos, outPos3d) {
                    this.tryInit();
                    var mpos = this.helpV2;
                    this._canvas.CanvasPosToModelPos(UIPos, mpos);
                    m4m.math.vec2ScaleByNum(mpos, this.camSize * 0.5, mpos);
                    m4m.math.vec3Set(outPos3d, mpos.x * this.asp, mpos.y, 0);
                    outPos3d.z += 10;
                };
                /**
                 * 将模型 渲染到UI上
                 * @param tran 3d 模型对象
                 */
                Over3dModelMgr.setModelToUI = function (tran) {
                    if (!tran) {
                        console.error("on addModelToUI , \u6709 \u53C2\u6570 \u4E3A null");
                        return;
                    }
                    if (tran[this.hasCachLayerTag]) {
                        return;
                    }
                    var _p = tran.getParent();
                    if (!_p) {
                        console.error("on addModelToUI , \u5BF9\u8C61 \u4E0D\u5728\u573A\u666F\u4E2D");
                        return;
                    }
                    tran[this.hasCachLayerTag] = true;
                    this.changeLayerGUI(tran);
                };
                /**
                 * 将模型 从UI渲染到上恢复
                 * @param tran 3d 模型对象
                 */
                Over3dModelMgr.recoveryModel = function (tran) {
                    //层级修改回来
                    delete tran[this.hasCachLayerTag];
                    this.resetLayerGUI(tran);
                };
                //改变层级
                Over3dModelMgr.changeLayerGUI = function (tran) {
                    var r = tran.gameObject.rawHandle.renderer;
                    if (r) {
                        r[this.cachLayerTag] = tran.gameObject.layer;
                        tran.gameObject.layer = metaUIManager_4.metaUIManager.ActiveSelf.layerIndexOverUI3d;
                    }
                    // let len = tran.children.length;
                    var len = tran.childrenCount;
                    if (!tran.rawHandle.hasRendererCompChild) {
                        return;
                    }
                    for (var i = 0; i < len; i++) {
                        // let sub = tran.children[i];
                        var sub = tran.getChildByIdx(i);
                        this.changeLayerGUI(sub);
                    }
                };
                //恢复层级
                Over3dModelMgr.resetLayerGUI = function (tran) {
                    var r = tran.gameObject.rawHandle.renderer;
                    if (r && r[this.cachLayerTag] != null) {
                        tran.gameObject.layer = r[this.cachLayerTag];
                        delete r[this.cachLayerTag];
                    }
                    // let len = tran.children.length;
                    var len = tran.childrenCount;
                    if (!tran.rawHandle.hasRendererCompChild) {
                        return;
                    }
                    for (var i = 0; i < len; i++) {
                        var sub = tran.getChildByIdx(i);
                        this.resetLayerGUI(sub);
                    }
                };
                Over3dModelMgr.helpV2 = new m4m.math.vector2();
                Over3dModelMgr.cachLayerTag = "__cachLayerTag__";
                Over3dModelMgr.hasCachLayerTag = "__hasCachLayer__";
                Over3dModelMgr.inited = false;
                return Over3dModelMgr;
            }()));
        }
    };
});
System.register("Tools/ScreenshotMgr", ["Tools/PlatformUtil"], function (exports_143, context_143) {
    "use strict";
    var PlatformUtil_2, ScreenshotMgr;
    var __moduleName = context_143 && context_143.id;
    return {
        setters: [
            function (PlatformUtil_2_1) {
                PlatformUtil_2 = PlatformUtil_2_1;
            }
        ],
        execute: function () {
            exports_143("ScreenshotMgr", ScreenshotMgr = /** @class */ (function () {
                /**
                 * 截屏管理器
                 */
                function ScreenshotMgr() {
                }
                ScreenshotMgr.init = function () {
                    var scene = m4m.framework.sceneMgr.scene;
                    var app = scene.app;
                    var w = app.width;
                    var h = app.height;
                    this.camPostObj = new m4m.framework.cameraPostQueue_Color();
                    this.camPostObj.renderTarget = new m4m.render.glRenderTarget(scene.webgl, w, h, false, false);
                    this.canvas2d = document.createElement("canvas");
                    this.canvas2d.width = 100;
                    this.canvas2d.height = 100;
                    this.ctx2d = this.canvas2d.getContext("2d");
                };
                /** 截取屏幕 */
                ScreenshotMgr.Screenshot = function (withOutUI) {
                    if (withOutUI === void 0) { withOutUI = true; }
                    this.refreshGlRenderTarget();
                    //获取相机
                    var scene = m4m.framework.sceneMgr.scene;
                    var idx = scene.renderCameras.length - 1;
                    var cam = scene.renderCameras[idx];
                    var context = scene.renderContext[idx];
                    if (!cam || !context) {
                        return;
                    }
                    var webgl = scene.app.webgl;
                    var app = scene.app;
                    var astMgr = scene.app.getAssetMgr();
                    //准备好 fbo
                    cam._targetAndViewport(this.camPostObj.renderTarget, scene, context, false);
                    context.webgl.depthMask(true); //zwrite 會影響clear depth，這個查了好一陣
                    m4m.render.glDrawPass.lastZWrite = true;
                    //绘制到 fbo
                    //绘制场景
                    context.updateCamera(app, cam);
                    context.updateLights(scene["renderLights"]);
                    m4m.framework.camera["lastFID"] = -1;
                    cam.fillRenderer(scene);
                    cam.renderScene(scene, context, idx);
                    if (!withOutUI) {
                        //绘制UI
                        var ols = cam.getOverLays();
                        for (var i = 0, len = ols.length; i < len; i++) {
                            var ol = ols[i];
                            ol.render(context, astMgr, cam);
                        }
                    }
                    //关闭fbo
                    m4m.render.glRenderTarget.useNull(webgl);
                    var rt = this.camPostObj.renderTarget;
                    if (this.texReader) {
                        this.texReader.dispose();
                    }
                    this.texReader = this.makeTexReader(rt.width, rt.height, rt.texture);
                    //翻转Y
                    this.flipY();
                    var height;
                    var _y;
                    var _x;
                    if (PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType == PlatformUtil_2.PlatformType.PC) {
                        if (window.innerHeight > window.innerWidth) {
                            // tslint:disable-next-line: newline-per-chained-call
                            height = Number((window.innerHeight * this.PictureScale).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            _x = Number(((rt.width - height) / 2).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            _y = Number(((rt.height - height) / 2).toString().split(".")[0]);
                        }
                        else {
                            // tslint:disable-next-line: newline-per-chained-call
                            height = Number((window.innerWidth * this.PictureScale).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            _y = Number(((rt.width - height) / 2).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            _x = Number(((rt.height - height) / 2).toString().split(".")[0]);
                        }
                    }
                    else {
                        if (rt.height > rt.width) {
                            // tslint:disable-next-line: newline-per-chained-call
                            console.log("window.innerHeight", window.innerHeight);
                            console.log("window.innerWidth", window.innerWidth);
                            height = Number((rt.height * this.PictureScale).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            _x = Number(((rt.width - height) / 2).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            _y = Number(((rt.height - height) / 2).toString().split(".")[0]);
                        }
                        else {
                            console.log("window.innerHeight", window.innerHeight);
                            console.log("window.innerWidth", window.innerWidth);
                            // tslint:disable-next-line: newline-per-chained-call
                            height = Number((rt.width * this.PictureScale).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            console.log("rt.width", rt.width);
                            console.log("rt.height", rt.height);
                            _y = Number(((rt.width - height) / 2).toString().split(".")[0]);
                            // tslint:disable-next-line: newline-per-chained-call
                            _x = Number(((rt.height - height) / 2).toString().split(".")[0]);
                        }
                    }
                    this.Cutting(_x, _y, height, height);
                };
                /** 保存称为base64 数据 */
                ScreenshotMgr.SaveToBase64 = function () {
                    if (!this.currData) {
                        return "";
                    }
                    var result;
                    // //buffer conver 
                    // result = commTool.getImgBase64ByBuffer(this.texReader.data);
                    //canvas conver fun
                    var buffer = new Uint8ClampedArray(this.currData);
                    var w = this.currW;
                    var h = this.currH;
                    var imgData = new ImageData(buffer, w, h);
                    this.canvas2d.width = w;
                    this.canvas2d.height = h;
                    this.ctx2d.putImageData(imgData, 0, 0);
                    result = this.canvas2d.toDataURL("image/png");
                    return result;
                };
                ScreenshotMgr.SaveToBuffer = function () {
                    if (!this.currData) {
                        return;
                    }
                    var buffer = new Int32Array(this.currData.buffer);
                    return buffer;
                };
                /**
                 * 裁剪截取的图片数据
                 * @param x 屏幕空间坐标x
                 * @param y 屏幕空间坐标y
                 * @param w 屏幕空间 宽度
                 * @param h 屏幕空间 高度
                 */
                ScreenshotMgr.Cutting = function (x, y, w, h) {
                    if (isNaN(w) || isNaN(h) || w == 0 || h == 0) {
                        return;
                    }
                    var texReader = this.texReader;
                    this.currW = w;
                    this.currH = h;
                    var tW = texReader.width;
                    var tH = texReader.height;
                    var notChange = x == 0 && y == 0 && w == tW && h == tH;
                    if (notChange) {
                        this.currData = texReader.data;
                        return;
                    }
                    //调整过滤成有效数据
                    // tslint:disable-next-line: no-parameter-reassignment
                    x = x < 0 ? 0 : x > tW ? tW : x;
                    // tslint:disable-next-line: no-parameter-reassignment
                    y = y < 0 ? 0 : y > tH ? tH : y;
                    var rDW = tW - x;
                    var rDH = tH - y;
                    if (rDW <= 0 || rDW <= 0) {
                        this.currData = null;
                        return;
                    }
                    // tslint:disable-next-line: no-parameter-reassignment
                    this.currW = w = Math.min(rDW, w);
                    // tslint:disable-next-line: no-parameter-reassignment
                    this.currH = h = Math.min(rDH, h);
                    //计算
                    var wBAll = tW * 4;
                    var wB = w * 4;
                    var data = this.currData = new Uint8Array(wB * h);
                    var allData = this.texReader.data;
                    //copy byte
                    for (var _y = 0; _y < h; _y++) {
                        var _yAll = _y + y;
                        var _numYAll = _yAll * wBAll;
                        var _numY = _y * wB;
                        for (var _x = 0; _x < wB; _x++) {
                            var _xAll = _x + x * 4;
                            data[_numY + _x] = allData[_numYAll + _xAll];
                        }
                    }
                };
                ScreenshotMgr.makeTexReader = function (w, h, glTex) {
                    var postObj = this.camPostObj;
                    if (!postObj) {
                        return;
                    }
                    var app = m4m.framework.sceneMgr.scene.app;
                    var result = new m4m.render.textureReader(app.webgl, glTex, w, h, false);
                    return result;
                };
                /** Y翻转纹理 */
                ScreenshotMgr.flipY = function () {
                    var data = this.texReader.data;
                    var w = this.texReader.width * 4;
                    var h = this.texReader.height;
                    var halfH = Math.floor(h / 2);
                    for (var y = 0; y < halfH; y++) {
                        var fY = h - y;
                        var numYT = y * w;
                        var numYB = fY * w;
                        for (var x = 0; x < w; x++) {
                            var top_1 = data[numYT + x];
                            data[numYT + x] = data[numYB + x];
                            data[numYB + x] = top_1;
                        }
                    }
                };
                ScreenshotMgr.fixRotAngle = function () {
                    var app = m4m.framework.sceneMgr.scene.app;
                    if (app.orientation == m4m.framework.OrientationMode.AUTO) {
                        return 0;
                    }
                    var ctn = app.outcontainer;
                    if (ctn == null) {
                        return 0;
                    }
                    var bound = ctn.getBoundingClientRect();
                    var isWBigger = bound.width > bound.height;
                    switch (app.orientation) {
                        case m4m.framework.OrientationMode.LANDSCAPE:
                            if (!isWBigger) {
                                return 90;
                            }
                            break;
                        case m4m.framework.OrientationMode.PORTRAIT:
                            if (isWBigger) {
                                return 90;
                            }
                            break;
                        default:
                    }
                    return 0;
                };
                ScreenshotMgr.refreshGlRenderTarget = function () {
                    var currRot = this.fixRotAngle();
                    var app = m4m.framework.sceneMgr.scene.app;
                    var w = app.width;
                    var h = app.height;
                    if (currRot == this.lastfixRot && this.currW == w && this.currH == h) {
                        return;
                    }
                    this.lastfixRot = currRot;
                    if (this.camPostObj.renderTarget) {
                        if (this.camPostObj.renderTarget.renderbuffer) {
                            var Length = Object.keys(this.camPostObj.renderTarget.renderbuffer).length;
                            if (Length > 0) {
                                this.camPostObj.renderTarget.dispose(app.webgl);
                            }
                        }
                        else {
                            this.camPostObj.renderTarget.dispose(app.webgl);
                        }
                    }
                    this.camPostObj.renderTarget = new m4m.render.glRenderTarget(app.webgl, w, h, true, true);
                };
                ScreenshotMgr.currW = 0;
                ScreenshotMgr.currH = 0;
                ScreenshotMgr.lastfixRot = 0; //屏幕旋转角度
                ScreenshotMgr.PictureWidth = 700;
                ScreenshotMgr.PictureHeight = 700;
                ScreenshotMgr.PictureScale = 0.6;
                return ScreenshotMgr;
            }()));
        }
    };
});
System.register("Tools/bztool", [], function (exports_144, context_144) {
    "use strict";
    var BezierCurveTool;
    var __moduleName = context_144 && context_144.id;
    return {
        setters: [],
        execute: function () {
            exports_144("BezierCurveTool", BezierCurveTool = /** @class */ (function () {
                //贝塞尔计算工具
                function BezierCurveTool() {
                }
                /**
                 * 评估值
                 * @param kfs 所有的关键帧对象
                 * @param _time normal 时间 （0 - 1）
                 */
                BezierCurveTool.evaluate = function (kfs, _time) {
                    if (kfs.length < 2) {
                        return 0;
                    }
                    var time = _time;
                    if (_time > 1) {
                        time = 1;
                    }
                    var kfL;
                    var kfR;
                    if (kfs.length == 2) {
                        kfL = kfs[0];
                        kfR = kfs[1];
                    }
                    else {
                        var tIdx = 0;
                        kfR = kfs[tIdx];
                        while (kfR.time < time) {
                            tIdx++;
                            kfR = kfs[tIdx];
                        }
                        kfL = kfs[tIdx - 1];
                    }
                    return this.calcValue(kfL, kfR, time);
                };
                /**
                 * 计算 曲线的值
                 * @param kfL 左边帧对象
                 * @param kfR 右边帧对象
                 * @param playTime 时间值
                 */
                BezierCurveTool.calcValue = function (kfL, kfR, playTime) {
                    //是否 是常量
                    if (kfL.outTangent == Infinity || kfR.inTangent == Infinity) {
                        return kfL.value;
                    }
                    var rate = (playTime - kfL.time) / (kfR.time - kfL.time);
                    var v2 = BezierCurveTool.converCalc(kfL.value, kfR.value, kfL.time, kfR.time, kfL.inTangent, kfR.outTangent, rate);
                    return v2.y;
                };
                BezierCurveTool.converCalc = function (inV, outV, inTime, outTime, inTangent, outTangent, t) {
                    var p0 = this.helpV2;
                    var p1 = this.helpV2v1;
                    var p2 = this.helpV2v2;
                    var p3 = this.helpV2v3;
                    m4m.math.vec2Set(p0, inTime, inV);
                    m4m.math.vec2Set(p3, outTime, outV);
                    var dir1 = this.helpV2v4;
                    m4m.math.vec2Set(dir1, inTangent < 0 ? -1 : 1, Math.sqrt(inTangent * inTangent + 1));
                    var dir2 = this.helpV2v5;
                    m4m.math.vec2Set(dir2, outTangent < 0 ? -1 : 1, Math.sqrt(outTangent * outTangent + 1));
                    m4m.math.vec2Add(p0, dir1, p1);
                    m4m.math.vec2Add(p3, dir2, p2);
                    BezierCurveTool.calcCurve(t, p0, p1, p2, p3, BezierCurveTool.cupV2);
                    return BezierCurveTool.cupV2;
                };
                //三阶 贝塞尔曲线
                BezierCurveTool.calcCurve = function (t, P0, P1, P2, P3, out) {
                    out.x = this.CurveEquation(t, P0.x, P1.x, P2.x, P3.x);
                    out.y = this.CurveEquation(t, P0.y, P1.y, P2.y, P3.y);
                    return out;
                };
                BezierCurveTool.CurveEquation = function (t, val0, val1, val2, val3) {
                    // tslint:disable-next-line: max-line-length
                    // var res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;
                    var res = (1 - t) * (1 - t) * (1 - t) * val0 + t * (1 - t) * (1 - t) * val1 * 2 + t * t * (1 - t) * val2 * 2 + t * t * t * val3;
                    return res;
                };
                BezierCurveTool.helpV2 = new m4m.math.vector2();
                BezierCurveTool.helpV2v1 = new m4m.math.vector2();
                BezierCurveTool.helpV2v2 = new m4m.math.vector2();
                BezierCurveTool.helpV2v3 = new m4m.math.vector2();
                BezierCurveTool.helpV2v4 = new m4m.math.vector2();
                BezierCurveTool.helpV2v5 = new m4m.math.vector2();
                BezierCurveTool.cupV2 = new m4m.math.vector2();
                return BezierCurveTool;
            }()));
        }
    };
});
System.register("Tools/fontMgr", ["Tools/FrameMgr", "Tools/miniGame"], function (exports_145, context_145) {
    "use strict";
    var FrameMgr_7, miniGame_10, FontMgr;
    var __moduleName = context_145 && context_145.id;
    return {
        setters: [
            function (FrameMgr_7_1) {
                FrameMgr_7 = FrameMgr_7_1;
            },
            function (miniGame_10_1) {
                miniGame_10 = miniGame_10_1;
            }
        ],
        execute: function () {
            exports_145("FontMgr", FontMgr = /** @class */ (function () {
                function FontMgr() {
                    this.textureSize = 2048; //贴图尺寸
                    // private canvas2d: HTMLCanvasElement;
                    //文字间隔
                    this.letterSpacing = 1;
                    //字体大小
                    this.fontSize = 30;
                    //当前有的文字字符串
                    this.haveString = "";
                    this.defFontResName = "defFont.font.json";
                    /** 刷新字体纹理 是否使用unit8array  */
                    this.useBufferRefresh = false;
                    //手机系统 ios 安卓
                    this.isIosBol = false;
                    this.adding = false;
                    this.cTIdx = 0;
                    this.xAddvance = 0;
                    this.yAddvance = 0;
                    FrameMgr_7.FrameMgr.Add(this.update, this);
                }
                Object.defineProperty(FontMgr, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new FontMgr();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FontMgr.prototype, "realheight", {
                    get: function () {
                        return this.fontSize + 8;
                    },
                    enumerable: false,
                    configurable: true
                });
                //初始化
                /**
                 * name
                 */
                FontMgr.prototype.init = function (useBufferRefresh, isIosBol) {
                    if (useBufferRefresh === void 0) { useBufferRefresh = false; }
                    this.useBufferRefresh = useBufferRefresh;
                    this.isIosBol = isIosBol;
                    // console.error("初始化字体: " + TimeUtil.realtimeSinceStartup);
                    this.fontcontexttemp = this.makeTempContext();
                    this.imgWidth = this.textureSize;
                    this.imgHeight = this.textureSize;
                    this.fontImageData = this.makeFontCanvasImgData(this.imgWidth, this.imgHeight);
                    /*
                    fillStyle 可以（color 纯色填充  gradient 渐变填充  pattern 纹理填充）
                    **/
                    this.haveString = "abcdefghijklmnopqrstuvwxyz鳥麗ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890皚藹礙愛翺襖奧壩()[],.;:{}+_-*!<>?/";
                    //init font res
                    // this._font = new m4m.framework.fontNew(this.defFontResName);
                    this._font = new m4m.framework.font(this.defFontResName);
                    this._font.fontname = "FZCuYuan-M03S"; // "defFont";
                    this._font.cmap = {};
                    // this._data = new Uint8Array(this.imgWidth * this.imgHeight * 4);
                    this._font.texture = this.createTextrue();
                    m4m.framework.assetMgr.mapNamed[this.defFontResName] = this._font;
                    this._font.pointSize = this.fontSize;
                    this._font.padding = this.letterSpacing;
                    this._font.lineHeight = this.realheight;
                    // this._font.baseline = 26.8125;
                    this._font.baseline = -7;
                    this._font.atlasWidth = this.textureSize;
                    this._font.atlasHeight = this.textureSize;
                    //lable 动态扩展接口 对接  新增新的文字
                    m4m.framework.label.onTryExpandTexts = this.onTryExpandTexts.bind(this);
                    //初始化时绘制的文字图
                    this.checkAddText(this.haveString);
                    // //test 
                    // setTimeout(() => {
                    //     this.test();
                    // }, 9000);
                };
                /**
                 * 添加字符到字体
                 * @param str
                 */
                FontMgr.prototype.checkAddText = function (str) {
                    var updateData = this.tryExpandText(str);
                    if (updateData) {
                        this.refCanvas2d();
                    }
                };
                FontMgr.prototype.createCanvas = function (canvasName) {
                    var canvas2d;
                    if (miniGame_10.miniGame.miniType == miniGame_10.miniAPIType.none) {
                        canvas2d = document.createElement("canvas");
                    }
                    else {
                        canvas2d = miniGame_10.miniGame.getOffScreenCanvas(canvasName);
                    }
                    return canvas2d;
                };
                FontMgr.prototype.makeTempContext = function () {
                    var canvas2d = this.createCanvas(FontMgr.FONT_CANVAS_TEMP);
                    var context2d = canvas2d.getContext("2d");
                    canvas2d.className = "fontcanvas";
                    canvas2d.style.width = "400px";
                    canvas2d.style.height = "200px";
                    canvas2d.style.backgroundColor = "#000000";
                    return context2d;
                };
                //创建新的imageData对象
                FontMgr.prototype.makeFontCanvasImgData = function (w, h) {
                    var canvas2d = this.createCanvas(FontMgr.FONT_CANVAS);
                    canvas2d.width = w;
                    canvas2d.height = h;
                    this.fontContext = canvas2d.getContext("2d");
                    return this.fontContext.createImageData(w, h);
                };
                FontMgr.prototype.update = function (dt) {
                    // console.error("帧管理 判断是否需要绘制canvas ： " + this.adding);
                    if (!this.adding) {
                        return;
                    }
                    this.adding = false;
                    this.refCanvas2d();
                };
                //新增文字字符串
                FontMgr.prototype.onTryExpandTexts = function (str) {
                    // console.error("新增的字符串 ： " + str);
                    var needUpdate = this.tryExpandText(str);
                    if (!needUpdate) {
                        return;
                    }
                    this.adding = true;
                };
                //刷新canvas2d
                FontMgr.prototype.refCanvas2d = function () {
                    // console.error("刷新canvas2d");
                    var _tex = this._font.texture;
                    var gl = m4m.framework.sceneMgr.app.webgl;
                    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true); //y轴翻转
                    gl.bindTexture(gl.TEXTURE_2D, _tex.glTexture.texture);
                    if (!this.useBufferRefresh) {
                        this.fontContext.putImageData(this.fontImageData, 0, 0);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.fontContext.canvas);
                    }
                    else {
                        //解决IOS 下不刷新问题
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.imgWidth, this.imgHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.fontImageData.data);
                        // console.error("文字绘制完成: " + TimeUtil.realtimeSinceStartup);
                        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.imgWidth, this.imgHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, this._data);
                        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.canvas2d);
                    }
                };
                //创建texture
                FontMgr.prototype.createTextrue = function () {
                    var gl = m4m.framework.sceneMgr.app.webgl;
                    var _texture = new m4m.framework.texture("canvasFont_".concat(this.cTIdx));
                    // console.error(`  createTextrue     ${_texture.getName()}-------------------------   `);
                    var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                    //let  t2d = new m4m.render.glTexture2D(assetMgr.webgl, _textureFormat);
                    var t2d = new m4m.render.glTexture2D(gl, _textureFormat);
                    // t2d.uploadImage(sharedCanvas, false, true, false, false);
                    // t2d.uploadByteArray(false, true,w, h, data);
                    t2d.uploadByteArray(false, true, 1, 1, new Uint8Array(4), false, false, false, false);
                    _texture.glTexture = t2d;
                    // uiMgr.shareCanvasImg.image = _texture;
                    this.cTIdx++;
                    return _texture;
                };
                /** 尝试拓展文字到font */
                FontMgr.prototype.tryExpandText = function (str) {
                    if (str == null) {
                        return false;
                    }
                    var updateData = false;
                    var font = this._font;
                    for (var i = 0, len = str.length; i < len; i++) {
                        var key = str.charAt(i);
                        if (font.cmap[key]) {
                            continue;
                        }
                        // console.error("增加字：" + key);
                        this.adddNewChar(key);
                        FontMgr.collectChars += key;
                        updateData = true;
                    }
                    return updateData;
                };
                //把单个字符绘制到canvas上
                FontMgr.prototype.adddNewChar = function (key) {
                    //key = "击";
                    //canvas绘制区域的背景色
                    this.fontcontexttemp.fillStyle = "#000000";
                    //canvas绘制的起始坐标和区域宽高
                    this.fontcontexttemp.fillRect(0, 0, this.fontSize * 2, this.fontSize * 2);
                    var realHeight = this.realheight;
                    //字体样式
                    //安卓字体
                    this.fontcontexttemp.font = this.fontSize + "px NotoSansSC-Regular"; //Heiti SC   Roboto   Heiti TC  NotoSansSC-Regular  DroidSansFallback
                    if (this.isIosBol) {
                        //ios字体
                        this.fontcontexttemp.font = this.fontSize + "px Heiti TC"; //Heiti SC   Roboto   Heiti TC  NotoSansSC-Regular  DroidSansFallback
                    }
                    this.fontcontexttemp.strokeStyle = "#6C6C6C"; //描边颜色
                    this.fontcontexttemp.lineWidth = 4;
                    this.fontcontexttemp.fillStyle = "#ff0000"; //"#ff0000"; #000000  ffffff
                    this.fontcontexttemp.textBaseline = "bottom";
                    this.fontcontexttemp.strokeText(key, 0, realHeight); //添加文字描边
                    this.fontcontexttemp.fillText(key, 0, realHeight); //添加文字
                    var charwidth = this.fontcontexttemp.measureText(key).width;
                    charwidth = Math.ceil(charwidth);
                    //console.log(key + " width:" + charwidth);
                    if (charwidth == 0) {
                        //console.log("font char: " + key);
                        charwidth = this.fontSize;
                    }
                    var fontData = this.fontcontexttemp.getImageData(0, 0, charwidth, realHeight);
                    var newchar = new m4m.framework.charinfo();
                    //-------------------
                    newchar.x = (this.xAddvance) / this.textureSize;
                    newchar.y = (this.yAddvance) / this.textureSize;
                    newchar.w = (charwidth) / this.textureSize;
                    newchar.h = (realHeight) / this.textureSize;
                    newchar.xSize = charwidth;
                    newchar.ySize = realHeight;
                    newchar.xAddvance = charwidth;
                    this._font.cmap[key] = newchar;
                    //let curline = Math.floor(this.charIndex / this.charlenInRow);
                    //let curcolumn = this.charIndex % this.charlenInRow;
                    //---------------------
                    for (var h = 0; h < realHeight; h++) {
                        for (var w = 0; w < charwidth; w++) {
                            var newindex = (h + this.yAddvance) * this.textureSize + w + this.xAddvance;
                            var oindex = h * charwidth + w;
                            this.fontImageData.data[newindex * 4 + 0] = fontData.data[oindex * 4 + 0];
                            this.fontImageData.data[newindex * 4 + 1] = fontData.data[oindex * 4 + 1];
                            this.fontImageData.data[newindex * 4 + 2] = fontData.data[oindex * 4 + 2];
                            this.fontImageData.data[newindex * 4 + 3] = fontData.data[oindex * 4 + 3];
                            // this._data[newindex * 4 + 0] = fontData.data[oindex * 4 + 0];
                            // this._data[newindex * 4 + 1] = fontData.data[oindex * 4 + 1];
                            // this._data[newindex * 4 + 2] = fontData.data[oindex * 4 + 2];
                            // this._data[newindex * 4 + 3] = fontData.data[oindex * 4 + 3];
                            //this.fontTex.data.set(fontData.data.subarray(oindex * 4, oindex * 4 + 3), newindex * 4);
                        }
                    }
                    //---------------- fontTex data
                    this.xAddvance += charwidth;
                    if (this.xAddvance + this.fontSize >= this.textureSize) {
                        this.xAddvance = 0;
                        this.yAddvance += realHeight;
                        if (this.yAddvance > this.textureSize) {
                            console.error("动态字体图的尺寸不够大！");
                        }
                        //this.yAddvance += this.yoffset;
                    }
                };
                FontMgr.FONT_CANVAS = "FONT_CANVAS";
                FontMgr.FONT_CANVAS_TEMP = "FONT_CANVAS_TEMP";
                return FontMgr;
            }()));
        }
    };
});
System.register("Tools/htmlCode", ["PSDUI/UiManager"], function (exports_146, context_146) {
    "use strict";
    var UiManager_2, htmlCode;
    var __moduleName = context_146 && context_146.id;
    return {
        setters: [
            function (UiManager_2_1) {
                UiManager_2 = UiManager_2_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            htmlCode = /** @class */ (function () {
                function htmlCode() {
                }
                htmlCode.runCode = function () {
                    var urlCode = window["urlCode"];
                    if (!urlCode) {
                        console.error("没有指令");
                        return;
                    }
                    var codeList = urlCode.split("=");
                    var order = codeList[0].toLowerCase();
                    switch (order) {
                        case "showui":
                            if (codeList.length < 2) {
                                console.error("指令错误");
                                return;
                            }
                            UiManager_2.UiManager.showUi(codeList[1]);
                            return;
                        default:
                            console.error("指令错误");
                            return;
                    }
                };
                return htmlCode;
            }());
            exports_146("htmlCode", htmlCode);
        }
    };
});
System.register("Tools/materialchanger", ["Tools/commTool"], function (exports_147, context_147) {
    "use strict";
    var commTool_7, materialchanger;
    var __moduleName = context_147 && context_147.id;
    return {
        setters: [
            function (commTool_7_1) {
                commTool_7 = commTool_7_1;
            }
        ],
        execute: function () {
            exports_147("materialchanger", materialchanger = /** @class */ (function () {
                /**
                 * 模型 材质shader切换器
                 * @param ignoreIRenders 排除的渲染组件
                 */
                function materialchanger(ignoreIRenders) {
                    if (ignoreIRenders === void 0) { ignoreIRenders = null; }
                    this.limitIRenderNameMap = {};
                    if (!ignoreIRenders) {
                        return;
                    }
                    for (var i = 0, len = ignoreIRenders.length; i < len; i++) {
                        var str = ignoreIRenders[i];
                        this.limitIRenderNameMap[str] = true;
                    }
                }
                Object.defineProperty(materialchanger, "assetMgr", {
                    get: function () {
                        if (!this._assetMgr) {
                            this._assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                        }
                        return this._assetMgr;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 获取 matSetting
                 * @param tran 渲染模型对象
                 * @param matConfig matSetting对象
                 */
                materialchanger.prototype.getSetting = function (tran, matConfig) {
                    var rimSetting = tran[materialchanger.changeMatTag];
                    if (!rimSetting) {
                        tran[materialchanger.changeMatTag] = rimSetting = { configMap: {}, currChangedShaderName: matConfig.shaderName };
                    }
                    if (rimSetting.configMap[matConfig.shaderName]) {
                        return rimSetting;
                    }
                    //mat set
                    this.matSetTo(tran, matConfig);
                    return rimSetting;
                };
                /**
                 * 改变材质
                 * @param tran 渲染模型对象
                 * @param matConfig matSetting对象
                 * @param toOrig 是否是设置成源初材质
                 */
                materialchanger.prototype.changeMat = function (tran, matConfig, toOrig) {
                    var setting = tran[materialchanger.changeMatTag];
                    setting.currChangedShaderName = toOrig ? "" : matConfig.shaderName;
                    var shName = matConfig.shaderName;
                    var configVal = setting.configMap[shName];
                    var skinMrs = configVal.hasMatsRenders;
                    // let skinMrs = rimSetting.rimSkinMR;
                    for (var i = 0, len = skinMrs.length; i < len; i++) {
                        var skin = skinMrs[i];
                        var _setting = skin[materialchanger.changeMatTag];
                        skin.materials = toOrig ? _setting.originalMats : _setting[shName];
                    }
                };
                /**
                 * 设置材质 数值通过参数对象
                 * @param mat 材质对象
                 * @param valObj 设置参数
                 */
                materialchanger.prototype.setMatValue = function (mat, valObj) {
                    for (var key in valObj) {
                        var val = valObj[key];
                        if (typeof (val) == "number") {
                            mat.setFloat(key, val);
                        }
                        else if (val instanceof m4m.math.vector4) {
                            mat.setVector4(key, val);
                        }
                    }
                };
                materialchanger.prototype.getShaderFullName = function (shName) {
                    if (!shName) {
                        return "";
                    }
                    return "".concat(shName, ".shader.json");
                };
                materialchanger.prototype.matSetTo = function (tran, matConfig) {
                    var _this = this;
                    var mrs = [];
                    commTool_7.commTool.ergodicTranNode(tran, function (subTran) {
                        var rcomp = subTran.gameObject.renderer;
                        if (rcomp && rcomp.materials != null) {
                            var className = rcomp.constructor.name;
                            if (!_this.limitIRenderNameMap[className]) {
                                mrs.push(rcomp);
                            }
                        }
                    });
                    var rimSetting = tran[materialchanger.changeMatTag];
                    var configVal = rimSetting.configMap[matConfig.shaderName];
                    if (configVal) {
                        return;
                    }
                    configVal = {};
                    var shName = matConfig.shaderName;
                    rimSetting.configMap[shName] = configVal;
                    //
                    configVal.hasMatsRenders = mrs;
                    var outRimMats = configVal.mats = [];
                    configVal.parameterVal = {};
                    this.parameterToClone(matConfig.parameter, configVal.parameterVal);
                    //删除
                    var map = {};
                    //去重 mat
                    for (var i = 0, len = mrs.length; i < len; i++) {
                        var skinmr = mrs[i];
                        var _otherMats = [];
                        var _originalMats = void 0;
                        var cacheMats = skinmr[materialchanger.changeMatTag];
                        var cachedOriginalMats = cacheMats != null;
                        _originalMats = cachedOriginalMats ? cacheMats.originalMats : skinmr.materials;
                        if (!cacheMats) {
                            cacheMats = skinmr[materialchanger.changeMatTag] = {};
                        }
                        for (var j = 0, len1 = _originalMats.length; j < len1; j++) {
                            var mat = _originalMats[j];
                            var _cmat = map[mat.getGUID()];
                            if (!_cmat) {
                                _cmat = mat.clone();
                                _cmat.setShader(materialchanger.assetMgr.getShader(this.getShaderFullName(shName)));
                                map[mat.getGUID()] = _cmat;
                                outRimMats.push(_cmat);
                            }
                            _otherMats.push(_cmat);
                        }
                        cacheMats.originalMats = _originalMats;
                        cacheMats[shName] = _otherMats;
                        //设置成 xx shader
                        skinmr.materials = _otherMats;
                    }
                };
                materialchanger.prototype.parameterToClone = function (parameters, outVal) {
                    for (var key in parameters) {
                        var val = parameters[key];
                        var pname = key;
                        var newVal = void 0;
                        if (typeof (val) == "number") {
                            newVal = val;
                        }
                        else if (val instanceof m4m.math.vector4) {
                            newVal = new m4m.math.vector4();
                            m4m.math.vec4Clone(val, newVal);
                        }
                        outVal[pname] = newVal;
                    }
                    // for (let i = 0, len = parameters.length; i < len; i++) {
                    //     let p = parameters[i];
                    //     let pname = p.pName;
                    //     let val = p.value;
                    //     let newVal;
                    //     if (typeof (val) == "number") {
                    //         newVal = val;
                    //     } else if (val instanceof m4m.math.vector4) {
                    //         newVal = new m4m.math.vector4();
                    //         m4m.math.vec4Clone(val, newVal);
                    //     }
                    //     outVal[p.pName] = newVal;
                    // }
                };
                materialchanger.changeMatTag = "__changeMatTag__";
                return materialchanger;
            }()));
        }
    };
});
System.register("Tools/physics2dExpandsTool", ["Tools/FrameMgr", "Data/ReuseArray", "Tools/gameMathUtil", "Tools/DebugLineTool2d"], function (exports_148, context_148) {
    "use strict";
    var FrameMgr_8, ReuseArray_2, gameMathUtil_2, DebugLineTool2d_2, physics2dExpandsTool;
    var __moduleName = context_148 && context_148.id;
    return {
        setters: [
            function (FrameMgr_8_1) {
                FrameMgr_8 = FrameMgr_8_1;
            },
            function (ReuseArray_2_1) {
                ReuseArray_2 = ReuseArray_2_1;
            },
            function (gameMathUtil_2_1) {
                gameMathUtil_2 = gameMathUtil_2_1;
            },
            function (DebugLineTool2d_2_1) {
                DebugLineTool2d_2 = DebugLineTool2d_2_1;
            }
        ],
        execute: function () {
            exports_148("physics2dExpandsTool", physics2dExpandsTool = /** @class */ (function () {
                /**
                 * 2d 物理拓展 工具
                 */
                // tslint:disable-next-line: class-name
                function physics2dExpandsTool() {
                }
                Object.defineProperty(physics2dExpandsTool, "Bounds", {
                    get: function () {
                        if (!this._Bounds) {
                            this._Bounds = m4m.framework.physics2D.Matter.Bounds;
                        }
                        return this._Bounds;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(physics2dExpandsTool, "SAT", {
                    get: function () {
                        if (!this._SAT) {
                            this._SAT = m4m.framework.physics2D.Matter.SAT;
                        }
                        return this._SAT;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(physics2dExpandsTool, "Bodies", {
                    get: function () {
                        if (!this._Bodies) {
                            this._Bodies = m4m.framework.physics2D.Matter.Bodies;
                        }
                        return this._Bodies;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(physics2dExpandsTool, "Vertices", {
                    get: function () {
                        if (!this._Vertices) {
                            this._Vertices = m4m.framework.physics2D.Matter.Vertices;
                        }
                        return this._Vertices;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(physics2dExpandsTool, "Body", {
                    get: function () {
                        if (!this._Body) {
                            this._Body = m4m.framework.physics2D.Matter.Body;
                        }
                        return this._Body;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(physics2dExpandsTool, "Axes", {
                    get: function () {
                        if (!this._Axes) {
                            this._Axes = m4m.framework.physics2D.Matter.Axes;
                        }
                        return this._Axes;
                    },
                    enumerable: false,
                    configurable: true
                });
                //测试-------------------------------
                //测试 圆形相交检测
                physics2dExpandsTool.testCircleIntersect = function (tran2d, layerMask) {
                    var _this = this;
                    if (layerMask === void 0) { layerMask = 0xFFFFFFFF; }
                    if (!tran2d) {
                        return;
                    }
                    var tepms = new ReuseArray_2.ReuseArray();
                    var obj = {
                        update: function () {
                            //测试 更随到玩家身上
                            // let p = player.Instance;
                            if (tran2d) {
                                var pTran = tran2d;
                                // this.circleBody.setPosition(pTran.localTranslate);
                                tepms.length = 0;
                                var r = 100;
                                if (_this.Draw2dDebug) {
                                    var pos = pTran.localTranslate;
                                    DebugLineTool2d_2.DebugLineTool2d.drawCircle(pos, r, 2, 2);
                                }
                                //展示圆形 选中
                                // physicsExpandsTool.queryCircle(pTran.localTranslate,r,tepms , GameLogic.layerBitDefault);
                                physics2dExpandsTool.queryCircle(pTran.localTranslate, r, tepms, layerMask);
                                if (tepms.length) {
                                    var len = tepms.length;
                                    for (var i = 0; i < len; i++) {
                                        var b = m4m.framework.physics2D.getBody(tepms.get(i));
                                    }
                                }
                                //点选中 （0,0） 点
                                var v2 = m4m.poolv2();
                                if (_this.queryPoint(pTran.physicsBody, v2)) {
                                    console.error("\u70B9\uFF1A".concat(v2, "  , \u5728\u73A9\u5BB6\u5185\u90E8\uFF01"));
                                }
                                m4m.poolv2_del(v2);
                            }
                        },
                    };
                    FrameMgr_8.FrameMgr.Add(obj.update, obj);
                };
                /**
                 * 设置 2d 物理物体 碰撞 开 或 关
                 * @param pBody 2d 物理物体实例
                 * @param enable
                 */
                physics2dExpandsTool.SetPhyCollision = function (pBody, enable) {
                    if (!pBody || !pBody.body || !pBody.body.collisionFilter) {
                        return;
                    }
                    var tag = physics2dExpandsTool.PhyCollisionTag;
                    var cFilter = pBody.body.collisionFilter;
                    var org;
                    if (!pBody[tag]) {
                        org = {};
                        pBody[tag] = org;
                        this.cloneFilter(cFilter, org);
                    }
                    else {
                        org = pBody[tag];
                    }
                    if (enable) {
                        this.cloneFilter(org, cFilter);
                    }
                    else {
                        this.cloneFilter(this.disbleFilter, cFilter);
                    }
                };
                physics2dExpandsTool.cloneFilter = function (data, out) {
                    if (!data || !out) {
                        return;
                    }
                    out.category = data.category;
                    out.group = data.group;
                    out.mask = data.mask;
                };
                /**
                 * 查询 2d物理物体是否与指定点发生了碰撞
                 * @param phyBody 2d物理对象
                 * @param point 2d的点
                 * @param isExact 是否高精度检测 （粗进度只检测bounds）
                 */
                physics2dExpandsTool.queryPoint = function (phyBody, point, isExact) {
                    if (isExact === void 0) { isExact = false; }
                    var result = false;
                    if (!phyBody || !phyBody.body || !point) {
                        return result;
                    }
                    result = this.boundsContains(phyBody.body.bounds, point);
                    if (result && isExact) {
                        //matter SAT 不支持 ，后续再找找算法
                    }
                    return result;
                };
                /**
                 * 查询 所有的bodie 通过指定的圆形区域内
                 * @param pos 圆形位置
                 * @param radius 圆半径
                 * @param outlist 输出bodie ID 列表
                 * @param layerMask 挑选的层级
                 */
                physics2dExpandsTool.queryCircle = function (pos, radius, outlist, layerMask) {
                    if (layerMask === void 0) { layerMask = 0xFFFFFF; }
                    if (!outlist) {
                        return;
                    }
                    outlist.length = 0;
                    if (!pos || layerMask == 0) {
                        return;
                    }
                    var bs = this.cupBodies;
                    bs.clear();
                    this.gridFilterBycircle(pos, radius, bs);
                    var blen = bs.length;
                    // if(this.Draw2dDebug && this.drawBound){
                    //     this.debugDrawBoundsList(bs);
                    // }
                    // let squareRadius = Math.pow(radius,2);
                    for (var i = 0; i < blen; i++) {
                        // let bodyA = bs[i];
                        var bodyA = bs.get(i);
                        if (!(bodyA.collisionFilter.category & layerMask)) { //类型过滤
                            continue;
                        }
                        if (this.fastBoundVSCircle(bodyA.bounds, pos, radius)) {
                            for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {
                                var part = bodyA.parts[j];
                                if (this.fastBoundVSCircle(part.bounds, pos, radius)) {
                                    if (this.Draw2dDebug && this.drawBound) {
                                        this.debugDrawBounds(part, true);
                                    }
                                    outlist.push(bodyA.id);
                                    break;
                                }
                            }
                        }
                    }
                };
                //高效版 覆盖检测 边界框 和 圆形 
                physics2dExpandsTool.fastBoundVSCircle = function (bound, pos, radius) {
                    var halfw = (bound.max.x - bound.min.x) * 0.5;
                    var halfh = (bound.max.y - bound.min.y) * 0.5;
                    var circleDisX = Math.abs(Math.abs(pos.x) - Math.abs(bound.min.x + halfw));
                    var circleDisY = Math.abs(Math.abs(pos.y) - Math.abs(bound.min.y + halfh));
                    if (circleDisX > (halfw + radius)) {
                        return false;
                    }
                    if (circleDisY > (halfh + radius)) {
                        return false;
                    }
                    if (circleDisX <= (halfw)) {
                        return true;
                    }
                    if (circleDisY <= (halfh)) {
                        return true;
                    }
                    var cxW = circleDisX - halfw;
                    var cyH = circleDisY - halfh;
                    var squareDistance = cxW * cxW + cyH * cyH;
                    return squareDistance <= radius * radius;
                };
                physics2dExpandsTool.gridFilter = function (grid, region, outBodies, repeatTestMap) {
                    if (repeatTestMap === void 0) { repeatTestMap = null; }
                    var r = region;
                    //筛选出 区域内的 bodie 
                    for (var col = r.startCol; col <= r.endCol; col++) {
                        for (var row = r.startRow; row <= r.endRow; row++) {
                            // let bucketId = this.getGridBucketId(col, row);
                            var bucketId = col << 16 | row; // bucketId 计算方式有问题， 当 col 或 row 都为负时计算不唯一
                            var bucket = grid.buckets[bucketId];
                            if (!bucket) {
                                continue;
                            }
                            if (this.Draw2dDebug && this.drawbucketGird) {
                                this.debugDrawGrid(col, row, grid);
                            }
                            var len = bucket.length;
                            for (var i = 0; i < len; i++) {
                                var bodyB = bucket[i];
                                if (repeatTestMap) {
                                    if (repeatTestMap[bodyB.id]) {
                                        continue;
                                    }
                                    repeatTestMap[bodyB.id] = true;
                                }
                                outBodies.push(bodyB);
                            }
                        }
                    }
                };
                physics2dExpandsTool.debugDrawBounds = function (body, isSelect) {
                    if (isSelect === void 0) { isSelect = false; }
                    if (!this.Draw2dDebug || !this.drawBound || !body) {
                        return;
                    }
                    var b = body.bounds;
                    if (isSelect) {
                        DebugLineTool2d_2.DebugLineTool2d.drawRect(b.min.x, b.min.y, b.max.x - b.min.x, b.max.y - b.min.y, 3, 7);
                    }
                    else {
                        DebugLineTool2d_2.DebugLineTool2d.drawRect(b.min.x, b.min.y, b.max.x - b.min.x, b.max.y - b.min.y, 2, 7, 0.5);
                    }
                };
                //绘制bounds
                physics2dExpandsTool.debugDrawBoundsList = function (bodys) {
                    if (!this.Draw2dDebug || !this.drawBound) {
                        return;
                    }
                    var len = bodys.length;
                    for (var i = 0; i < len; i++) {
                        var body = bodys.get(i);
                        this.debugDrawBounds(body);
                    }
                };
                //绘制网格
                physics2dExpandsTool.debugDrawGrid = function (col, row, grid) {
                    if (!this.Draw2dDebug || !this.drawbucketGird) {
                        return;
                    }
                    var x = col * grid.bucketWidth;
                    var y = row * grid.bucketHeight;
                    DebugLineTool2d_2.DebugLineTool2d.drawRect(x, y, grid.bucketWidth, grid.bucketHeight, 6, 2, 0.5);
                };
                /** 获取bodies 通过指定圆 */
                physics2dExpandsTool.gridFilterBycircle = function (pos, radius, outBodies) {
                    var grid = m4m.framework.physics2D.matterEngine.broadphase;
                    if (!grid) {
                        return;
                    }
                    this.gridGetRegionByCir(grid, pos, radius, this.helpRegion);
                    var tempMap = {};
                    this.gridFilter(grid, this.helpRegion, outBodies, tempMap);
                };
                /** 获取bodies 通过指定body的边界 */
                physics2dExpandsTool.gridFilterByBodyBound = function (body, outBodies) {
                    var grid = m4m.framework.physics2D.matterEngine.broadphase;
                    if (!grid) {
                        return;
                    }
                    this.gridGetRegion(grid, body, this.helpRegion);
                    this.gridFilter(grid, this.helpRegion, outBodies);
                };
                // 获取 格子的区域 by 圆
                physics2dExpandsTool.gridGetRegionByCir = function (grid, pos, radius, region) {
                    var startCol = Math.floor((pos.x - radius) / grid.bucketWidth);
                    var endCol = Math.floor((pos.x + radius) / grid.bucketWidth);
                    var startRow = Math.floor((pos.y - radius) / grid.bucketHeight);
                    var endRow = Math.floor((pos.y + radius) / grid.bucketHeight);
                    this.setGridRegion(startCol, endCol, startRow, endRow, region);
                };
                // 获取 格子的区域
                physics2dExpandsTool.gridGetRegion = function (grid, body, region) {
                    var bounds = body.bounds;
                    var startCol = Math.floor(bounds.min.x / grid.bucketWidth);
                    var endCol = Math.floor(bounds.max.x / grid.bucketWidth);
                    var startRow = Math.floor(bounds.min.y / grid.bucketHeight);
                    var endRow = Math.floor(bounds.max.y / grid.bucketHeight);
                    this.setGridRegion(startCol, endCol, startRow, endRow, region);
                };
                //设置 格子的区域
                physics2dExpandsTool.setGridRegion = function (startCol, endCol, startRow, endRow, region) {
                    if (!region) {
                        return;
                    }
                    region.id = startCol + "," + endCol + "," + startRow + "," + endRow;
                    region.startCol = startCol;
                    region.endCol = endCol;
                    region.startRow = startRow;
                    region.endRow = endRow;
                };
                // private static getGridBucketId(col, row){
                //     return 'C' + col + 'R' + row;
                // }
                /** 检测 点 是否被 bounds 包含  */
                physics2dExpandsTool.boundsContains = function (bounds, point) {
                    return point.x >= bounds.min.x && point.x <= bounds.max.x
                        && point.y >= bounds.min.y && point.y <= bounds.max.y;
                };
                /**
                 * Returns a list of collisions between `body` and `bodies`.
                 * @method collides
                 * @param {body} body
                 * @param {body[]} bodies
                 * @return {object[]} list of collisions
                 */
                physics2dExpandsTool.collides = function (body, bodies, collisions) {
                    var Bounds = this.Bounds;
                    var SAT = this.SAT;
                    if (!Bounds || !SAT || !collisions) {
                        return;
                    }
                    collisions.clear();
                    for (var i = 0; i < bodies.length; i++) {
                        var bodyA = bodies[i];
                        if (Bounds.overlaps(bodyA.bounds, body.bounds)) {
                            for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {
                                var part = bodyA.parts[j];
                                if (Bounds.overlaps(part.bounds, body.bounds)) {
                                    var collision = SAT.collides(part, body);
                                    if (collision && collision.collided) {
                                        collisions.push(collision);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                };
                Object.defineProperty(physics2dExpandsTool, "rayHelp_rectBody", {
                    get: function () {
                        if (!this._rayHelpRectBody) {
                            var rBody = this._rayHelpRectBody = this.Bodies.rectangle(0, 0, 100, 100, { angle: 0 });
                            rBody.inertia = 100000;
                            rBody.inverseInertia = 1 / rBody.inertia;
                        }
                        return this._rayHelpRectBody;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 投射一束射线检测与bodies 的碰撞结果 ，返回rayhitResult 对象
                 * @param bodies 检测的对象组
                 * @param rayPoint 射线的发射点
                 * @param rayDir 射线的方向
                 * @param rayLen 射线的长度
                 * @param layerMask 挑选的层级
                 * @param useCacheRayResult 返回结果是否使用共享rayResult对象
                 */
                physics2dExpandsTool.queryRay = function (bodies, rayPoint, rayDir, rayLen, layerMask, useCacheRayResult) {
                    if (layerMask === void 0) { layerMask = 0xFFFFFFFF; }
                    if (useCacheRayResult === void 0) { useCacheRayResult = true; }
                    //返回数据初始化
                    var rayResult = useCacheRayResult ? this.rayHelpResult : {};
                    rayResult.hited = false;
                    rayResult.hitPoint.x = 0;
                    rayResult.hitPoint.y = 0;
                    rayResult.hitedBody = null;
                    if (layerMask == 0) {
                        return rayResult;
                    }
                    //准备好 ray 碰撞体
                    var endPoint = this.rayHelpV2;
                    m4m.math.vec2Clone(rayDir, endPoint);
                    m4m.math.vec2ScaleByNum(endPoint, rayLen, endPoint);
                    m4m.math.vec2Add(endPoint, rayPoint, endPoint);
                    // let rayAngle = gameMathUtil.Vec2Angle(rayPoint, endPoint);
                    // rayAngle = gameMathUtil.getAngle(rayDir.x , rayDir.y);
                    var rayAngle = gameMathUtil_2.gameMathUtil.getAngle(rayDir.x, rayDir.y, true);
                    // let subv2 = this.rayHelp_v2_1;
                    // m4m.math.vec2Subtract(rayPoint, endPoint, subv2);
                    // let rayLength = m4m.math.vec2Length(subv2);
                    var rayX = (endPoint.x + rayPoint.x) * 0.5;
                    var rayY = (endPoint.y + rayPoint.y) * 0.5;
                    var rayWidth = 1e-100;
                    // let raybody = this.Bodies.rectangle(rayX, rayY, rayLen, rayWidth, { angle: rayAngle });
                    var raybody = this.rayHelp_rectBody;
                    this.setRectangleBody(raybody, rayX, rayY, rayLen, rayWidth, rayAngle);
                    var Bounds = this.Bounds;
                    var currMinLen = Number.POSITIVE_INFINITY;
                    for (var i = 0; i < bodies.length; i++) {
                        var bodyA = bodies[i];
                        var cFilter = bodyA.collisionFilter;
                        if (cFilter && cFilter.category != null) {
                            if (!(cFilter.category & layerMask)) { //类型过滤
                                continue;
                            }
                        }
                        //初步检测Bounds 
                        if (Bounds.overlaps(bodyA.bounds, raybody.bounds)) {
                            for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {
                                var part = bodyA.parts[j];
                                //检测parts 的 bounds
                                if (Bounds.overlaps(part.bounds, raybody.bounds)) {
                                    if (part && part.vertices) {
                                        var vs = part.vertices;
                                        var vlen = vs.length;
                                        for (var k = 0; k < vlen; k++) {
                                            var wA = vs[k];
                                            var wB = vs[(k + 1) % vlen];
                                            var outHitP = this.rayHelpV2v3;
                                            //检测每个线段和射线的碰撞
                                            var hited = this.raycast2Wall(wA, wB, rayPoint, rayDir, rayLen, outHitP);
                                            if (hited) {
                                                rayResult.hited = true;
                                                var len = gameMathUtil_2.gameMathUtil.vec2DisSqr(outHitP, rayPoint);
                                                //找到最近的点
                                                if (len < currMinLen) {
                                                    currMinLen = len;
                                                    rayResult.hitedBody = bodyA;
                                                    rayResult.hitPoint.x = outHitP.x;
                                                    rayResult.hitPoint.y = outHitP.y;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return rayResult;
                };
                physics2dExpandsTool.setRectangleBody = function (rectBody, x, y, raylen, width, rayAngle) {
                    // let v2s = rectBody.vertices as m4m.math.Ivec2 [];
                    rectBody.angle = rayAngle;
                    rectBody.position.x = x;
                    rectBody.position.y = y;
                    var vert = this.HelpRayVertices;
                    vert[0].x = 0;
                    vert[0].y = 0;
                    vert[1].x = raylen;
                    vert[1].y = 0;
                    vert[2].x = raylen;
                    vert[2].y = width;
                    vert[3].x = 0;
                    vert[3].y = width;
                    //
                    // this.Body.setVertices(rectBody , vert);
                    {
                        //rectBody.axes = this.Axes.fromVertices(vert);
                        var centre = this.helpCentre;
                        m4m.math.vec2Set(centre, raylen * 0.5, width * 0.5);
                        // var centre = this.Vertices.centre(vert);
                        this.Vertices.translate(vert, centre, -1);
                        this.Vertices.translate(vert, rectBody.position);
                    }
                    this.Vertices.rotate(vert, rectBody.angle, rectBody.position);
                    this.Bounds.update(rectBody.bounds, vert, this.helpVelocity);
                };
                // private static Vec2Angle(vectorA: m4m.math.Ivec2, vectorB: m4m.math.Ivec2) {
                //     return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);
                // }
                /**
                 * 光线投射检测与墙面的碰撞 ， 碰到返回true
                 * @param wallA 墙a点
                 * @param wallB 墙b点
                 * @param rayPos 射线起点
                 * @param rayDir 射线方向
                 * @param rayLen 射线长度
                 * @param outHitPoint 返回的碰撞点
                 */
                physics2dExpandsTool.raycast2Wall = function (wallA, wallB, rayPos, rayDir, rayLen, outHitPoint) {
                    // wikipedia line-line intersection
                    // https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection
                    // 0 < t < 1
                    // u > 0 (the ray is an "infinite line" to be checked only in the positive direction)
                    var x1 = wallA.x;
                    var y1 = wallA.y;
                    var x2 = wallB.x;
                    var y2 = wallB.y;
                    var x3 = rayPos.x;
                    var y3 = rayPos.y;
                    var x4 = rayPos.x + rayDir.x;
                    var y4 = rayPos.y + rayDir.y;
                    var den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
                    if (den == 0) {
                        return false; // Parallel lines
                    }
                    var t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den;
                    var u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / den;
                    if (t > 0 && t < 1 && u > 0 && u <= rayLen) {
                        var pt = outHitPoint;
                        pt.x = x1 + t * (x2 - x1);
                        pt.y = y1 + t * (y2 - y1);
                        return true;
                    }
                    return false;
                };
                physics2dExpandsTool.exampleRaytest = function () {
                    var rp = new m4m.math.vector2();
                    var wP1 = new m4m.math.vector2(-3, 0);
                    var wP2 = new m4m.math.vector2(3, 0);
                    var rayPos = new m4m.math.vector2(0.5, 1);
                    var rayDir = new m4m.math.vector2(0.5, -0.5);
                    m4m.math.vec2Normalize(rayDir, rayDir);
                    var rayLen = 2;
                    this.raycast2Wall(wP1, wP2, rayPos, rayDir, rayLen, rp);
                    return rp;
                };
                /** 绘制debug 开关 */
                physics2dExpandsTool.Draw2dDebug = false;
                physics2dExpandsTool.drawBound = true; //绘制网格块中的body 的 bound
                physics2dExpandsTool.drawbucketGird = true; //绘制网格块
                //功能----------------------------------------------------
                physics2dExpandsTool.disbleFilter = { category: 0, group: 0, mask: 0 };
                physics2dExpandsTool.PhyCollisionTag = "_PhyCollisionTag_";
                physics2dExpandsTool.helpRegion = {};
                // private static cupBodies : m4m.framework.Ibody[] = [];
                physics2dExpandsTool.cupBodies = new ReuseArray_2.ReuseArray();
                physics2dExpandsTool.rayHelpV2 = new m4m.math.vector2();
                physics2dExpandsTool.rayHelpV2v1 = new m4m.math.vector2();
                physics2dExpandsTool.rayHelpV2v3 = new m4m.math.vector2();
                physics2dExpandsTool.rayHelpResult = { hited: false, hitPoint: { x: 0, y: 0 }, hitedBody: {} };
                physics2dExpandsTool.helpVelocity = new m4m.math.vector2();
                physics2dExpandsTool.helpCentre = new m4m.math.vector2();
                physics2dExpandsTool.HelpRayVertices = [new m4m.math.vector2(), new m4m.math.vector2(), new m4m.math.vector2(), new m4m.math.vector2()];
                return physics2dExpandsTool;
            }()));
        }
    };
});
System.register("Tools/viewDragTool", [], function (exports_149, context_149) {
    "use strict";
    var viewDragTool;
    var __moduleName = context_149 && context_149.id;
    return {
        setters: [],
        execute: function () {
            exports_149("viewDragTool", viewDragTool = /** @class */ (function () {
                /** 拖拽查看场景物体工具 */
                // tslint:disable-next-line: class-name
                function viewDragTool() {
                    this._dragLayerMask = 0xFFFFFFFF; //默认全layer
                    this._selectSphereAlpha = 0.38;
                    this.canDragMove = false;
                    this.startScreenPos = new m4m.math.vector2();
                    this.startTranPos = new m4m.math.vector3();
                    this.startPlaneHitPos = new m4m.math.vector3();
                    this.planeNormal = new m4m.math.vector3();
                    this.outInfo = new m4m.framework.pickinfo();
                }
                Object.defineProperty(viewDragTool, "instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new viewDragTool();
                            this._instance.init();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                viewDragTool.dispose = function () {
                    this._instance.dispose();
                    this._instance = null;
                };
                Object.defineProperty(viewDragTool.prototype, "dragLayerMask", {
                    /** 能被拖拽 layermask */
                    get: function () { return this._dragLayerMask; },
                    set: function (v) { this._dragLayerMask = v; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(viewDragTool.prototype, "selectSphereAlpha", {
                    /** 框选的 透明值  */
                    get: function () { return this._selectSphereAlpha; },
                    set: function (a) {
                        this._selectSphereAlpha = a;
                        var mat = this.selectModel.materials[0];
                        mat.setFloat("_Alpha", this._selectSphereAlpha);
                    },
                    enumerable: false,
                    configurable: true
                });
                viewDragTool.prototype.init = function () {
                    //获取点击交互
                    this._app = m4m.framework.sceneMgr.app;
                    this._inputMgr = this._app.getInputMgr();
                    this._assetMgr = this._app.getAssetMgr();
                    this._scene = this._app.getScene();
                    this._inputMgr.addPointListener(m4m.event.PointEventEnum.PointDown, this._pointDown, this);
                    this._inputMgr.addPointListener(m4m.event.PointEventEnum.PointUp, this._pointUp, this);
                    this._inputMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this._pointmove, this);
                    //meshrenderer
                    var sMTran = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Sphere, this._app);
                    this.selectModel = sMTran.gameObject.getFirstComponentInChildren("meshRenderer");
                    var mat = this.selectModel.materials[0];
                    mat.setShader(this._assetMgr.getShader("transparent.shader.json"));
                    mat.setTexture("_MainTex", this._assetMgr.getDefaultTexture("normal"));
                    mat.setFloat("_Alpha", this._selectSphereAlpha);
                    mat.setFloat("_Superimposition", 1.3);
                };
                viewDragTool.prototype.dispose = function () {
                    this._inputMgr.removePointListener(m4m.event.PointEventEnum.PointDown, this._pointDown, this);
                    this._inputMgr.removePointListener(m4m.event.PointEventEnum.PointUp, this._pointUp, this);
                    this._inputMgr.removePointListener(m4m.event.PointEventEnum.PointMove, this._pointmove, this);
                };
                viewDragTool.prototype._pointUp = function (ev) {
                    if (this.canDragMove) {
                        this.cansoleSelecting();
                    }
                };
                viewDragTool.prototype._pointmove = function (ev) {
                    if (!this.canDragMove || !this._lastPickedTran) {
                        return;
                    }
                    var outHitPoint = viewDragTool.helpV3;
                    var subv3 = viewDragTool.helpV3v1;
                    this.getHitPointByPlane(outHitPoint);
                    m4m.math.vec3Subtract(outHitPoint, this.startPlaneHitPos, subv3);
                    //移动 物体
                    var addV3 = subv3;
                    m4m.math.vec3Add(subv3, this.startTranPos, addV3);
                    this._lastPickedTran.setWorldPosition(addV3);
                    this.setShperePos();
                };
                viewDragTool.prototype.getHitPointByPlane = function (outHitpoint) {
                    var point = this._inputMgr.point;
                    var nowSpos = viewDragTool.helpV2;
                    m4m.math.vec2Set(nowSpos, point.x, point.y);
                    var cam = this._scene.mainCamera;
                    var ray = cam.creatRayByScreen(nowSpos, this._app);
                    ray.intersectPlane(this.startTranPos, this.planeNormal, outHitpoint);
                };
                viewDragTool.prototype._pointDown = function (ev) {
                    this.canDragMove = false;
                    if (this._inputMgr.isPressed(0)) {
                        this.leftDown(ev);
                    }
                    else if (this._inputMgr.isPressed(2)) {
                        this.rightDown();
                    }
                };
                viewDragTool.prototype.cansoleSelecting = function () {
                    var stran = this.selectModel.gameObject.transform;
                    if (!stran.parent) {
                        return;
                    }
                    stran.parent.removeChild(stran);
                    this._lastPickedTran = null;
                };
                viewDragTool.prototype.rightDown = function () {
                    this.cansoleSelecting();
                };
                viewDragTool.prototype.leftDown = function (ev) {
                    this.tryToPick();
                };
                viewDragTool.prototype.tryToPick = function () {
                    var sV2 = viewDragTool.helpV2;
                    m4m.math.vec2Set(sV2, this._inputMgr.point.x, this._inputMgr.point.y);
                    var cam = this._scene.mainCamera;
                    var ray = cam.creatRayByScreen(sV2, this._app);
                    var ispicked = this._scene.pick(ray, this.outInfo, true, this._scene.getRoot(), this._dragLayerMask);
                    if (ispicked) {
                        var sMTran = this.selectModel.gameObject.transform;
                        if (this.outInfo.pickedtran != sMTran) {
                            this.pickedTrans(this.outInfo.pickedtran);
                        }
                        else {
                            this.pickedSelectModel();
                        }
                        console.log("picked ".concat(this.outInfo.pickedtran.name));
                    }
                };
                viewDragTool.prototype.pickedTrans = function (tran) {
                    this._lastPickedTran = tran;
                    var sMTran = this.selectModel.gameObject.transform;
                    this._scene.addChild(sMTran);
                    this.setShperePos();
                    //缩放  
                    this.setShpereScele();
                    if (this.onPicked) {
                        this.onPicked(this._lastPickedTran);
                    }
                };
                viewDragTool.prototype.setShperePos = function () {
                    if (!this._lastPickedTran) {
                        return;
                    }
                    var sMTran = this.selectModel.gameObject.transform;
                    var aabb = this._lastPickedTran.aabb;
                    sMTran.localPosition = aabb.center;
                    sMTran.localPosition = sMTran.localPosition;
                };
                viewDragTool.prototype.setShpereScele = function () {
                    if (!this._lastPickedTran) {
                        return;
                    }
                    var sMTran = this.selectModel.gameObject.transform;
                    var aabb = this._lastPickedTran.aabb;
                    var s = m4m.math.vec3Distance(aabb.maximum, aabb.minimum) * 0.5;
                    m4m.math.vec3SetAll(sMTran.localScale, s);
                    sMTran.localScale = sMTran.localScale;
                };
                viewDragTool.prototype.pickedSelectModel = function () {
                    //定移动初始点
                    var point = this._inputMgr.point;
                    m4m.math.vec2Set(this.startScreenPos, point.x, point.y);
                    //移动球
                    this.canDragMove = true;
                    var pTran = this._lastPickedTran;
                    //开始位置
                    m4m.math.vec3Clone(pTran.getWorldPosition(), this.startTranPos);
                    var cam = this._scene.mainCamera;
                    //法线方向
                    cam.gameObject.transform.getForwardInWorld(this.planeNormal);
                    //记录平面初次碰撞位置
                    this.getHitPointByPlane(this.startPlaneHitPos);
                    console.log(" pickedSelectModel ");
                };
                viewDragTool.helpV2 = new m4m.math.vector2();
                viewDragTool.helpV3 = new m4m.math.vector3();
                viewDragTool.helpV3v1 = new m4m.math.vector3();
                return viewDragTool;
            }()));
        }
    };
});
System.register("Tools/PBR/PBREnvSettings", [], function (exports_150, context_150) {
    "use strict";
    var PBREnvSettings;
    var __moduleName = context_150 && context_150.id;
    return {
        setters: [],
        execute: function () {
            /** PBR 环境设置 */
            PBREnvSettings = /** @class */ (function () {
                function PBREnvSettings() {
                    /** 天空盒资源名 */
                    this.skyBox = "";
                    /** 曝光强度强度 */
                    this.exposure = 1;
                    /** pbr是否使用间接环境光照图 */
                    this.pbrUseEnvMap = true;
                    // //环境天光
                    // public ambientCubemapLight: AmbientCubemapLight;
                    // //主光
                    // public mainLight: Light;
                    // //次光
                    // public secondaryLight: Light;
                    // //第三光
                    // public tertiaryLight: Light;
                    // //set json 关注的字段列表
                    // private static readonly jsonCareList = [
                    //     "ambientCubemapLight",
                    //     "mainLight",
                    //     "secondaryLight",
                    //     "tertiaryLight",
                    // ];
                    // /**
                    //  * 设置通过 json 数据
                    //  * @param jsonStr json 字符串
                    //  * @returns 
                    //  */
                    // public setByJson(jsonStr: string) {
                    //     if (!jsonStr) { return; }
                    //     let jsonObj: object;
                    //     try {
                    //         jsonObj = JSON.parse(jsonStr);
                    //     } catch (err) {
                    //         console.error(`set fial json parse error : ${err}`);
                    //     }
                    //     if (!jsonObj) { return; }
                    //     let list = PBREnvSettings.jsonCareList;
                    //     for (let i = 0, len = list.length; i < len; i++) {
                    //         let key = list[i];
                    //         let val = jsonObj[key];
                    //         if (val == null) { continue; }
                    //         this[key] = val;
                    //     }
                    // }
                }
                return PBREnvSettings;
            }());
            exports_150("PBREnvSettings", PBREnvSettings);
            // type AmbientCubemapLight = {
            //     texture: string,
            //     $texture: string,
            //     $textureOptions: string[],
            //     exposure: number,
            //     diffuseIntensity: number,
            //     specularIntensity: number,
            // };
            // type Light = {
            //     shadow: false,
            //     shadowQuality: string,
            //     intensity: number,
            //     color: string,
            //     alpha: number,
            //     beta: number,
            //     $padAngle: number[],
            // };
        }
    };
});
System.register("Tools/PBR/PBREnvMgr", ["Tools/commTool"], function (exports_151, context_151) {
    "use strict";
    var commTool_8, PBREnvMgr;
    var __moduleName = context_151 && context_151.id;
    return {
        setters: [
            function (commTool_8_1) {
                commTool_8 = commTool_8_1;
            }
        ],
        execute: function () {
            exports_151("PBREnvMgr", PBREnvMgr = /** @class */ (function () {
                /**
                 * PBR 环境 管理器
                 */
                function PBREnvMgr() {
                }
                Object.defineProperty(PBREnvMgr, "SpecEnvMap", {
                    /** 间接照明 镜面反射环境图（IBL） */
                    get: function () { return this._SpecEnvMap; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PBREnvMgr, "DiffEnvMap", {
                    /** 间接照明 漫反射环境图（IBL） */
                    get: function () { return this._DiffEnvMap; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PBREnvMgr, "Exposure", {
                    /** 曝光度 >= 0 */
                    get: function () { return this._currEnv ? this._currEnv.exposure : 1; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PBREnvMgr, "PBRUseEnvMap", {
                    /** pbr是否使用间接环境光照图 */
                    get: function () { return this._currEnv ? this._currEnv.pbrUseEnvMap : false; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PBREnvMgr, "skyBox", {
                    /** 天空盒 */
                    get: function () {
                        if (!this._skyBox) {
                            var app = m4m.framework.sceneMgr.app;
                            var assetMgr = app.getAssetMgr();
                            var node = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube, app);
                            node.enableCulling = false; //skybox 不会被视锥剔除
                            this._skyBox = node.gameObject.getFirstComponentInChildren("meshRenderer");
                            var sh = assetMgr.getShader(this._skyboxShader);
                            if (sh) {
                                var mat = new m4m.framework.material("skyboxMat");
                                this._skyBox.materials[0] = mat;
                                mat.setShader(sh);
                            }
                            else {
                                console.error("\u5929\u7A7A\u76D2shader \u8D44\u6E90\u672A\u52A0\u8F7D : ".concat(this._skyboxShader));
                            }
                        }
                        return this._skyBox;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PBREnvMgr, "currEnv", {
                    /** 当前的环境设置 */
                    get: function () { return this._currEnv; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PBREnvMgr, "skyboxShader", {
                    /** 天空盒shader */
                    get: function () { return this._skyboxShader; },
                    set: function (val) { this._skyboxShader = val; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PBREnvMgr, "enableSkyBox", {
                    /** 是否开启天空盒子 */
                    get: function () { return this._enableSkyBox; },
                    set: function (val) {
                        if (val == this._enableSkyBox) {
                            return;
                        }
                        this._enableSkyBox = val;
                        if (val) {
                            var scene = m4m.framework.sceneMgr.scene;
                            scene.addChild(this.skyBox.gameObject.transform);
                        }
                        else {
                            if (!this._skyBox) {
                                return;
                            }
                            var node = this._skyBox.gameObject.transform;
                            if (!node.parent) {
                                return;
                            }
                            node.parent.removeChild(node);
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 初始化
                 * @param skyBoxPath 天空盒路径
                 */
                PBREnvMgr.init = function (skyBoxPath) {
                    this._skyBoxTexPath = skyBoxPath;
                };
                /**
                 * 设置PBR环境
                 * @param env 环境设置实例
                 */
                PBREnvMgr.setEnv = function (env) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!env || env == this._currEnv) {
                                        return [2 /*return*/];
                                    }
                                    this._currEnv = env;
                                    if (!env.skyBox) return [3 /*break*/, 2];
                                    //天空盒
                                    return [4 /*yield*/, this.loadTexRes(env.skyBox)];
                                case 1:
                                    //天空盒
                                    _a.sent();
                                    //天空盒设置
                                    this.setSkyBox();
                                    _a.label = 2;
                                case 2: return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * 尝试添加 unity拓展灯光
                 * @param _gltf gltf资源对象
                 */
                PBREnvMgr.tryAddExtLight = function (_gltf) {
                    var _this = this;
                    var gltf = _gltf;
                    if (!gltf) {
                        return;
                    }
                    var lights = gltf.getRealtimeLights();
                    if (!lights || lights.length < 1) {
                        return;
                    }
                    //clear history
                    this.clearLights();
                    //
                    var scene = m4m.framework.sceneMgr.scene;
                    lights.forEach(function (l, i) {
                        //
                        var node = new m4m.framework.transform();
                        node.name = "Light_".concat(m4m.framework.LightTypeEnum[l.type], "_").concat(i);
                        var comp = node.gameObject.addComponent("light");
                        comp.type = l.type;
                        //shadow
                        if (l.shadowQuality != m4m.framework.ShadowQualityType.None) {
                            var sq = l.shadowQuality;
                        }
                        if (comp.type == m4m.framework.LightTypeEnum.Spot || comp.type == m4m.framework.LightTypeEnum.Point) {
                            //range
                            comp.range = l.range;
                            if (comp.type == m4m.framework.LightTypeEnum.Spot) {
                                //spotAngelCos
                                comp.spotAngelCos = Math.cos(l.spotAngle * 0.5 * Math.PI / 180);
                            }
                        }
                        //intensity
                        comp.intensity = l.intensity;
                        //color
                        m4m.math.colorSet(comp.color, l.color[0], l.color[1], l.color[2], l.color[3]);
                        //RTS
                        var pos = node.localPosition;
                        m4m.math.vec3Set(pos, l.pos[0], l.pos[1], l.pos[2]);
                        node.localPosition = pos;
                        var rot = node.localRotate;
                        m4m.math.quatFromEulerAngles(l.angles[0], l.angles[1], 0, rot);
                        node.localRotate = rot;
                        scene.addChild(node);
                        scene.addLight(comp);
                        _this._lights.push(comp);
                    });
                };
                // private static setLights(env: PBREnvSettings) {
                //     //clear history
                //     this.clearLights();
                //     let lights = [env.mainLight, env.secondaryLight, env.tertiaryLight];
                //     let scene = m4m.framework.sceneMgr.scene;
                //     for (let i = 0, len = lights.length; i < len; i++) {
                //         let light = lights[i];
                //         const lightObj = new m4m.framework.transform();
                //         lightObj.name = `Light_${i}`;
                //         const complight = lightObj.gameObject.addComponent("light") as m4m.framework.light;
                //         complight.type = m4m.framework.LightTypeEnum.Direction;
                //         m4m.math.quatFromEulerAngles(-light.alpha, -light.beta, 0, lightObj.localRotate);
                //         complight.intensity = light.intensity;
                //         const rgb = gameMathUtil.hexToRgb(light.color)
                //             .map((x) => x / 255);
                //         m4m.math.colorSet(complight.color, rgb[0], rgb[1], rgb[2], 1);
                //         scene.addChild(lightObj);
                //         scene.addLight(complight);
                //         this._lights.push(complight);
                //     }
                // }
                PBREnvMgr.clearLights = function () {
                    var scene = m4m.framework.sceneMgr.scene;
                    for (var i = 0, len = this._lights.length; i < len; i++) {
                        var l = this._lights[i];
                        var node = l.gameObject.transform;
                        if (node.parent) {
                            node.parent.removeChild(node);
                        }
                        node.dispose();
                    }
                    scene.clearLights();
                    this._lights.length = 0;
                };
                PBREnvMgr.loadTexRes = function (skyBoxRes) {
                    return __awaiter(this, void 0, void 0, function () {
                        var specCubeMap, diffSbox, diffCubeMap;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!skyBoxRes) {
                                        return [2 /*return*/];
                                    }
                                    if (!!this._SpecEnvMap) return [3 /*break*/, 5];
                                    specCubeMap = void 0;
                                    if (!!this._isZipTex) return [3 /*break*/, 2];
                                    return [4 /*yield*/, commTool_8.commTool.loadCubeTexture("".concat(this._skyBoxTexPath).concat(skyBoxRes, "/"))];
                                case 1:
                                    specCubeMap = _a.sent();
                                    return [3 /*break*/, 4];
                                case 2: return [4 /*yield*/, commTool_8.commTool.loadCubeTextureZip("".concat(this._skyBoxTexPath).concat(skyBoxRes, "/").concat(skyBoxRes, ".zip"))];
                                case 3:
                                    specCubeMap = _a.sent();
                                    _a.label = 4;
                                case 4:
                                    this._SpecEnvMap = specCubeMap;
                                    this.refreshSkyBoxTex();
                                    _a.label = 5;
                                case 5:
                                    if (!!this._DiffEnvMap) return [3 /*break*/, 10];
                                    diffSbox = "".concat(skyBoxRes, "_diff");
                                    diffCubeMap = void 0;
                                    if (!!this._isZipTex) return [3 /*break*/, 7];
                                    return [4 /*yield*/, commTool_8.commTool.loadCubeTexture("".concat(this._skyBoxTexPath).concat(diffSbox, "/"))];
                                case 6:
                                    diffCubeMap = _a.sent();
                                    return [3 /*break*/, 9];
                                case 7: return [4 /*yield*/, commTool_8.commTool.loadCubeTextureZip("".concat(this._skyBoxTexPath).concat(diffSbox, "/").concat(diffSbox, ".zip"))];
                                case 8:
                                    diffCubeMap = _a.sent();
                                    _a.label = 9;
                                case 9:
                                    this._DiffEnvMap = diffCubeMap;
                                    _a.label = 10;
                                case 10: return [2 /*return*/];
                            }
                        });
                    });
                };
                PBREnvMgr.setSkyBox = function () {
                    var skyB = this.skyBox;
                    var mat = skyB.materials[0];
                    this.refreshSkyBoxTex();
                    // let env = this._currEnv;
                    // let ambientCubemapLight = env.ambientCubemapLight;
                    // if (ambientCubemapLight) {
                    //     let exp = ambientCubemapLight.exposure ?? 4;
                    //     mat.setFloat("u_Exposure", exp);
                    // }
                    mat.setFloat("u_Exposure", this.Exposure);
                };
                PBREnvMgr.refreshSkyBoxTex = function () {
                    if (!this._SpecEnvMap || !this._skyBox) {
                        return;
                    }
                    var mat = this._skyBox.materials[0];
                    mat.setCubeTexture("u_sky", this._SpecEnvMap);
                };
                PBREnvMgr._isZipTex = false;
                PBREnvMgr._skyboxShader = "skybox.shader.json";
                PBREnvMgr._skyBoxTexPath = "";
                PBREnvMgr._lights = [];
                PBREnvMgr._enableSkyBox = false;
                return PBREnvMgr;
            }()));
        }
    };
});
System.register("Tools/PBR/PBRMgr", ["Tools/PBR/PBREnvMgr"], function (exports_152, context_152) {
    "use strict";
    var PBREnvMgr_1, PBRMgr;
    var __moduleName = context_152 && context_152.id;
    return {
        setters: [
            function (PBREnvMgr_1_1) {
                PBREnvMgr_1 = PBREnvMgr_1_1;
            }
        ],
        execute: function () {
            exports_152("PBRMgr", PBRMgr = /** @class */ (function () {
                /** PBR 管理类 */
                function PBRMgr() {
                }
                /**
                 * 设置 pbr 节点的环境贴图
                 * @param r 渲染组件
                 * @param useEvnMap 是否使用间接环境光照
                 * @returns
                 */
                PBRMgr.attachEnv = function (r, useEvnMap) {
                    var _this = this;
                    if (useEvnMap === void 0) { useEvnMap = true; }
                    var materials = r["materials"];
                    if (!materials) {
                        return;
                    }
                    materials.forEach(function (mat) {
                        var sh = mat.getShader();
                        if (_this.carePbrShaderMap[sh.getName()]) {
                            mat.setFloat("u_Exposure", PBREnvMgr_1.PBREnvMgr.Exposure);
                            if (!PBREnvMgr_1.PBREnvMgr.PBRUseEnvMap) {
                                return;
                            }
                            if (PBREnvMgr_1.PBREnvMgr.SpecEnvMap) {
                                mat.setCubeTexture("u_env", PBREnvMgr_1.PBREnvMgr.SpecEnvMap);
                            }
                            if (PBREnvMgr_1.PBREnvMgr.DiffEnvMap) {
                                mat.setCubeTexture("u_diffuse", PBREnvMgr_1.PBREnvMgr.DiffEnvMap);
                            }
                        }
                    });
                };
                /**
                 * 设置 全部场景pbr节点的环境贴图
                 */
                PBRMgr.ckAttachEnvAll = function (node) {
                    var _this = this;
                    var mrs = node.gameObject.getComponentsInChildren("meshRenderer");
                    mrs.forEach(function (mr) { _this.attachEnv(mr); });
                    var skmrs = node.gameObject.getComponentsInChildren("skinnedMeshRenderer");
                    skmrs.forEach(function (mr) { _this.attachEnv(mr); });
                };
                PBRMgr.carePbrShaderMap = {
                    "pbr.shader.json": true,
                    "pbr_blend.shader.json": true,
                };
                return PBRMgr;
            }()));
        }
    };
});
System.register("UIBase/touchPad", [], function (exports_153, context_153) {
    "use strict";
    var touchPad;
    var __moduleName = context_153 && context_153.id;
    return {
        setters: [],
        execute: function () {
            exports_153("touchPad", touchPad = /** @class */ (function (_super) {
                __extends(touchPad, _super);
                // tslint:disable-next-line: class-name
                function touchPad() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.hasPointDown = false;
                    _this.startPoint = new m4m.math.vector2();
                    _this.lastPoint = new m4m.math.vector2();
                    return _this;
                }
                touchPad_1 = touchPad;
                touchPad.prototype.onPointEvent = function (canvas, ev, oncap) {
                    //注 ： ev.eated 在该组件中不能正常使用，因为事件触发 和 UI事件流不对称 
                    //oncap==true 是捕获阶段，一般的行为，只在pop阶段处理
                    if (!this.enabled || !this.transform.visible || oncap) {
                        return;
                    }
                    //检查是否有点击进入
                    m4m.math.vec2Set(touchPad_1.helpV2, ev.x, ev.y);
                    var isPointContains = false;
                    if (this.transform.ContainsCanvasPoint(touchPad_1.helpV2)) {
                        isPointContains = true;
                    }
                    var lastHasPointDown = this.hasPointDown;
                    //进入状态更新流
                    // this.updateState(ev);
                    var pEnum = m4m.event.PointEventEnum;
                    var hasMove = false;
                    switch (ev.type) {
                        case pEnum.PointDown:
                            if (isPointContains) {
                                this.hasPointDown = true;
                                if (this.onPointDown) {
                                    this.onPointDown(ev.c_x, ev.c_y);
                                }
                            }
                            break;
                        case pEnum.PointUp:
                            this.hasPointDown = false;
                            if (this.onPointUp) {
                                this.onPointUp(ev.c_x, ev.c_y);
                            }
                            break;
                        case pEnum.PointHold:
                            if (this.lastPoint.x != ev.c_x || this.lastPoint.y != ev.c_y) {
                                m4m.math.vec2Set(this.lastPoint, ev.c_x, ev.c_y);
                                hasMove = true;
                            }
                            break;
                        default:
                    }
                    if (!lastHasPointDown && this.hasPointDown) {
                        m4m.math.vec2Set(this.startPoint, ev.c_x, ev.c_y);
                    }
                    if (lastHasPointDown && hasMove) {
                        if (this.onValueChange) {
                            this.onValueChange(ev.c_x - this.startPoint.x, ev.c_y - this.startPoint.y);
                        }
                    }
                };
                var touchPad_1;
                touchPad.helpV2 = new m4m.math.vector2();
                touchPad = touchPad_1 = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], touchPad);
                return touchPad;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("UIBase/uiMgr", ["UIBase/metaUIManager"], function (exports_154, context_154) {
    "use strict";
    var metaUIManager_5, uiMgr;
    var __moduleName = context_154 && context_154.id;
    return {
        setters: [
            function (metaUIManager_5_1) {
                metaUIManager_5 = metaUIManager_5_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            uiMgr = /** @class */ (function (_super) {
                __extends(uiMgr, _super);
                function uiMgr() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                uiMgr.init = function (uiWidth, uiHeight, screenMatchRate, uiPrefabPath, atlasPath) {
                    if (this.isInited) {
                        return;
                    }
                    metaUIManager_5.metaUIManager._ActiveSelf = this;
                    _super.init.call(this, uiWidth, uiHeight, screenMatchRate, uiPrefabPath, atlasPath);
                };
                return uiMgr;
            }(metaUIManager_5.metaUIManager));
            exports_154("uiMgr", uiMgr);
        }
    };
});
System.register("UIBase/uiPage", ["Time/TimeUtil", "Loader/loadMgr", "Data/Map", "Tools/commTool", "UIBase/uiMgr"], function (exports_155, context_155) {
    "use strict";
    var TimeUtil_4, loadMgr_3, Map_22, commTool_9, uiMgr_1, LoadTool, PageBase, uiPage, uiPop;
    var __moduleName = context_155 && context_155.id;
    return {
        setters: [
            function (TimeUtil_4_1) {
                TimeUtil_4 = TimeUtil_4_1;
            },
            function (loadMgr_3_1) {
                loadMgr_3 = loadMgr_3_1;
            },
            function (Map_22_1) {
                Map_22 = Map_22_1;
            },
            function (commTool_9_1) {
                commTool_9 = commTool_9_1;
            },
            function (uiMgr_1_1) {
                uiMgr_1 = uiMgr_1_1;
            }
        ],
        execute: function () {
            LoadTool = /** @class */ (function () {
                /** 加载uipage工具类 */
                function LoadTool() {
                }
                //加载图集工具
                LoadTool.loadAtlas = function (atlas) {
                    return __awaiter(this, void 0, void 0, function () {
                        var urls, key;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!atlas || atlas.length < 1) {
                                        return [2 /*return*/];
                                    }
                                    urls = [];
                                    key = "";
                                    atlas.forEach(function (atl) {
                                        //过滤无效图集
                                        if (typeof (atl) == "string" && atl != "") {
                                            key += atl + "_";
                                            urls.push("".concat(PageBase.atlasPath).concat(atl, "/").concat(atl, ".assetbundle.json"));
                                        }
                                    });
                                    if (this.atlasEndMap.has(key) && this.atlasEndMap.get(key)) {
                                        return [2 /*return*/];
                                    } //已经加载完了
                                    return [4 /*yield*/, loadMgr_3.loadMgr.Instance.syncLoadList(urls, LoadTool.priorityAtlas)];
                                case 1:
                                    _a.sent();
                                    // let count = urls.length;
                                    // let allEnd : Function;
                                    // let loadedFun = ()=>{
                                    //     count--;
                                    //     if(count <= 0){
                                    //         if(allEnd) allEnd();
                                    //     }
                                    // }
                                    // let waitP = new Promise((resolve)=>{
                                    //     allEnd = resolve;
                                    // });
                                    // while(urls.length > 0){
                                    //     let url = urls.pop();
                                    //     if(url){
                                    //         loadMgr.Instance.load(url,loadedFun,loadTool.priority_atlas);
                                    //     }
                                    // }
                                    // await waitP;
                                    this.atlasEndMap.set(key, true);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                LoadTool.removeAtlasByName = function (atlas) {
                    var key = "";
                    atlas.forEach(function (atl) {
                        //过滤无效图集
                        if (typeof (atl) == "string" && atl != "") {
                            key += atl + "_";
                        }
                    });
                    if (this.atlasEndMap.has(key)) {
                        this.atlasEndMap.delete(key);
                    }
                };
                //加载预设体
                LoadTool.loadPrefeb = function (prefabName) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, commTool_9.commTool.loadPrefeb(PageBase.UIPath, prefabName, this.priorityPagePfb)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                LoadTool.atlasEndMap = new Map_22.cMap();
                LoadTool.priorityAtlas = 110;
                LoadTool.priorityPagePfb = 100;
                return LoadTool;
            }());
            exports_155("PageBase", PageBase = /** @class */ (function () {
                /** uiPage基础类 */
                function PageBase() {
                    /** 0:未加载 、1：加载中 、 2：加载完毕 */
                    this.resLoadState = 0;
                    this.taskQueue = [];
                }
                Object.defineProperty(PageBase, "UIPath", {
                    /** UI prefab 的资源路径 */
                    get: function () { return this._UIPath; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PageBase, "atlasPath", {
                    /** 图集 的资源路径 */
                    get: function () { return this._atlasPath; },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 初始化设置
                 * @param UIPath UI prefab 的资源路径
                 * @param atlasPath 图集 的资源路径
                 */
                PageBase.init = function (UIPath, atlasPath) {
                    this._UIPath = UIPath;
                    this._atlasPath = atlasPath;
                };
                PageBase.hasInstance = function (subClassName) {
                    return this.instanceMap[subClassName] != null;
                };
                Object.defineProperty(PageBase, "instance", {
                    get: function () {
                        var thisRef = this.instanceMap[this.name];
                        if (!thisRef) {
                            thisRef = this.instanceMap[this.name] = new this();
                        }
                        return thisRef;
                    },
                    enumerable: false,
                    configurable: true
                });
                /** 显示 */
                PageBase.Show = function () {
                    this.addTask("show", arguments);
                };
                /** 隐藏 */
                PageBase.Hide = function () {
                    this.addTask("hide", arguments);
                };
                /** 釋放清理資源 和 handle*/
                PageBase.Destory = function () {
                    this.addTask("destory", arguments);
                };
                PageBase.Init = function () {
                    this.addTask("Init", arguments);
                };
                /** 注册UI事件（中函数中注册各子类UI接收事件） */
                PageBase.regUIEvent = function () {
                };
                Object.defineProperty(PageBase, "loadState", {
                    //取是否加载完成  状态
                    get: function () {
                        return this.instance.resLoadState;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 添加执行任务
                 * @param taskFun 任务方法
                 * @param taskArg 任务参数对象 arguments
                */
                PageBase.addTask = function (taskFunName, taskArg) {
                    if (taskArg === void 0) { taskArg = null; }
                    var thisRef = this.instance;
                    var taskFun = thisRef[taskFunName];
                    if (!taskFun) {
                        console.error("addTask \u4EFB\u52A1\u6DFB\u52A0\u5931\u8D25 , \u76EE\u6807\u5BF9\u8C61\u4E2D\u6CA1\u6709\u627E\u5230 ".concat(taskFunName, " \u65B9\u6CD5 "));
                        return;
                    }
                    // console.error(thisRef.dependentPrefabName+"       "+thisRef.resLoadState);
                    if (thisRef.resLoadState == 0) {
                        if (taskFun == thisRef.destory) {
                            return;
                        }
                        thisRef.taskQueue.push({ fun: thisRef.loadRes, arg: taskArg });
                    }
                    //未加载完 ， 先放入队列
                    if (thisRef.resLoadState != 2) {
                        thisRef.taskQueue.push({ fun: taskFun, arg: taskArg });
                        thisRef.executeTask();
                    }
                    else {
                        if (taskFun) { //加载完毕后，直接调用
                            taskFun.apply(thisRef, taskArg);
                        }
                    }
                };
                /** 加载完毕后 on 初始化结束 ，page实例对象、handle 构建 完毕 */
                PageBase.prototype.oninited = function () { }; /** on开始加载 */
                PageBase.prototype.onStartLoad = function () { };
                PageBase.prototype.Init = function () {
                };
                PageBase.prototype.show = function () {
                    if (this.handle) {
                        this.handle.show();
                    }
                    if (PageBase.onShowAct) {
                        PageBase.onShowAct(this);
                    }
                };
                PageBase.prototype.hide = function () {
                    if (this.handle) {
                        this.handle.hide();
                    }
                    if (PageBase.onHideAct) {
                        PageBase.onHideAct(this);
                    }
                };
                PageBase.prototype.destory = function () {
                    delete PageBase.instanceMap[this.constructor.name];
                    if (PageBase.onDestoryAct) {
                        PageBase.onDestoryAct(this);
                    }
                    this.resLoadState = 0;
                    //任務隊列清理
                    this.taskQueue.length = 0;
                    //handle
                    this.handle.hide();
                    this.handle.remove();
                    if (this.handle instanceof uiPage) {
                        var han = this.handle;
                        var index = uiPage.pages.indexOf(han);
                        if (index != -1) {
                            uiPage.pages.splice(index, 1);
                        }
                    }
                    this.handle = null;
                    //清理 資源
                    // commTool.destoryResByUrl(`${PageBase.UIPath}${this.dependentPrefabName}/${this.dependentPrefabName}.assetbundle.json`);
                    // let abStrs : string [] = this.dependentAtlasNames;
                    // let len = abStrs.length;
                    // for (let i = 0; i < len; i++) {
                    //     let atlasName:string=abStrs[i];
                    //     let url = `${GameMgr.atlasPath}${atlasName}/${atlasName}.assetbundle.json`;
                    //     // console.error("移除   " + abStr);
                    //     loadMgr.Instance.destoryResByUrl(url);
                    // } 
                    LoadTool.removeAtlasByName(this.dependentAtlasNames);
                };
                //加载资源
                PageBase.prototype.loadRes = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (this.onStartLoad) {
                                        this.onStartLoad();
                                    }
                                    this.resLoadState = 1;
                                    return [4 /*yield*/, LoadTool.loadPrefeb(this.dependentPrefabName)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, LoadTool.loadAtlas(this.dependentAtlasNames)];
                                case 2:
                                    _a.sent();
                                    // console.error("资源已加载完成！！！！！！！"+TimeUtil.realtimeSinceStartup);
                                    this.mountComp();
                                    this.resLoadState = 2;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                PageBase.prototype.mountComp = function () {
                    //构建prefab
                    var postfix = ".prefab.json";
                    var obj = m4m.framework.sceneMgr.app.getAssetMgr()
                        .getAssetByName("".concat(this.dependentPrefabName).concat(postfix), "auiPre/ui/".concat(this.dependentPrefabName, "/").concat(this.dependentPrefabName, ".assetbundle.json"));
                    if (obj == null) {
                        console.error("".concat(this.dependentPrefabName).concat(postfix, "  ui\u8D44\u6E90\u51FA\u9519\uFF01\uFF01"));
                    }
                    var comps = obj.getCloneTrans2D().transform.components;
                    var mountSucc = false;
                    //寻找组件 并 挂载到 handle
                    for (var i = 0; i < comps.length; i++) {
                        var comp = comps[i];
                        if (comp.comp instanceof uiPage || comp.comp instanceof uiPop) {
                            if (!(comp.comp instanceof this.handleType)) {
                                // tslint:disable-next-line: max-line-length
                                console.error("".concat(this["constructor"].name, " \u7EC4\u4EF6\u6302\u8F7D\u5230handel\u5931\u8D25\uFF01prefab\u4E0A \u7EC4\u4EF6\u7C7B\u578B ").concat(comp.comp["constructor"].name, " \u4E0E \u76EE\u6807\u7C7B\u578B ").concat(this.handleType["constructor"].name, " \u4E0D\u5339\u914D"));
                                break;
                            }
                            this.handle = comp.comp;
                            mountSucc = true;
                            console.log("".concat(this["constructor"].name, "  \u6210\u529F\u6302\u8F7D\u5230handel \u7EC4\u4EF6\uFF1A").concat(this.handle["constructor"].name, "   ") + TimeUtil_4.TimeUtil.realtimeSinceStartup);
                            if (this.oninited) {
                                this.oninited();
                            }
                            break;
                        }
                    }
                    if (!mountSucc) {
                        console.error("".concat(this["constructor"].name, " \u7EC4\u4EF6\u6302\u8F7D\u5230handel\u5931\u8D25\uFF01\u8BF7\u68C0\u67E5prefab \u6839\u8282\u70B9\u4E0A\u662F\u5426\u6302\u8F7Dui Handel \u7EC4\u4EF6 "));
                    }
                };
                //执行任务
                PageBase.prototype.executeTask = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var task;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (this.resLoadState == 1 || this.taskQueue.length <= 0) {
                                        return [2 /*return*/, null];
                                    }
                                    task = this.taskQueue.shift();
                                    if (!task.fun) return [3 /*break*/, 2];
                                    return [4 /*yield*/, task.fun.apply(this, task.arg)];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    this.executeTask();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                PageBase.instanceMap = {};
                /** uipage 加载工具类 */
                PageBase.loadTool = LoadTool;
                PageBase._UIPath = "";
                PageBase._atlasPath = "";
                return PageBase;
            }()));
            exports_155("uiPage", uiPage = /** @class */ (function (_super) {
                __extends(uiPage, _super);
                /**全屏 面板handle 基组件类 */
                // tslint:disable-next-line: class-name
                function uiPage() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiLayer = 0; // 0: base 、1 : high
                    _this.notHideOnOtherShow = false; //其他面板show 时 不隐藏
                    _this.inited = false;
                    return _this;
                }
                uiPage.hideAll = function (without) {
                    uiPage.pages.forEach(function (page) {
                        if (page != without && !page.notHideOnOtherShow) {
                            page.hide();
                        }
                    });
                };
                /** 显示UI页面  */
                uiPage.prototype.show = function () {
                    if (!this.inited) {
                        this.init();
                    }
                    var layTran = this.getParent();
                    layTran.addChild(this.transform);
                    this.transform.visible = true;
                    if (this.onShow) {
                        this.onShow();
                    }
                    uiPage.hideAll(this);
                };
                /** 隐藏UI页面 */
                uiPage.prototype.hide = function () {
                    if (!this.inited || !this.transform.visible) {
                        return;
                    }
                    if (this.onHide) {
                        this.onHide();
                    }
                    this.transform.visible = false;
                    if (this.transform.parent) {
                        this.transform.parent.removeChild(this.transform);
                    }
                };
                uiPage.prototype.remove = function () {
                    if (this.onDispose) {
                        this.onDispose();
                    }
                };
                uiPage.prototype.init = function () {
                    var layTran = this.getParent();
                    uiPage.pages.push(this);
                    layTran.addChild(this.transform);
                    this.inited = true;
                };
                uiPage.prototype.getParent = function () {
                    var layTran;
                    switch (this.uiLayer) {
                        case 0:
                            layTran = uiMgr_1.uiMgr.baselayer;
                            break;
                        case 1:
                            layTran = uiMgr_1.uiMgr.highlayer;
                            break;
                        default: layTran = uiMgr_1.uiMgr.baselayer;
                    }
                    return layTran;
                };
                /** page队列 */
                uiPage.pages = [];
                return uiPage;
            }(m4m.framework.behaviour2d)));
            /**pop 面板handle 基组件类 */
            // tslint:disable-next-line: class-name
            uiPop = /** @class */ (function (_super) {
                __extends(uiPop, _super);
                function uiPop() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.inited = false;
                    return _this;
                }
                uiPop.prototype.show = function () {
                    if (!this.inited) {
                        this.init();
                    }
                    this.transform.visible = true;
                    uiMgr_1.uiMgr.poplayer.addChild(this.transform);
                    if (this.onShow) {
                        this.onShow();
                    }
                };
                uiPop.prototype.hide = function () {
                    if (!this.inited || !this.transform.visible) {
                        return;
                    }
                    if (this.onHide) {
                        this.onHide();
                    }
                    this.transform.visible = false;
                    if (this.transform.parent) {
                        this.transform.parent.removeChild(this.transform);
                    }
                };
                uiPop.prototype.remove = function () {
                    if (this.onDispose) {
                        this.onDispose();
                    }
                };
                uiPop.prototype.init = function () {
                    var layTran = uiMgr_1.uiMgr.poplayer;
                    layTran.addChild(this.transform);
                    this.inited = true;
                };
                return uiPop;
            }(m4m.framework.behaviour2d));
            exports_155("uiPop", uiPop);
        }
    };
});
System.register("UIBase/uiPolygon", [], function (exports_156, context_156) {
    "use strict";
    var uiPolygon;
    var __moduleName = context_156 && context_156.id;
    return {
        setters: [],
        execute: function () {
            exports_156("uiPolygon", uiPolygon = /** @class */ (function () {
                // tslint:disable-next-line: class-name
                function uiPolygon() {
                    this.color = new m4m.math.color(1, 1, 1, 1);
                    this.polygonData = [];
                    this.datar = [
                    //3 pos  4 color  2 uv 4 color2
                    // 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,
                    // 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                    // 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
                    // 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
                    // 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                    // 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    this.minX = Number.MAX_VALUE;
                    this.maxX = Number.MAX_VALUE * -1;
                    this.minY = Number.MAX_VALUE;
                    this.maxY = Number.MAX_VALUE * -1;
                    this._CustomShaderName = ""; //自定义UIshader
                }
                uiPolygon_1 = uiPolygon;
                Object.defineProperty(uiPolygon.prototype, "uimat", {
                    get: function () {
                        var assetmgr = m4m.framework.sceneMgr.app.getAssetMgr();
                        if (!assetmgr) {
                            return this._uimat;
                        }
                        var pMask = this.transform.parentIsMask;
                        var mat = this._uimat;
                        var rectTag = "";
                        var uiTag = "_ui";
                        if (pMask) {
                            var rId = this.transform.maskRectId;
                            rectTag = "mask(".concat(rId, ")");
                        }
                        var matName = "_polygon_".concat(uiTag).concat(rectTag);
                        if (!mat || mat.getName() != matName) {
                            if (mat) {
                                mat.unuse();
                            }
                            mat = assetmgr.getAssetByName(matName);
                            if (mat) {
                                mat.use();
                            }
                        }
                        if (!mat) {
                            mat = new m4m.framework.material(matName);
                            var sh = assetmgr.getShader(this._CustomShaderName);
                            sh = sh ? sh : assetmgr.getShader(pMask ? uiPolygon_1.defMaskUIShader : uiPolygon_1.defUIShader);
                            mat.setShader(sh);
                            mat.use();
                            // this.needRefreshImg = true;
                        }
                        this._uimat = mat;
                        return this._uimat;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 添加 多边形的点
                 * @param localPos 坐标（本地坐标空间为基坐标系）
                 */
                uiPolygon.prototype.addPoint = function (localPos) {
                    this.polygonData.push(localPos.x);
                    this.polygonData.push(localPos.y);
                };
                /**
                 * 清理 所有的点
                 */
                uiPolygon.prototype.clearPoint = function () {
                    this.polygonData.length = 0;
                    // this.updateTran
                    this.datar.length = 0;
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 设置rander Shader名字
                 * @version m4m 1.0
                 */
                uiPolygon.prototype.setShaderByName = function (shaderName) {
                    this._CustomShaderName = shaderName;
                };
                uiPolygon.prototype.render = function (canvas) {
                    var plen = this.polygonData.length;
                    var triNum = plen - 2; //3 角形数量
                    if (triNum < 1) {
                        return;
                    }
                    var mat = this.uimat;
                    if (!mat) {
                        return;
                    }
                    if (this.transform.parentIsMask) {
                        var _cMaskV4 = this._cacheMaskV4;
                        if (!_cMaskV4) {
                            _cMaskV4 = this._cacheMaskV4 = new m4m.math.vector4();
                        }
                        var rect = this.transform.maskRect;
                        if (_cMaskV4.x != rect.x || _cMaskV4.y != rect.y || _cMaskV4.w != rect.w || _cMaskV4.z != rect.h) {
                            _cMaskV4.x = rect.x;
                            _cMaskV4.y = rect.y;
                            _cMaskV4.z = rect.w;
                            _cMaskV4.w = rect.h;
                            mat.setVector4("_maskRect", _cMaskV4);
                        }
                    }
                    canvas.pushRawData(mat, this.datar);
                };
                uiPolygon.prototype.updateTran = function () {
                    var _pData = this.polygonData;
                    var _data = this.datar;
                    var plen = _pData.length;
                    var triNum = plen - 2; //3 角形数量
                    if (triNum < 1) {
                        return;
                    }
                    var rpLen = triNum * 3;
                    var dLen = _data.length / 13;
                    if (rpLen != dLen) { //检查是否需要 调整
                        //datar 调整大小
                        if (dLen > rpLen) {
                            _data.length = rpLen * 13;
                        }
                        else {
                            var df = rpLen - dLen;
                            for (var i = 0; i < df; i++) {
                                _data.push(0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1);
                            }
                        }
                        dLen = rpLen * 13;
                    }
                    //
                    var m = this.transform.getWorldMatrix();
                    var l = -this.transform.pivot.x * this.transform.width;
                    var t = -this.transform.pivot.y * this.transform.height;
                    for (var i = 0; i < triNum; i++) {
                        //pos
                        var pi = i * 2;
                        var x0 = _pData[0] + l;
                        var y0 = _pData[1] + t;
                        var x1 = _pData[pi + 2] + l;
                        var y1 = _pData[pi + 3] + t;
                        var x2 = _pData[pi + 4] + l;
                        var y2 = _pData[pi + 5] + t;
                        //calc pos
                        var _x0 = x0 * m.rawData[0] + y0 * m.rawData[2] + m.rawData[4];
                        var _y0 = x0 * m.rawData[1] + y0 * m.rawData[3] + m.rawData[5];
                        var _x1 = x1 * m.rawData[0] + y1 * m.rawData[2] + m.rawData[4];
                        var _y1 = x1 * m.rawData[1] + y1 * m.rawData[3] + m.rawData[5];
                        var _x2 = x2 * m.rawData[0] + y2 * m.rawData[2] + m.rawData[4];
                        var _y2 = x2 * m.rawData[1] + y2 * m.rawData[3] + m.rawData[5];
                        var _i = i * 3;
                        _data[_i * 13] = _x0;
                        _data[_i * 13 + 1] = _y0;
                        _data[(_i + 1) * 13] = _x1;
                        _data[(_i + 1) * 13 + 1] = _y1;
                        _data[(_i + 2) * 13] = _x2;
                        _data[(_i + 2) * 13 + 1] = _y2;
                        //drawRect 
                        this.minX = Math.min(_x0, _x1, _x2, this.minX);
                        this.minY = Math.min(_y0, _y1, _y2, this.minY);
                        this.maxX = Math.max(_x0, _x1, _x2, this.maxX);
                        this.maxY = Math.max(_y0, _y1, _y2, this.maxY);
                    }
                    //主color
                    for (var i = 0; i < rpLen; i++) {
                        _data[i * 13 + 3] = this.color.r;
                        _data[i * 13 + 4] = this.color.g;
                        _data[i * 13 + 5] = this.color.b;
                        _data[i * 13 + 6] = this.color.a;
                    }
                    //Drawrect
                    this.calcDrawRect();
                };
                uiPolygon.prototype.getMaterial = function () {
                    if (!this._uimat) {
                        return this.uimat;
                    }
                    return this._uimat;
                };
                uiPolygon.prototype.getDrawBounds = function () {
                    if (!this._darwRect) {
                        this._darwRect = new m4m.math.rect();
                        this.calcDrawRect();
                    }
                    return this._darwRect;
                };
                uiPolygon.prototype.onPlay = function () {
                };
                uiPolygon.prototype.start = function () {
                };
                uiPolygon.prototype.update = function (delta) {
                };
                uiPolygon.prototype.remove = function () {
                    this.clearPoint();
                    if (this._uimat) {
                        this._uimat.unuse();
                    }
                    this._cacheMaskV4 = null;
                    this.transform = null;
                    this.color = null;
                    this._darwRect = null;
                    this.transform = null;
                };
                /** 计算drawRect */
                uiPolygon.prototype.calcDrawRect = function () {
                    if (!this._darwRect) {
                        return;
                    }
                    //drawBounds (y 轴反向)
                    var canvas = this.transform.canvas;
                    if (!canvas) {
                        return;
                    }
                    var minPos = uiPolygon_1.helpV2;
                    minPos.x = this.minX;
                    minPos.y = this.maxY;
                    canvas.clipPosToCanvasPos(minPos, minPos);
                    var maxPos = uiPolygon_1.helpV2v1;
                    maxPos.x = this.maxX;
                    maxPos.y = this.minY;
                    canvas.clipPosToCanvasPos(maxPos, maxPos);
                    this._darwRect.x = minPos.x;
                    this._darwRect.y = minPos.y;
                    this._darwRect.w = maxPos.x - minPos.x;
                    this._darwRect.h = maxPos.y - minPos.y;
                    this.minX = this.minY = Number.MAX_VALUE;
                    this.maxX = this.maxY = Number.MAX_VALUE * -1;
                };
                var uiPolygon_1;
                uiPolygon.defUIShader = "shaders/defui"; //非mask 使用shader
                uiPolygon.defMaskUIShader = "shaders/defmaskui"; //mask 使用shader
                uiPolygon.helpV2 = new m4m.math.vector2();
                uiPolygon.helpV2v1 = new m4m.math.vector2();
                __decorate([
                    m4m.reflect.Field("color")
                ], uiPolygon.prototype, "color", void 0);
                __decorate([
                    m4m.reflect.Field("number[]")
                ], uiPolygon.prototype, "polygonData", void 0);
                uiPolygon = uiPolygon_1 = __decorate([
                    m4m.reflect.node2DComponent,
                    m4m.reflect.nodeRender
                    // tslint:disable-next-line: class-name
                ], uiPolygon);
                return uiPolygon;
            }()));
        }
    };
});
System.register("UIBase/uiRenderLeaper", ["UIBase/metaUIManager"], function (exports_157, context_157) {
    "use strict";
    var metaUIManager_6, uiRenderLeaper;
    var __moduleName = context_157 && context_157.id;
    return {
        setters: [
            function (metaUIManager_6_1) {
                metaUIManager_6 = metaUIManager_6_1;
            }
        ],
        execute: function () {
            exports_157("uiRenderLeaper", uiRenderLeaper = /** @class */ (function (_super) {
                __extends(uiRenderLeaper, _super);
                // tslint:disable-next-line: class-name
                function uiRenderLeaper() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 跳跃 层级 */
                    _this.leapLayer = 0;
                    _this.leapRenderTag = "__tagLeapRender__"; //避免重复计算
                    _this.leapedTag = "__tagLeaped__"; //已经处理了 标签
                    return _this;
                }
                uiRenderLeaper.prototype.onPlay = function () {
                    if (metaUIManager_6.metaUIManager.ActiveSelf.registerLeapRender) { //默认 uilayerMgr 指定层
                        metaUIManager_6.metaUIManager.ActiveSelf.registerLeapRender(this.transform.insId.getInsID(), this.onLeapRender.bind(this), this.onFrontBefRender.bind(this), this.leapLayer);
                        this.swLeapDisplay(true);
                    }
                };
                uiRenderLeaper.prototype.update = function (delta) {
                };
                /**
                 * 切换跳跃显示设置
                 * @param isLeap 是否跃迁显示
                 */
                uiRenderLeaper.prototype.swLeapDisplay = function (isLeap) {
                    if (this._isLeap == isLeap) {
                        return;
                    }
                    this._isLeap = isLeap;
                    if (!isLeap) {
                        this.moveRenderer(this.transform, isLeap);
                    }
                };
                uiRenderLeaper.prototype.remove = function () {
                    if (metaUIManager_6.metaUIManager.ActiveSelf.unregisterLeapRender) {
                        metaUIManager_6.metaUIManager.ActiveSelf.unregisterLeapRender(this.transform.insId.getInsID());
                    }
                };
                uiRenderLeaper.prototype.onFrontBefRender = function () {
                    if (!this._isLeap) {
                        return;
                    }
                    this.FrontUpdateTran(this.transform);
                };
                uiRenderLeaper.prototype.onLeapRender = function (canvas) {
                    if (!this._isLeap) {
                        return;
                    }
                    this.renderRecursion(this.transform, canvas);
                };
                uiRenderLeaper.prototype.renderRecursion = function (trans, canvas) {
                    if (!trans || !trans.visible) {
                        return;
                    }
                    if (!trans[this.leapedTag]) {
                        //自动处理 后面加到节点上的trans
                        this.moveRenderer(trans, true);
                    }
                    if (trans[this.leapRenderTag]) {
                        trans.renderer = trans[this.leapRenderTag];
                        trans.renderer.render(canvas);
                        trans.renderer = null;
                    }
                    if (trans.children) {
                        for (var i = 0; i < trans.children.length; i++) {
                            var temp2d = trans.children[i];
                            if (!temp2d) {
                                continue;
                            }
                            this.renderRecursion(temp2d, canvas);
                        }
                    }
                };
                //更新 rander 的 updatetran
                uiRenderLeaper.prototype.FrontUpdateTran = function (trans) {
                    if (!trans) {
                        return;
                    }
                    if (trans[this.leapRenderTag]) {
                        trans.renderer = trans[this.leapRenderTag];
                        trans.renderer.updateTran();
                        trans.renderer = null;
                    }
                    if (trans.children) {
                        for (var i = 0; i < trans.children.length; i++) {
                            var temp2d = trans.children[i];
                            if (!temp2d) {
                                continue;
                            }
                            this.FrontUpdateTran(temp2d);
                        }
                    }
                };
                //renderer 移花接木 top_overLay 或者 overLay
                uiRenderLeaper.prototype.moveRenderer = function (trans, isLeap) {
                    if (!trans) {
                        return;
                    }
                    if (isLeap) {
                        //leaped
                        trans[this.leapedTag] = true;
                        //renderer
                        if (!trans[this.leapRenderTag] && trans.renderer) {
                            trans[this.leapRenderTag] = trans.renderer;
                            trans.renderer = null;
                        }
                    }
                    else {
                        //leaped
                        delete trans[this.leapedTag];
                        //renderer
                        if (trans[this.leapRenderTag]) {
                            trans.renderer = trans[this.leapRenderTag];
                        }
                    }
                    if (trans.children) {
                        for (var i = 0; i < trans.children.length; i++) {
                            var temp2d = trans.children[i];
                            if (!temp2d) {
                                continue;
                            }
                            this.moveRenderer(temp2d, isLeap);
                        }
                    }
                };
                __decorate([
                    m4m.reflect.Field("number")
                ], uiRenderLeaper.prototype, "leapLayer", void 0);
                uiRenderLeaper = __decorate([
                    m4m.reflect.node2DComponent
                    // tslint:disable-next-line: class-name
                ], uiRenderLeaper);
                return uiRenderLeaper;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("animation/AnimationController", [], function (exports_158, context_158) {
    "use strict";
    var AnimStatePlayEvent, EventTypes, AnimationStateTransition, AnimationStateNode, AnimationController;
    var __moduleName = context_158 && context_158.id;
    return {
        setters: [],
        execute: function () {
            //配置 模板
            /**
            {
                "states":{
                    "show":{"clipName":"" , "speed":1 , "normalizeTime":1 , "mirror":false },
                    "showidle":{"clipName":"showidle" , "speed":1 , "normalizeTime":1 , "mirror":false },
                    "dead":{"clipName":"dead" , "speed":1 , "normalizeTime":1 , "mirror":false },
                    "idle":{"clipName":"idle" , "speed":1 , "normalizeTime":1 , "mirror":false },
                },
                "transitions":[
                    {"from":"__entry__","to":"idle"},
                    {"from":"__anyState__","to":"show"},
                    {"from":"__anyState__","to":"showidle"},
                    {"from":"__anyState__","to":"dead"},
                    {"from":"__anyState__","to":"idle"},
                    {"from":"show","to":"showidle"},
                    {"from":"hit1","to":"idle"},
                ]
            }
            
             */
            AnimStatePlayEvent = /** @class */ (function () {
                function AnimStatePlayEvent() {
                    this.stateName = "";
                }
                return AnimStatePlayEvent;
            }());
            EventTypes = /** @class */ (function () {
                function EventTypes() {
                }
                return EventTypes;
            }());
            /**
             * 动画 状态 过渡对象
             */
            AnimationStateTransition = /** @class */ (function () {
                function AnimationStateTransition(from, to) {
                    this.fromState = "";
                    this.toState = "";
                    this.fromState = from;
                    this.toState = to;
                }
                return AnimationStateTransition;
            }());
            /**
             * 动画 状态节点对象
             */
            AnimationStateNode = /** @class */ (function () {
                function AnimationStateNode(stateName, clipName, normalizeTime, speed, mirror) {
                    /** 最后添加的目标地点 */
                    this.lastToState = "";
                    this._transitionMap = {};
                    this._stateName = stateName;
                    this._clipName = clipName;
                    this._normalizeTime = normalizeTime;
                    this._speed = speed;
                    this._mirror = mirror;
                }
                Object.defineProperty(AnimationStateNode.prototype, "transitionMap", {
                    /** 过渡 Map*/
                    get: function () { return this._transitionMap; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(AnimationStateNode.prototype, "stateName", {
                    /** 状态名 */
                    get: function () { return this._stateName; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(AnimationStateNode.prototype, "speed", {
                    /** 播放速度 */
                    get: function () { return this._speed; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(AnimationStateNode.prototype, "mirror", {
                    /** 是否反转动画 */
                    get: function () { return this._mirror; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(AnimationStateNode.prototype, "normalizeTime", {
                    /** 播放到 指定单位化时间 */
                    get: function () { return this._normalizeTime; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(AnimationStateNode.prototype, "clipName", {
                    /** 动画片段名 */
                    get: function () { return this._clipName; },
                    enumerable: false,
                    configurable: true
                });
                /** 添加过渡 */
                AnimationStateNode.prototype.addTransition = function (transition) {
                    this._transitionMap[transition.toState] = transition;
                    this.lastToState = transition.toState;
                };
                return AnimationStateNode;
            }());
            exports_158("AnimationController", AnimationController = /** @class */ (function (_super) {
                __extends(AnimationController, _super);
                /**
                 * 动画控制 状态机
                 */
                function AnimationController() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 状态map */
                    _this.stateMap = {};
                    return _this;
                    // private test() {
                    //     this.OnStateOnce("onStatePlayEnd", "hit1",() => {
                    //         console.error(`onStatePlayEnd : ${99999}`);
                    //     }, this);
                    //     this.OnStateOnce("onStatePlay", "hit1",() => {
                    //         console.error(`onStatePlayEnd : ${99999}`);
                    //     }, this);
                    // }
                }
                Object.defineProperty(AnimationController.prototype, "animPlayer", {
                    /** 动画播放器 */
                    get: function () { return this._animPlayer; },
                    enumerable: false,
                    configurable: true
                });
                AnimationController.prototype.dispose = function () {
                    var _this = this;
                    //throw new Error("Method not implemented.");
                    this.RemoveListenerAll();
                    this._animPlayer = null;
                    this.anyState = null;
                    this.entry = null;
                    this.exit = null;
                    this.currentState = null;
                    this.playEvent = null;
                    if (this.stateMap) {
                        var mapKeys = Object.keys(this.stateMap);
                        mapKeys.forEach(function (val) {
                            delete _this.stateMap[val];
                        });
                    }
                    this.stateMap = null;
                };
                /** 初始化设置 */
                AnimationController.prototype.init = function (animPlayer, stateConf) {
                    this.playEvent = new AnimStatePlayEvent();
                    this._animPlayer = animPlayer;
                    //def state
                    this.anyState = new AnimationStateNode(AnimationController.ANYSTATE);
                    this.entry = new AnimationStateNode(AnimationController.ENTRY);
                    this.exit = new AnimationStateNode(AnimationController.EXIT);
                    this.addToMap(this.anyState);
                    this.addToMap(this.entry);
                    this.addToMap(this.exit);
                    //custom state
                    var states = stateConf["states"];
                    var csKeys = Object.keys(states);
                    for (var i = 0, len = csKeys.length; i < len; i++) {
                        var sName = csKeys[i];
                        var val = states[sName];
                        var _state = new AnimationStateNode(sName, val.clipName, val.normalizeTime, val.speed, val.mirror);
                        this.addToMap(_state);
                    }
                    //创建 过渡设置
                    var transitionArr = stateConf["transitions"];
                    for (var i = 0, len = transitionArr.length; i < len; i++) {
                        var val = transitionArr[i];
                        this.makeTransition(this.stateMap[val.from], this.stateMap[val.to]);
                    }
                    //entry
                    this._playNext(this.entry);
                };
                /**
                 * 获取 指定动画状态 的播放时长
                 * @param stateName 动画状态名
                 */
                AnimationController.prototype.getStateTimeLength = function (stateName) {
                    var timeLen = 0;
                    var sta = this.stateMap[stateName];
                    if (!sta) {
                        console.warn("getStateTimeLenght , \u4E0D\u5B58\u5728 stateName \uFF1A".concat(stateName, "."));
                        return timeLen;
                    }
                    var clipName = sta.clipName;
                    timeLen = this._animPlayer.getClipTotalTime(clipName);
                    return timeLen;
                };
                /**
                 * 获取 当前在播放的状态名字
                 */
                AnimationController.prototype.getCurrentStateName = function () {
                    var result = "";
                    if (this.currentState) {
                        result = this.currentState.stateName;
                    }
                    return result;
                };
                /**
                 * 播放 动画（指定的动画状态名）
                 * @param stateName 动画状态名
                 */
                AnimationController.prototype.play = function (stateName) {
                    var t = this.anyState.transitionMap[stateName];
                    if (!t) {
                        console.warn("\u6CA1\u6709\u8BBE\u7F6E \u52A8\u753B\u8FC7\u6E21 \u4ECE\uFF1A<".concat(t.fromState, "> \u5230\uFF1A<").concat(t.toState, ">"));
                        return;
                    }
                    this._playByTransition(t);
                };
                /**
                 * 停止播放 动画
                 */
                AnimationController.prototype.stop = function () {
                    this._animPlayer.stop();
                };
                /**
                 * 添加事件监听
                 * @param eventType
                 * @param listener
                 * @param thisArg
                 */
                AnimationController.prototype.On = function (eventType, listener, thisArg) {
                    _super.prototype.On.call(this, eventType, listener, thisArg);
                };
                /**
                 * 添加一次性事件监听(指定 state 对象)
                 * @param eventType 事件类型
                 * @param stateName 触发的state名
                 * @param listener 监听触发函数
                 * @param thisArg this对象
                 */
                AnimationController.prototype.OnStateOnce = function (eventType, stateName, listener, thisArg) {
                    var _this = this;
                    var staName = stateName;
                    var obj = {
                        cb: function (ev) {
                            if (ev.stateName != staName) {
                                return;
                            }
                            listener.apply(thisArg, ev);
                            _this.RemoveListener(eventType, obj.cb, obj);
                        },
                    };
                    this.On(eventType, obj.cb, obj);
                };
                /**
                 * 移除事件监听
                 * @param eventType
                 * @param listener
                 * @param thisArg
                 */
                AnimationController.prototype.RemoveListener = function (eventType, listener, thisArg) {
                    _super.prototype.RemoveListener.call(this, eventType, listener, thisArg);
                };
                /**
                 * 派发事件
                 * @param eventType
                 * @param ev
                 */
                AnimationController.prototype.Emit = function (eventType, ev) {
                    _super.prototype.Emit.call(this, eventType, ev);
                };
                AnimationController.prototype._playByTransition = function (t) {
                    var target = t.toState;
                    var sta = this.stateMap[target];
                    if (!sta.clipName) {
                        this._playNext(sta);
                        return;
                    }
                    var bindTime = 0.2; //之后 可能 从AnimationStateTransition 中 获取
                    this._animPlayer.playAnimByName(sta.clipName, this._onPlayEnd.bind(this), bindTime, 0, sta.speed, sta.mirror);
                    if (sta.normalizeTime != 1) {
                        this._animPlayer.setCurrClipNormalizedTime(sta.normalizeTime); //设置 播放结束的时间（单位化的时间 0-1）
                    }
                    this.playEvent.stateName = target;
                    this.currentState = sta;
                    this.Emit("onStatePlay", this.playEvent);
                };
                AnimationController.prototype._playNext = function (state) {
                    var t = state.transitionMap[state.lastToState];
                    if (!t) {
                        return;
                    }
                    this._playByTransition(t);
                };
                /** 播放结束 */
                AnimationController.prototype._onPlayEnd = function () {
                    if (!this.currentState) {
                        return;
                    }
                    this.playEvent.stateName = this.currentState.stateName;
                    this.Emit("onStatePlayEnd", this.playEvent);
                    this._playNext(this.currentState);
                };
                /** 创建 过渡 */
                AnimationController.prototype.makeTransition = function (from, to) {
                    var transition = new AnimationStateTransition(from.stateName, to.stateName);
                    from.addTransition(transition);
                };
                /** 添加到 map */
                AnimationController.prototype.addToMap = function (state) {
                    this.stateMap[state.stateName] = state;
                };
                /** 动画片段 后缀 */
                AnimationController.ANYSTATE = "__anyState__";
                AnimationController.ENTRY = "__entry__";
                AnimationController.EXIT = "__exit__";
                return AnimationController;
            }(m4m.AEvent)));
        }
    };
});
System.register("audio/H5AudioHandle", ["Data/Map", "Time/TimeUtil", "Tools/PlatformUtil"], function (exports_159, context_159) {
    "use strict";
    var Map_23, TimeUtil_5, PlatformUtil_3, audioEventer, H5AudioHandle;
    var __moduleName = context_159 && context_159.id;
    return {
        setters: [
            function (Map_23_1) {
                Map_23 = Map_23_1;
            },
            function (TimeUtil_5_1) {
                TimeUtil_5 = TimeUtil_5_1;
            },
            function (PlatformUtil_3_1) {
                PlatformUtil_3 = PlatformUtil_3_1;
            }
        ],
        execute: function () {
            // tslint:disable-next-line: class-name
            audioEventer = /** @class */ (function (_super) {
                __extends(audioEventer, _super);
                function audioEventer() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return audioEventer;
            }(m4m.AEvent));
            exports_159("H5AudioHandle", H5AudioHandle = /** @class */ (function () {
                // tslint:disable-next-line: member-ordering
                function H5AudioHandle() {
                    this._eventer = new audioEventer();
                    this.audioContextMap = new Map_23.cMap();
                    //需要清理声源  可设置清理方法
                    this.audioBufferMap = new Map_23.cMap();
                    this._pauseMap = new Map_23.cMap();
                    this._startTimeMap = new Map_23.cMap();
                    if (PlatformUtil_3.PlatformUtil.isIPhoneX) {
                        m4m.framework.AudioEx.instance()
                            .clickInit();
                    }
                }
                H5AudioHandle.prototype.onEnded = function (fun) {
                    this.onEndedCallBackFun = fun;
                };
                //清除某个声音资源
                H5AudioHandle.prototype.clearAudioBuffer = function (resName) {
                    var url = "".concat(this.urlBasePath).concat(resName);
                    // this.audioBufferMap.delete();
                };
                H5AudioHandle.prototype.loadAudioBuffer = function (resName, fun) {
                    var _this = this;
                    var url = "".concat(this.urlBasePath).concat(resName);
                    if (this.audioBufferMap.has(url)) {
                        var buff = this.audioBufferMap.get(url);
                        fun(buff, null);
                    }
                    else {
                        m4m.io.loadArrayBuffer(url, function (_buf, _err, isFail) {
                            if (_err || isFail) {
                                fun(null, _err);
                                console.error("\u52A0\u8F7D audioBuffer error \uFF1A ".concat(_err));
                            }
                            else {
                                m4m.framework.AudioEx.instance().audioContext
                                    .decodeAudioData(_buf, function (audiobuffer) {
                                    _this.audioBufferMap.set(url, audiobuffer);
                                    fun(audiobuffer, null);
                                });
                            }
                        });
                    }
                };
                H5AudioHandle.prototype.forEach = function (fn) {
                    if (!fn) {
                        return;
                    }
                    this.audioContextMap.forEach(function (val, key) {
                        fn(key);
                    });
                };
                H5AudioHandle.prototype.addAudio = function (resName) {
                    var _this = this;
                    var _context = this.audioContextMap.get(resName);
                    if (_context) {
                        this.stop(resName);
                    }
                    _context = m4m.framework.AudioEx.instance()
                        .createAudioChannel(false);
                    this.audioContextMap.set(resName, _context);
                    //查看是否有缓存
                    this.loadAudioBuffer(resName, function (buf, _err) {
                        var contextObj = _this.audioContextMap.get(resName);
                        if (!contextObj || !contextObj.source) {
                            return;
                        }
                        if (_err) {
                            console.error("\u52A0\u8F7DAudio buffer\u5931\u8D25 ERROR\uFF1A ".concat(_err));
                            return;
                        }
                        // console.error(contextObj.source.buffer);
                        if (contextObj.source.buffer == null) {
                            contextObj.source.buffer = buf;
                        }
                        _this.audioContextMap.set(resName, contextObj);
                        _this._eventer.Emit(H5AudioHandle.ON_LOAD_BUFFER, resName);
                    });
                    return true;
                };
                H5AudioHandle.prototype.removeAudio = function (resName) {
                    this.stop(resName);
                };
                H5AudioHandle.prototype.getVolume = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return NaN;
                    }
                    return _context.volume;
                };
                H5AudioHandle.prototype.setVolume = function (resName, volume) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    _context.volume = volume;
                };
                H5AudioHandle.prototype.play = function (resName, isloop, volume) {
                    var _this = this;
                    var _context = this.audioContextMap.get(resName);
                    if (_context) {
                        //有在播放的先停掉
                        this.stop(resName);
                    }
                    var isNew = this.addAudio(resName);
                    _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    if (isNew) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        isloop = isloop == null ? false : isloop;
                        // tslint:disable-next-line: no-parameter-reassignment
                        volume = volume == null ? 1 : volume;
                    }
                    if (isloop != null) {
                        _context.source.loop = isloop;
                    }
                    if (volume != null) {
                        _context.volume = volume;
                    }
                    var pMap = this._pauseMap;
                    if (pMap.has(resName)) {
                        //有暂停的
                        _context.source.loop = isloop;
                        _context.volume = volume;
                        this.seek(resName, pMap.get(resName));
                        pMap.delete(resName);
                        return;
                    }
                    //记录 开始播放时间
                    var stMap = this._startTimeMap;
                    //
                    var playFun = function () {
                        if (_context && _context.source && _context.source.start) {
                            // console.error("开始播声音 **START ", TimeUtil.realtimeSinceStartup);
                            _context.source.start(0);
                        }
                        if (_context) {
                            _context.isplay = true;
                        }
                        _this.regAudioPlayEnd(resName);
                        stMap.set(resName, TimeUtil_5.TimeUtil.time);
                    };
                    var buf = _context.source.buffer;
                    if (buf) {
                        playFun();
                    }
                    else {
                        var pObj_1 = {
                            pFun: function () {
                                playFun();
                                _this._eventer.RemoveListener(H5AudioHandle.ON_LOAD_BUFFER, pObj_1.pFun, pObj_1);
                            },
                        };
                        this._eventer.On(H5AudioHandle.ON_LOAD_BUFFER, pObj_1.pFun, pObj_1);
                    }
                };
                H5AudioHandle.prototype.stop = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    if (_context.source) {
                        _context.source.onended = null;
                    }
                    if (_context.isplay) {
                        _context.stop();
                    }
                    _context.isplay = false;
                    this.disposeAudioChannel(_context);
                    this._pauseMap.delete(resName);
                    this._startTimeMap.delete(resName);
                    this.audioContextMap.delete(resName);
                };
                H5AudioHandle.prototype.seek = function (resName, position) {
                    var _this = this;
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    var volume = 1;
                    if (volume != null) {
                        volume = _context.volume;
                    }
                    var isloop = false;
                    if (_context.source != null) {
                        isloop = _context.source.loop;
                    }
                    //有在播放的先停掉
                    this.stop(resName);
                    this.addAudio(resName);
                    _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    var buf = _context.source.buffer;
                    var stMap = this._startTimeMap;
                    var pMap = this._pauseMap;
                    var playFun = function (_buf) {
                        var pos = position < 0 ? 0 : position;
                        pos %= _buf.duration;
                        _context.volume = volume;
                        _context.source.loop = isloop;
                        _context.source.start(0, pos);
                        _context.isplay = true;
                        _this.regAudioPlayEnd(resName);
                        stMap.set(resName, TimeUtil_5.TimeUtil.time - position * 1000);
                        pMap.delete(resName);
                    };
                    if (buf) {
                        playFun(buf);
                    }
                    else {
                        var pObj_2 = {
                            pFun: function () {
                                playFun(_context.source.buffer);
                                _this._eventer.RemoveListener(H5AudioHandle.ON_LOAD_BUFFER, pObj_2.pFun, pObj_2);
                            },
                        };
                        this._eventer.On(H5AudioHandle.ON_LOAD_BUFFER, pObj_2.pFun, pObj_2);
                    }
                };
                H5AudioHandle.prototype.pause = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    var stMap = this._startTimeMap;
                    var startTime = stMap.has(resName) ? stMap.get(resName) : TimeUtil_5.TimeUtil.time;
                    var dtTime = (TimeUtil_5.TimeUtil.time - startTime) * 0.001;
                    this._pauseMap.set(resName, dtTime);
                    //
                    if (_context.isplay) {
                        _context.stop();
                    }
                    this.disposeAudioChannel(_context);
                    this.audioContextMap.delete(resName);
                };
                H5AudioHandle.prototype.ispaused = function (resName) {
                    var _pMap = this._pauseMap;
                    return _pMap.has(resName);
                };
                H5AudioHandle.prototype.disposeAudioChannel = function (_context) {
                    if (!_context) {
                        return;
                    }
                    if (_context.source) {
                        _context.source.buffer = null;
                        _context.source.disconnect();
                    }
                    if (_context.gainNode) {
                        _context.gainNode.disconnect();
                    }
                    if (_context.pannerNode) {
                        _context.pannerNode.disconnect();
                        _context.pannerNode = null;
                    }
                    _context.source = null;
                    _context.gainNode = null;
                };
                H5AudioHandle.prototype.regAudioPlayEnd = function (resName) {
                    var _this = this;
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    var source = _context.source;
                    source.onended = function () {
                        _this.stop(resName);
                        if (_this.onEndedCallBackFun) {
                            _this.onEndedCallBackFun(resName);
                        }
                    };
                };
                H5AudioHandle.ON_LOAD_BUFFER = "onLoadBuffer";
                return H5AudioHandle;
            }()));
        }
    };
});
System.register("audio/WXAudioHandle", ["Data/Map", "Tools/miniGame"], function (exports_160, context_160) {
    "use strict";
    var Map_24, miniGame_11, WXAudioHandle;
    var __moduleName = context_160 && context_160.id;
    return {
        setters: [
            function (Map_24_1) {
                Map_24 = Map_24_1;
            },
            function (miniGame_11_1) {
                miniGame_11 = miniGame_11_1;
            }
        ],
        execute: function () {
            /**
             * 微信 声音handle
             */
            WXAudioHandle = /** @class */ (function () {
                function WXAudioHandle() {
                    this.urlBasePath = "";
                    this.audioContextMap = new Map_24.cMap();
                }
                WXAudioHandle.prototype.onEnded = function (fun) {
                    //
                    this.onEndedCallBackFun = fun;
                };
                WXAudioHandle.prototype.removeAudio = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    _context.onError = null;
                    _context.onEnded = null;
                    _context.destroy();
                    this.audioContextMap.delete(resName);
                };
                WXAudioHandle.prototype.forEach = function (fn) {
                    if (!fn) {
                        return;
                    }
                    this.audioContextMap.forEach(function (val, key) {
                        fn(key);
                    });
                };
                WXAudioHandle.prototype.addAudio = function (resName) {
                    var _this = this;
                    var resUrl = "".concat(this.urlBasePath).concat(resName);
                    var _context = this.audioContextMap.get(resName);
                    if (_context) {
                        return false;
                    }
                    _context = miniGame_11.miniGame.createInnerAudioContext();
                    this.audioContextMap.set(resName, _context);
                    _context.src = resUrl;
                    _context.onError(function (res) {
                        console.error("\u97F3\u9891 :".concat(resName, " , errCode : ").concat(res.errMsg, " , errMsg : ").concat(res.errCode));
                    });
                    _context.onEnded(function (res) {
                        if (_this.onEndedCallBackFun) {
                            _this.onEndedCallBackFun(resName);
                        }
                    });
                    return true;
                };
                WXAudioHandle.prototype.getVolume = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return NaN;
                    }
                    return _context.volume;
                };
                WXAudioHandle.prototype.setVolume = function (resName, volume) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context || isNaN(volume)) {
                        return;
                    }
                    _context.volume = volume;
                };
                WXAudioHandle.prototype.play = function (resName, isloop, volume) {
                    var isNew = this.addAudio(resName);
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    if (isNew) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        isloop = isloop == null ? false : isloop;
                        // tslint:disable-next-line: no-parameter-reassignment
                        volume = volume == null ? 1 : volume;
                    }
                    if (isloop != null) {
                        _context.loop = isloop;
                    }
                    if (!isNaN(volume)) {
                        _context.volume = volume;
                    }
                    _context.play();
                };
                WXAudioHandle.prototype.seek = function (resName, position) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context || isNaN(position)) {
                        return;
                    }
                    _context.seek(position);
                };
                WXAudioHandle.prototype.stop = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    _context.stop();
                };
                WXAudioHandle.prototype.pause = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    _context.pause();
                };
                WXAudioHandle.prototype.ispaused = function (resName) {
                    var _context = this.audioContextMap.get(resName);
                    if (!_context) {
                        return;
                    }
                    return _context.paused;
                };
                return WXAudioHandle;
            }());
            exports_160("WXAudioHandle", WXAudioHandle);
        }
    };
});
System.register("audio/AudioMgr", ["Data/Map", "Tools/miniGame", "audio/H5AudioHandle", "audio/WXAudioHandle"], function (exports_161, context_161) {
    "use strict";
    var Map_25, miniGame_12, H5AudioHandle_1, WXAudioHandle_1, AudioMgr;
    var __moduleName = context_161 && context_161.id;
    return {
        setters: [
            function (Map_25_1) {
                Map_25 = Map_25_1;
            },
            function (miniGame_12_1) {
                miniGame_12 = miniGame_12_1;
            },
            function (H5AudioHandle_1_1) {
                H5AudioHandle_1 = H5AudioHandle_1_1;
            },
            function (WXAudioHandle_1_1) {
                WXAudioHandle_1 = WXAudioHandle_1_1;
            }
        ],
        execute: function () {
            exports_161("AudioMgr", AudioMgr = /** @class */ (function () {
                function AudioMgr() {
                }
                Object.defineProperty(AudioMgr, "IsMute", {
                    /** 是否静音 */
                    get: function () { return this._isMute; },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 初始化
                 * @param urlBasePath 音频的基础路径
                 */
                AudioMgr.init = function (urlBasePath) {
                    this._urlBasePath = urlBasePath;
                    switch (miniGame_12.miniGame.miniType) {
                        case miniGame_12.miniAPIType.none:
                            this.audioHandle = new H5AudioHandle_1.H5AudioHandle();
                            break;
                        case miniGame_12.miniAPIType.wechat:
                            this.audioHandle = new WXAudioHandle_1.WXAudioHandle();
                            break;
                        case miniGame_12.miniAPIType.qq:
                            this.audioHandle = new WXAudioHandle_1.WXAudioHandle();
                            break;
                        // case miniAPIType.oppo: this.audioHandle = new WXAudioHandle(); break;
                        // case miniAPIType.vivo: this.audioHandle = new WXAudioHandle(); break;
                        // case miniAPIType.tikTok: this.audioHandle = new WXAudioHandle(); break;
                        default:
                    }
                    this.audioHandle.urlBasePath = this._urlBasePath;
                };
                /**
                 * 静音操作
                 * @param isMute 是否静音（true 静音 ，false 恢复之前播放音量）
                 */
                AudioMgr.setMute = function (isMute) {
                    this._isMute = isMute;
                    var aHandle = this.audioHandle;
                    var _map = this._recordVolumeMap;
                    if (isMute) {
                        //记录 现有音频的全部音量
                        aHandle.forEach(function (resName) {
                            _map.set(resName, aHandle.getVolume(resName));
                            aHandle.setVolume(resName, 0);
                        });
                    }
                    else {
                        //恢复到之前的音量
                        aHandle.forEach(function (resName) {
                            var v = _map.get(resName);
                            if (isNaN(v) || v == null) {
                                v = 1;
                            }
                            aHandle.setVolume(resName, v);
                        });
                        _map.clear();
                    }
                };
                //设置音量 特殊 处理 区分背影音乐和音效  以后改掉
                AudioMgr.setSpecialVolume = function (volume, audioResList, bgm) {
                    var aHandle = this.audioHandle;
                    //记录 现有音频的全部音量
                    aHandle.forEach(function (resName) {
                        if (bgm && audioResList.indexOf(resName) != -1) {
                            aHandle.setVolume(resName, volume);
                        }
                        else {
                            aHandle.setVolume(resName, volume);
                        }
                    });
                };
                //设置音量
                AudioMgr.setVolume = function (resName, volume) {
                    if (this._isMute) {
                        this._recordVolumeMap[resName] = volume;
                        return;
                    }
                    this.audioHandle.setVolume(resName, volume);
                };
                /** 播放指定音源 */
                AudioMgr.Play = function (resName, isloop, volume) {
                    if (isloop === void 0) { isloop = false; }
                    if (volume === void 0) { volume = 1; }
                    var v = volume;
                    if (this._isMute) {
                        this._recordVolumeMap[resName] = volume;
                        v = 0;
                    }
                    this.audioHandle.play(resName, isloop, v);
                };
                /** 停止播放 */
                AudioMgr.Stop = function (resName) {
                    this.audioHandle.stop(resName);
                };
                /** 停播全部 */
                AudioMgr.stopAll = function () {
                    var _this = this;
                    this.audioHandle.forEach(function (resName) {
                        _this.audioHandle.stop(resName);
                    });
                };
                /** 跳到指定进度位置 */
                AudioMgr.Seek = function (resName, position) {
                    this.audioHandle.seek(resName, position);
                };
                /** 暂停播放 */
                AudioMgr.pause = function (resName) {
                    this.audioHandle.pause(resName);
                };
                /**是否暂停或 播完了 */
                AudioMgr.ispaused = function (resName) {
                    return this.audioHandle.ispaused(resName);
                };
                /** 删除销毁 音频 */
                AudioMgr.removeAudio = function (resName) {
                    this.audioHandle.removeAudio(resName);
                };
                /** 监听音频自然播放至结束的事件 */
                AudioMgr.onEnded = function (fun) {
                    this.audioHandle.onEnded(fun);
                };
                AudioMgr._recordVolumeMap = new Map_25.cMap();
                //是否静音
                AudioMgr._isMute = false;
                return AudioMgr;
            }()));
        }
    };
});
//# sourceMappingURL=gameUtil.js.map