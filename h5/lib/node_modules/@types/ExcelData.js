var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("ArrangementData", ["Data/ExcelDataBase", "Data/Map"], function (exports_1, context_1) {
    "use strict";
    var ExcelDataBase_1, Map_1, ArrangementData;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (ExcelDataBase_1_1) {
                ExcelDataBase_1 = ExcelDataBase_1_1;
            },
            function (Map_1_1) {
                Map_1 = Map_1_1;
            }
        ],
        execute: function () {
            ArrangementData = /** @class */ (function (_super) {
                __extends(ArrangementData, _super);
                function ArrangementData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ArrangementData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_1.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ArrangementData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ArrangementData();
                        baseData.id = br.readUTFBytes();
                        baseData.token = br.readUTFBytes();
                        baseData.ArrangementJson = br.readUTFBytes();
                        baseData.Limit = (function () { var cache = []; var len = br.readUInt32(); for (var i_1 = 0; i_1 < len; i_1++) {
                            cache.push(br.readInt32());
                        } return cache; })();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ArrangementData.clone = function (old) {
                    var clone = new ArrangementData();
                    clone.id = old.id;
                    clone.token = old.token;
                    clone.Arrangement = old.Arrangement;
                    clone.Limit = old.Limit;
                    return clone;
                };
                ArrangementData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.token = old.token;
                    this.Arrangement = old.Arrangement;
                    this.Limit = old.Limit;
                };
                ArrangementData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ArrangementData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ArrangementData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ArrangementData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ArrangementData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ArrangementData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ArrangementData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ArrangementData.versition = 0;
                ArrangementData.params = ["id", "token", "Arrangement", "Limit",];
                return ArrangementData;
            }(ExcelDataBase_1.ExcelDataBase));
            exports_1("ArrangementData", ArrangementData);
            if (!m4m.__ExcDate__)
                m4m.__ExcDate__ = {};
            if (!m4m.__ExcDate__.__list)
                m4m.__ExcDate__.__list = [];
            m4m.__ExcDate__.__list.push(ArrangementData);
        }
    };
});
System.register("EquipBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_2, context_2) {
    "use strict";
    var ExcelDataBase_2, Map_2, EquipBase;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (ExcelDataBase_2_1) {
                ExcelDataBase_2 = ExcelDataBase_2_1;
            },
            function (Map_2_1) {
                Map_2 = Map_2_1;
            }
        ],
        execute: function () {
            EquipBase = /** @class */ (function (_super) {
                __extends(EquipBase, _super);
                function EquipBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(EquipBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_2.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                EquipBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new EquipBase();
                        baseData.id = br.readUTFBytes();
                        baseData.equipName = br.readUTFBytes();
                        baseData.visibl = br.readUTFBytes();
                        baseData.unlock = br.readUTFBytes();
                        baseData.buildTime = br.readUTFBytes();
                        baseData.PortfolioCost = br.readUTFBytes();
                        baseData.maxEffect = br.readByte();
                        baseData.randomEffect = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                EquipBase.clone = function (old) {
                    var clone = new EquipBase();
                    clone.id = old.id;
                    clone.equipName = old.equipName;
                    clone.visibl = old.visibl;
                    clone.unlock = old.unlock;
                    clone.buildTime = old.buildTime;
                    clone.PortfolioCost = old.PortfolioCost;
                    clone.maxEffect = old.maxEffect;
                    clone.randomEffect = old.randomEffect;
                    return clone;
                };
                EquipBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.equipName = old.equipName;
                    this.visibl = old.visibl;
                    this.unlock = old.unlock;
                    this.buildTime = old.buildTime;
                    this.PortfolioCost = old.PortfolioCost;
                    this.maxEffect = old.maxEffect;
                    this.randomEffect = old.randomEffect;
                };
                EquipBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                EquipBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                EquipBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                EquipBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                EquipBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                EquipBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                EquipBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                EquipBase.versition = 0;
                EquipBase.params = ["id", "equipName", "visibl", "unlock", "buildTime", "PortfolioCost", "maxEffect", "randomEffect",];
                return EquipBase;
            }(ExcelDataBase_2.ExcelDataBase));
            exports_2("EquipBase", EquipBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(EquipBase);
        }
    };
});
System.register("EquipDate", ["Data/ExcelDataBase", "Data/Map"], function (exports_3, context_3) {
    "use strict";
    var ExcelDataBase_3, Map_3, EquipDate;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [
            function (ExcelDataBase_3_1) {
                ExcelDataBase_3 = ExcelDataBase_3_1;
            },
            function (Map_3_1) {
                Map_3 = Map_3_1;
            }
        ],
        execute: function () {
            EquipDate = /** @class */ (function (_super) {
                __extends(EquipDate, _super);
                function EquipDate() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(EquipDate, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_3.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                EquipDate.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new EquipDate();
                        baseData.id = br.readUTFBytes();
                        baseData.equipDataJson = JSON.stringify((function () { var cache = []; var len = br.readUInt32(); for (var i_2 = 0; i_2 < len; i_2++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })());
                        baseData.equipStartTime = br.readULong();
                        baseData.equipEndTime = br.readULong();
                        baseData.equipEffect = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                EquipDate.clone = function (old) {
                    var clone = new EquipDate();
                    clone.id = old.id;
                    clone.equipData = old.equipData;
                    clone.equipStartTime = old.equipStartTime;
                    clone.equipEndTime = old.equipEndTime;
                    clone.equipEffect = old.equipEffect;
                    return clone;
                };
                EquipDate.prototype.clone = function (old) {
                    this.id = old.id;
                    this.equipData = old.equipData;
                    this.equipStartTime = old.equipStartTime;
                    this.equipEndTime = old.equipEndTime;
                    this.equipEffect = old.equipEffect;
                };
                EquipDate.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                EquipDate.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                EquipDate.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                EquipDate.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                EquipDate.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                EquipDate.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                EquipDate.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                EquipDate.versition = 0;
                EquipDate.params = ["id", "equipData", "equipStartTime", "equipEndTime", "equipEffect",];
                return EquipDate;
            }(ExcelDataBase_3.ExcelDataBase));
            exports_3("EquipDate", EquipDate);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(EquipDate);
        }
    };
});
System.register("EquipEffectBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_4, context_4) {
    "use strict";
    var ExcelDataBase_4, Map_4, EquipEffectBase;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [
            function (ExcelDataBase_4_1) {
                ExcelDataBase_4 = ExcelDataBase_4_1;
            },
            function (Map_4_1) {
                Map_4 = Map_4_1;
            }
        ],
        execute: function () {
            EquipEffectBase = /** @class */ (function (_super) {
                __extends(EquipEffectBase, _super);
                function EquipEffectBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(EquipEffectBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_4.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                EquipEffectBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new EquipEffectBase();
                        baseData.id = br.readUTFBytes();
                        baseData.equipEffectName = br.readUTFBytes();
                        baseData.equipEffectdesc = br.readUTFBytes();
                        baseData.equipEffecticon = br.readUTFBytes();
                        baseData.equipEffectType = br.readByte();
                        baseData.statusJson = br.readUTFBytes();
                        baseData.equipEffect = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                EquipEffectBase.clone = function (old) {
                    var clone = new EquipEffectBase();
                    clone.id = old.id;
                    clone.equipEffectName = old.equipEffectName;
                    clone.equipEffectdesc = old.equipEffectdesc;
                    clone.equipEffecticon = old.equipEffecticon;
                    clone.equipEffectType = old.equipEffectType;
                    clone.status = old.status;
                    clone.equipEffect = old.equipEffect;
                    return clone;
                };
                EquipEffectBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.equipEffectName = old.equipEffectName;
                    this.equipEffectdesc = old.equipEffectdesc;
                    this.equipEffecticon = old.equipEffecticon;
                    this.equipEffectType = old.equipEffectType;
                    this.status = old.status;
                    this.equipEffect = old.equipEffect;
                };
                EquipEffectBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                EquipEffectBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                EquipEffectBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                EquipEffectBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                EquipEffectBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                EquipEffectBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                EquipEffectBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                EquipEffectBase.versition = 0;
                EquipEffectBase.params = ["id", "equipEffectName", "equipEffectdesc", "equipEffecticon", "equipEffectType", "status", "equipEffect",];
                return EquipEffectBase;
            }(ExcelDataBase_4.ExcelDataBase));
            exports_4("EquipEffectBase", EquipEffectBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(EquipEffectBase);
        }
    };
});
System.register("EquipExpBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_5, context_5) {
    "use strict";
    var ExcelDataBase_5, Map_5, EquipExpBase;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [
            function (ExcelDataBase_5_1) {
                ExcelDataBase_5 = ExcelDataBase_5_1;
            },
            function (Map_5_1) {
                Map_5 = Map_5_1;
            }
        ],
        execute: function () {
            EquipExpBase = /** @class */ (function (_super) {
                __extends(EquipExpBase, _super);
                function EquipExpBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(EquipExpBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_5.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                EquipExpBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new EquipExpBase();
                        baseData.id = br.readUTFBytes();
                        baseData.lv = br.readUTFBytes();
                        baseData.expMax = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                EquipExpBase.clone = function (old) {
                    var clone = new EquipExpBase();
                    clone.id = old.id;
                    clone.lv = old.lv;
                    clone.expMax = old.expMax;
                    return clone;
                };
                EquipExpBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.lv = old.lv;
                    this.expMax = old.expMax;
                };
                EquipExpBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                EquipExpBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                EquipExpBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                EquipExpBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                EquipExpBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                EquipExpBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                EquipExpBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                EquipExpBase.versition = 0;
                EquipExpBase.params = ["id", "lv", "expMax",];
                return EquipExpBase;
            }(ExcelDataBase_5.ExcelDataBase));
            exports_5("EquipExpBase", EquipExpBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(EquipExpBase);
        }
    };
});
System.register("ErrorInfo", ["Data/ExcelDataBase", "Data/Map"], function (exports_6, context_6) {
    "use strict";
    var ExcelDataBase_6, Map_6, ErrorInfo;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [
            function (ExcelDataBase_6_1) {
                ExcelDataBase_6 = ExcelDataBase_6_1;
            },
            function (Map_6_1) {
                Map_6 = Map_6_1;
            }
        ],
        execute: function () {
            ErrorInfo = /** @class */ (function (_super) {
                __extends(ErrorInfo, _super);
                function ErrorInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ErrorInfo, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_6.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ErrorInfo.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ErrorInfo();
                        baseData.id = br.readUTFBytes();
                        baseData.message = br.readUTFBytes();
                        baseData.errorType = br.readUTFBytes();
                        baseData.time = br.readUTFBytes();
                        baseData.modelType = br.readUTFBytes();
                        baseData.ip = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ErrorInfo.clone = function (old) {
                    var clone = new ErrorInfo();
                    clone.id = old.id;
                    clone.message = old.message;
                    clone.errorType = old.errorType;
                    clone.time = old.time;
                    clone.modelType = old.modelType;
                    clone.ip = old.ip;
                    return clone;
                };
                ErrorInfo.prototype.clone = function (old) {
                    this.id = old.id;
                    this.message = old.message;
                    this.errorType = old.errorType;
                    this.time = old.time;
                    this.modelType = old.modelType;
                    this.ip = old.ip;
                };
                ErrorInfo.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ErrorInfo.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ErrorInfo.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ErrorInfo.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ErrorInfo.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ErrorInfo.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ErrorInfo.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ErrorInfo.versition = 0;
                ErrorInfo.params = ["id", "message", "errorType", "time", "modelType", "ip",];
                return ErrorInfo;
            }(ExcelDataBase_6.ExcelDataBase));
            exports_6("ErrorInfo", ErrorInfo);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ErrorInfo);
        }
    };
});
System.register("Formulas", ["Data/ExcelDataBase", "Data/Map"], function (exports_7, context_7) {
    "use strict";
    var ExcelDataBase_7, Map_7, Formulas;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [
            function (ExcelDataBase_7_1) {
                ExcelDataBase_7 = ExcelDataBase_7_1;
            },
            function (Map_7_1) {
                Map_7 = Map_7_1;
            }
        ],
        execute: function () {
            Formulas = /** @class */ (function (_super) {
                __extends(Formulas, _super);
                function Formulas() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(Formulas, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_7.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Formulas.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new Formulas();
                        baseData.id = br.readUTFBytes();
                        baseData.depict = br.readUTFBytes();
                        baseData.formulas = br.readUTFBytes();
                        baseData.randomRange = br.readFloat();
                        this.list.set(baseData.id, baseData);
                    }
                };
                Formulas.clone = function (old) {
                    var clone = new Formulas();
                    clone.id = old.id;
                    clone.depict = old.depict;
                    clone.formulas = old.formulas;
                    clone.randomRange = old.randomRange;
                    return clone;
                };
                Formulas.prototype.clone = function (old) {
                    this.id = old.id;
                    this.depict = old.depict;
                    this.formulas = old.formulas;
                    this.randomRange = old.randomRange;
                };
                Formulas.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                Formulas.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                Formulas.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                Formulas.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                Formulas.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                Formulas.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                Formulas.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                Formulas.versition = 0;
                Formulas.params = ["id", "depict", "formulas", "randomRange",];
                return Formulas;
            }(ExcelDataBase_7.ExcelDataBase));
            exports_7("Formulas", Formulas);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(Formulas);
        }
    };
});
System.register("SkinBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_8, context_8) {
    "use strict";
    var ExcelDataBase_8, Map_8, SkinBase;
    var __moduleName = context_8 && context_8.id;
    return {
        setters: [
            function (ExcelDataBase_8_1) {
                ExcelDataBase_8 = ExcelDataBase_8_1;
            },
            function (Map_8_1) {
                Map_8 = Map_8_1;
            }
        ],
        execute: function () {
            SkinBase = /** @class */ (function (_super) {
                __extends(SkinBase, _super);
                function SkinBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SkinBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_8.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                SkinBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SkinBase();
                        baseData.id = br.readUTFBytes();
                        baseData.skinName = br.readUTFBytes();
                        baseData.headPortrait = br.readUTFBytes();
                        baseData.skinSticker = br.readUTFBytes();
                        baseData.deblockingJson = br.readUTFBytes();
                        baseData.color = br.readUTFBytes();
                        baseData.renderType = br.readByte();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SkinBase.clone = function (old) {
                    var clone = new SkinBase();
                    clone.id = old.id;
                    clone.skinName = old.skinName;
                    clone.headPortrait = old.headPortrait;
                    clone.skinSticker = old.skinSticker;
                    clone.deblocking = old.deblocking;
                    clone.color = old.color;
                    clone.renderType = old.renderType;
                    return clone;
                };
                SkinBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.skinName = old.skinName;
                    this.headPortrait = old.headPortrait;
                    this.skinSticker = old.skinSticker;
                    this.deblocking = old.deblocking;
                    this.color = old.color;
                    this.renderType = old.renderType;
                };
                SkinBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SkinBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SkinBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SkinBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SkinBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SkinBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SkinBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SkinBase.versition = 0;
                SkinBase.params = ["id", "skinName", "headPortrait", "skinSticker", "deblocking", "color", "renderType",];
                return SkinBase;
            }(ExcelDataBase_8.ExcelDataBase));
            exports_8("SkinBase", SkinBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SkinBase);
        }
    };
});
System.register("LevelBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_9, context_9) {
    "use strict";
    var ExcelDataBase_9, Map_9, LevelBase;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [
            function (ExcelDataBase_9_1) {
                ExcelDataBase_9 = ExcelDataBase_9_1;
            },
            function (Map_9_1) {
                Map_9 = Map_9_1;
            }
        ],
        execute: function () {
            LevelBase = /** @class */ (function (_super) {
                __extends(LevelBase, _super);
                function LevelBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(LevelBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_9.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                LevelBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new LevelBase();
                        baseData.id = br.readUTFBytes();
                        baseData.amount = br.readUInt32();
                        baseData.stageName = br.readUTFBytes();
                        baseData.runwayLength = br.readUInt32();
                        baseData.runwayWeight = (function () { var cache = []; var len = br.readUInt32(); for (var i_3 = 0; i_3 < len; i_3++) {
                            cache.push(br.readInt32());
                        } return cache; })();
                        baseData.cubeSpMin = br.readFloat();
                        baseData.cubeSpMax = br.readFloat();
                        baseData.beyondRate = br.readFloat();
                        baseData.bootsWght = (function () { var cache = []; var len = br.readUInt32(); for (var i_4 = 0; i_4 < len; i_4++) {
                            cache.push(br.readInt32());
                        } return cache; })();
                        baseData.reviveCount = br.readByte();
                        this.list.set(baseData.id, baseData);
                    }
                };
                LevelBase.clone = function (old) {
                    var clone = new LevelBase();
                    clone.id = old.id;
                    clone.amount = old.amount;
                    clone.stageName = old.stageName;
                    clone.runwayLength = old.runwayLength;
                    clone.runwayWeight = old.runwayWeight;
                    clone.cubeSpMin = old.cubeSpMin;
                    clone.cubeSpMax = old.cubeSpMax;
                    clone.beyondRate = old.beyondRate;
                    clone.bootsWght = old.bootsWght;
                    clone.reviveCount = old.reviveCount;
                    return clone;
                };
                LevelBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.amount = old.amount;
                    this.stageName = old.stageName;
                    this.runwayLength = old.runwayLength;
                    this.runwayWeight = old.runwayWeight;
                    this.cubeSpMin = old.cubeSpMin;
                    this.cubeSpMax = old.cubeSpMax;
                    this.beyondRate = old.beyondRate;
                    this.bootsWght = old.bootsWght;
                    this.reviveCount = old.reviveCount;
                };
                LevelBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                LevelBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                LevelBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                LevelBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                LevelBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                LevelBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                LevelBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                LevelBase.versition = 0;
                LevelBase.params = ["id", "amount", "stageName", "runwayLength", "runwayWeight", "cubeSpMin", "cubeSpMax", "beyondRate", "bootsWght", "reviveCount",];
                return LevelBase;
            }(ExcelDataBase_9.ExcelDataBase));
            exports_9("LevelBase", LevelBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(LevelBase);
        }
    };
});
System.register("GameArchiveData", ["Data/ExcelDataBase", "Data/Map"], function (exports_10, context_10) {
    "use strict";
    var ExcelDataBase_10, Map_10, GameArchiveData;
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [
            function (ExcelDataBase_10_1) {
                ExcelDataBase_10 = ExcelDataBase_10_1;
            },
            function (Map_10_1) {
                Map_10 = Map_10_1;
            }
        ],
        execute: function () {
            GameArchiveData = /** @class */ (function (_super) {
                __extends(GameArchiveData, _super);
                function GameArchiveData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(GameArchiveData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_10.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                GameArchiveData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new GameArchiveData();
                        baseData.id = br.readUTFBytes();
                        baseData.baseDataJson = br.readUTFBytes();
                        baseData.CurrentlevelJson = br.readUTFBytes();
                        baseData.lastTime = br.readLong();
                        baseData.ism4mnft = br.readBoolean();
                        baseData.playerToken = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                GameArchiveData.clone = function (old) {
                    var clone = new GameArchiveData();
                    clone.id = old.id;
                    clone.baseData = old.baseData;
                    clone.Currentlevel = old.Currentlevel;
                    clone.lastTime = old.lastTime;
                    clone.ism4mnft = old.ism4mnft;
                    clone.playerToken = old.playerToken;
                    return clone;
                };
                GameArchiveData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.baseData = old.baseData;
                    this.Currentlevel = old.Currentlevel;
                    this.lastTime = old.lastTime;
                    this.ism4mnft = old.ism4mnft;
                    this.playerToken = old.playerToken;
                };
                GameArchiveData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                GameArchiveData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                GameArchiveData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                GameArchiveData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                GameArchiveData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                GameArchiveData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                GameArchiveData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                GameArchiveData.versition = 0;
                GameArchiveData.params = ["id", "baseData", "Currentlevel", "lastTime", "ism4mnft", "playerToken",];
                return GameArchiveData;
            }(ExcelDataBase_10.ExcelDataBase));
            exports_10("GameArchiveData", GameArchiveData);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(GameArchiveData);
        }
    };
});
System.register("ItemBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_11, context_11) {
    "use strict";
    var ExcelDataBase_11, Map_11, ItemBase;
    var __moduleName = context_11 && context_11.id;
    return {
        setters: [
            function (ExcelDataBase_11_1) {
                ExcelDataBase_11 = ExcelDataBase_11_1;
            },
            function (Map_11_1) {
                Map_11 = Map_11_1;
            }
        ],
        execute: function () {
            ItemBase = /** @class */ (function (_super) {
                __extends(ItemBase, _super);
                function ItemBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ItemBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_11.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ItemBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ItemBase();
                        baseData.id = br.readUTFBytes();
                        baseData.itemName = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.icon = br.readUTFBytes();
                        baseData.model = br.readUTFBytes();
                        baseData.effect = br.readUTFBytes();
                        baseData.tagType = br.readInt32();
                        baseData.itemType = br.readInt32();
                        baseData.quality = br.readInt32();
                        baseData.maxNum = br.readInt32();
                        baseData.useType = br.readInt32();
                        baseData.useLimit = (function () { var cache = []; var len = br.readUInt32(); for (var i_5 = 0; i_5 < len; i_5++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.useEffect = (function () { var cache = []; var len = br.readUInt32(); for (var i_6 = 0; i_6 < len; i_6++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.jump = (function () { var cache = []; var len = br.readUInt32(); for (var i_7 = 0; i_7 < len; i_7++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.use = (function () { var cache = []; var len = br.readUInt32(); for (var i_8 = 0; i_8 < len; i_8++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.equipType = br.readInt32();
                        baseData.statusJson = br.readUTFBytes();
                        baseData.statusUpJson = br.readUTFBytes();
                        baseData.lv = br.readUInt32();
                        baseData.rera = br.readInt32();
                        baseData.saleJson = br.readUTFBytes();
                        baseData.buyJson = br.readUTFBytes();
                        baseData.decompose = br.readUTFBytes();
                        baseData.imUse = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ItemBase.clone = function (old) {
                    var clone = new ItemBase();
                    clone.id = old.id;
                    clone.itemName = old.itemName;
                    clone.desc = old.desc;
                    clone.icon = old.icon;
                    clone.model = old.model;
                    clone.effect = old.effect;
                    clone.tagType = old.tagType;
                    clone.itemType = old.itemType;
                    clone.quality = old.quality;
                    clone.maxNum = old.maxNum;
                    clone.useType = old.useType;
                    clone.useLimit = old.useLimit;
                    clone.useEffect = old.useEffect;
                    clone.jump = old.jump;
                    clone.use = old.use;
                    clone.equipType = old.equipType;
                    clone.status = old.status;
                    clone.statusUp = old.statusUp;
                    clone.lv = old.lv;
                    clone.rera = old.rera;
                    clone.sale = old.sale;
                    clone.buy = old.buy;
                    clone.decompose = old.decompose;
                    clone.imUse = old.imUse;
                    return clone;
                };
                ItemBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.itemName = old.itemName;
                    this.desc = old.desc;
                    this.icon = old.icon;
                    this.model = old.model;
                    this.effect = old.effect;
                    this.tagType = old.tagType;
                    this.itemType = old.itemType;
                    this.quality = old.quality;
                    this.maxNum = old.maxNum;
                    this.useType = old.useType;
                    this.useLimit = old.useLimit;
                    this.useEffect = old.useEffect;
                    this.jump = old.jump;
                    this.use = old.use;
                    this.equipType = old.equipType;
                    this.status = old.status;
                    this.statusUp = old.statusUp;
                    this.lv = old.lv;
                    this.rera = old.rera;
                    this.sale = old.sale;
                    this.buy = old.buy;
                    this.decompose = old.decompose;
                    this.imUse = old.imUse;
                };
                ItemBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ItemBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ItemBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ItemBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ItemBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ItemBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ItemBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ItemBase.versition = 0;
                ItemBase.params = ["id", "itemName", "desc", "icon", "model", "effect", "tagType", "itemType", "quality", "maxNum", "useType", "useLimit", "useEffect", "jump", "use", "equipType", "status", "statusUp", "lv", "rera", "sale", "buy", "decompose", "imUse",];
                return ItemBase;
            }(ExcelDataBase_11.ExcelDataBase));
            exports_11("ItemBase", ItemBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ItemBase);
        }
    };
});
System.register("ItemData", ["Data/ExcelDataBase", "Data/Map"], function (exports_12, context_12) {
    "use strict";
    var ExcelDataBase_12, Map_12, ItemData;
    var __moduleName = context_12 && context_12.id;
    return {
        setters: [
            function (ExcelDataBase_12_1) {
                ExcelDataBase_12 = ExcelDataBase_12_1;
            },
            function (Map_12_1) {
                Map_12 = Map_12_1;
            }
        ],
        execute: function () {
            ItemData = /** @class */ (function (_super) {
                __extends(ItemData, _super);
                function ItemData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ItemData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_12.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ItemData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ItemData();
                        baseData.id = br.readUTFBytes();
                        baseData.itemName = br.readUTFBytes();
                        baseData.baseId = br.readUTFBytes();
                        baseData.baseDataJson = br.readUTFBytes();
                        baseData.count = br.readUInt32();
                        baseData.maxNum = br.readUInt32();
                        baseData.fromWhere = br.readUTFBytes();
                        baseData.buyCurrencyJson = br.readUTFBytes();
                        baseData.statusJson = br.readUTFBytes();
                        baseData.lv = br.readInt32();
                        baseData.rera = br.readInt32();
                        baseData.quality = br.readInt32();
                        baseData.playerUuid = br.readUTFBytes();
                        baseData.getTime = br.readULong();
                        baseData.statustype = br.readByte();
                        baseData.ifUseLimit = br.readBoolean();
                        baseData.forceTime = br.readULong();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ItemData.clone = function (old) {
                    var clone = new ItemData();
                    clone.id = old.id;
                    clone.itemName = old.itemName;
                    clone.baseId = old.baseId;
                    clone.baseData = old.baseData;
                    clone.count = old.count;
                    clone.maxNum = old.maxNum;
                    clone.fromWhere = old.fromWhere;
                    clone.buyCurrency = old.buyCurrency;
                    clone.status = old.status;
                    clone.lv = old.lv;
                    clone.rera = old.rera;
                    clone.quality = old.quality;
                    clone.playerUuid = old.playerUuid;
                    clone.getTime = old.getTime;
                    clone.statustype = old.statustype;
                    clone.ifUseLimit = old.ifUseLimit;
                    clone.forceTime = old.forceTime;
                    return clone;
                };
                ItemData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.itemName = old.itemName;
                    this.baseId = old.baseId;
                    this.baseData = old.baseData;
                    this.count = old.count;
                    this.maxNum = old.maxNum;
                    this.fromWhere = old.fromWhere;
                    this.buyCurrency = old.buyCurrency;
                    this.status = old.status;
                    this.lv = old.lv;
                    this.rera = old.rera;
                    this.quality = old.quality;
                    this.playerUuid = old.playerUuid;
                    this.getTime = old.getTime;
                    this.statustype = old.statustype;
                    this.ifUseLimit = old.ifUseLimit;
                    this.forceTime = old.forceTime;
                };
                ItemData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ItemData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ItemData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ItemData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ItemData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ItemData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ItemData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ItemData.versition = 0;
                ItemData.params = ["id", "itemName", "baseId", "baseData", "count", "maxNum", "fromWhere", "buyCurrency", "status", "lv", "rera", "quality", "playerUuid", "getTime", "statustype", "ifUseLimit", "forceTime",];
                return ItemData;
            }(ExcelDataBase_12.ExcelDataBase));
            exports_12("ItemData", ItemData);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ItemData);
        }
    };
});
System.register("MainBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_13, context_13) {
    "use strict";
    var ExcelDataBase_13, Map_13, MainBase;
    var __moduleName = context_13 && context_13.id;
    return {
        setters: [
            function (ExcelDataBase_13_1) {
                ExcelDataBase_13 = ExcelDataBase_13_1;
            },
            function (Map_13_1) {
                Map_13 = Map_13_1;
            }
        ],
        execute: function () {
            MainBase = /** @class */ (function (_super) {
                __extends(MainBase, _super);
                function MainBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MainBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_13.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                MainBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new MainBase();
                        baseData.id = br.readUTFBytes();
                        baseData.roleBspeed = br.readUInt32();
                        baseData.roleStepSpeed = br.readUInt32();
                        baseData.colorSpeed = br.readFloat();
                        baseData.DistorSpeed = br.readFloat();
                        baseData.DistorVrange = br.readUInt32();
                        baseData.DistorHrange = br.readUInt32();
                        baseData.obsBaseGap = br.readUInt32();
                        baseData.BoostGenSpeed = br.readUInt32();
                        baseData.singleCubeGenRate = br.readFloat();
                        baseData.sceneColorHGap = br.readUInt32();
                        baseData.firstColorH = br.readUInt32();
                        baseData.firstColorS = br.readUInt32();
                        baseData.firstColorV = br.readUInt32();
                        baseData.speedAddDistance = br.readUInt32();
                        baseData.speedAddRate = br.readUInt32();
                        baseData.playerMaxSpeed = br.readUInt32();
                        baseData.addMaxStepNum = br.readUInt32();
                        baseData.stepTimeLength = br.readFloat();
                        baseData.DiamonGenSpeed = br.readUInt32();
                        baseData.robotBSpeed = br.readUInt32();
                        baseData.robotReSurpassLimit = br.readUInt32();
                        baseData.watchVideo = br.readUInt32();
                        baseData.needRefreshADBanner = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                MainBase.clone = function (old) {
                    var clone = new MainBase();
                    clone.id = old.id;
                    clone.roleBspeed = old.roleBspeed;
                    clone.roleStepSpeed = old.roleStepSpeed;
                    clone.colorSpeed = old.colorSpeed;
                    clone.DistorSpeed = old.DistorSpeed;
                    clone.DistorVrange = old.DistorVrange;
                    clone.DistorHrange = old.DistorHrange;
                    clone.obsBaseGap = old.obsBaseGap;
                    clone.BoostGenSpeed = old.BoostGenSpeed;
                    clone.singleCubeGenRate = old.singleCubeGenRate;
                    clone.sceneColorHGap = old.sceneColorHGap;
                    clone.firstColorH = old.firstColorH;
                    clone.firstColorS = old.firstColorS;
                    clone.firstColorV = old.firstColorV;
                    clone.speedAddDistance = old.speedAddDistance;
                    clone.speedAddRate = old.speedAddRate;
                    clone.playerMaxSpeed = old.playerMaxSpeed;
                    clone.addMaxStepNum = old.addMaxStepNum;
                    clone.stepTimeLength = old.stepTimeLength;
                    clone.DiamonGenSpeed = old.DiamonGenSpeed;
                    clone.robotBSpeed = old.robotBSpeed;
                    clone.robotReSurpassLimit = old.robotReSurpassLimit;
                    clone.watchVideo = old.watchVideo;
                    clone.needRefreshADBanner = old.needRefreshADBanner;
                    return clone;
                };
                MainBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.roleBspeed = old.roleBspeed;
                    this.roleStepSpeed = old.roleStepSpeed;
                    this.colorSpeed = old.colorSpeed;
                    this.DistorSpeed = old.DistorSpeed;
                    this.DistorVrange = old.DistorVrange;
                    this.DistorHrange = old.DistorHrange;
                    this.obsBaseGap = old.obsBaseGap;
                    this.BoostGenSpeed = old.BoostGenSpeed;
                    this.singleCubeGenRate = old.singleCubeGenRate;
                    this.sceneColorHGap = old.sceneColorHGap;
                    this.firstColorH = old.firstColorH;
                    this.firstColorS = old.firstColorS;
                    this.firstColorV = old.firstColorV;
                    this.speedAddDistance = old.speedAddDistance;
                    this.speedAddRate = old.speedAddRate;
                    this.playerMaxSpeed = old.playerMaxSpeed;
                    this.addMaxStepNum = old.addMaxStepNum;
                    this.stepTimeLength = old.stepTimeLength;
                    this.DiamonGenSpeed = old.DiamonGenSpeed;
                    this.robotBSpeed = old.robotBSpeed;
                    this.robotReSurpassLimit = old.robotReSurpassLimit;
                    this.watchVideo = old.watchVideo;
                    this.needRefreshADBanner = old.needRefreshADBanner;
                };
                MainBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                MainBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                MainBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                MainBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                MainBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                MainBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                MainBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                MainBase.versition = 0;
                MainBase.params = ["id", "roleBspeed", "roleStepSpeed", "colorSpeed", "DistorSpeed", "DistorVrange", "DistorHrange", "obsBaseGap", "BoostGenSpeed", "singleCubeGenRate", "sceneColorHGap", "firstColorH", "firstColorS", "firstColorV", "speedAddDistance", "speedAddRate", "playerMaxSpeed", "addMaxStepNum", "stepTimeLength", "DiamonGenSpeed", "robotBSpeed", "robotReSurpassLimit", "watchVideo", "needRefreshADBanner",];
                return MainBase;
            }(ExcelDataBase_13.ExcelDataBase));
            exports_13("MainBase", MainBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(MainBase);
        }
    };
});
System.register("RoleBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_14, context_14) {
    "use strict";
    var ExcelDataBase_14, Map_14, RoleBase;
    var __moduleName = context_14 && context_14.id;
    return {
        setters: [
            function (ExcelDataBase_14_1) {
                ExcelDataBase_14 = ExcelDataBase_14_1;
            },
            function (Map_14_1) {
                Map_14 = Map_14_1;
            }
        ],
        execute: function () {
            RoleBase = /** @class */ (function (_super) {
                __extends(RoleBase, _super);
                function RoleBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(RoleBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_14.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                RoleBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new RoleBase();
                        baseData.id = br.readUTFBytes();
                        baseData.roleName = br.readUTFBytes();
                        baseData.jobType = br.readByte();
                        baseData.heroId = br.readByte();
                        baseData.icon = br.readUTFBytes();
                        baseData.model = br.readUTFBytes();
                        baseData.soldier = br.readUTFBytes();
                        baseData.spine = br.readUTFBytes();
                        baseData.backround = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.lv = br.readInt32();
                        baseData.rera = br.readByte();
                        baseData.originQuality = br.readByte();
                        baseData.attributeMaxJson = br.readUTFBytes();
                        baseData.growthLim = br.readInt32();
                        baseData.growthMax = br.readInt32();
                        baseData.growthSend = br.readInt32();
                        baseData.change = br.readUTFBytes();
                        baseData.breakThroughMin = br.readInt32();
                        baseData.breakThroughMax = br.readInt32();
                        baseData.breakThroughChange = br.readUTFBytes();
                        baseData.breakThroughCount = br.readInt32();
                        baseData.Potential = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                RoleBase.clone = function (old) {
                    var clone = new RoleBase();
                    clone.id = old.id;
                    clone.roleName = old.roleName;
                    clone.jobType = old.jobType;
                    clone.heroId = old.heroId;
                    clone.icon = old.icon;
                    clone.model = old.model;
                    clone.soldier = old.soldier;
                    clone.spine = old.spine;
                    clone.backround = old.backround;
                    clone.desc = old.desc;
                    clone.lv = old.lv;
                    clone.rera = old.rera;
                    clone.originQuality = old.originQuality;
                    clone.attributeMax = old.attributeMax;
                    clone.growthLim = old.growthLim;
                    clone.growthMax = old.growthMax;
                    clone.growthSend = old.growthSend;
                    clone.change = old.change;
                    clone.breakThroughMin = old.breakThroughMin;
                    clone.breakThroughMax = old.breakThroughMax;
                    clone.breakThroughChange = old.breakThroughChange;
                    clone.breakThroughCount = old.breakThroughCount;
                    clone.Potential = old.Potential;
                    return clone;
                };
                RoleBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.roleName = old.roleName;
                    this.jobType = old.jobType;
                    this.heroId = old.heroId;
                    this.icon = old.icon;
                    this.model = old.model;
                    this.soldier = old.soldier;
                    this.spine = old.spine;
                    this.backround = old.backround;
                    this.desc = old.desc;
                    this.lv = old.lv;
                    this.rera = old.rera;
                    this.originQuality = old.originQuality;
                    this.attributeMax = old.attributeMax;
                    this.growthLim = old.growthLim;
                    this.growthMax = old.growthMax;
                    this.growthSend = old.growthSend;
                    this.change = old.change;
                    this.breakThroughMin = old.breakThroughMin;
                    this.breakThroughMax = old.breakThroughMax;
                    this.breakThroughChange = old.breakThroughChange;
                    this.breakThroughCount = old.breakThroughCount;
                    this.Potential = old.Potential;
                };
                RoleBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                RoleBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                RoleBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                RoleBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                RoleBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                RoleBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                RoleBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                RoleBase.versition = 0;
                RoleBase.params = ["id", "roleName", "jobType", "heroId", "icon", "model", "soldier", "spine", "backround", "desc", "lv", "rera", "originQuality", "attributeMax", "growthLim", "growthMax", "growthSend", "change", "breakThroughMin", "breakThroughMax", "breakThroughChange", "breakThroughCount", "Potential",];
                return RoleBase;
            }(ExcelDataBase_14.ExcelDataBase));
            exports_14("RoleBase", RoleBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(RoleBase);
        }
    };
});
System.register("RoleData", ["Data/ExcelDataBase", "Data/Map"], function (exports_15, context_15) {
    "use strict";
    var ExcelDataBase_15, Map_15, RoleData;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [
            function (ExcelDataBase_15_1) {
                ExcelDataBase_15 = ExcelDataBase_15_1;
            },
            function (Map_15_1) {
                Map_15 = Map_15_1;
            }
        ],
        execute: function () {
            RoleData = /** @class */ (function (_super) {
                __extends(RoleData, _super);
                function RoleData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(RoleData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_15.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                RoleData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new RoleData();
                        baseData.id = br.readUTFBytes();
                        baseData.roleName = br.readUTFBytes();
                        baseData.server = br.readUTFBytes();
                        baseData.baseDataJson = br.readUTFBytes();
                        baseData.roleType = br.readByte();
                        baseData.roleState = br.readByte();
                        baseData.lastTime = br.readLong();
                        baseData.statusJson = br.readUTFBytes();
                        baseData.playerId = br.readUTFBytes();
                        baseData.lv = br.readInt32();
                        baseData.exp = br.readInt32();
                        baseData.rera = br.readInt32();
                        baseData.quality = br.readInt32();
                        baseData.currentGrowth = br.readInt32();
                        baseData.breakThrough = br.readInt32();
                        baseData.condition = br.readInt32();
                        baseData.roleStatusJson = br.readUTFBytes();
                        baseData.currencyJson = br.readUTFBytes();
                        baseData.equipJson = br.readUTFBytes();
                        baseData.equipmMaxHold = br.readInt32();
                        baseData.itemsJson = br.readUTFBytes();
                        baseData.mailItemJson = br.readUTFBytes();
                        baseData.buildingJson = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                RoleData.clone = function (old) {
                    var clone = new RoleData();
                    clone.id = old.id;
                    clone.roleName = old.roleName;
                    clone.server = old.server;
                    clone.baseData = old.baseData;
                    clone.roleType = old.roleType;
                    clone.roleState = old.roleState;
                    clone.lastTime = old.lastTime;
                    clone.status = old.status;
                    clone.playerId = old.playerId;
                    clone.lv = old.lv;
                    clone.exp = old.exp;
                    clone.rera = old.rera;
                    clone.quality = old.quality;
                    clone.currentGrowth = old.currentGrowth;
                    clone.breakThrough = old.breakThrough;
                    clone.condition = old.condition;
                    clone.roleStatus = old.roleStatus;
                    clone.currency = old.currency;
                    clone.equip = old.equip;
                    clone.equipmMaxHold = old.equipmMaxHold;
                    clone.items = old.items;
                    clone.mailItem = old.mailItem;
                    clone.building = old.building;
                    return clone;
                };
                RoleData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.roleName = old.roleName;
                    this.server = old.server;
                    this.baseData = old.baseData;
                    this.roleType = old.roleType;
                    this.roleState = old.roleState;
                    this.lastTime = old.lastTime;
                    this.status = old.status;
                    this.playerId = old.playerId;
                    this.lv = old.lv;
                    this.exp = old.exp;
                    this.rera = old.rera;
                    this.quality = old.quality;
                    this.currentGrowth = old.currentGrowth;
                    this.breakThrough = old.breakThrough;
                    this.condition = old.condition;
                    this.roleStatus = old.roleStatus;
                    this.currency = old.currency;
                    this.equip = old.equip;
                    this.equipmMaxHold = old.equipmMaxHold;
                    this.items = old.items;
                    this.mailItem = old.mailItem;
                    this.building = old.building;
                };
                RoleData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                RoleData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                RoleData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                RoleData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                RoleData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                RoleData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                RoleData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                RoleData.versition = 0;
                RoleData.params = ["id", "roleName", "server", "baseData", "roleType", "roleState", "lastTime", "status", "playerId", "lv", "exp", "rera", "quality", "currentGrowth", "breakThrough", "condition", "roleStatus", "currency", "equip", "equipmMaxHold", "items", "mailItem", "building",];
                return RoleData;
            }(ExcelDataBase_15.ExcelDataBase));
            exports_15("RoleData", RoleData);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(RoleData);
        }
    };
});
System.register("RoleExpBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_16, context_16) {
    "use strict";
    var ExcelDataBase_16, Map_16, RoleExpBase;
    var __moduleName = context_16 && context_16.id;
    return {
        setters: [
            function (ExcelDataBase_16_1) {
                ExcelDataBase_16 = ExcelDataBase_16_1;
            },
            function (Map_16_1) {
                Map_16 = Map_16_1;
            }
        ],
        execute: function () {
            RoleExpBase = /** @class */ (function (_super) {
                __extends(RoleExpBase, _super);
                function RoleExpBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(RoleExpBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_16.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                RoleExpBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new RoleExpBase();
                        baseData.id = br.readUTFBytes();
                        baseData.lv = br.readUTFBytes();
                        baseData.expmax = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                RoleExpBase.clone = function (old) {
                    var clone = new RoleExpBase();
                    clone.id = old.id;
                    clone.lv = old.lv;
                    clone.expmax = old.expmax;
                    return clone;
                };
                RoleExpBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.lv = old.lv;
                    this.expmax = old.expmax;
                };
                RoleExpBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                RoleExpBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                RoleExpBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                RoleExpBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                RoleExpBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                RoleExpBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                RoleExpBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                RoleExpBase.versition = 0;
                RoleExpBase.params = ["id", "lv", "expmax",];
                return RoleExpBase;
            }(ExcelDataBase_16.ExcelDataBase));
            exports_16("RoleExpBase", RoleExpBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(RoleExpBase);
        }
    };
});
System.register("ServerUserData", ["Data/ExcelDataBase", "Data/Map"], function (exports_17, context_17) {
    "use strict";
    var ExcelDataBase_17, Map_17, ServerUserData;
    var __moduleName = context_17 && context_17.id;
    return {
        setters: [
            function (ExcelDataBase_17_1) {
                ExcelDataBase_17 = ExcelDataBase_17_1;
            },
            function (Map_17_1) {
                Map_17 = Map_17_1;
            }
        ],
        execute: function () {
            ServerUserData = /** @class */ (function (_super) {
                __extends(ServerUserData, _super);
                function ServerUserData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ServerUserData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_17.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ServerUserData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ServerUserData();
                        baseData.id = br.readUTFBytes();
                        baseData.playerIDCount = br.readInt32();
                        baseData.userCampCountJson = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ServerUserData.clone = function (old) {
                    var clone = new ServerUserData();
                    clone.id = old.id;
                    clone.playerIDCount = old.playerIDCount;
                    clone.userCampCount = old.userCampCount;
                    return clone;
                };
                ServerUserData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.playerIDCount = old.playerIDCount;
                    this.userCampCount = old.userCampCount;
                };
                ServerUserData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ServerUserData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ServerUserData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ServerUserData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ServerUserData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ServerUserData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ServerUserData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ServerUserData.versition = 0;
                ServerUserData.params = ["id", "playerIDCount", "userCampCount",];
                return ServerUserData;
            }(ExcelDataBase_17.ExcelDataBase));
            exports_17("ServerUserData", ServerUserData);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ServerUserData);
        }
    };
});
System.register("SeverConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_18, context_18) {
    "use strict";
    var ExcelDataBase_18, Map_18, SeverConfigBase;
    var __moduleName = context_18 && context_18.id;
    return {
        setters: [
            function (ExcelDataBase_18_1) {
                ExcelDataBase_18 = ExcelDataBase_18_1;
            },
            function (Map_18_1) {
                Map_18 = Map_18_1;
            }
        ],
        execute: function () {
            SeverConfigBase = /** @class */ (function (_super) {
                __extends(SeverConfigBase, _super);
                function SeverConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SeverConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_18.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                SeverConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SeverConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.depict = br.readUTFBytes();
                        baseData.ip = br.readUTFBytes();
                        baseData.gateWay = br.readUTFBytes();
                        baseData.serverID = br.readUTFBytes();
                        baseData.serverName = br.readUTFBytes();
                        baseData.serverState = br.readByte();
                        baseData.newServer = br.readBoolean();
                        baseData.MAC = br.readUTFBytes();
                        baseData.setupTime = br.readDouble();
                        baseData.status = br.readByte();
                        baseData.playerSum = br.readUInt32();
                        baseData.isGate = br.readBoolean();
                        baseData.descIP = br.readUTFBytes();
                        baseData.mapSaveVer = br.readULong();
                        baseData.mapShowLevel = br.readByte();
                        baseData.mapSplit = br.readInt32();
                        baseData.heatbeatLimit = br.readUInt32();
                        baseData.battleTimes = br.readInt32();
                        baseData.marchSpeed = br.readFloat();
                        baseData.campaignMaxStamina = br.readInt32();
                        baseData.PhysicalTime = br.readInt32();
                        baseData.arrangeNum = br.readInt32();
                        baseData.campaignStartId = br.readInt32();
                        baseData.sweepModeChanged = br.readUTFBytes();
                        baseData.recomCampReward = br.readUTFBytes();
                        baseData.campJoin = br.readByte();
                        baseData.siegeWaitTime = br.readInt32();
                        baseData.siegeMaxTime = br.readInt32();
                        baseData.strikeCost = br.readUTFBytes();
                        baseData.siegeMinCost = br.readUTFBytes();
                        baseData.siegeMaxCost = br.readUTFBytes();
                        baseData.callBack = br.readUTFBytes();
                        baseData.fastCallBack = br.readUTFBytes();
                        baseData.marchSpeedUp = br.readUTFBytes();
                        baseData.superMarchSpeedUp = br.readUTFBytes();
                        baseData.minerAttack = br.readUTFBytes();
                        baseData.sameCampMinerAttackLim = br.readInt32();
                        baseData.avoidWarTime = br.readInt32();
                        baseData.avoidWarEffect = br.readUTFBytes();
                        baseData.maxEquipVolume = br.readInt32();
                        baseData.breakOutUnlock = br.readUTFBytes();
                        baseData.dailyEventUnlock = br.readUTFBytes();
                        baseData.unlockWildLevel = br.readInt32();
                        baseData.IntelligenceUnlock = br.readUTFBytes();
                        baseData.equipAuutoLock = br.readByte();
                        baseData.commonGrowthRecover = br.readInt32();
                        baseData.commonGrowthMaxTime = br.readInt32();
                        baseData.seniorGrowthCost = br.readUTFBytes();
                        baseData.battleJumpTime = br.readInt32();
                        baseData.furiousRound = br.readInt32();
                        baseData.furiousStrengthen = br.readFloat();
                        baseData.furiousMaxStrengthen = br.readFloat();
                        baseData.fortifiedAvoidWarTime = br.readInt32();
                        baseData.applyGvernorTime = br.readInt32();
                        baseData.fortifiedRetreatTime = br.readInt32();
                        baseData.fortifiedAvailable = br.readUTFBytes();
                        baseData.resourceGetInterval = br.readInt32();
                        baseData.resourceGetTime = br.readInt32();
                        baseData.firstGuideReward = br.readUTFBytes();
                        baseData.plunderPrecent = br.readInt32();
                        baseData.HamalplunderPrecent = br.readInt32();
                        baseData.HamalLostPrecent = br.readInt32();
                        baseData.campDevelopMaxTime = br.readInt32();
                        baseData.changNameCost = br.readUTFBytes();
                        baseData.changNameExchange = br.readUTFBytes();
                        baseData.hornCost = br.readUTFBytes();
                        baseData.hornCostExchange = br.readUTFBytes();
                        baseData.chatCd = br.readInt32();
                        baseData.Arrangement1UnlockDesc = br.readUTFBytes();
                        baseData.Arrangement2UnlockDesc = br.readUTFBytes();
                        baseData.mailShareCd = br.readInt32();
                        baseData.mailSaveTime = br.readInt32();
                        baseData.mailMaxKeep = br.readInt32();
                        baseData.enchantingFreeRefreshInterval = br.readInt32();
                        baseData.commonGrowthCost = br.readUTFBytes();
                        baseData.seniorEnchantingCost = br.readUTFBytes();
                        baseData.ultimateEnchantingCost = br.readUTFBytes();
                        baseData.enchantingFreeTimesLimit = br.readInt32();
                        baseData.EnchantingBubble = br.readInt32();
                        baseData.altarBubble = br.readInt32();
                        baseData.activityIconAvailable = br.readUTFBytes();
                        baseData.welfareIconAvailable = br.readUTFBytes();
                        baseData.preferentialIconAvailable = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SeverConfigBase.clone = function (old) {
                    var clone = new SeverConfigBase();
                    clone.id = old.id;
                    clone.depict = old.depict;
                    clone.ip = old.ip;
                    clone.gateWay = old.gateWay;
                    clone.serverID = old.serverID;
                    clone.serverName = old.serverName;
                    clone.serverState = old.serverState;
                    clone.newServer = old.newServer;
                    clone.MAC = old.MAC;
                    clone.setupTime = old.setupTime;
                    clone.status = old.status;
                    clone.playerSum = old.playerSum;
                    clone.isGate = old.isGate;
                    clone.descIP = old.descIP;
                    clone.mapSaveVer = old.mapSaveVer;
                    clone.mapShowLevel = old.mapShowLevel;
                    clone.mapSplit = old.mapSplit;
                    clone.heatbeatLimit = old.heatbeatLimit;
                    clone.battleTimes = old.battleTimes;
                    clone.marchSpeed = old.marchSpeed;
                    clone.campaignMaxStamina = old.campaignMaxStamina;
                    clone.PhysicalTime = old.PhysicalTime;
                    clone.arrangeNum = old.arrangeNum;
                    clone.campaignStartId = old.campaignStartId;
                    clone.sweepModeChanged = old.sweepModeChanged;
                    clone.recomCampReward = old.recomCampReward;
                    clone.campJoin = old.campJoin;
                    clone.siegeWaitTime = old.siegeWaitTime;
                    clone.siegeMaxTime = old.siegeMaxTime;
                    clone.strikeCost = old.strikeCost;
                    clone.siegeMinCost = old.siegeMinCost;
                    clone.siegeMaxCost = old.siegeMaxCost;
                    clone.callBack = old.callBack;
                    clone.fastCallBack = old.fastCallBack;
                    clone.marchSpeedUp = old.marchSpeedUp;
                    clone.superMarchSpeedUp = old.superMarchSpeedUp;
                    clone.minerAttack = old.minerAttack;
                    clone.sameCampMinerAttackLim = old.sameCampMinerAttackLim;
                    clone.avoidWarTime = old.avoidWarTime;
                    clone.avoidWarEffect = old.avoidWarEffect;
                    clone.maxEquipVolume = old.maxEquipVolume;
                    clone.breakOutUnlock = old.breakOutUnlock;
                    clone.dailyEventUnlock = old.dailyEventUnlock;
                    clone.unlockWildLevel = old.unlockWildLevel;
                    clone.IntelligenceUnlock = old.IntelligenceUnlock;
                    clone.equipAuutoLock = old.equipAuutoLock;
                    clone.commonGrowthRecover = old.commonGrowthRecover;
                    clone.commonGrowthMaxTime = old.commonGrowthMaxTime;
                    clone.seniorGrowthCost = old.seniorGrowthCost;
                    clone.battleJumpTime = old.battleJumpTime;
                    clone.furiousRound = old.furiousRound;
                    clone.furiousStrengthen = old.furiousStrengthen;
                    clone.furiousMaxStrengthen = old.furiousMaxStrengthen;
                    clone.fortifiedAvoidWarTime = old.fortifiedAvoidWarTime;
                    clone.applyGvernorTime = old.applyGvernorTime;
                    clone.fortifiedRetreatTime = old.fortifiedRetreatTime;
                    clone.fortifiedAvailable = old.fortifiedAvailable;
                    clone.resourceGetInterval = old.resourceGetInterval;
                    clone.resourceGetTime = old.resourceGetTime;
                    clone.firstGuideReward = old.firstGuideReward;
                    clone.plunderPrecent = old.plunderPrecent;
                    clone.HamalplunderPrecent = old.HamalplunderPrecent;
                    clone.HamalLostPrecent = old.HamalLostPrecent;
                    clone.campDevelopMaxTime = old.campDevelopMaxTime;
                    clone.changNameCost = old.changNameCost;
                    clone.changNameExchange = old.changNameExchange;
                    clone.hornCost = old.hornCost;
                    clone.hornCostExchange = old.hornCostExchange;
                    clone.chatCd = old.chatCd;
                    clone.Arrangement1UnlockDesc = old.Arrangement1UnlockDesc;
                    clone.Arrangement2UnlockDesc = old.Arrangement2UnlockDesc;
                    clone.mailShareCd = old.mailShareCd;
                    clone.mailSaveTime = old.mailSaveTime;
                    clone.mailMaxKeep = old.mailMaxKeep;
                    clone.enchantingFreeRefreshInterval = old.enchantingFreeRefreshInterval;
                    clone.commonGrowthCost = old.commonGrowthCost;
                    clone.seniorEnchantingCost = old.seniorEnchantingCost;
                    clone.ultimateEnchantingCost = old.ultimateEnchantingCost;
                    clone.enchantingFreeTimesLimit = old.enchantingFreeTimesLimit;
                    clone.EnchantingBubble = old.EnchantingBubble;
                    clone.altarBubble = old.altarBubble;
                    clone.activityIconAvailable = old.activityIconAvailable;
                    clone.welfareIconAvailable = old.welfareIconAvailable;
                    clone.preferentialIconAvailable = old.preferentialIconAvailable;
                    return clone;
                };
                SeverConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.depict = old.depict;
                    this.ip = old.ip;
                    this.gateWay = old.gateWay;
                    this.serverID = old.serverID;
                    this.serverName = old.serverName;
                    this.serverState = old.serverState;
                    this.newServer = old.newServer;
                    this.MAC = old.MAC;
                    this.setupTime = old.setupTime;
                    this.status = old.status;
                    this.playerSum = old.playerSum;
                    this.isGate = old.isGate;
                    this.descIP = old.descIP;
                    this.mapSaveVer = old.mapSaveVer;
                    this.mapShowLevel = old.mapShowLevel;
                    this.mapSplit = old.mapSplit;
                    this.heatbeatLimit = old.heatbeatLimit;
                    this.battleTimes = old.battleTimes;
                    this.marchSpeed = old.marchSpeed;
                    this.campaignMaxStamina = old.campaignMaxStamina;
                    this.PhysicalTime = old.PhysicalTime;
                    this.arrangeNum = old.arrangeNum;
                    this.campaignStartId = old.campaignStartId;
                    this.sweepModeChanged = old.sweepModeChanged;
                    this.recomCampReward = old.recomCampReward;
                    this.campJoin = old.campJoin;
                    this.siegeWaitTime = old.siegeWaitTime;
                    this.siegeMaxTime = old.siegeMaxTime;
                    this.strikeCost = old.strikeCost;
                    this.siegeMinCost = old.siegeMinCost;
                    this.siegeMaxCost = old.siegeMaxCost;
                    this.callBack = old.callBack;
                    this.fastCallBack = old.fastCallBack;
                    this.marchSpeedUp = old.marchSpeedUp;
                    this.superMarchSpeedUp = old.superMarchSpeedUp;
                    this.minerAttack = old.minerAttack;
                    this.sameCampMinerAttackLim = old.sameCampMinerAttackLim;
                    this.avoidWarTime = old.avoidWarTime;
                    this.avoidWarEffect = old.avoidWarEffect;
                    this.maxEquipVolume = old.maxEquipVolume;
                    this.breakOutUnlock = old.breakOutUnlock;
                    this.dailyEventUnlock = old.dailyEventUnlock;
                    this.unlockWildLevel = old.unlockWildLevel;
                    this.IntelligenceUnlock = old.IntelligenceUnlock;
                    this.equipAuutoLock = old.equipAuutoLock;
                    this.commonGrowthRecover = old.commonGrowthRecover;
                    this.commonGrowthMaxTime = old.commonGrowthMaxTime;
                    this.seniorGrowthCost = old.seniorGrowthCost;
                    this.battleJumpTime = old.battleJumpTime;
                    this.furiousRound = old.furiousRound;
                    this.furiousStrengthen = old.furiousStrengthen;
                    this.furiousMaxStrengthen = old.furiousMaxStrengthen;
                    this.fortifiedAvoidWarTime = old.fortifiedAvoidWarTime;
                    this.applyGvernorTime = old.applyGvernorTime;
                    this.fortifiedRetreatTime = old.fortifiedRetreatTime;
                    this.fortifiedAvailable = old.fortifiedAvailable;
                    this.resourceGetInterval = old.resourceGetInterval;
                    this.resourceGetTime = old.resourceGetTime;
                    this.firstGuideReward = old.firstGuideReward;
                    this.plunderPrecent = old.plunderPrecent;
                    this.HamalplunderPrecent = old.HamalplunderPrecent;
                    this.HamalLostPrecent = old.HamalLostPrecent;
                    this.campDevelopMaxTime = old.campDevelopMaxTime;
                    this.changNameCost = old.changNameCost;
                    this.changNameExchange = old.changNameExchange;
                    this.hornCost = old.hornCost;
                    this.hornCostExchange = old.hornCostExchange;
                    this.chatCd = old.chatCd;
                    this.Arrangement1UnlockDesc = old.Arrangement1UnlockDesc;
                    this.Arrangement2UnlockDesc = old.Arrangement2UnlockDesc;
                    this.mailShareCd = old.mailShareCd;
                    this.mailSaveTime = old.mailSaveTime;
                    this.mailMaxKeep = old.mailMaxKeep;
                    this.enchantingFreeRefreshInterval = old.enchantingFreeRefreshInterval;
                    this.commonGrowthCost = old.commonGrowthCost;
                    this.seniorEnchantingCost = old.seniorEnchantingCost;
                    this.ultimateEnchantingCost = old.ultimateEnchantingCost;
                    this.enchantingFreeTimesLimit = old.enchantingFreeTimesLimit;
                    this.EnchantingBubble = old.EnchantingBubble;
                    this.altarBubble = old.altarBubble;
                    this.activityIconAvailable = old.activityIconAvailable;
                    this.welfareIconAvailable = old.welfareIconAvailable;
                    this.preferentialIconAvailable = old.preferentialIconAvailable;
                };
                SeverConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SeverConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SeverConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SeverConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SeverConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SeverConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SeverConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SeverConfigBase.versition = 0;
                SeverConfigBase.params = ["id", "depict", "ip", "gateWay", "serverID", "serverName", "serverState", "newServer", "MAC", "setupTime", "status", "playerSum", "isGate", "descIP", "mapSaveVer", "mapShowLevel", "mapSplit", "heatbeatLimit", "battleTimes", "marchSpeed", "campaignMaxStamina", "PhysicalTime", "arrangeNum", "campaignStartId", "sweepModeChanged", "recomCampReward", "campJoin", "siegeWaitTime", "siegeMaxTime", "strikeCost", "siegeMinCost", "siegeMaxCost", "callBack", "fastCallBack", "marchSpeedUp", "superMarchSpeedUp", "minerAttack", "sameCampMinerAttackLim", "avoidWarTime", "avoidWarEffect", "maxEquipVolume", "breakOutUnlock", "dailyEventUnlock", "unlockWildLevel", "IntelligenceUnlock", "equipAuutoLock", "commonGrowthRecover", "commonGrowthMaxTime", "seniorGrowthCost", "battleJumpTime", "furiousRound", "furiousStrengthen", "furiousMaxStrengthen", "fortifiedAvoidWarTime", "applyGvernorTime", "fortifiedRetreatTime", "fortifiedAvailable", "resourceGetInterval", "resourceGetTime", "firstGuideReward", "plunderPrecent", "HamalplunderPrecent", "HamalLostPrecent", "campDevelopMaxTime", "changNameCost", "changNameExchange", "hornCost", "hornCostExchange", "chatCd", "Arrangement1UnlockDesc", "Arrangement2UnlockDesc", "mailShareCd", "mailSaveTime", "mailMaxKeep", "enchantingFreeRefreshInterval", "commonGrowthCost", "seniorEnchantingCost", "ultimateEnchantingCost", "enchantingFreeTimesLimit", "EnchantingBubble", "altarBubble", "activityIconAvailable", "welfareIconAvailable", "preferentialIconAvailable",];
                return SeverConfigBase;
            }(ExcelDataBase_18.ExcelDataBase));
            exports_18("SeverConfigBase", SeverConfigBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SeverConfigBase);
        }
    };
});
System.register("SeverData", ["Data/ExcelDataBase", "Data/Map"], function (exports_19, context_19) {
    "use strict";
    var ExcelDataBase_19, Map_19, SeverData;
    var __moduleName = context_19 && context_19.id;
    return {
        setters: [
            function (ExcelDataBase_19_1) {
                ExcelDataBase_19 = ExcelDataBase_19_1;
            },
            function (Map_19_1) {
                Map_19 = Map_19_1;
            }
        ],
        execute: function () {
            SeverData = /** @class */ (function (_super) {
                __extends(SeverData, _super);
                function SeverData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SeverData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_19.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                SeverData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SeverData();
                        baseData.id = br.readUTFBytes();
                        baseData.serverState = br.readByte();
                        baseData.newServer = br.readBoolean();
                        baseData.setupTime = br.readDouble();
                        baseData.status = br.readByte();
                        baseData.playerSum = br.readUInt32();
                        baseData.mapSaveVer = br.readULong();
                        baseData.openTime = br.readDouble();
                        baseData.addTime = br.readLong();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SeverData.clone = function (old) {
                    var clone = new SeverData();
                    clone.id = old.id;
                    clone.serverState = old.serverState;
                    clone.newServer = old.newServer;
                    clone.setupTime = old.setupTime;
                    clone.status = old.status;
                    clone.playerSum = old.playerSum;
                    clone.mapSaveVer = old.mapSaveVer;
                    clone.openTime = old.openTime;
                    clone.addTime = old.addTime;
                    return clone;
                };
                SeverData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.serverState = old.serverState;
                    this.newServer = old.newServer;
                    this.setupTime = old.setupTime;
                    this.status = old.status;
                    this.playerSum = old.playerSum;
                    this.mapSaveVer = old.mapSaveVer;
                    this.openTime = old.openTime;
                    this.addTime = old.addTime;
                };
                SeverData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SeverData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SeverData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SeverData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SeverData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SeverData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SeverData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SeverData.versition = 0;
                SeverData.params = ["id", "serverState", "newServer", "setupTime", "status", "playerSum", "mapSaveVer", "openTime", "addTime",];
                return SeverData;
            }(ExcelDataBase_19.ExcelDataBase));
            exports_19("SeverData", SeverData);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SeverData);
        }
    };
});
System.register("ThemeBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_20, context_20) {
    "use strict";
    var ExcelDataBase_20, Map_20, ThemeBase;
    var __moduleName = context_20 && context_20.id;
    return {
        setters: [
            function (ExcelDataBase_20_1) {
                ExcelDataBase_20 = ExcelDataBase_20_1;
            },
            function (Map_20_1) {
                Map_20 = Map_20_1;
            }
        ],
        execute: function () {
            ThemeBase = /** @class */ (function (_super) {
                __extends(ThemeBase, _super);
                function ThemeBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ThemeBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_20.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ThemeBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ThemeBase();
                        baseData.id = br.readUTFBytes();
                        baseData.sceneName = br.readUTFBytes();
                        baseData.image1 = br.readUTFBytes();
                        baseData.image2 = br.readUTFBytes();
                        baseData.cubeImage = br.readUTFBytes();
                        baseData.deblockingJson = br.readUTFBytes();
                        baseData.color = br.readUTFBytes();
                        baseData.hRange = (function () { var cache = []; var len = br.readUInt32(); for (var i_9 = 0; i_9 < len; i_9++) {
                            cache.push(br.readInt32());
                        } return cache; })();
                        baseData.sFactor = br.readInt32();
                        baseData.vFactor = br.readInt32();
                        baseData.icon = br.readUTFBytes();
                        baseData.isDynamicColor = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ThemeBase.clone = function (old) {
                    var clone = new ThemeBase();
                    clone.id = old.id;
                    clone.sceneName = old.sceneName;
                    clone.image1 = old.image1;
                    clone.image2 = old.image2;
                    clone.cubeImage = old.cubeImage;
                    clone.deblocking = old.deblocking;
                    clone.color = old.color;
                    clone.hRange = old.hRange;
                    clone.sFactor = old.sFactor;
                    clone.vFactor = old.vFactor;
                    clone.icon = old.icon;
                    clone.isDynamicColor = old.isDynamicColor;
                    return clone;
                };
                ThemeBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.sceneName = old.sceneName;
                    this.image1 = old.image1;
                    this.image2 = old.image2;
                    this.cubeImage = old.cubeImage;
                    this.deblocking = old.deblocking;
                    this.color = old.color;
                    this.hRange = old.hRange;
                    this.sFactor = old.sFactor;
                    this.vFactor = old.vFactor;
                    this.icon = old.icon;
                    this.isDynamicColor = old.isDynamicColor;
                };
                ThemeBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ThemeBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ThemeBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ThemeBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ThemeBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ThemeBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ThemeBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ThemeBase.versition = 0;
                ThemeBase.params = ["id", "sceneName", "image1", "image2", "cubeImage", "deblocking", "color", "hRange", "sFactor", "vFactor", "icon", "isDynamicColor",];
                return ThemeBase;
            }(ExcelDataBase_20.ExcelDataBase));
            exports_20("ThemeBase", ThemeBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ThemeBase);
        }
    };
});
System.register("TimeEvent", ["Data/ExcelDataBase", "Data/Map"], function (exports_21, context_21) {
    "use strict";
    var ExcelDataBase_21, Map_21, TimeEvent;
    var __moduleName = context_21 && context_21.id;
    return {
        setters: [
            function (ExcelDataBase_21_1) {
                ExcelDataBase_21 = ExcelDataBase_21_1;
            },
            function (Map_21_1) {
                Map_21 = Map_21_1;
            }
        ],
        execute: function () {
            TimeEvent = /** @class */ (function (_super) {
                __extends(TimeEvent, _super);
                function TimeEvent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(TimeEvent, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_21.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                TimeEvent.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new TimeEvent();
                        baseData.id = br.readUTFBytes();
                        baseData.eventName = br.readUTFBytes();
                        baseData.taskstartTime = br.readULong();
                        baseData.taskEndTime = br.readULong();
                        baseData.lastStartTime = br.readULong();
                        baseData.lastEndTime = br.readULong();
                        baseData.serverTimeZone = br.readInt32();
                        baseData.LoopCount = br.readInt32();
                        baseData.LoopTimers = br.readInt32();
                        baseData.isFristNoCD = br.readBoolean();
                        baseData.taskLoopTime = br.readULong();
                        baseData.timeType = br.readByte();
                        baseData.startTime = br.readULong();
                        baseData.startLimitTime = br.readULong();
                        baseData.predecessorTaskID = br.readUTFBytes();
                        baseData.taskEventString = br.readUTFBytes();
                        baseData.taskEventLog = br.readUTFBytes();
                        baseData.taskState = br.readInt32();
                        baseData.taskPreviousState = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                TimeEvent.clone = function (old) {
                    var clone = new TimeEvent();
                    clone.id = old.id;
                    clone.eventName = old.eventName;
                    clone.taskstartTime = old.taskstartTime;
                    clone.taskEndTime = old.taskEndTime;
                    clone.lastStartTime = old.lastStartTime;
                    clone.lastEndTime = old.lastEndTime;
                    clone.serverTimeZone = old.serverTimeZone;
                    clone.LoopCount = old.LoopCount;
                    clone.LoopTimers = old.LoopTimers;
                    clone.isFristNoCD = old.isFristNoCD;
                    clone.taskLoopTime = old.taskLoopTime;
                    clone.timeType = old.timeType;
                    clone.startTime = old.startTime;
                    clone.startLimitTime = old.startLimitTime;
                    clone.predecessorTaskID = old.predecessorTaskID;
                    clone.taskEventString = old.taskEventString;
                    clone.taskEventLog = old.taskEventLog;
                    clone.taskState = old.taskState;
                    clone.taskPreviousState = old.taskPreviousState;
                    return clone;
                };
                TimeEvent.prototype.clone = function (old) {
                    this.id = old.id;
                    this.eventName = old.eventName;
                    this.taskstartTime = old.taskstartTime;
                    this.taskEndTime = old.taskEndTime;
                    this.lastStartTime = old.lastStartTime;
                    this.lastEndTime = old.lastEndTime;
                    this.serverTimeZone = old.serverTimeZone;
                    this.LoopCount = old.LoopCount;
                    this.LoopTimers = old.LoopTimers;
                    this.isFristNoCD = old.isFristNoCD;
                    this.taskLoopTime = old.taskLoopTime;
                    this.timeType = old.timeType;
                    this.startTime = old.startTime;
                    this.startLimitTime = old.startLimitTime;
                    this.predecessorTaskID = old.predecessorTaskID;
                    this.taskEventString = old.taskEventString;
                    this.taskEventLog = old.taskEventLog;
                    this.taskState = old.taskState;
                    this.taskPreviousState = old.taskPreviousState;
                };
                TimeEvent.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                TimeEvent.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                TimeEvent.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                TimeEvent.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                TimeEvent.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                TimeEvent.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                TimeEvent.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                TimeEvent.versition = 0;
                TimeEvent.params = ["id", "eventName", "taskstartTime", "taskEndTime", "lastStartTime", "lastEndTime", "serverTimeZone", "LoopCount", "LoopTimers", "isFristNoCD", "taskLoopTime", "timeType", "startTime", "startLimitTime", "predecessorTaskID", "taskEventString", "taskEventLog", "taskState", "taskPreviousState",];
                return TimeEvent;
            }(ExcelDataBase_21.ExcelDataBase));
            exports_21("TimeEvent", TimeEvent);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(TimeEvent);
        }
    };
});
System.register("UploadIpfsData", ["Data/ExcelDataBase", "Data/Map"], function (exports_22, context_22) {
    "use strict";
    var ExcelDataBase_22, Map_22, UploadIpfsData;
    var __moduleName = context_22 && context_22.id;
    return {
        setters: [
            function (ExcelDataBase_22_1) {
                ExcelDataBase_22 = ExcelDataBase_22_1;
            },
            function (Map_22_1) {
                Map_22 = Map_22_1;
            }
        ],
        execute: function () {
            UploadIpfsData = /** @class */ (function (_super) {
                __extends(UploadIpfsData, _super);
                function UploadIpfsData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(UploadIpfsData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_22.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                UploadIpfsData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new UploadIpfsData();
                        baseData.id = br.readUTFBytes();
                        baseData.ImageName = br.readUTFBytes();
                        baseData.ImageUrl = br.readUTFBytes();
                        baseData.IpfsImagehash = br.readUTFBytes();
                        baseData.modelUrl = br.readUTFBytes();
                        baseData.Ipfsmodelhash = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                UploadIpfsData.clone = function (old) {
                    var clone = new UploadIpfsData();
                    clone.id = old.id;
                    clone.ImageName = old.ImageName;
                    clone.ImageUrl = old.ImageUrl;
                    clone.IpfsImagehash = old.IpfsImagehash;
                    clone.modelUrl = old.modelUrl;
                    clone.Ipfsmodelhash = old.Ipfsmodelhash;
                    return clone;
                };
                UploadIpfsData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.ImageName = old.ImageName;
                    this.ImageUrl = old.ImageUrl;
                    this.IpfsImagehash = old.IpfsImagehash;
                    this.modelUrl = old.modelUrl;
                    this.Ipfsmodelhash = old.Ipfsmodelhash;
                };
                UploadIpfsData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                UploadIpfsData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                UploadIpfsData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                UploadIpfsData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                UploadIpfsData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                UploadIpfsData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                UploadIpfsData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                UploadIpfsData.versition = 0;
                UploadIpfsData.params = ["id", "ImageName", "ImageUrl", "IpfsImagehash", "modelUrl", "Ipfsmodelhash",];
                return UploadIpfsData;
            }(ExcelDataBase_22.ExcelDataBase));
            exports_22("UploadIpfsData", UploadIpfsData);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(UploadIpfsData);
        }
    };
});
System.register("UserDataBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_23, context_23) {
    "use strict";
    var ExcelDataBase_23, Map_23, UserDataBase;
    var __moduleName = context_23 && context_23.id;
    return {
        setters: [
            function (ExcelDataBase_23_1) {
                ExcelDataBase_23 = ExcelDataBase_23_1;
            },
            function (Map_23_1) {
                Map_23 = Map_23_1;
            }
        ],
        execute: function () {
            UserDataBase = /** @class */ (function (_super) {
                __extends(UserDataBase, _super);
                function UserDataBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(UserDataBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_23.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                UserDataBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new UserDataBase();
                        baseData.id = br.readUTFBytes();
                        baseData.playerName = br.readUTFBytes();
                        baseData.token = br.readUTFBytes();
                        baseData.passWord = br.readUTFBytes();
                        baseData.status = br.readByte();
                        baseData.currencyJson = br.readUTFBytes();
                        baseData.isBlock = br.readBoolean();
                        baseData.isLogUser = br.readBoolean();
                        baseData.loginTime = br.readULong();
                        baseData.thirdPartyAccount = br.readByte();
                        baseData.serverChannel = br.readByte();
                        baseData.accountAccess = br.readByte();
                        baseData.blacklist = br.readUTFBytes();
                        baseData.frinedName = br.readUTFBytes();
                        baseData.icon = br.readUTFBytes();
                        baseData.GameArchiveJson = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                UserDataBase.clone = function (old) {
                    var clone = new UserDataBase();
                    clone.id = old.id;
                    clone.playerName = old.playerName;
                    clone.token = old.token;
                    clone.passWord = old.passWord;
                    clone.status = old.status;
                    clone.currency = old.currency;
                    clone.isBlock = old.isBlock;
                    clone.isLogUser = old.isLogUser;
                    clone.loginTime = old.loginTime;
                    clone.thirdPartyAccount = old.thirdPartyAccount;
                    clone.serverChannel = old.serverChannel;
                    clone.accountAccess = old.accountAccess;
                    clone.blacklist = old.blacklist;
                    clone.frinedName = old.frinedName;
                    clone.icon = old.icon;
                    clone.GameArchive = old.GameArchive;
                    return clone;
                };
                UserDataBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.playerName = old.playerName;
                    this.token = old.token;
                    this.passWord = old.passWord;
                    this.status = old.status;
                    this.currency = old.currency;
                    this.isBlock = old.isBlock;
                    this.isLogUser = old.isLogUser;
                    this.loginTime = old.loginTime;
                    this.thirdPartyAccount = old.thirdPartyAccount;
                    this.serverChannel = old.serverChannel;
                    this.accountAccess = old.accountAccess;
                    this.blacklist = old.blacklist;
                    this.frinedName = old.frinedName;
                    this.icon = old.icon;
                    this.GameArchive = old.GameArchive;
                };
                UserDataBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                UserDataBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                UserDataBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                UserDataBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                UserDataBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                UserDataBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                UserDataBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                UserDataBase.versition = 0;
                UserDataBase.params = ["id", "playerName", "token", "passWord", "status", "currency", "isBlock", "isLogUser", "loginTime", "thirdPartyAccount", "serverChannel", "accountAccess", "blacklist", "frinedName", "icon", "GameArchive",];
                return UserDataBase;
            }(ExcelDataBase_23.ExcelDataBase));
            exports_23("UserDataBase", UserDataBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(UserDataBase);
        }
    };
});
System.register("UserVarBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_24, context_24) {
    "use strict";
    var ExcelDataBase_24, Map_24, UserVarBase;
    var __moduleName = context_24 && context_24.id;
    return {
        setters: [
            function (ExcelDataBase_24_1) {
                ExcelDataBase_24 = ExcelDataBase_24_1;
            },
            function (Map_24_1) {
                Map_24 = Map_24_1;
            }
        ],
        execute: function () {
            UserVarBase = /** @class */ (function (_super) {
                __extends(UserVarBase, _super);
                function UserVarBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(UserVarBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_24.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                UserVarBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new UserVarBase();
                        baseData.id = br.readUTFBytes();
                        baseData.inGameStatus = br.readByte();
                        baseData.currencyJson = br.readUTFBytes();
                        baseData.littleManIcon = br.readBoolean();
                        baseData.PlayerAccountJson = br.readUTFBytes();
                        baseData.listOfFiguresJson = br.readUTFBytes();
                        baseData.ArrangementJson = br.readUTFBytes();
                        baseData.creatTime = br.readDouble();
                        this.list.set(baseData.id, baseData);
                    }
                };
                UserVarBase.clone = function (old) {
                    var clone = new UserVarBase();
                    clone.id = old.id;
                    clone.inGameStatus = old.inGameStatus;
                    clone.currency = old.currency;
                    clone.littleManIcon = old.littleManIcon;
                    clone.PlayerAccount = old.PlayerAccount;
                    clone.listOfFigures = old.listOfFigures;
                    clone.Arrangement = old.Arrangement;
                    clone.creatTime = old.creatTime;
                    return clone;
                };
                UserVarBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.inGameStatus = old.inGameStatus;
                    this.currency = old.currency;
                    this.littleManIcon = old.littleManIcon;
                    this.PlayerAccount = old.PlayerAccount;
                    this.listOfFigures = old.listOfFigures;
                    this.Arrangement = old.Arrangement;
                    this.creatTime = old.creatTime;
                };
                UserVarBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                UserVarBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                UserVarBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                UserVarBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                UserVarBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                UserVarBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                UserVarBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                UserVarBase.versition = 0;
                UserVarBase.params = ["id", "inGameStatus", "currency", "littleManIcon", "PlayerAccount", "listOfFigures", "Arrangement", "creatTime",];
                return UserVarBase;
            }(ExcelDataBase_24.ExcelDataBase));
            exports_24("UserVarBase", UserVarBase);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(UserVarBase);
        }
    };
});
System.register("WalletErrLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_25, context_25) {
    "use strict";
    var ExcelDataBase_25, Map_25, WalletErrLog;
    var __moduleName = context_25 && context_25.id;
    return {
        setters: [
            function (ExcelDataBase_25_1) {
                ExcelDataBase_25 = ExcelDataBase_25_1;
            },
            function (Map_25_1) {
                Map_25 = Map_25_1;
            }
        ],
        execute: function () {
            WalletErrLog = /** @class */ (function (_super) {
                __extends(WalletErrLog, _super);
                function WalletErrLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WalletErrLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_25.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WalletErrLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WalletErrLog();
                        baseData.id = br.readUTFBytes();
                        baseData.className = br.readUTFBytes();
                        baseData.methodName = br.readUTFBytes();
                        baseData.userToken = br.readUTFBytes();
                        baseData.logMessage = br.readUTFBytes();
                        baseData.resultTime = br.readDouble();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WalletErrLog.clone = function (old) {
                    var clone = new WalletErrLog();
                    clone.id = old.id;
                    clone.className = old.className;
                    clone.methodName = old.methodName;
                    clone.userToken = old.userToken;
                    clone.logMessage = old.logMessage;
                    clone.resultTime = old.resultTime;
                    return clone;
                };
                WalletErrLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.className = old.className;
                    this.methodName = old.methodName;
                    this.userToken = old.userToken;
                    this.logMessage = old.logMessage;
                    this.resultTime = old.resultTime;
                };
                WalletErrLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WalletErrLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WalletErrLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WalletErrLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WalletErrLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WalletErrLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WalletErrLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WalletErrLog.versition = 0;
                WalletErrLog.params = ["id", "className", "methodName", "userToken", "logMessage", "resultTime",];
                return WalletErrLog;
            }(ExcelDataBase_25.ExcelDataBase));
            exports_25("WalletErrLog", WalletErrLog);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WalletErrLog);
        }
    };
});
System.register("WalletLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_26, context_26) {
    "use strict";
    var ExcelDataBase_26, Map_26, WalletLog;
    var __moduleName = context_26 && context_26.id;
    return {
        setters: [
            function (ExcelDataBase_26_1) {
                ExcelDataBase_26 = ExcelDataBase_26_1;
            },
            function (Map_26_1) {
                Map_26 = Map_26_1;
            }
        ],
        execute: function () {
            WalletLog = /** @class */ (function (_super) {
                __extends(WalletLog, _super);
                function WalletLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WalletLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_26.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WalletLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WalletLog();
                        baseData.id = br.readUTFBytes();
                        baseData.className = br.readUTFBytes();
                        baseData.methodName = br.readUTFBytes();
                        baseData.userToken = br.readUTFBytes();
                        baseData.logMessage = br.readUTFBytes();
                        baseData.resultTime = br.readDouble();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WalletLog.clone = function (old) {
                    var clone = new WalletLog();
                    clone.id = old.id;
                    clone.className = old.className;
                    clone.methodName = old.methodName;
                    clone.userToken = old.userToken;
                    clone.logMessage = old.logMessage;
                    clone.resultTime = old.resultTime;
                    return clone;
                };
                WalletLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.className = old.className;
                    this.methodName = old.methodName;
                    this.userToken = old.userToken;
                    this.logMessage = old.logMessage;
                    this.resultTime = old.resultTime;
                };
                WalletLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WalletLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WalletLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WalletLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WalletLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WalletLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WalletLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WalletLog.versition = 0;
                WalletLog.params = ["id", "className", "methodName", "userToken", "logMessage", "resultTime",];
                return WalletLog;
            }(ExcelDataBase_26.ExcelDataBase));
            exports_26("WalletLog", WalletLog);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WalletLog);
        }
    };
});
System.register("test", ["Data/ExcelDataBase", "Data/Map"], function (exports_27, context_27) {
    "use strict";
    var ExcelDataBase_27, Map_27, test;
    var __moduleName = context_27 && context_27.id;
    return {
        setters: [
            function (ExcelDataBase_27_1) {
                ExcelDataBase_27 = ExcelDataBase_27_1;
            },
            function (Map_27_1) {
                Map_27 = Map_27_1;
            }
        ],
        execute: function () {
            test = /** @class */ (function (_super) {
                __extends(test, _super);
                function test() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(test, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_27.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                test.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new test();
                        baseData.id = br.readUTFBytes();
                        baseData.itemName = br.readUTFBytes();
                        baseData.test1Json = br.readUTFBytes();
                        baseData.test2Json = JSON.stringify((function () { var cache = []; var len = br.readUInt32(); for (var i_10 = 0; i_10 < len; i_10++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })());
                        baseData.test3Json = br.readUTFBytes();
                        baseData.test4Json = br.readUTFBytes();
                        baseData.test5Json = br.readUTFBytes();
                        baseData.test6Json = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                test.clone = function (old) {
                    var clone = new test();
                    clone.id = old.id;
                    clone.itemName = old.itemName;
                    clone.test1 = old.test1;
                    clone.test2 = old.test2;
                    clone.test3 = old.test3;
                    clone.test4 = old.test4;
                    clone.test5 = old.test5;
                    clone.test6 = old.test6;
                    return clone;
                };
                test.prototype.clone = function (old) {
                    this.id = old.id;
                    this.itemName = old.itemName;
                    this.test1 = old.test1;
                    this.test2 = old.test2;
                    this.test3 = old.test3;
                    this.test4 = old.test4;
                    this.test5 = old.test5;
                    this.test6 = old.test6;
                };
                test.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                test.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                test.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                test.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                test.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                test.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                test.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                test.versition = 0;
                test.params = ["id", "itemName", "test1", "test2", "test3", "test4", "test5", "test6",];
                return test;
            }(ExcelDataBase_27.ExcelDataBase));
            exports_27("test", test);
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(test);
        }
    };
});
//# sourceMappingURL=ExcelData.js.map