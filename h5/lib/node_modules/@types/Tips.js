var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("Tips", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, Tips, bg_img, frame_img, text_lab;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            Tips = /** @class */ (function (_super) {
                __extends(Tips, _super);
                function Tips() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "Tips";
                    /***/
                    _this.bg_img = new bg_img();
                    _this.frame_img = new frame_img();
                    return _this;
                }
                Tips.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                };
                //按钮事件
                //文字修改方法
                /**修改label 修改label文字方法*/
                Tips.prototype.text_lab_text = function (text) { this.frame_img.text_lab.label.text = text; };
                return Tips;
            }(newUiBase_1.newUiBase));
            exports_1("Tips", Tips);
            bg_img = /** @class */ (function () {
                function bg_img() {
                }
                return bg_img;
            }());
            exports_1("bg_img", bg_img);
            frame_img = /** @class */ (function () {
                function frame_img() {
                    /***/
                    this.text_lab = new text_lab();
                }
                return frame_img;
            }());
            exports_1("frame_img", frame_img);
            text_lab = /** @class */ (function () {
                function text_lab() {
                }
                return text_lab;
            }());
            exports_1("text_lab", text_lab);
        }
    };
});
System.register("TipsView", ["Manager/TipsManager", "PSDUI/UiManager", "Tips"], function (exports_2, context_2) {
    "use strict";
    var TipsManager_1, UiManager_1, Tips_1, TipsView;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (TipsManager_1_1) {
                TipsManager_1 = TipsManager_1_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            },
            function (Tips_1_1) {
                Tips_1 = Tips_1_1;
            }
        ],
        execute: function () {
            TipsView = /** @class */ (function (_super) {
                __extends(TipsView, _super);
                function TipsView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiLayer = UiManager_1.uiLayerType.poplayer;
                    return _this;
                }
                TipsView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    // //打开当前界面不影响其他界面 TipPanel
                    // this.noAffected = true;
                    //屏蔽UI事件
                    // commTool.makeUIEventDiscard(this.bg_img.transform);
                    this.onShow = this.onShowFun.bind(this);
                    this.onHide = this.onHideFun.bind(this);
                    this.onDispose = this.onDisposeFun.bind(this);
                    this.btn = this.bg_img.transform.addComponent("button");
                    this.btn.addListener(m4m.event.UIEventEnum.PointerClick, this.buttonbgFun, this);
                };
                TipsView.prototype.onShowFun = function () {
                    // this.text_lab_text(TipsManager.descTips);
                    this.frame_img.text_lab.label.text = TipsManager_1.TipsManager.descTips;
                };
                TipsView.prototype.buttonbgFun = function () {
                    if (TipsManager_1.TipsManager.tipsbool) {
                        UiManager_1.UiManager.hideUi("Tips");
                    }
                };
                TipsView.prototype.onHideFun = function () {
                };
                TipsView.prototype.onDisposeFun = function () {
                    this.btn.removeListener(m4m.event.UIEventEnum.PointerClick, this.buttonbgFun, this);
                };
                return TipsView;
            }(Tips_1.Tips));
            exports_2("TipsView", TipsView);
        }
    };
});
//# sourceMappingURL=Tips.js.map