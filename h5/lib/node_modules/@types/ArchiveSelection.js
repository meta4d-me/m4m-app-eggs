var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
System.register("ui/ArchiveSelection/ArchiveSelection", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, ArchiveSelection, bg_img, midbg, listscr_scr, listscrcontent, plus_btn, frame_img, frame1_img, new_img, level_lab, ball_raw, topbg_img, toptext_lab, back_btn;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            ArchiveSelection = /** @class */ (function (_super) {
                __extends(ArchiveSelection, _super);
                function ArchiveSelection() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "ArchiveSelection";
                    /***/
                    _this.bg_img = new bg_img();
                    _this.midbg = new midbg();
                    /***/
                    _this.topbg_img = new topbg_img();
                    return _this;
                }
                ArchiveSelection.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                    this.midbg.listscr_scr.listscrcontent.plus_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.plus_btn_event, this);
                    this.topbg_img.back_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.back_btn_event, this);
                };
                //按钮事件
                ArchiveSelection.prototype.plus_btn_event = function () { if (this.plus_btn_btnEvent)
                    this.plus_btn_btnEvent(); };
                ;
                ArchiveSelection.prototype.back_btn_event = function () { if (this.back_btn_btnEvent)
                    this.back_btn_btnEvent(); };
                ;
                //文字修改方法
                /**修改label Level修改label文字方法*/
                ArchiveSelection.prototype.level_lab_text = function (text) { this.midbg.listscr_scr.listscrcontent.frame_img.level_lab.label.text = text; };
                /**修改label 修改label文字方法*/
                ArchiveSelection.prototype.toptext_lab_text = function (text) { this.topbg_img.toptext_lab.label.text = text; };
                return ArchiveSelection;
            }(newUiBase_1.newUiBase));
            exports_1("ArchiveSelection", ArchiveSelection);
            bg_img = /** @class */ (function () {
                function bg_img() {
                }
                return bg_img;
            }());
            exports_1("bg_img", bg_img);
            midbg = /** @class */ (function () {
                function midbg() {
                    /***/
                    this.listscr_scr = new listscr_scr();
                }
                return midbg;
            }());
            exports_1("midbg", midbg);
            listscr_scr = /** @class */ (function () {
                function listscr_scr() {
                    this.listscrcontent = new listscrcontent();
                }
                return listscr_scr;
            }());
            exports_1("listscr_scr", listscr_scr);
            listscrcontent = /** @class */ (function () {
                function listscrcontent() {
                    this.plus_btn = new plus_btn();
                    this.frame_img = new frame_img();
                }
                return listscrcontent;
            }());
            exports_1("listscrcontent", listscrcontent);
            plus_btn = /** @class */ (function () {
                function plus_btn() {
                }
                return plus_btn;
            }());
            exports_1("plus_btn", plus_btn);
            frame_img = /** @class */ (function () {
                function frame_img() {
                    this.frame1_img = new frame1_img();
                    this.new_img = new new_img();
                    /**Level*/
                    this.level_lab = new level_lab();
                    this.ball_raw = new ball_raw();
                }
                return frame_img;
            }());
            exports_1("frame_img", frame_img);
            frame1_img = /** @class */ (function () {
                function frame1_img() {
                }
                return frame1_img;
            }());
            exports_1("frame1_img", frame1_img);
            new_img = /** @class */ (function () {
                function new_img() {
                }
                return new_img;
            }());
            exports_1("new_img", new_img);
            level_lab = /** @class */ (function () {
                function level_lab() {
                }
                return level_lab;
            }());
            exports_1("level_lab", level_lab);
            ball_raw = /** @class */ (function () {
                function ball_raw() {
                }
                return ball_raw;
            }());
            exports_1("ball_raw", ball_raw);
            topbg_img = /** @class */ (function () {
                function topbg_img() {
                    /***/
                    this.toptext_lab = new toptext_lab();
                    this.back_btn = new back_btn();
                }
                return topbg_img;
            }());
            exports_1("topbg_img", topbg_img);
            toptext_lab = /** @class */ (function () {
                function toptext_lab() {
                }
                return toptext_lab;
            }());
            exports_1("toptext_lab", toptext_lab);
            back_btn = /** @class */ (function () {
                function back_btn() {
                }
                return back_btn;
            }());
            exports_1("back_btn", back_btn);
        }
    };
});
System.register("game/Common/CommonCell", ["Data/Cell"], function (exports_2, context_2) {
    "use strict";
    var Cell_1, CommonCell;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (Cell_1_1) {
                Cell_1 = Cell_1_1;
            }
        ],
        execute: function () {
            CommonCell = /** @class */ (function (_super) {
                __extends(CommonCell, _super);
                function CommonCell() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CommonCell.prototype.pointerDownFun = function () {
                    // console.error(this.cellData.data);
                    if (this.cellData.showTip) { //如果需要显示
                        var worldPos = this.transform.getWorldTranslate();
                        // TipsToolManager.Instance.pos = worldPos;
                        // TipsToolManager.Instance.cellWidth = this.cellData.width;
                        // TipsToolManager.Instance.cellHeight = this.cellData.height;
                        // // console.error("如果需要显示Tips");
                        // TipsToolManager.Instance.ShowItemTips(this.cellData.data);
                    }
                };
                CommonCell = __decorate([
                    m4m.reflect.node2DComponent
                ], CommonCell);
                return CommonCell;
            }(Cell_1.Cell));
            exports_2("CommonCell", CommonCell);
        }
    };
});
System.register("ui/ArchiveSelection/ArchiveSelectionCell", ["game/Common/CommonCell", "skinMgr", "Tools/commTool"], function (exports_3, context_3) {
    "use strict";
    var CommonCell_1, skinMgr_1, commTool_1, ArchiveSelectionCell;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [
            function (CommonCell_1_1) {
                CommonCell_1 = CommonCell_1_1;
            },
            function (skinMgr_1_1) {
                skinMgr_1 = skinMgr_1_1;
            },
            function (commTool_1_1) {
                commTool_1 = commTool_1_1;
            }
        ],
        execute: function () {
            ArchiveSelectionCell = /** @class */ (function (_super) {
                __extends(ArchiveSelectionCell, _super);
                function ArchiveSelectionCell() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ArchiveSelectionCell.prototype.setCellClass = function (value) {
                    this.nowClass = value;
                };
                //选中当前cell 时的fun
                ArchiveSelectionCell.prototype.selectFun = function (selectbool) {
                    _super.prototype.selectFun.call(this, selectbool);
                    // this.nowClass.frame1_img.transform.visible = selectbool;
                };
                ArchiveSelectionCell.prototype.setData = function (value) {
                    var _this = this;
                    this.cellData.data = value;
                    if (value) {
                        var imageUrl = skinMgr_1.skinMgr.iconPath + value.baseData.headPortrait;
                        commTool_1.commTool.loaderTextureFun(imageUrl, function (_tex) {
                            _this.nowClass.ball_raw.rawImage2D.image = _tex;
                            _this.nowClass.ball_raw.transform.markDirty();
                        });
                        this.nowClass.level_lab.label.text = value.Currentlevel.stageName;
                        this.nowClass.new_img.transform.visible = value.ism4mnft;
                        this.nowClass.frame1_img.transform.visible = false;
                        this.nowClass.transform.visible = true;
                    }
                    else {
                        this.nowClass.transform.visible = false;
                    }
                };
                ArchiveSelectionCell = __decorate([
                    m4m.reflect.node2DComponent
                ], ArchiveSelectionCell);
                return ArchiveSelectionCell;
            }(CommonCell_1.CommonCell));
            exports_3("ArchiveSelectionCell", ArchiveSelectionCell);
        }
    };
});
System.register("ui/ArchiveSelection/ArchiveSelectionView", ["audio/AudioMgr", "AutoCode/Net/ClientRequest/GameArchiveManagerRequest", "AutoCode/Net/WsDataManager", "Data/CellData", "Data/Grid", "Data/GridData", "Data/ListModel", "Manager/GameArchiveManager", "Manager/TipsManager", "PSDUI/UiManager", "ui/pages/homePage", "ui/pages/inGamePage", "ui/ArchiveSelection/ArchiveSelection", "ui/ArchiveSelection/ArchiveSelectionCell"], function (exports_4, context_4) {
    "use strict";
    var AudioMgr_1, GameArchiveManagerRequest_1, WsDataManager_1, CellData_1, Grid_1, GridData_1, ListModel_1, GameArchiveManager_1, TipsManager_1, UiManager_1, homePage_1, inGamePage_1, ArchiveSelection_1, ArchiveSelectionCell_1, ArchiveSelectionView;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [
            function (AudioMgr_1_1) {
                AudioMgr_1 = AudioMgr_1_1;
            },
            function (GameArchiveManagerRequest_1_1) {
                GameArchiveManagerRequest_1 = GameArchiveManagerRequest_1_1;
            },
            function (WsDataManager_1_1) {
                WsDataManager_1 = WsDataManager_1_1;
            },
            function (CellData_1_1) {
                CellData_1 = CellData_1_1;
            },
            function (Grid_1_1) {
                Grid_1 = Grid_1_1;
            },
            function (GridData_1_1) {
                GridData_1 = GridData_1_1;
            },
            function (ListModel_1_1) {
                ListModel_1 = ListModel_1_1;
            },
            function (GameArchiveManager_1_1) {
                GameArchiveManager_1 = GameArchiveManager_1_1;
            },
            function (TipsManager_1_1) {
                TipsManager_1 = TipsManager_1_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            },
            function (homePage_1_1) {
                homePage_1 = homePage_1_1;
            },
            function (inGamePage_1_1) {
                inGamePage_1 = inGamePage_1_1;
            },
            function (ArchiveSelection_1_1) {
                ArchiveSelection_1 = ArchiveSelection_1_1;
            },
            function (ArchiveSelectionCell_1_1) {
                ArchiveSelectionCell_1 = ArchiveSelectionCell_1_1;
            }
        ],
        execute: function () {
            ArchiveSelectionView = /** @class */ (function (_super) {
                __extends(ArchiveSelectionView, _super);
                function ArchiveSelectionView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.seqtListModel = new ListModel_1.ListModel();
                    _this.GameArchiveList = [];
                    return _this;
                    // public
                }
                ArchiveSelectionView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    // //打开当前界面不影响其他界面 TipPanel
                    // this.noAffected = true;
                    //屏蔽UI事件
                    //多语言版本
                    this.onShow = this.onShowFun.bind(this);
                    this.onHide = this.onHideFun.bind(this);
                    this.onDispose = this.onDisposeFun.bind(this);
                    this.toptext_lab_text("Choose Egg");
                    this.back_btn_btnEvent = this.backBtnFun.bind(this);
                    this.plus_btn_btnEvent = this.plusBtnFun.bind(this);
                    this.oninfogamingGrid();
                };
                ArchiveSelectionView.prototype.onShowFun = function () {
                    var _this = this;
                    this.transform.updateTran(true);
                    this.topbg_img.back_btn.transform.visible = GameArchiveManager_1.GameArchiveManager.Instance.isArchive;
                    var game = WsDataManager_1.WsDataManager.UserDataBaseData.GameArchive;
                    for (var key in game) {
                        var element = game[key];
                        this.GameArchiveList.push(element);
                    }
                    this.GameArchiveSkinData(this.GameArchiveList);
                    setTimeout(function () {
                        _this.update();
                    }, 50);
                };
                ArchiveSelectionView.prototype.update = function () {
                    if (this.mygrid) {
                        var data = this.mygrid.getCellList();
                        if (data.length != 0) {
                            var indexNum = 0;
                            for (var index = 0; index < data.length; index++) {
                                var element = data[index];
                                if (element.cellData.data) {
                                    indexNum = index;
                                }
                            }
                            if (indexNum >= 1) {
                                var cell = data[indexNum];
                                this.midbg.listscr_scr.listscrcontent.plus_btn.transform.localTranslate = cell.nowClass.transform.localTranslate;
                                this.midbg.listscr_scr.listscrcontent.plus_btn.transform.localTranslate.y += 400;
                                this.midbg.listscr_scr.listscrcontent.plus_btn.transform.markDirty();
                            }
                        }
                    }
                };
                ArchiveSelectionView.prototype.onHideFun = function () {
                };
                ArchiveSelectionView.prototype.onDisposeFun = function () {
                    this.mygrid.dispose();
                };
                ArchiveSelectionView.prototype.backBtnFun = function () {
                    AudioMgr_1.AudioMgr.Play("touch.mp3");
                    UiManager_1.UiManager.hideUi("ArchiveSelection");
                    UiManager_1.UiManager.showUi("Main");
                    inGamePage_1.inGamePage.Instance().then(function (ins) {
                        ins.setShowItem(inGamePage_1.showItem.home);
                    });
                    homePage_1.homePage.Instance().then(function (ins) {
                        ins.show();
                    });
                };
                /**创建存档 */
                ArchiveSelectionView.prototype.plusBtnFun = function () {
                    AudioMgr_1.AudioMgr.Play("touch.mp3");
                    GameArchiveManagerRequest_1.GameArchiveManagerRequest.Instance.CreateArchive();
                    GameArchiveManager_1.GameArchiveManager.Instance.isArchive = true;
                };
                //初始化所有存档
                ArchiveSelectionView.prototype.oninfogamingGrid = function () {
                    var lo = m4m.framework.layoutOption;
                    var cellTrans = this.midbg.listscr_scr.listscrcontent.frame_img.transform;
                    var cellPercentWidth = cellTrans.width;
                    var cellPercentHeight = cellTrans.height;
                    var cellData = new CellData_1.CellData();
                    cellData.width = cellPercentWidth;
                    cellData.height = cellPercentHeight;
                    var gridData = new GridData_1.GridData();
                    gridData.columns = 1;
                    gridData.rows = 20;
                    gridData.offsetX = 0;
                    gridData.offsetY = 50;
                    var initX = cellTrans.getLayoutValue(lo.H_CENTER);
                    gridData.initXPlace = initX;
                    var initY = cellTrans.getLayoutValue(lo.TOP);
                    gridData.initYPlace = initY;
                    gridData.cellName = ArchiveSelectionCell_1.ArchiveSelectionCell.name;
                    gridData.cellData = cellData;
                    gridData.cell = this.midbg.listscr_scr.listscrcontent.frame_img;
                    //生成的格子放在父节点
                    gridData.parentTrans = cellTrans.parent;
                    gridData.cellLayoutX = lo.H_CENTER;
                    gridData.cellLayoutY = lo.TOP;
                    this.mygrid = new Grid_1.Grid(gridData);
                    cellTrans.visible = false;
                    this.mygrid.selectCallBackFun = this.selectCellsqtFun.bind(this);
                };
                ArchiveSelectionView.prototype.selectCellsqtFun = function (data, index) {
                    console.log(data, index);
                    GameArchiveManager_1.GameArchiveManager.Instance.isArchive = true;
                    var game = GameArchiveManager_1.GameArchiveManager.Instance.GameArchiveData;
                    if (game) {
                        if (data.id != game.id) {
                            GameArchiveManagerRequest_1.GameArchiveManagerRequest.Instance.SelectArchive(data.id);
                        }
                        else {
                            TipsManager_1.TipsManager.ShowTips("You are in this archive", true);
                        }
                    }
                    else {
                        GameArchiveManagerRequest_1.GameArchiveManagerRequest.Instance.SelectArchive(data.id);
                    }
                };
                ArchiveSelectionView.prototype.GameArchiveSkinData = function (data) {
                    this.seqtListModel.setSource(data);
                    this.mygrid.setListModel(this.seqtListModel);
                    this.midbg.listscr_scr.listscrcontent.transform.height = this.mygrid.getHeight() + 900;
                    this.midbg.listscr_scr.listscrcontent.transform.markDirty();
                };
                return ArchiveSelectionView;
            }(ArchiveSelection_1.ArchiveSelection));
            exports_4("ArchiveSelectionView", ArchiveSelectionView);
        }
    };
});
//# sourceMappingURL=ArchiveSelection.js.map