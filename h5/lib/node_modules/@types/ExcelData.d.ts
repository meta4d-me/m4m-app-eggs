/// <reference types="../../../lib/node_modules/@types/gameUtil" />
declare module "ArrangementData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ArrangementData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ArrangementData>;
        /**ID*/
        id: string;
        /**玩家id*/
        token: string;
        /**队列安排*/
        Arrangement: {
            [id: string]: string[];
        };
        /**队列安排Json*/
        ArrangementJson: string;
        /**队伍上限*/
        Limit: number[];
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ArrangementData): ArrangementData;
        clone(old: ArrangementData): void;
        private static params;
        static add(a: ArrangementData, b: ArrangementData, start: number | undefined, end: number, limit: ArrangementData): ArrangementData | null;
        static sub(a: ArrangementData, b: ArrangementData, start: number | undefined, end: number): ArrangementData | null;
        static random(src: ArrangementData, i?: number): string;
        static large(a: ArrangementData, b: ArrangementData, i?: number): boolean;
        static max(a: ArrangementData, b: ArrangementData, i?: number): ArrangementData;
        static json(a: ArrangementData, data: any): ArrangementData;
        static setProperty(a: ArrangementData, p: number, value: any): ArrangementData;
    }
}
declare module "EquipBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class EquipBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<EquipBase>;
        /**配置ID*/
        id: string;
        /**名称*/
        equipName: string;
        /**可预览条件*/
        visibl: string;
        /**打造解锁条件*/
        unlock: string;
        /**打造时间*/
        buildTime: string;
        /**打造消耗*/
        PortfolioCost: string;
        /**最大词条数量*/
        maxEffect: number;
        /**随机词条效果权重*/
        randomEffect: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: EquipBase): EquipBase;
        clone(old: EquipBase): void;
        private static params;
        static add(a: EquipBase, b: EquipBase, start: number | undefined, end: number, limit: EquipBase): EquipBase | null;
        static sub(a: EquipBase, b: EquipBase, start: number | undefined, end: number): EquipBase | null;
        static random(src: EquipBase, i?: number): string;
        static large(a: EquipBase, b: EquipBase, i?: number): boolean;
        static max(a: EquipBase, b: EquipBase, i?: number): EquipBase;
        static json(a: EquipBase, data: any): EquipBase;
        static setProperty(a: EquipBase, p: number, value: any): EquipBase;
    }
}
declare module "EquipDate" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class EquipDate extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<EquipDate>;
        /**ID*/
        id: string;
        /**装备打造id*/
        equipData: any[];
        /**装备打造idJson*/
        equipDataJson: string;
        /**打造开始时间*/
        equipStartTime: number;
        /**打造结束时间*/
        equipEndTime: number;
        /**获取的词条*/
        equipEffect: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: EquipDate): EquipDate;
        clone(old: EquipDate): void;
        private static params;
        static add(a: EquipDate, b: EquipDate, start: number | undefined, end: number, limit: EquipDate): EquipDate | null;
        static sub(a: EquipDate, b: EquipDate, start: number | undefined, end: number): EquipDate | null;
        static random(src: EquipDate, i?: number): string;
        static large(a: EquipDate, b: EquipDate, i?: number): boolean;
        static max(a: EquipDate, b: EquipDate, i?: number): EquipDate;
        static json(a: EquipDate, data: any): EquipDate;
        static setProperty(a: EquipDate, p: number, value: any): EquipDate;
    }
}
declare module "EquipEffectBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class EquipEffectBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<EquipEffectBase>;
        /**配置ID*/
        id: string;
        /**词条名称*/
        equipEffectName: string;
        /**词条描述*/
        equipEffectdesc: string;
        /**词条图标*/
        equipEffecticon: string;
        /**词条类型*/
        equipEffectType: number;
        /**属性*/
        status: {
            [id: string]: number;
        };
        /**属性Json*/
        statusJson: string;
        /**词条效果脚本*/
        equipEffect: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: EquipEffectBase): EquipEffectBase;
        clone(old: EquipEffectBase): void;
        private static params;
        static add(a: EquipEffectBase, b: EquipEffectBase, start: number | undefined, end: number, limit: EquipEffectBase): EquipEffectBase | null;
        static sub(a: EquipEffectBase, b: EquipEffectBase, start: number | undefined, end: number): EquipEffectBase | null;
        static random(src: EquipEffectBase, i?: number): string;
        static large(a: EquipEffectBase, b: EquipEffectBase, i?: number): boolean;
        static max(a: EquipEffectBase, b: EquipEffectBase, i?: number): EquipEffectBase;
        static json(a: EquipEffectBase, data: any): EquipEffectBase;
        static setProperty(a: EquipEffectBase, p: number, value: any): EquipEffectBase;
    }
}
declare module "EquipExpBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class EquipExpBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<EquipExpBase>;
        /**配置ID*/
        id: string;
        /**装备对应等级*/
        lv: string;
        /**升级所需exp*/
        expMax: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: EquipExpBase): EquipExpBase;
        clone(old: EquipExpBase): void;
        private static params;
        static add(a: EquipExpBase, b: EquipExpBase, start: number | undefined, end: number, limit: EquipExpBase): EquipExpBase | null;
        static sub(a: EquipExpBase, b: EquipExpBase, start: number | undefined, end: number): EquipExpBase | null;
        static random(src: EquipExpBase, i?: number): string;
        static large(a: EquipExpBase, b: EquipExpBase, i?: number): boolean;
        static max(a: EquipExpBase, b: EquipExpBase, i?: number): EquipExpBase;
        static json(a: EquipExpBase, data: any): EquipExpBase;
        static setProperty(a: EquipExpBase, p: number, value: any): EquipExpBase;
    }
}
declare module "ErrorInfo" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ErrorInfo extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ErrorInfo>;
        /**ID*/
        id: string;
        /**错误消息*/
        message: string;
        /**异常类型*/
        errorType: string;
        /**创建时间*/
        time: string;
        /**机型*/
        modelType: string;
        /**IP地址*/
        ip: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ErrorInfo): ErrorInfo;
        clone(old: ErrorInfo): void;
        private static params;
        static add(a: ErrorInfo, b: ErrorInfo, start: number | undefined, end: number, limit: ErrorInfo): ErrorInfo | null;
        static sub(a: ErrorInfo, b: ErrorInfo, start: number | undefined, end: number): ErrorInfo | null;
        static random(src: ErrorInfo, i?: number): string;
        static large(a: ErrorInfo, b: ErrorInfo, i?: number): boolean;
        static max(a: ErrorInfo, b: ErrorInfo, i?: number): ErrorInfo;
        static json(a: ErrorInfo, data: any): ErrorInfo;
        static setProperty(a: ErrorInfo, p: number, value: any): ErrorInfo;
    }
}
declare module "Formulas" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class Formulas extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<Formulas>;
        /**配置ID*/
        id: string;
        /**备注*/
        depict: string;
        /**公式*/
        formulas: string;
        /**浮动范围（填0.1代表 ±0.1 即为 0.9~1.1）*/
        randomRange: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: Formulas): Formulas;
        clone(old: Formulas): void;
        private static params;
        static add(a: Formulas, b: Formulas, start: number | undefined, end: number, limit: Formulas): Formulas | null;
        static sub(a: Formulas, b: Formulas, start: number | undefined, end: number): Formulas | null;
        static random(src: Formulas, i?: number): string;
        static large(a: Formulas, b: Formulas, i?: number): boolean;
        static max(a: Formulas, b: Formulas, i?: number): Formulas;
        static json(a: Formulas, data: any): Formulas;
        static setProperty(a: Formulas, p: number, value: any): Formulas;
    }
}
declare module "SkinBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SkinBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SkinBase>;
        /**ID*/
        id: string;
        /**名称*/
        skinName: string;
        /**头像名*/
        headPortrait: string;
        /**皮肤名*/
        skinSticker: string;
        /**解锁条件*/
        deblocking: {
            [id: string]: number;
        };
        /**解锁条件Json*/
        deblockingJson: string;
        /**颜色*/
        color: string;
        /**类型*/
        renderType: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: SkinBase): SkinBase;
        clone(old: SkinBase): void;
        private static params;
        static add(a: SkinBase, b: SkinBase, start: number | undefined, end: number, limit: SkinBase): SkinBase | null;
        static sub(a: SkinBase, b: SkinBase, start: number | undefined, end: number): SkinBase | null;
        static random(src: SkinBase, i?: number): string;
        static large(a: SkinBase, b: SkinBase, i?: number): boolean;
        static max(a: SkinBase, b: SkinBase, i?: number): SkinBase;
        static json(a: SkinBase, data: any): SkinBase;
        static setProperty(a: SkinBase, p: number, value: any): SkinBase;
    }
}
declare module "LevelBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class LevelBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<LevelBase>;
        /**ID*/
        id: string;
        /**数量*/
        amount: number;
        /**关卡名称*/
        stageName: string;
        /**跑道长度*/
        runwayLength: number;
        /**跑道宽度*/
        runwayWeight: number[];
        /**最小值*/
        cubeSpMin: number;
        /**最大值*/
        cubeSpMax: number;
        /**速度*/
        beyondRate: number;
        /**重力*/
        bootsWght: number[];
        /**复活计数*/
        reviveCount: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: LevelBase): LevelBase;
        clone(old: LevelBase): void;
        private static params;
        static add(a: LevelBase, b: LevelBase, start: number | undefined, end: number, limit: LevelBase): LevelBase | null;
        static sub(a: LevelBase, b: LevelBase, start: number | undefined, end: number): LevelBase | null;
        static random(src: LevelBase, i?: number): string;
        static large(a: LevelBase, b: LevelBase, i?: number): boolean;
        static max(a: LevelBase, b: LevelBase, i?: number): LevelBase;
        static json(a: LevelBase, data: any): LevelBase;
        static setProperty(a: LevelBase, p: number, value: any): LevelBase;
    }
}
declare module "GameArchiveData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class GameArchiveData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<GameArchiveData>;
        /**ID*/
        id: string;
        /**角色配置数据*/
        baseData: any;
        /**角色配置数据Json*/
        baseDataJson: string;
        /**关卡数据*/
        Currentlevel: any;
        /**关卡数据Json*/
        CurrentlevelJson: string;
        /**上次使用时间*/
        lastTime: number;
        /**是否是nft*/
        ism4mnft: boolean;
        /**使用者*/
        playerToken: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: GameArchiveData): GameArchiveData;
        clone(old: GameArchiveData): void;
        private static params;
        static add(a: GameArchiveData, b: GameArchiveData, start: number | undefined, end: number, limit: GameArchiveData): GameArchiveData | null;
        static sub(a: GameArchiveData, b: GameArchiveData, start: number | undefined, end: number): GameArchiveData | null;
        static random(src: GameArchiveData, i?: number): string;
        static large(a: GameArchiveData, b: GameArchiveData, i?: number): boolean;
        static max(a: GameArchiveData, b: GameArchiveData, i?: number): GameArchiveData;
        static json(a: GameArchiveData, data: any): GameArchiveData;
        static setProperty(a: GameArchiveData, p: number, value: any): GameArchiveData;
    }
}
declare module "ItemBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ItemBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ItemBase>;
        /**配置ID*/
        id: string;
        /**道具名字*/
        itemName: string;
        /**描述*/
        desc: string;
        /**图标*/
        icon: string;
        /**模型*/
        model: string;
        /**特效*/
        effect: string;
        /**页签类型*/
        tagType: number;
        /**道具类型 1.基础货币 2.消耗品 3.宝箱 4.碎片 5.其他物品 6.装备*/
        itemType: number;
        /**品质*/
        quality: number;
        /**叠加数量限制*/
        maxNum: number;
        /**使用类型 1.直接单个使用 2.批量使用*/
        useType: number;
        /**使用限制*/
        useLimit: string[];
        /**效果脚本*/
        useEffect: string[];
        /**跳转*/
        jump: string[];
        /**去使用（引导）*/
        use: string[];
        /**装备类型 1：头盔 2：盔甲*/
        equipType: number;
        /**属性*/
        status: {
            [id: string]: number;
        };
        /**属性Json*/
        statusJson: string;
        /**升级提升属性*/
        statusUp: {
            [id: string]: number;
        };
        /**升级提升属性Json*/
        statusUpJson: string;
        /**lv上限*/
        lv: number;
        /**稀有度*/
        rera: number;
        /**出售价格*/
        sale: {
            [id: string]: number;
        };
        /**出售价格Json*/
        saleJson: string;
        /**购买价格*/
        buy: {
            [id: string]: number;
        };
        /**购买价格Json*/
        buyJson: string;
        /**分解获得消耗物品数量[道具id，数量区间最小值:数量区间最大值]*/
        decompose: string;
        /**是否立即使用*/
        imUse: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ItemBase): ItemBase;
        clone(old: ItemBase): void;
        private static params;
        static add(a: ItemBase, b: ItemBase, start: number | undefined, end: number, limit: ItemBase): ItemBase | null;
        static sub(a: ItemBase, b: ItemBase, start: number | undefined, end: number): ItemBase | null;
        static random(src: ItemBase, i?: number): string;
        static large(a: ItemBase, b: ItemBase, i?: number): boolean;
        static max(a: ItemBase, b: ItemBase, i?: number): ItemBase;
        static json(a: ItemBase, data: any): ItemBase;
        static setProperty(a: ItemBase, p: number, value: any): ItemBase;
    }
}
declare module "ItemData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ItemData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ItemData>;
        /**ID*/
        id: string;
        /**道具名字*/
        itemName: string;
        /**配置ID*/
        baseId: string;
        /**配置数据*/
        baseData: any;
        /**配置数据Json*/
        baseDataJson: string;
        /**数量*/
        count: number;
        /**最大数量*/
        maxNum: number;
        /**来源*/
        fromWhere: string;
        /**获取使用货币*/
        buyCurrency: {
            [id: string]: number;
        };
        /**获取使用货币Json*/
        buyCurrencyJson: string;
        /**属性*/
        status: {
            [id: string]: number;
        };
        /**属性Json*/
        statusJson: string;
        /**等级*/
        lv: number;
        /**稀有度*/
        rera: number;
        /**品质*/
        quality: number;
        /**持有者*/
        playerUuid: string;
        /**获取时间*/
        getTime: number;
        /**物品状态： 1.新获得 2.暂时获得 3.无状态 4.锁定*/
        statustype: number;
        /**是否满足使用限制*/
        ifUseLimit: boolean;
        /**生效时间*/
        forceTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ItemData): ItemData;
        clone(old: ItemData): void;
        private static params;
        static add(a: ItemData, b: ItemData, start: number | undefined, end: number, limit: ItemData): ItemData | null;
        static sub(a: ItemData, b: ItemData, start: number | undefined, end: number): ItemData | null;
        static random(src: ItemData, i?: number): string;
        static large(a: ItemData, b: ItemData, i?: number): boolean;
        static max(a: ItemData, b: ItemData, i?: number): ItemData;
        static json(a: ItemData, data: any): ItemData;
        static setProperty(a: ItemData, p: number, value: any): ItemData;
    }
}
declare module "MainBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class MainBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<MainBase>;
        /**ID*/
        id: string;
        /**角色速度*/
        roleBspeed: number;
        /**角色加速度*/
        roleStepSpeed: number;
        /**色彩速度*/
        colorSpeed: number;
        /**分配器速度*/
        DistorSpeed: number;
        /**距离传感器量程*/
        DistorVrange: number;
        /**距离传感器范围*/
        DistorHrange: number;
        /**间隙*/
        obsBaseGap: number;
        /**升压发电机速度*/
        BoostGenSpeed: number;
        /**单立方根速率*/
        singleCubeGenRate: number;
        /**场景颜色间隙*/
        sceneColorHGap: number;
        /**第一种颜色H*/
        firstColorH: number;
        /**第一种颜色S*/
        firstColorS: number;
        /**第一种颜色V*/
        firstColorV: number;
        /**速度相加距离*/
        speedAddDistance: number;
        /**速度增加率*/
        speedAddRate: number;
        /**玩家最大速度*/
        playerMaxSpeed: number;
        /**添加最大步长*/
        addMaxStepNum: number;
        /**步长时间长度*/
        stepTimeLength: number;
        /**方块速度*/
        DiamonGenSpeed: number;
        /**机器人速度*/
        robotBSpeed: number;
        /**机器人超越限制*/
        robotReSurpassLimit: number;
        /**看广告*/
        watchVideo: number;
        /**需要刷新广告横幅*/
        needRefreshADBanner: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: MainBase): MainBase;
        clone(old: MainBase): void;
        private static params;
        static add(a: MainBase, b: MainBase, start: number | undefined, end: number, limit: MainBase): MainBase | null;
        static sub(a: MainBase, b: MainBase, start: number | undefined, end: number): MainBase | null;
        static random(src: MainBase, i?: number): string;
        static large(a: MainBase, b: MainBase, i?: number): boolean;
        static max(a: MainBase, b: MainBase, i?: number): MainBase;
        static json(a: MainBase, data: any): MainBase;
        static setProperty(a: MainBase, p: number, value: any): MainBase;
    }
}
declare module "RoleBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class RoleBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<RoleBase>;
        /**id*/
        id: string;
        /**角色名*/
        roleName: string;
        /**职业类型 1.战士 2.法师 3.游侠*/
        jobType: number;
        /**英雄id*/
        heroId: number;
        /**图标*/
        icon: string;
        /**模型*/
        model: string;
        /**士兵模型*/
        soldier: string;
        /**动态立绘*/
        spine: string;
        /**立绘背景*/
        backround: string;
        /**描述*/
        desc: string;
        /**等级上限*/
        lv: number;
        /**稀有度 1.r 2.sr 3.ssr*/
        rera: number;
        /**品质 1.绿 2.蓝 3.紫 4.橙 5.红*/
        originQuality: number;
        /**属性值 1.atk 攻击 2.def 防御 3.com 统率 4.cbatk 城战攻击 5.cbdef 城战防御 6.fire 火元素攻击 7 ice 冰元素攻击 8.lighting 雷元素攻击 9. firedef 火元素抵抗 10.icedef 冰元素抵抗 11.lightdef 雷元素抵抗*/
        attributeMax: {
            [id: string]: number;
        };
        /**属性值 1.atk 攻击 2.def 防御 3.com 统率 4.cbatk 城战攻击 5.cbdef 城战防御 6.fire 火元素攻击 7 ice 冰元素攻击 8.lighting 雷元素攻击 9. firedef 火元素抵抗 10.icedef 冰元素抵抗 11.lightdef 雷元素抵抗Json*/
        attributeMaxJson: string;
        /**初始成长值*/
        growthLim: number;
        /**成长值上限*/
        growthMax: number;
        /**突破后赠送成长点*/
        growthSend: number;
        /**重复获得转化（填道具表id）*/
        change: string;
        /**突破保险值*/
        breakThroughMin: number;
        /**突破最大值*/
        breakThroughMax: number;
        /**突破后id*/
        breakThroughChange: string;
        /**突破次数*/
        breakThroughCount: number;
        /**潜力值*/
        Potential: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: RoleBase): RoleBase;
        clone(old: RoleBase): void;
        private static params;
        static add(a: RoleBase, b: RoleBase, start: number | undefined, end: number, limit: RoleBase): RoleBase | null;
        static sub(a: RoleBase, b: RoleBase, start: number | undefined, end: number): RoleBase | null;
        static random(src: RoleBase, i?: number): string;
        static large(a: RoleBase, b: RoleBase, i?: number): boolean;
        static max(a: RoleBase, b: RoleBase, i?: number): RoleBase;
        static json(a: RoleBase, data: any): RoleBase;
        static setProperty(a: RoleBase, p: number, value: any): RoleBase;
    }
}
declare module "RoleData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class RoleData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<RoleData>;
        /**id*/
        id: string;
        /**角色名*/
        roleName: string;
        /**所属服务器*/
        server: string;
        /**角色配置*/
        baseData: any;
        /**角色配置Json*/
        baseDataJson: string;
        /**角色类型*/
        roleType: number;
        /**角色状态（0空闲 1 外出）*/
        roleState: number;
        /**上次行动时间*/
        lastTime: number;
        /**属性值1.atk 攻击 2.def 防御 3.com 统率 4.cbatk 城战攻击 5.cbdef 城战防御 6.fire 火元素攻击 7 ice 冰元素攻击 8.lighting 雷元素攻击 9. firedef 火元素抵抗 10.icedef 冰元素抵抗 11.lightdef 雷元素抵抗*/
        status: {
            [id: string]: number;
        };
        /**属性值1.atk 攻击 2.def 防御 3.com 统率 4.cbatk 城战攻击 5.cbdef 城战防御 6.fire 火元素攻击 7 ice 冰元素攻击 8.lighting 雷元素攻击 9. firedef 火元素抵抗 10.icedef 冰元素抵抗 11.lightdef 雷元素抵抗Json*/
        statusJson: string;
        /**玩家id*/
        playerId: string;
        /**当前等级*/
        lv: number;
        /**当前经验*/
        exp: number;
        /**当前稀有度*/
        rera: number;
        /**当前品质*/
        quality: number;
        /**当前成长值*/
        currentGrowth: number;
        /**当前突破值*/
        breakThrough: number;
        /**当前状态*/
        condition: number;
        /**人物属性*/
        roleStatus: {
            [id: string]: string;
        };
        /**人物属性Json*/
        roleStatusJson: string;
        /**持有货币*/
        currency: {
            [id: string]: number;
        };
        /**持有货币Json*/
        currencyJson: string;
        /**装备*/
        equip: {
            [id: string]: any;
        };
        /**装备Json*/
        equipJson: string;
        /**当前装备库上限*/
        equipmMaxHold: number;
        /**持有道具*/
        items: {
            [id: string]: any;
        };
        /**持有道具Json*/
        itemsJson: string;
        /**邮箱道具*/
        mailItem: {
            [id: string]: any;
        };
        /**邮箱道具Json*/
        mailItemJson: string;
        /**持有建筑*/
        building: {
            [id: string]: any;
        };
        /**持有建筑Json*/
        buildingJson: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: RoleData): RoleData;
        clone(old: RoleData): void;
        private static params;
        static add(a: RoleData, b: RoleData, start: number | undefined, end: number, limit: RoleData): RoleData | null;
        static sub(a: RoleData, b: RoleData, start: number | undefined, end: number): RoleData | null;
        static random(src: RoleData, i?: number): string;
        static large(a: RoleData, b: RoleData, i?: number): boolean;
        static max(a: RoleData, b: RoleData, i?: number): RoleData;
        static json(a: RoleData, data: any): RoleData;
        static setProperty(a: RoleData, p: number, value: any): RoleData;
    }
}
declare module "RoleExpBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class RoleExpBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<RoleExpBase>;
        /**配置ID*/
        id: string;
        /**对应等级*/
        lv: string;
        /**升级所需exp*/
        expmax: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: RoleExpBase): RoleExpBase;
        clone(old: RoleExpBase): void;
        private static params;
        static add(a: RoleExpBase, b: RoleExpBase, start: number | undefined, end: number, limit: RoleExpBase): RoleExpBase | null;
        static sub(a: RoleExpBase, b: RoleExpBase, start: number | undefined, end: number): RoleExpBase | null;
        static random(src: RoleExpBase, i?: number): string;
        static large(a: RoleExpBase, b: RoleExpBase, i?: number): boolean;
        static max(a: RoleExpBase, b: RoleExpBase, i?: number): RoleExpBase;
        static json(a: RoleExpBase, data: any): RoleExpBase;
        static setProperty(a: RoleExpBase, p: number, value: any): RoleExpBase;
    }
}
declare module "ServerUserData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ServerUserData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ServerUserData>;
        /**ID*/
        id: string;
        /**玩家ID数量记录*/
        playerIDCount: number;
        /**玩家阵营数量记录*/
        userCampCount: {
            [id: string]: number;
        };
        /**玩家阵营数量记录Json*/
        userCampCountJson: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ServerUserData): ServerUserData;
        clone(old: ServerUserData): void;
        private static params;
        static add(a: ServerUserData, b: ServerUserData, start: number | undefined, end: number, limit: ServerUserData): ServerUserData | null;
        static sub(a: ServerUserData, b: ServerUserData, start: number | undefined, end: number): ServerUserData | null;
        static random(src: ServerUserData, i?: number): string;
        static large(a: ServerUserData, b: ServerUserData, i?: number): boolean;
        static max(a: ServerUserData, b: ServerUserData, i?: number): ServerUserData;
        static json(a: ServerUserData, data: any): ServerUserData;
        static setProperty(a: ServerUserData, p: number, value: any): ServerUserData;
    }
}
declare module "SeverConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SeverConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SeverConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        depict: string;
        /**ip*/
        ip: string;
        /**网关地址*/
        gateWay: string;
        /**区服ID*/
        serverID: string;
        /**区服名称*/
        serverName: string;
        /**区服状态: 1.爆满 2.维护 3.流畅*/
        serverState: number;
        /**新区*/
        newServer: boolean;
        /**MAC地址*/
        MAC: string;
        /**启动时间*/
        setupTime: string;
        /**状态*/
        status: number;
        /**当前人数*/
        playerSum: number;
        /**是否为网关*/
        isGate: boolean;
        /**备注IP*/
        descIP: string;
        /**地图更新序号*/
        mapSaveVer: number;
        /**小地图显示玩家等级下限*/
        mapShowLevel: number;
        /**地图分割尺寸*/
        mapSplit: number;
        /**心跳断开限制*/
        heatbeatLimit: number;
        /**每日最大野外战斗次数*/
        battleTimes: number;
        /**行军速度*/
        marchSpeed: number;
        /**战役推图玩家基础最大体力*/
        campaignMaxStamina: number;
        /**每日购买体力基础次数*/
        PhysicalTime: number;
        /**上阵基础数量*/
        arrangeNum: number;
        /**战役起始关卡*/
        campaignStartId: number;
        /**扫荡模式变更*/
        sweepModeChanged: string;
        /**推荐阵营奖励*/
        recomCampReward: string;
        /**阵营加入等级*/
        campJoin: number;
        /**围攻等待时间*/
        siegeWaitTime: number;
        /**围攻提高消耗时间*/
        siegeMaxTime: number;
        /**突袭消耗*/
        strikeCost: string;
        /**围攻低消耗*/
        siegeMinCost: string;
        /**围攻高消耗*/
        siegeMaxCost: string;
        /**召回功能消耗道具与数量*/
        callBack: string;
        /**快速召回消耗道具与数量*/
        fastCallBack: string;
        /**行军加速消耗道具与数量*/
        marchSpeedUp: string;
        /**超级行军加速消耗道具与数量*/
        superMarchSpeedUp: string;
        /**炸矿消耗*/
        minerAttack: string;
        /**同阵营炸矿每日次数*/
        sameCampMinerAttackLim: number;
        /**领地失守后免战时间（秒）*/
        avoidWarTime: number;
        /**免战特效*/
        avoidWarEffect: string;
        /**装备库最终解锁容量上限*/
        maxEquipVolume: number;
        /**突破解锁条件*/
        breakOutUnlock: string;
        /**日常任务解锁条件*/
        dailyEventUnlock: string;
        /**解锁野外需要的玩家等级*/
        unlockWildLevel: number;
        /**军情功能解锁条件*/
        IntelligenceUnlock: string;
        /**装备自动锁定品质*/
        equipAuutoLock: number;
        /**普通成长恢复时间（秒）*/
        commonGrowthRecover: number;
        /**普通成长恢复最大上限*/
        commonGrowthMaxTime: number;
        /**没有使用*/
        seniorGrowthCost: string;
        /**跳过战斗时间（秒）*/
        battleJumpTime: number;
        /**狂暴开始回合*/
        furiousRound: number;
        /**狂暴强化倍率*/
        furiousStrengthen: number;
        /**狂暴强化上限*/
        furiousMaxStrengthen: number;
        /**据点免战时间（秒）*/
        fortifiedAvoidWarTime: number;
        /**申请总督时长（秒）*/
        applyGvernorTime: number;
        /**据点总督撤离时间（秒）*/
        fortifiedRetreatTime: number;
        /**玩家进攻据点限制*/
        fortifiedAvailable: string;
        /**资源田收取间隔（间隔多少秒可以收取一次资源）*/
        resourceGetInterval: number;
        /**资源田计算时间（每隔多少秒获取一次addrescue）*/
        resourceGetTime: number;
        /**初次引导气泡获取奖励*/
        firstGuideReward: string;
        /**掠夺资源数量%*/
        plunderPrecent: number;
        /**工人掠夺的数量%*/
        HamalplunderPrecent: number;
        /**工人损失数量%*/
        HamalLostPrecent: number;
        /**阵营建设每日最大次数*/
        campDevelopMaxTime: number;
        /**改名卡消耗*/
        changNameCost: string;
        /**改名卡消耗不足替换*/
        changNameExchange: string;
        /**喇叭消耗*/
        hornCost: string;
        /**喇叭消耗不足替换*/
        hornCostExchange: string;
        /**聊天间隔cd*/
        chatCd: number;
        /**解锁队列1介绍*/
        Arrangement1UnlockDesc: string;
        /**解锁队列2介绍*/
        Arrangement2UnlockDesc: string;
        /**邮件分享CD*/
        mailShareCd: number;
        /**邮件默认保存时间*/
        mailSaveTime: number;
        /**邮件最大持有数量*/
        mailMaxKeep: number;
        /**免费附魔恢复间隔时间*/
        enchantingFreeRefreshInterval: number;
        /**普通附魔消耗*/
        commonGrowthCost: string;
        /**高级附魔每次消耗*/
        seniorEnchantingCost: string;
        /**终极附魔消耗*/
        ultimateEnchantingCost: string;
        /**免费附魔最大次数*/
        enchantingFreeTimesLimit: number;
        /**附魔气泡出现免费次数*/
        EnchantingBubble: number;
        /**祭坛出现条件，（消耗n倍时出现）*/
        altarBubble: number;
        /**活动按钮出现条件*/
        activityIconAvailable: string;
        /**福利按钮出现条件*/
        welfareIconAvailable: string;
        /**特惠按钮出现条件*/
        preferentialIconAvailable: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: SeverConfigBase): SeverConfigBase;
        clone(old: SeverConfigBase): void;
        private static params;
        static add(a: SeverConfigBase, b: SeverConfigBase, start: number | undefined, end: number, limit: SeverConfigBase): SeverConfigBase | null;
        static sub(a: SeverConfigBase, b: SeverConfigBase, start: number | undefined, end: number): SeverConfigBase | null;
        static random(src: SeverConfigBase, i?: number): string;
        static large(a: SeverConfigBase, b: SeverConfigBase, i?: number): boolean;
        static max(a: SeverConfigBase, b: SeverConfigBase, i?: number): SeverConfigBase;
        static json(a: SeverConfigBase, data: any): SeverConfigBase;
        static setProperty(a: SeverConfigBase, p: number, value: any): SeverConfigBase;
    }
}
declare module "SeverData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SeverData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SeverData>;
        /**配置ID*/
        id: string;
        /**区服状态: 1.爆满 2.维护 3.流畅*/
        serverState: number;
        /**新区*/
        newServer: boolean;
        /**启动时间*/
        setupTime: string;
        /**状态*/
        status: number;
        /**当前人数*/
        playerSum: number;
        /**地图更新序号*/
        mapSaveVer: number;
        /**开服时间*/
        openTime: string;
        /**服务器偏移时间*/
        addTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: SeverData): SeverData;
        clone(old: SeverData): void;
        private static params;
        static add(a: SeverData, b: SeverData, start: number | undefined, end: number, limit: SeverData): SeverData | null;
        static sub(a: SeverData, b: SeverData, start: number | undefined, end: number): SeverData | null;
        static random(src: SeverData, i?: number): string;
        static large(a: SeverData, b: SeverData, i?: number): boolean;
        static max(a: SeverData, b: SeverData, i?: number): SeverData;
        static json(a: SeverData, data: any): SeverData;
        static setProperty(a: SeverData, p: number, value: any): SeverData;
    }
}
declare module "ThemeBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ThemeBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ThemeBase>;
        /**ID*/
        id: string;
        /**名称*/
        sceneName: string;
        /**图片1名称*/
        image1: string;
        /**图片2名称*/
        image2: string;
        /**模型图片*/
        cubeImage: string;
        /**解锁条件*/
        deblocking: {
            [id: string]: number;
        };
        /**解锁条件Json*/
        deblockingJson: string;
        /**颜色*/
        color: string;
        /**范围*/
        hRange: number[];
        /**因素1*/
        sFactor: number;
        /**因素2*/
        vFactor: number;
        /**图标名称*/
        icon: string;
        /**类型*/
        isDynamicColor: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ThemeBase): ThemeBase;
        clone(old: ThemeBase): void;
        private static params;
        static add(a: ThemeBase, b: ThemeBase, start: number | undefined, end: number, limit: ThemeBase): ThemeBase | null;
        static sub(a: ThemeBase, b: ThemeBase, start: number | undefined, end: number): ThemeBase | null;
        static random(src: ThemeBase, i?: number): string;
        static large(a: ThemeBase, b: ThemeBase, i?: number): boolean;
        static max(a: ThemeBase, b: ThemeBase, i?: number): ThemeBase;
        static json(a: ThemeBase, data: any): ThemeBase;
        static setProperty(a: ThemeBase, p: number, value: any): ThemeBase;
    }
}
declare module "TimeEvent" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class TimeEvent extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<TimeEvent>;
        /**配置ID*/
        id: string;
        /**任务名称*/
        eventName: string;
        /**任务实际开始时间*/
        taskstartTime: number;
        /**任务结束时间*/
        taskEndTime: number;
        /**上次开始时间*/
        lastStartTime: number;
        /**上次结束时间*/
        lastEndTime: number;
        /**默认时间是0也就是utc时间*/
        serverTimeZone: number;
        /**重复循环次数，0就是无限次循环*/
        LoopCount: number;
        /**已经重复的次数*/
        LoopTimers: number;
        /**第一次是否有cd*/
        isFristNoCD: boolean;
        /**任务间隔执行时间*/
        taskLoopTime: number;
        /**循环类型 1.日循环 2.周循环 3.月循环*/
        timeType: number;
        /**每天任务开始的时间，和loopTime共同执行*/
        startTime: number;
        /**每天任务开始的时间的结束时间*/
        startLimitTime: number;
        /**前置任务id，可以组成任务集合*/
        predecessorTaskID: string;
        /**任务的回调事件名字*/
        taskEventString: string;
        /**任务执行日志列表*/
        taskEventLog: string;
        /**任务目前状态，0等待执行，1正在执行，2执行错误，3执行成功*/
        taskState: number;
        /**任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
        taskPreviousState: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: TimeEvent): TimeEvent;
        clone(old: TimeEvent): void;
        private static params;
        static add(a: TimeEvent, b: TimeEvent, start: number | undefined, end: number, limit: TimeEvent): TimeEvent | null;
        static sub(a: TimeEvent, b: TimeEvent, start: number | undefined, end: number): TimeEvent | null;
        static random(src: TimeEvent, i?: number): string;
        static large(a: TimeEvent, b: TimeEvent, i?: number): boolean;
        static max(a: TimeEvent, b: TimeEvent, i?: number): TimeEvent;
        static json(a: TimeEvent, data: any): TimeEvent;
        static setProperty(a: TimeEvent, p: number, value: any): TimeEvent;
    }
}
declare module "UploadIpfsData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class UploadIpfsData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<UploadIpfsData>;
        /**ID*/
        id: string;
        /**图片名称*/
        ImageName: string;
        /**本地图片路径*/
        ImageUrl: string;
        /**上传的ipfs上的图片唯一标识*/
        IpfsImagehash: string;
        /**本地资源路径*/
        modelUrl: string;
        /**上传的ipfs上到资源唯一标识*/
        Ipfsmodelhash: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: UploadIpfsData): UploadIpfsData;
        clone(old: UploadIpfsData): void;
        private static params;
        static add(a: UploadIpfsData, b: UploadIpfsData, start: number | undefined, end: number, limit: UploadIpfsData): UploadIpfsData | null;
        static sub(a: UploadIpfsData, b: UploadIpfsData, start: number | undefined, end: number): UploadIpfsData | null;
        static random(src: UploadIpfsData, i?: number): string;
        static large(a: UploadIpfsData, b: UploadIpfsData, i?: number): boolean;
        static max(a: UploadIpfsData, b: UploadIpfsData, i?: number): UploadIpfsData;
        static json(a: UploadIpfsData, data: any): UploadIpfsData;
        static setProperty(a: UploadIpfsData, p: number, value: any): UploadIpfsData;
    }
}
declare module "UserDataBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class UserDataBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<UserDataBase>;
        /**用户uid*/
        id: string;
        /**用户名*/
        playerName: string;
        /**token*/
        token: string;
        /**密码*/
        passWord: string;
        /**账号状态*/
        status: number;
        /**持有货币*/
        currency: {
            [id: string]: number;
        };
        /**持有货币Json*/
        currencyJson: string;
        /**是否屏蔽*/
        isBlock: boolean;
        /**是否记录*/
        isLogUser: boolean;
        /**登录时间*/
        loginTime: number;
        /**第三方账号*/
        thirdPartyAccount: number;
        /**服务器渠道*/
        serverChannel: number;
        /**账号权限*/
        accountAccess: number;
        /**黑名单*/
        blacklist: string;
        /**玩家姓名*/
        frinedName: string;
        /**玩家头像*/
        icon: string;
        /**游戏存档*/
        GameArchive: {
            [id: string]: any;
        };
        /**游戏存档Json*/
        GameArchiveJson: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: UserDataBase): UserDataBase;
        clone(old: UserDataBase): void;
        private static params;
        static add(a: UserDataBase, b: UserDataBase, start: number | undefined, end: number, limit: UserDataBase): UserDataBase | null;
        static sub(a: UserDataBase, b: UserDataBase, start: number | undefined, end: number): UserDataBase | null;
        static random(src: UserDataBase, i?: number): string;
        static large(a: UserDataBase, b: UserDataBase, i?: number): boolean;
        static max(a: UserDataBase, b: UserDataBase, i?: number): UserDataBase;
        static json(a: UserDataBase, data: any): UserDataBase;
        static setProperty(a: UserDataBase, p: number, value: any): UserDataBase;
    }
}
declare module "UserVarBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class UserVarBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<UserVarBase>;
        /**用户uid*/
        id: string;
        /**游戏中账号状态*/
        inGameStatus: number;
        /**持有货币*/
        currency: {
            [id: string]: number;
        };
        /**持有货币Json*/
        currencyJson: string;
        /**小人图标*/
        littleManIcon: boolean;
        /**玩家角色*/
        PlayerAccount: any;
        /**玩家角色Json*/
        PlayerAccountJson: string;
        /**英雄列表*/
        listOfFigures: {
            [id: string]: any;
        };
        /**英雄列表Json*/
        listOfFiguresJson: string;
        /**布阵信息*/
        Arrangement: any;
        /**布阵信息Json*/
        ArrangementJson: string;
        /**创角时间*/
        creatTime: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: UserVarBase): UserVarBase;
        clone(old: UserVarBase): void;
        private static params;
        static add(a: UserVarBase, b: UserVarBase, start: number | undefined, end: number, limit: UserVarBase): UserVarBase | null;
        static sub(a: UserVarBase, b: UserVarBase, start: number | undefined, end: number): UserVarBase | null;
        static random(src: UserVarBase, i?: number): string;
        static large(a: UserVarBase, b: UserVarBase, i?: number): boolean;
        static max(a: UserVarBase, b: UserVarBase, i?: number): UserVarBase;
        static json(a: UserVarBase, data: any): UserVarBase;
        static setProperty(a: UserVarBase, p: number, value: any): UserVarBase;
    }
}
declare module "WalletErrLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WalletErrLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WalletErrLog>;
        /**记录ID*/
        id: string;
        /**类名*/
        className: string;
        /**方法名*/
        methodName: string;
        /**玩家ID*/
        userToken: string;
        /**log信息*/
        logMessage: string;
        /**记录时间*/
        resultTime: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WalletErrLog): WalletErrLog;
        clone(old: WalletErrLog): void;
        private static params;
        static add(a: WalletErrLog, b: WalletErrLog, start: number | undefined, end: number, limit: WalletErrLog): WalletErrLog | null;
        static sub(a: WalletErrLog, b: WalletErrLog, start: number | undefined, end: number): WalletErrLog | null;
        static random(src: WalletErrLog, i?: number): string;
        static large(a: WalletErrLog, b: WalletErrLog, i?: number): boolean;
        static max(a: WalletErrLog, b: WalletErrLog, i?: number): WalletErrLog;
        static json(a: WalletErrLog, data: any): WalletErrLog;
        static setProperty(a: WalletErrLog, p: number, value: any): WalletErrLog;
    }
}
declare module "WalletLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WalletLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WalletLog>;
        /**记录ID*/
        id: string;
        /**类名*/
        className: string;
        /**方法名*/
        methodName: string;
        /**玩家ID*/
        userToken: string;
        /**log信息*/
        logMessage: string;
        /**记录时间*/
        resultTime: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WalletLog): WalletLog;
        clone(old: WalletLog): void;
        private static params;
        static add(a: WalletLog, b: WalletLog, start: number | undefined, end: number, limit: WalletLog): WalletLog | null;
        static sub(a: WalletLog, b: WalletLog, start: number | undefined, end: number): WalletLog | null;
        static random(src: WalletLog, i?: number): string;
        static large(a: WalletLog, b: WalletLog, i?: number): boolean;
        static max(a: WalletLog, b: WalletLog, i?: number): WalletLog;
        static json(a: WalletLog, data: any): WalletLog;
        static setProperty(a: WalletLog, p: number, value: any): WalletLog;
    }
}
declare module "test" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class test extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<test>;
        /**配置ID*/
        id: string;
        /**道具名字*/
        itemName: string;
        /**test1*/
        test1: any;
        /**test1Json*/
        test1Json: string;
        /**test2*/
        test2: any[];
        /**test2Json*/
        test2Json: string;
        /**test3*/
        test3: {
            [id: string]: string;
        };
        /**test3Json*/
        test3Json: string;
        /**test4*/
        test4: {
            [id: string]: string[];
        };
        /**test4Json*/
        test4Json: string;
        /**test5*/
        test5: {
            [id: string]: any;
        };
        /**test5Json*/
        test5Json: string;
        /**test6*/
        test6: {
            [id: string]: any[];
        };
        /**test6Json*/
        test6Json: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: test): test;
        clone(old: test): void;
        private static params;
        static add(a: test, b: test, start: number | undefined, end: number, limit: test): test | null;
        static sub(a: test, b: test, start: number | undefined, end: number): test | null;
        static random(src: test, i?: number): string;
        static large(a: test, b: test, i?: number): boolean;
        static max(a: test, b: test, i?: number): test;
        static json(a: test, data: any): test;
        static setProperty(a: test, p: number, value: any): test;
    }
}
//# sourceMappingURL=ExcelData.d.ts.map