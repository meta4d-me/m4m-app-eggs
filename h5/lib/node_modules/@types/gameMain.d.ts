/// <reference types="../../lib/node_modules/@types/ExcelData" />
/// <reference types="../../../lib/node_modules/@types/gameutil" />
declare module "Tool/tdTool" {
    export class tdTool {
        static readonly FirstTimeFunnelEvent = "FirstTimeFunnel";
        static readonly ClickEvent = "Click";
        static readonly Clicked_login_button = "Clicked_login_button";
        static readonly Clicked_approve_button = "Clicked_approve_button";
        static readonly Finished_model_loading = "Finished_model_loading";
        static readonly Started_1st_game = "Started_1st_game";
        static readonly finished_1st_game = "finished_1st_game";
        static readonly Loading_done = "Loading_done";
        static readonly Clicked_play = "Clicked_play";
        static readonly Player_lose = "Player_lose";
        static readonly Tap_to_restart = "Tap_to_restart";
        static readonly Leaderboard = "Leaderboard";
        static readonly QRSkin = "QRSkin";
        static readonly Store = "Store";
        static readonly Mute = "Mute";
        static readonly Othergamelink = "Othergamelink";
        static readonly DailyShare = "DailyShare";
        static readonly Setting = "Setting";
        static readonly GameStart = "GameStart";
        static readonly AdClick = "AdClick";
        static readonly NewYearPackage = "NewYearPackage";
        static readonly FirstGameIcon = "FirstGameIcon";
        static readonly SecondGameIcon = "SecondGameIcon";
        static readonly ThirdGameIcon = "ThirdGameIcon";
        static readonly LoseWatchAdToContinue = "LoseWatchAdToContinue";
        static readonly LoseNoThanks = "LoseNoThanks";
        static readonly LoseTryonemoretime = "LoseTryonemoretime";
        static readonly LoseWatchAdToGetDouble = "LoseWatchAdToGetDouble";
        static readonly WinWatchAdToGetTriple = "WinWatchAdToGetTriple";
        static readonly WinNextlevel = "WinNextlevel";
        static readonly SaveQRcode = "SaveQRcode";
        static readonly WatchAdToGetFreeGems = "WatchAdToGetFreeGems";
        static readonly FailedToBuySkinWatchToGetGems = "FailedToBuySkinWatchToGetGems";
        static readonly FailedToBuyThemeWatchToGetGems = "FailedToBuyThemeWatchToGetGems";
        static readonly InviteNow = "InviteNow";
        static readonly SettlementWatchAdGetFreeGems = "SettlementWatchAdGetFreeGems";
        static readonly watchAdToGetSkin = "watchAdToGetSkin";
        static readonly Passed_level_ = "Passed_level_";
        static readonly viaShare = "viaShare";
        static readonly videoADError_1004 = "videoADError_1004";
    }
}
declare module "uiMgr" {
    export class uiMgr {
        static overlay: m4m.framework.overlay2D;
        static baselayer: m4m.framework.transform2D;
        static highlayer: m4m.framework.transform2D;
        static poplayer: m4m.framework.transform2D;
        private static uiRoot;
        private static scene;
        static shareCanvasImg: m4m.framework.rawImage2D;
        private static scFullImg;
        static scIconImg: m4m.framework.rawImage2D;
        static otherIconImg: m4m.framework.rawImage2D;
        static headIcon: m4m.framework.transform2D;
        private static leapRenderFunMap;
        private static FrontBefRenderFunMap;
        static init(): void;
        private static setHeadIcon;
        private static _sCanvIconMode;
        /** shareCanvas image 容器的 icon */
        static get sCanvIconMode(): boolean;
        static set sCanvIconMode(isIconMode: boolean);
    }
}
declare module "Tool/joinTool" {
    export class joinTool {
        static preInit(): void;
        private static coordinator;
        static init(): void;
        static test(): void;
        private static update;
        /** 注册方法 */
        static regFun(funName: string, fun: Function): void;
        /** 调用外部方法 */
        private static callFun;
        static hide_item_Ranks(): void;
        static hide_nextSurpass(): void;
        static showRanks(): void;
        static hideRankings(): void;
        static shareRankBoard(): void;
        static shareGame(): void;
        static shareToGroup(SuccessCallBack: Function): void;
        static showBestSkin(iconUrl: any, id: any): void;
        static showBestTheme(id: any): void;
        static challengeFriend(score: number): void;
        static showOffScore(score: number): void;
        static invitation(token: string): void;
        static newYearInvitation(token: string): void;
        static gameBox(): void;
        static settlement(score: any): void;
        /** 视频复活 */
        static watchVideo(SuccessCallBack: Function): void;
        /** 分享复活 */
        static shareRelive(SuccessCallBack: Function): void;
        /** 排行榜 上一页 */
        static lastPage(): void;
        /** 排行榜 下一页 */
        static nextPage(): void;
        /** 显示 底部广告 */
        static showBottomAd(bannerId: string): void;
        /** 重新构建 所有banner */
        static reMakeBottomAds(): void;
        /** 隐藏 底部广告 */
        static hideBottomAd(): void;
        /** 检查 超过的好友 */
        static ckOverFriend(score: number, x: number, y: number): void;
        /** 下一个可以 超过的好友 */
        static nextSurpass(score: number): void;
        /** 爱微游 广告icon 点击触发*/
        static onIwyAdvIconClick(): void;
        /** 关注按钮 点击*/
        static onFocusClick(): void;
        /** 领取双份 钻石*/
        static receiveDoubeDiamond(SuccessCallBack: Function): void;
        /**游戏结算的排行榜 */
        static show_item_Ranks(): void;
        static openFollowHead(insId: number): void;
        static closeFollowHead(): void;
        static placeFriendIcon(ranks: number[], level: number): void;
        static setShareCanvasSize(w: number, h: number): void;
        static tdcustomEvent(id: string, label: string, params?: {}): void;
        static screenshotcanvasInit(): void;
    }
}
declare module "ui/base/uiPage" {
    /** 加载uipage工具类 */
    export class loadTool {
        private static atlas_endMap;
        private static priority_atlas;
        static loadAtlas(atlas: string[]): Promise<void>;
        private static priority_pagePfb;
        static PagePrefeb_map: Map<string, m4m.framework.prefab>;
        static loadPrefeb(prefabName: string): Promise<void>;
    }
    /** 面板对象接口 */
    export interface IPageBase {
        handle: uiPage | uiPop;
        show(): any;
        hide(): any;
    }
    /**全屏 面板handle 基组件类 */
    export abstract class uiPage extends m4m.framework.behaviour2d {
        private static pages;
        uiLayer: number;
        notHideOnOtherShow: boolean;
        private inited;
        private init;
        private getParent;
        show(): void;
        hide(): void;
        private static hideAll;
        onHide: () => any;
    }
    /**pop 面板handle 基组件类 */
    export abstract class uiPop extends m4m.framework.behaviour2d {
        private inited;
        private init;
        show(): void;
        hide(): void;
        onHide: () => any;
    }
}
declare module "ui/videoPrizePageHandle" {
    import { uiPop } from "ui/base/uiPage";
    export class videoPrizePageHandle extends uiPop {
        close: m4m.framework.button;
        homePage: m4m.framework.button;
        info: m4m.framework.label;
        aureole: m4m.framework.transform2D;
        bt: m4m.framework.button;
        onPlay(): void;
        aRound: number;
        angleSpeed: number;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/base/imgNum" {
    export class imgNum extends m4m.framework.behaviour2d {
        static NumsMap: {
            [name: string]: m4m.framework.sprite[];
        };
        private ImgArr;
        template: m4m.framework.image2D;
        gap: number;
        private baseName;
        setNum(num: number): void;
        private cacheColor;
        setColor(color: m4m.math.color): void;
        onPlay(): void;
        private inited;
        private init;
        subsIconParse(): void;
        private numImgToMap;
        private refreshImgs;
        private ckGenimg;
        private addShell;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/audioHandle" {
    export class audioHandle extends m4m.framework.behaviour2d {
        static get IsOff(): boolean;
        private onImg;
        private offImg;
        private img;
        private btn;
        private _assetMgr;
        private get assetMgr();
        private static AhArr;
        private isInArr;
        onPlay(): void;
        onClickFun: any;
        private onClick;
        refreashIcon(): void;
        protected static refreashAll(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/homePageHandle" {
    import { uiPage } from "ui/base/uiPage";
    import { audioHandle } from "ui/audioHandle";
    export class homePageHandle extends uiPage {
        setting: m4m.framework.button;
        invite: m4m.framework.button;
        rank: m4m.framework.button;
        skin: m4m.framework.button;
        code: m4m.framework.button;
        music: audioHandle;
        slider: m4m.framework.image2D;
        startBtn: m4m.framework.button;
        newYear: m4m.framework.button;
        newYear_time: m4m.framework.label;
        newYear_gold: m4m.framework.transform2D;
        newSkin: m4m.framework.transform2D;
        canInviteNum: m4m.framework.label;
        onPlay(): void;
        private sliderSpeed;
        private sliderRange;
        private tween;
        onUpdate: (delta: number) => any;
        update(delta: number): void;
        private tp;
        private sliderAnimation;
        remove(): void;
    }
}
declare module "Ress" {
    export class Ress {
        static disShader: m4m.framework.shader;
        static disShaderUnlight: m4m.framework.shader;
        static ballShader: m4m.framework.shader;
        static ballPBRShader: m4m.framework.shader;
        static trailShader: m4m.framework.shader;
        static fontShader: m4m.framework.shader;
        static fxAdd: m4m.framework.shader;
        static fxBlen: m4m.framework.shader;
        static lego1: m4m.framework.transform;
        static lego2: m4m.framework.transform;
        static floor: m4m.framework.transform;
        static decoraion1: m4m.framework.transform;
        static character: m4m.framework.transform;
        static boost: m4m.framework.transform;
        static trail: m4m.framework.transform;
        static jinbi: m4m.framework.transform;
        static arrowTex: m4m.framework.texture;
        static cgrayTex: m4m.framework.texture;
        static finishLine: m4m.framework.texture;
        static brdfLUT: m4m.framework.texture;
        static shadowTex: m4m.framework.texture;
        static home_page: m4m.framework.prefab;
        static setting_page: m4m.framework.prefab;
        static unlock_page: m4m.framework.prefab;
        static continue_page: m4m.framework.prefab;
        static skinShop_page: m4m.framework.prefab;
        static gameOver_page: m4m.framework.prefab;
        static inGame_page: m4m.framework.prefab;
        static invite_page: m4m.framework.prefab;
        static videoPrize_page: m4m.framework.prefab;
        static rank_page: m4m.framework.prefab;
        static code_page: m4m.framework.prefab;
        static prize_page: m4m.framework.prefab;
        static victory_page: m4m.framework.prefab;
        static newYear_page: m4m.framework.prefab;
        static get fx_die_qiu(): m4m.framework.prefab;
        static get fx_wd(): m4m.framework.prefab;
        static get fx_js(): m4m.framework.prefab;
        static fx_gx: m4m.framework.transform;
        static fx_sl: m4m.framework.transform;
        static mainConfig: any;
        static skinConfig: any;
        static themeConfig: any;
        static levelConfig: any;
        static inviteConfig: string;
        private static lcallBack;
        static seconedLcallBack: Function;
        private static lReslist;
        private static isInit;
        static assetmgr: m4m.framework.assetMgr;
        private static setList;
        static init(): m4m.threading.gdPromise<unknown>;
        private static dis_num;
        /** 获取去一个 distortion 材质 */
        static getDistortionMat(): m4m.framework.material;
        private static loadText;
        private static loadConfigJson;
        private static Lend;
        private static secondLoading;
        private static seconedLend;
        private static finalLoading;
        private static coustomMeshCg;
    }
}
declare module "Data/Dictionary" {
    export class Dictionary {
        _keys: Array<any>;
        _values: Array<any>;
        constructor(init?: {
            key: any;
            value: any;
        }[]);
        Add(key: any, value: any): void;
        Remove(key: any): void;
        GetValue(key: any): any;
        GetKey(value: any): any;
        get keys(): any[];
        get values(): any[];
        ContainsKey(key: any): boolean;
        get count(): number;
        Clear(): void;
    }
}
declare module "Tool/commTool" {
    import { Dictionary } from "Data/Dictionary";
    /** 通用 Tool */
    export class commTool {
        private static cc;
        static ImgByLoad(url: string, backFun: (tex: m4m.framework.texture) => any): void;
        static getTexture(path: any): Promise<m4m.framework.texture>;
        /** 加载 的贴图缓存容器 */
        static loadedTexsDic: Dictionary;
        /** 缓动方法 IN => Out
         * p : 过程进度
         * MaxVal : 过程的最大值
         * mathIn : in 过程的 tween方法
         * mathOut : out 过程的 tween方法
        */
        static tweenInOut(p: number, MaxVal: number, methodIn: m4m.framework.tweenMethod, methodOut: m4m.framework.tweenMethod): number;
        static color16To10(str: string, out: m4m.math.color | m4m.math.vector4): void;
    }
}
declare module "skinMgr" {
    export class skinMgr {
        static skinPath: string;
        static iconPath: string;
        static skins: skinChunk[];
        static skins_map: Map<number, skinChunk>;
        static shareSkins: skinChunk[];
        static newYearSkin: skinChunk;
        static init(): void;
        /** 获取皮肤 info 通过 id */
        static getSkinInfo(id: number): skinChunk;
        /** 获取皮肤贴图 */
        static getPBRTexture(id: any): Promise<m4m.framework.texture[]>;
        static getSkinTexture(id: any): Promise<m4m.framework.texture>;
        static cubeTexture: m4m.framework.texture;
        static getCubetex(): Promise<m4m.framework.texture>;
        /** 获取皮肤icon */
        static getSkinIcon(id: any): Promise<m4m.framework.texture>;
    }
    export class skinChunk {
        id: number;
        name: string;
        headPortrait: string;
        skinSticker: string;
        deblocking: number[];
        color: string;
        skinTexture: m4m.framework.texture;
        skinIcon: m4m.framework.texture;
        basecolorImage: string;
        normalImage: string;
        basecolor: m4m.framework.texture;
        normal: m4m.framework.texture;
        renderType: boolean;
        isPBR: boolean;
        constructor({ id, skinName, headPortrait, skinSticker, deblocking, color, basecolor, normal, renderType }: {
            id: any;
            skinName: any;
            headPortrait: any;
            skinSticker: any;
            deblocking: any;
            color: any;
            basecolor: any;
            normal: any;
            renderType: any;
        });
    }
}
declare module "themeMgr" {
    export class themeMgr {
        static resoucesPath: string;
        static themes: themeChunk[];
        static newYearThemes: themeChunk;
        static currentTheme: number;
        static themes_map: Map<number, themeChunk>;
        static init(): void;
        static getThemeTexture(id: any): Promise<m4m.framework.texture[]>;
        static getCubeTexture(id: any): Promise<m4m.framework.texture>;
        private static lastCgSkinId;
        /** 切换主题 */
        static changeTheme(id?: number): Promise<void>;
    }
    export class themeChunk {
        id: number;
        name: string;
        image1: string;
        image2: string;
        deblocking: number[];
        color: m4m.math.vector4;
        textures: m4m.framework.texture[];
        cubeImage: m4m.framework.texture;
        cubeTexture: m4m.framework.texture;
        isDynamicColor: boolean;
        hRange: number[];
        sFactor: number;
        vFactor: number;
        icon: string;
        constructor({ id, sceneName, image1, image2, deblocking, color, cubeImage, icon, isDynamicColor, hRange, sFactor, vFactor }: {
            id: any;
            sceneName: any;
            image1: any;
            image2: any;
            deblocking: any;
            color: any;
            cubeImage: any;
            icon: any;
            isDynamicColor?: boolean;
            hRange: any;
            sFactor: any;
            vFactor: any;
        });
    }
}
declare module "levelMgr" {
    export class levelMgr {
        static levels: level[];
        static init(): void;
    }
    export class level {
        id: number;
        amount: number;
        stageName: string;
        length: number;
        weight: number[];
        cubeSpeedRange: number[];
        beyondRate: number;
        bootsRates: number[];
        reviveCount: number;
        constructor({ id, amount, stageName, runwayLength, runwayWeight, cubeSpMin, cubeSpMax, beyondRate, bootsWght, reviveCount }: {
            id: any;
            amount: any;
            stageName: any;
            runwayLength: any;
            runwayWeight: any;
            cubeSpMin: any;
            cubeSpMax: any;
            beyondRate: any;
            bootsWght: any;
            reviveCount: any;
        });
    }
}
declare module "inviteMgr" {
    export class inviteMgr {
        static gold: number[];
        static prize: any[];
        static init(): void;
    }
}
declare module "configMgr" {
    export class configMgr {
        static roleBspeed: number;
        static roleStepSpeed: number;
        static colorSpeed: number;
        static DistorSpeed: number;
        static DistorVrange: number;
        static DistorHrange: number;
        static obsBaseGap: number;
        static BoostGenSpeed: number;
        static singleCubeGenRate: number;
        static sceneColorHGap: number;
        static firstColorH: number;
        static firstColorS: number;
        static firstColorV: number;
        static speedAddDistance: number;
        static speedAddRate: number;
        static playerMaxSpeed: number;
        static addMaxStepNum: number;
        static stepTimeLength: number;
        static DiamonGenSpeed: number;
        static robotBSpeed: number;
        static robotReSurpassLimit: number;
        static watchVideo: number;
        static needRefreshADBanner: boolean;
        static PreInit(): void;
        /** 其他配置初始化 */
        static init(): void;
        private static setConf;
        static print(): void;
    }
}
declare module "MatMgr" {
    export class MatMgr {
        private static scene;
        private static cacheColor;
        private static defaultColor;
        private static rampColor;
        static cacheDistortion: m4m.math.vector4;
        private static colorMs;
        private static tag_onlyGrey;
        private static tag_unColorCg;
        private static mats;
        private static CgColorMats;
        private static onlyGreyMats;
        static Floor_mat_0: m4m.framework.material;
        static Floor_mat_1: m4m.framework.material;
        static finishLine: m4m.framework.material;
        static Comm_mat_0: m4m.framework.material;
        static ramp_mat_0: m4m.framework.material;
        static box_mat: m4m.framework.material;
        static boost_mat_0: m4m.framework.material;
        static coin_mat: m4m.framework.material;
        static Role_mat: m4m.framework.material;
        static Role_PBRmat: m4m.framework.material;
        static Robot_mats: m4m.framework.material[];
        static Trail_mat: m4m.framework.material;
        static wind_mat: m4m.framework.material;
        static redArrow_mat: m4m.framework.material;
        static shadow_mat: m4m.framework.material;
        static hud_mat: m4m.framework.material;
        static Fx1_mat: m4m.framework.material;
        static preInit(): void;
        static init(): void;
        static isGaped: boolean;
        static colorPGap: any;
        static firstP: any;
        static initState(): void;
        static relive(): void;
        private static reBsaeSet;
        private static initColor;
        private static preInitMats;
        private static initMats;
        /** 设置特效的材质 */
        static setFxMat(fxTrans: m4m.framework.transform): void;
        private static dynamicColor;
        private static lastDynamicColor;
        /** 材质切换成 动态变色 */
        static setDynamicColorAll(isEnable: boolean): void;
        /** 设置坡道的 颜色 和 模式 */
        static setRampColor(isDynamic: boolean, fixedColor?: m4m.math.vector4): void;
        private static ckHudLabMatCg;
        private static waitLabList;
        static setHudMat(lab: m4m.framework.label): void;
        static unSetHudMat(lab: m4m.framework.label): void;
        private static count;
        static getAMat(tex?: m4m.framework.texture, shader?: any): m4m.framework.material;
        static getTextName(texName: string, assetbundleName?: string): m4m.framework.texture;
        static setColor(r: number, g: number, b: number, isall?: boolean): void;
        private static setFogColor;
        static setDistortion(x: number, y: number): void;
        private static stepOnec;
        private static toGreying;
        private static update;
        private static ontoGrey;
        private static lastDisC;
        private static targetDisC;
        private static distortionP;
        private static distorSpeed;
        private static gradualDistortion;
        private static disRange_x;
        private static disRange_y;
        private static nextDis;
        private static _colorP;
        private static _colorP_0;
        private static crate;
        static _v: any;
        static _s: any;
        private static colorSp;
        private static gradualColor2;
        private static greyP;
        private static cGreyTime;
        private static toGrey;
        private static cacheHSV;
        private static HSVtoRGB;
        private static hRange;
        private static hRlen;
        static sFactor: number;
        static vFactor: number;
        private static SwingHSV;
        /** 设置H 范围 */
        static setHrange(left: number, right: number): void;
    }
}
declare module "Scripts/HMoveHandle" {
    /** 水平移动的方块 控制组件 */
    export class HMoveHandle extends m4m.framework.behaviour {
        /** 移动块的 速度 */
        static moveSpeed: number;
        private currtStyle;
        private mode;
        tran: m4m.framework.transform;
        stop: boolean;
        onPlay(): void;
        /**
         *  初始化 ， mode : 0 ,1   | isRevert : 是否倒转
         */
        init(mode: number, isRevert?: boolean): void;
        update(delta: number): void;
        private startX;
        private endX;
        private doMove;
        private canMove;
        private excess;
        private time;
        private moveing;
        private tween;
        private pos;
        private lastpos;
        private moveEnd;
        private getXbyNum;
        remove(): void;
    }
}
declare module "Tool/mixMesh" {
    export class GMesh {
        vf: number;
        vertexByteSize: number;
        mat: m4m.framework.material;
        mesh: m4m.framework.mesh;
        maxVerteCount: number;
        currentVerteCount: number;
        maxVboLen: number;
        realVboLen: number;
        vbodata: Float32Array;
        maxEboLen: number;
        realEboLen: number;
        ebodata: Uint16Array;
        constructor(mat: m4m.framework.material, vCount: number, vf: number, webgl: WebGL2RenderingContext);
        reset(): void;
        private temptPos;
        uploadMeshData(mat: m4m.math.matrix, mesh: m4m.framework.mesh, webgl: WebGL2RenderingContext): void;
        mixToGLmesh(webgl: WebGL2RenderingContext): void;
        private checkMeshCapacity;
    }
    export class mixMesh {
        matDic: {
            [matID: number]: m4m.framework.transform[];
        };
        matinstance: {
            [matID: number]: m4m.framework.material;
        };
        mixmeshDic: {
            [matID: number]: GMesh;
        };
        resetDic(): void;
        gl: any;
        constructor(gl?: WebGL2RenderingContext);
        mixMesh(targets: m4m.framework.transform[], vf?: number): {
            nobatch: m4m.framework.transform[];
            batch: m4m.framework.transform[];
            mixMeshId: number[];
        };
    }
}
declare module "obsCreateMgr" {
    import { mixMesh } from "Tool/mixMesh";
    export enum obsStyle {
        singe = 0,
        ramp_0 = 1,
        ramp_1 = 2,
        ramp_2 = 3,
        ramp_3 = 4,
        ramp_4 = 5,
        ramp_5 = 6,
        gate_0 = 7,
        gate_1 = 8,
        gate_2 = 9,
        gateH_0 = 10,
        gateH_1 = 11,
        gateH_2 = 12,
        L_0 = 13,
        L_1 = 14,
        L_2 = 15,
        T_0 = 16,
        T_1 = 17,
        T_2 = 18,
        T_3 = 19,
        Y_0 = 20,
        Y_1 = 21,
        Y_2 = 22,
        Y_3 = 23,
        Y_4 = 24,
        maxLen = 25
    }
    export class obsCreateMgr {
        private static readonly Tag_ramp;
        static readonly Tag_lowGate = "Tag_lowGate";
        private static posBlock;
        static safetyLUT: number[][];
        static obsSafety: number[];
        private static obsChunk;
        private static ModleMap;
        static init(ramp?: m4m.framework.transform, cube2?: m4m.framework.transform): void;
        private static origin;
        private static clone;
        static meshCompressor: mixMesh;
        static mixedMeshes: any;
        private static mixObsMesh;
        private static genObs;
        static getObs(style: obsStyle): m4m.framework.transform;
    }
}
declare module "role/roleData" {
    export class roleData {
        private static _list;
        static get list(): roleData[];
        name: string;
        iconUrl: string;
        ranking: number;
        scoreNum: number;
    }
}
declare module "role/robotMgr" {
    import { role } from "role/role";
    export class robotMgr {
        static get RoleSpeed(): number;
        private static moveSpeed;
        private static _role;
        static getRole(id: any): role;
        static createInstance(): role;
        static robotPool: role[];
        /** 场景添加机器人 */
        static addRobot(offset?: number): void;
        /**删除机器人 */
        static removeRobot(id: any): void;
        static setRobotStage(offset: any, id?: number): void;
        private static sacle;
        static toDie(id: any, isSpec?: boolean): void;
        static toJump(id: any): void;
        static toBoost(id: any): void;
        static toRace(id?: number): void;
        static deleteAll(): void;
        /** 全员停止 */
        static stopAll(): void;
        /** 取消全员停止 */
        static unStopAll(): void;
        /** 取消全员减速*/
        static toSlowdownAll(): void;
        /** 取消全员恢复到正常速度 */
        static SlowReNormalAll(): void;
        private static allAct;
        static AIdistance: number;
        static visibleRange: number;
        static AITotalAmount: number;
        static playerOffset: number;
        static remain: number;
        static config_CheckpointDistance: number;
        /** 场景中初始安放机器人 */
        static placeRobots(): void;
        /** 开始游戏 */
        static startGame(): void;
    }
}
declare module "PoolMgr" {
    import { role } from "role/role";
    export class PoolMgr {
        static styleTag: string;
        static init(): void;
        static combinedRoadTemp: m4m.framework.transform;
        static initCombineRoad(): m4m.framework.transform;
        private static isgreyTag;
        private static floorMap;
        static createSingleRoad(isGray: any): m4m.framework.transform;
        static new_floor(): m4m.framework.transform;
        static delete_floo(floor: m4m.framework.transform): void;
        private static obsMap;
        static new_obs(style: number): m4m.framework.transform;
        static delete_obs(obs: m4m.framework.transform): void;
        private static boosts;
        private static cacheBoost;
        static new_Boost(): m4m.framework.transform;
        static delete_Boost(boost: m4m.framework.transform): void;
        private static buildings;
        private static cacheBuilding;
        static new_building(): m4m.framework.transform;
        static delete_building(building: m4m.framework.transform): void;
        private static buildingslices;
        static new_buildingSlice(): m4m.framework.transform;
        static delete_buildingslice(building: m4m.framework.transform): void;
        static robots: role[];
        static new_robot(): role;
        static delete_robot(soul: role): void;
        private static coins;
        private static cacheCoins;
        static new_Coin(): m4m.framework.transform;
        static delete_Coin(diamond: m4m.framework.transform): void;
        private static transforms;
        static new_transform(): m4m.framework.transform;
        static delete_transform(tras: m4m.framework.transform): void;
    }
}
declare module "RoadGroupMgr" {
    export class RoadGroupMgr {
        private static cacheList;
        private static groupsMap;
        static baseGenRate: {
            [rtype: number]: number;
        };
        private static funlist;
        private static os;
        static init(): void;
        static initState(): void;
        private static fullGroups;
        private static funsFull;
        private static fun_ramp;
        private static fun_comm;
        private static fun_singe;
        private static gDCount;
        private static tryRGenOneCoin;
        private static gbCount;
        private static rGenBoost;
        private static Kcount;
        private static isK;
        private static totalKcount;
        private static lastStyle;
        private static currStyle;
        /** 获取一个障碍物体 */
        static getOne(): any;
        /** 检查补充道路队列 数据 */
        private static ckAdd;
        private static getSubModes;
        private static cellCubeMode;
        /**按照权重  获取一种 RoadType 类型 */
        private static getRTypeOne;
        private static cupRMap;
        private static rTypeOneLimit;
        private static rTypeOne;
        private static getXbyNum;
    }
}
declare module "WayMgr" {
    export class WayMgr {
        private static obsMap;
        private static buildingMap;
        private static floorMap;
        private static plane_h;
        private static plane_w;
        static roleSteepNum: number;
        private static tailSteepNum;
        private static headSteepNum;
        private static floorY;
        private static readonly maxNum;
        private static raodRoot;
        private static combindedRoadRoot;
        private static buildRoot;
        private static buildSliceRoot;
        private static finalLineTag;
        static preInit(): void;
        static init(): void;
        static initState(): void;
        static totalStepAmount: number;
        static safeAreaStep: number;
        static getObs(stepNum: number): m4m.framework.transform;
        private static finalLine;
        private static finalLineOldMat;
        private static genOne;
        private static desOne;
        private static desFloorOne;
        private static isGrey;
        private static floorCombinedHeadSteepNum;
        private static floorCombinedTailSteepNum;
        private static createFloor;
        private static oneFloor;
        private static oneBuildingSlice;
        private static deleteFloor;
        private static createObs;
        private static inCount;
        private static createBuilding;
        static buildingslice: m4m.framework.transform;
        static combinedBuilding(): void;
        private static varUpdate;
        private static getXbyNum;
    }
}
declare module "CameraFollowCtr" {
    export class CameraFollowCtrBR extends m4m.framework.behaviour {
        gameObject: m4m.framework.gameObject;
        start(): void;
        private _target;
        setTarget(target: m4m.framework.transform): void;
        private _lookAtPoint;
        private _targetOffset;
        setTargetOffset(x: number, y: number, z: number): void;
        private _distance;
        get distance(): number;
        set distance(v: number);
        private _elevationAngle;
        get elevationAngle(): number;
        set elevationAngle(v: number);
        private _Yangle;
        private _Yradian;
        get Yangle(): number;
        set Yangle(angle: number);
        private _lookDir;
        private calCameraDisAndLook;
        private calCamDis;
        private DoLookAtPoint;
        private _pause;
        pause(value: boolean): void;
        private calCameraPos;
        private yg_moved;
        private yg_p;
        private target_yg;
        private old_yg;
        private callback;
        setLToYangle(y: number, callback?: any): void;
        private readonly YGtimeLen;
        ckYGMove(delta: number): void;
        update(delta: number): void;
    }
}
declare module "headMgr" {
    import { role } from "role/role";
    export class headMgr {
        private static user_imgs;
        private static filterNet;
        private static recc;
        static AddOnce(callBack?: Function): void;
        private static tempArr;
        private static randomURLs;
        private static tempUrls;
        private static maxRate;
        static setIconUrls(rs: role[]): void;
    }
}
declare module "ui/inGamePageHandle" {
    import { uiPage } from "ui/base/uiPage";
    export class inGamePageHandle extends uiPage {
        setting: m4m.framework.button;
        home: m4m.framework.button;
        value: m4m.framework.progressbar;
        progressbarWidth: m4m.framework.transform2D;
        dot: m4m.framework.transform2D;
        diamond: m4m.framework.label;
        progressbar: m4m.framework.transform2D;
        customs: m4m.framework.label;
        banner: m4m.framework.image2D;
        numlabel: m4m.framework.label;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/settingPageHandle" {
    import { uiPop } from "ui/base/uiPage";
    import { audioHandle } from "ui/audioHandle";
    export class settingPageHandle extends uiPop {
        close: m4m.framework.button;
        shake: m4m.framework.button;
        music: m4m.framework.button;
        sound: audioHandle;
        bt: m4m.framework.button;
        icons: m4m.framework.transform2D;
        shakeImg: m4m.framework.image2D;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/base/ubiAdvIcon" {
    export class ubiAdvIcon extends m4m.framework.behaviour2d {
        static readonly adv_W = 142;
        static readonly adv_H = 156;
        private icon;
        private intervals;
        private imglist;
        private imgTexs;
        private jumptargetAppid;
        /** 设置icon 通过获取 的数据
         * res.id   跳转的appID
         * res.frames  序列图存放CDN URL
         * res.name  帧图 序列前缀
         * res.count 帧数量
         *
         * delay 延迟执行
         */
        setIcon(res: any, delay?: number): void;
        private dosetIcon;
        private loadImg;
        private currAnimFun;
        private isShake;
        private waitCount;
        private shakeCount;
        private shakeTime;
        private shakeSpeed;
        private tp;
        private angleRange;
        private shakeAnim;
        private ranimCount;
        private swFrameAnim;
        private swFrame_shake;
        private playIdx;
        private chageIconF;
        /** icon点击事件回调 */
        onClickIcon: Function;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "advMgr" {
    import { ubiAdvIcon } from "ui/base/ubiAdvIcon";
    /** 内部广告 管理器 */
    export class advMgr {
        static ubiAdv: ubiAdvIcon;
        static advUrl: string;
        static sequenceAdvD: any;
        private static inited;
        static init(): void;
        static settingAdvData: any[];
    }
}
declare module "ui/iconAdvHandle" {
    export class iconAdvHandle extends m4m.framework.behaviour2d {
        onPlay(): void;
        private appid;
        private inited;
        setIcon(data: any): void;
        onClick: Function;
        private onIconClick;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/pages/setingPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { settingPageHandle } from "ui/settingPageHandle";
    export class setingPage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<setingPage>;
        handle: settingPageHandle;
        private inited;
        private init;
        private setIcon;
        private onCloseClick;
        private onShakeClick;
        private refreashVibrateIcon;
        private isAdvInited;
        private readonly appidTag;
        setAdvIcons(datas: any[]): void;
        show(): void;
        hide(): void;
    }
}
declare module "stringMgr" {
    export class stringMgr {
        static currentLevel: string;
        static di: string;
        static ming: string;
        static ballAmount: string;
        static nextBallAmount: string;
        static level: string;
        static turnoffAvatarFollow: string;
        static turnonAvatarFollow: string;
        static finalChallenge: string;
        static tongguandi: string;
        static guan: string;
        static gain: string;
        static benju: string;
        static diamond: string;
        static getSkin: string;
        static getTheme: string;
        static buy: string;
        static gained: string;
        static haiyou: string;
        static tian: string;
        static shi: string;
        static jiezhi: string;
        static fen: string;
    }
}
declare module "FrameTimer" {
    export class FrameTimer {
        private static _instance;
        static get Instance(): FrameTimer;
        private static init;
        private nodeDic;
        private removeList;
        private update;
        /** 暂停计时 */
        stop(timeId: number): void;
        /** 计时一次
         * time 等待时间
         * DoFun delat 帧间隔时间 、isEnd 是否是结束 、tick 间隔滴答（loop 模式才有）
         */
        once(endTime: number, DoFun: (delat: number, isEnd: boolean, tick: boolean) => any): number;
        /** 计时一次
         * time 循环时间间隔
         * DoFun delat 帧间隔时间 、isEnd 是否是结束 、tick 间隔滴答（loop 模式才有）
         */
        loop(tickTime: number, DoFun: (delat: number, isEnd: boolean, tick: boolean) => any): number;
    }
}
declare module "ui/gameOverPageHandle" {
    import { uiPage } from "ui/base/uiPage";
    export class gameOverPageHandle extends uiPage {
        share: m4m.framework.button;
        next: m4m.framework.button;
        challenge: m4m.framework.button;
        again: m4m.framework.button;
        ranking: m4m.framework.label;
        customsNum: m4m.framework.label;
        ballNum: m4m.framework.label;
        nextBallNum: m4m.framework.label;
        newRecord: m4m.framework.transform2D;
        video: m4m.framework.button;
        video_goldNun: m4m.framework.label;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/continuePageHandle" {
    import { uiPage } from "ui/base/uiPage";
    export class continuePageHandle extends uiPage {
        continue_: m4m.framework.button;
        no_: m4m.framework.button;
        info: m4m.framework.label;
        head: m4m.framework.rawImage2D;
        countDown: m4m.framework.image2D;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/prizePageHandle" {
    import { uiPage } from "ui/base/uiPage";
    export class prizePageHandle extends uiPage {
        close: m4m.framework.button;
        video: m4m.framework.button;
        customs: m4m.framework.label;
        info: m4m.framework.label;
        aureole: m4m.framework.transform2D;
        video_x3: m4m.framework.button;
        onPlay(): void;
        aRound: number;
        angleSpeed: number;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/victoryPagehandle" {
    import { uiPop } from "ui/base/uiPage";
    export class victoryPagehandle extends uiPop {
        Image: m4m.framework.image2D;
        onPlay(): void;
        static call_back: () => {};
        time: number;
        ctime: number;
        isc: boolean;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/pages/victoryPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { victoryPagehandle } from "ui/victoryPagehandle";
    export class victoryPage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<victoryPage>;
        handle: victoryPagehandle;
        private animation;
        private inited;
        private init;
        show(): void;
        playAnimation(): void;
        hide(): void;
    }
}
declare module "ui/pages/prizePage" {
    import { IPageBase } from "ui/base/uiPage";
    import { prizePageHandle } from "ui/prizePageHandle";
    export class prizePage implements IPageBase {
        static prefabName: string;
        static atlasList: string[];
        private static _instance;
        static Instance(): Promise<prizePage>;
        handle: prizePageHandle;
        private inited;
        private init;
        diamond: number;
        victory: boolean;
        minDiamond: number;
        /**
         * @param diamond 钻石
         * @paran  victory 是否通关了
         */
        setInfo(diamond: number, victory: boolean): void;
        /**
      * @param diamond 钻石
     
      */
        private setDiamondNum;
        private Vtrigger;
        /**
         *  2x看视频
         */
        private onSeeVideoClick;
        /**
        *  3x看视频
        */
        private onX_3SeeVideoClick;
        /**
         * 领取金币
         */
        private prizeDiamond;
        /**
         * 关闭
         */
        private onCloseClick;
        private end;
        show(): void;
        hide(): void;
    }
}
declare module "ui/pages/continuePage" {
    import { IPageBase } from "ui/base/uiPage";
    import { continuePageHandle } from "ui/continuePageHandle";
    export class continuePage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<continuePage>;
        handle: continuePageHandle;
        private inited;
        private init;
        private update;
        setInfo(info: string): void;
        private onSettingClick;
        private Vtrigger;
        private onContinueGameClick;
        private isStop;
        private readonly showPoint;
        private readonly waiteTime;
        private readonly noShowWaiteT;
        private count;
        private updateReLiveBtn;
        private hideAllBtn;
        static recoverCount: number;
        relivePlayer(): void;
        private onNoClick;
        /**
         * 显示下一个超越的对象
         * @param score 分数
         */
        private setMyScore_showNext;
        show(): void;
        hide(): void;
    }
}
declare module "ui/unlockPageHandle" {
    import { uiPop } from "ui/base/uiPage";
    export class unlockPageHandle extends uiPop {
        bt: m4m.framework.button;
        close: m4m.framework.button;
        insufficient: m4m.framework.transform2D;
        purchase: m4m.framework.transform2D;
        acquisition: m4m.framework.transform2D;
        skin: m4m.framework.transform2D;
        theme: m4m.framework.transform2D;
        video: m4m.framework.transform2D;
        video_pd: m4m.framework.progressbar;
        seeVideo: m4m.framework.button;
        seeVideoNum: m4m.framework.label;
        video_bt: m4m.framework.button;
        purchase_bt: m4m.framework.button;
        price: m4m.framework.label;
        skinInfo: m4m.framework.label;
        share_bt: m4m.framework.button;
        skin_icon: m4m.framework.rawImage2D;
        theme_icon: m4m.framework.rawImage2D;
        canBuy: m4m.framework.transform2D;
        canBuy_bt: m4m.framework.button;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/inviteFriendsPageHandle" {
    import { uiPop } from "ui/base/uiPage";
    export class inviteFriendsPageHandle extends uiPop {
        close: m4m.framework.button;
        invite: m4m.framework.button;
        info: m4m.framework.transform2D;
        head: m4m.framework.transform2D;
        prize: m4m.framework.rawImage2D;
        line: m4m.framework.transform2D;
        num: m4m.framework.label;
        bt: m4m.framework.button;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/pages/inviteFriendsPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { inviteFriendsPageHandle } from "ui/inviteFriendsPageHandle";
    import { homePage } from "ui/pages/homePage";
    export class inviteFriendsPage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<inviteFriendsPage>;
        private static Pageurl;
        handle: inviteFriendsPageHandle;
        static homeI: homePage;
        private inited;
        private init;
        /**
         * 设置已经邀请的第X个好友的信息
         * @param index 第X个好友
         * @param head  第X个好友好友的头像
         */
        setInvite(index: number, head?: string): void;
        /**
         * 初始化基本信息
         */
        private initData;
        /**
         * 加载外部图片
         *  @param rwaImg 需要加载外部图片的组件
         *  @param  src 外部图片地址
         */
        loadRwaImg2D(rwaImg: m4m.framework.rawImage2D, src: string): void;
        static gold: number;
        /**
         * 关闭界面
         */
        onCloseClick(): void;
        static maxInvite: number;
        static inviteNum: number;
        static array: any[];
        onInviteClick(): void;
        static isContinueRefresh: boolean;
        static i: number;
        /**
         * 领取奖励
         */
        static sharels(): void;
        private ss;
        show(): void;
        hide(): void;
    }
}
declare module "ui/skinBoxHandle" {
    import { skinChunk } from "skinMgr";
    import { Dictionary } from "Data/Dictionary";
    export class skinBoxHandle extends m4m.framework.behaviour2d {
        static useSkinBox: skinBoxHandle;
        static yearSkinBox: skinBoxHandle;
        static shareSkinBoxs: Dictionary;
        use: m4m.framework.transform2D;
        icon: m4m.framework.rawImage2D;
        condition: m4m.framework.image2D;
        price: m4m.framework.label;
        click: m4m.framework.button;
        skin: skinChunk;
        setDate(skin: skinChunk): void;
        /**
         * 解锁条件
         * @param type_ 解锁条件
         */
        setType(type_: number[]): void;
        refresh(): void;
        /**
         * 分享
         */
        onShareClick([ev]: [any]): void;
        /**
         * 购买或者看视频
         */
        onPurchaseAndWatchCVideoClick([ev]: [any]): void;
        /**
         * 使用
         */
        onUseClick([ev]: [any]): void;
        nowUse(): void;
        private onClick;
        setIcon(src: string): void;
        remove(): void;
    }
}
declare module "ui/themeBoxHandle" {
    import { themeChunk } from "themeMgr";
    export class themeBoxHandle extends m4m.framework.behaviour2d {
        static useThemeBox: themeBoxHandle;
        static yearThmeBox: themeBoxHandle;
        use: m4m.framework.transform2D;
        icon: m4m.framework.rawImage2D;
        condition: m4m.framework.image2D;
        price: m4m.framework.label;
        click: m4m.framework.button;
        lock: m4m.framework.transform2D;
        theme: themeChunk;
        setDate(theme: themeChunk): void;
        /**
         * 解锁条件
         * @param type_ 解锁条件
         */
        setType(type_: number[]): void;
        refresh(): void;
        /**
         * 分享
         */
        onShareClick([ev]: [any]): void;
        /**
         * 购买
         */
        onPurchaseClick([ev]: [any]): void;
        /**
         * 使用
         */
        onUseClick([ev]: [any]): void;
        nowUse(): void;
        private onClick;
        setIcon(src: string): void;
        remove(): void;
    }
}
declare module "ui/skinShopPageHandle" {
    import { uiPage } from "ui/base/uiPage";
    export class skinShopPageHandle extends uiPage {
        close: m4m.framework.button;
        top: m4m.framework.transform2D;
        title: m4m.framework.image2D;
        box: m4m.framework.transform2D;
        skin: m4m.framework.transform2D;
        theme: m4m.framework.transform2D;
        themeBox: m4m.framework.transform2D;
        themeButton: m4m.framework.button;
        skinButton: m4m.framework.button;
        diamond_bt: m4m.framework.button;
        dial_bt: m4m.framework.button;
        video_goldNun: m4m.framework.label;
        bt: m4m.framework.button;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/pages/skinShopPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { skinShopPageHandle } from "ui/skinShopPageHandle";
    export class skinShopPage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<skinShopPage>;
        handle: skinShopPageHandle;
        private inited;
        private init;
        private isOpenSkin;
        private themeimg_bt;
        private skinimg_bt;
        /**
         * 点击皮肤
         */
        private onClickSkin;
        /**
         * 点击主题
         */
        private onClickTheme;
        /**
         * 点击关闭
         */
        private onCloseClick;
        /**
         * 点击转盘
         */
        private onClickDial;
        private Vtrigger;
        /**
         * 看视频
         */
        private onClickDiamond;
        /**          皮肤的东西       */
        private boxHeight;
        private boxWidth;
        private: any;
        private boxInterval;
        private lineNumber;
        private createIndex;
        private createIndexxxx;
        private createBoxY;
        private createBoxX;
        private pageHeight;
        private opt;
        createBox(isYear?: boolean): void;
        private makedAll_skin;
        private makedAll_theme;
        private skinItems;
        private themeItems;
        private update;
        private isShowItems;
        /**
         * 是否应该显示出来
         * @patam item 需要判断的
         */
        private isOughtShow;
        private themeBoxHeight;
        private themeBoxWidth;
        private themeBoxInterval;
        private themeLineNumber;
        private themeCreateIndex;
        private themeCreatexxx;
        private themeCreateBoxY;
        private themeCreateBoxX;
        createThemeBox(isYear?: boolean): void;
        show(): void;
        hide(): void;
    }
}
declare module "ui/pages/unlockPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { unlockPageHandle } from "ui/unlockPageHandle";
    import { skinChunk } from "skinMgr";
    import { themeChunk } from "themeMgr";
    import { skinBoxHandle } from "ui/skinBoxHandle";
    import { themeBoxHandle } from "ui/themeBoxHandle";
    export class unlockPage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<unlockPage>;
        handle: unlockPageHandle;
        private inited;
        private init;
        isSkin: boolean;
        skinInfo: skinChunk;
        themeInfo: themeChunk;
        skinBox: skinBoxHandle;
        setSkinfo(skin: skinChunk, skinBox: skinBoxHandle): void;
        themeBox: themeBoxHandle;
        setTheme(theme: themeChunk, themeBox: themeBoxHandle): void;
        static isCanBuy_noCanShow: boolean;
        setCanBuy(skin: skinChunk): void;
        /**
         * 设置价格
         * @param price 价格
         * @param isV  是否看视频刷新价格的
         */
        private setPrice;
        private setWatchVideo;
        private setIcon;
        /**
         * 关闭
         */
        private onCloseClick;
        private Vtrigger;
        /**
         * 钻石不足时可以看视频
         */
        private onVideoClick;
        refresh_bt(): void;
        /**
         * 去商场按钮
         */
        private onToShopClick;
        /**
         * 购买
         */
        private onPurchaseClick;
        /**
         * 看视频解锁皮肤
         */
        private onWatchVideoClick;
        setShareSkinfo(skin: skinChunk, skinBox: skinBoxHandle): void;
        /**
         * 分享
         */
        private onShareClick;
        show(): void;
        hide(): void;
        /**
         * 是否有钱买新皮肤
         */
        private isCanBuyNewSkin;
    }
}
declare module "ui/pages/gameOverPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { gameOverPageHandle } from "ui/gameOverPageHandle";
    export class gameOverPage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<gameOverPage>;
        handle: gameOverPageHandle;
        private inited;
        private init;
        private score;
        /**
         * @param ranking 获得的名次
         * @param customs 当前关卡
         * @param ballNum 当前关卡球球数量
         * @param  nextBallNum 下一关球球数量
         * @param isPass 是否通关
         */
        setInfo(ranking: number, customs: number, ballNum: number, nextBallNum: number, isPass?: boolean): void;
        static isPass: boolean;
        /**
         * 通关就显示下一关和得分炫耀的按钮,否则显示再来一次和发起挑战按钮
         * @param isPass 是否通关
         */
        isPassShow(isPass: boolean): void;
        private Vtrigger;
        /** 看视频得金币*/
        private onVideoClick;
        /**
         * 返回首页 点击已经移动ingame了  这里用来重置状态
         */
        static onHomeClick(): void;
        /**
         * 过关炫耀
         */
        private onShareClick;
        /**
         * 下一关
         */
        private onNextClick;
        /**
          * 再来一次
          */
        private onAgainClick;
        private static endFun;
        /**
         * 发起挑战
         */
        private onChallengeClick;
        /**
         * 是否是新记录
         * @param  isNwe 是否是新纪录
         */
        setIsNewRecord(isNwe: boolean): void;
        /**
         * 是否有钱买新皮肤
         */
        private static isCanBuyNewSkin;
        show(): void;
        hide(): void;
    }
}
declare module "ui/pages/inGamePage" {
    import { IPageBase } from "ui/base/uiPage";
    import { inGamePageHandle } from "ui/inGamePageHandle";
    import { level } from "levelMgr";
    import { ubiAdvIcon } from "ui/base/ubiAdvIcon";
    export class inGamePage implements IPageBase {
        static prefabName: string;
        static atlasList: string[];
        private static _instance;
        static Instance(): Promise<inGamePage>;
        handle: inGamePageHandle;
        advi: ubiAdvIcon;
        static isGameStart: boolean;
        private inited;
        private init;
        /** 播放金币收集动画 */
        PlayCoinCollectAnim(): void;
        private ccAPlayEnd;
        private ccAnimTime;
        private ccAcount;
        private maxSize;
        private doCollectAnim;
        static collectCoinsAnim_callfun: () => {};
        /** 收集大量金币 并保存 */
        collectCoinsAnim_save(addDiamond: number): void;
        private old_;
        private new_;
        private readonly minAddingR;
        /** 收集大量金币 */
        private collectCoinsAnim;
        private isDoCCsAnim;
        private readonly ccsATime;
        private ccsACount;
        private CCsAnimTimeId;
        private lastScore;
        private doCollectCoinsAnim;
        /**
         * 进度条
         * @param  value 进度
         */
        setValue(value: number): void;
        /** 设置关卡 */
        setCustoms(value: level): void;
        private lastNum;
        /** 排名 */
        setSurpassNum(surpassNum: number): void;
        /**
         * 设置
         */
        private onSettingClick;
        /**
         * 返回首页
         */
        private onHomeClick;
        private currshowItem;
        /** 设置显示状态 */
        setShowItem(item: any): void;
        private isMove;
        private minTopY;
        private maxTopY;
        private minTopY_;
        private maxTopY_;
        private opt;
        private ySpeed;
        moveRankNumHeight: number;
        private update;
        private doProgressBarAnim;
        /**
         * 拥有的钻石
         */
        private setDiamond;
        /**
         * 更新钻石等信息
         */
        updateData(): void;
        show(): void;
        hide(): void;
        isBannerVisible: boolean;
        showBanner(bannerId: any): void;
    }
    export enum showItem {
        home = 0,
        allShow = 1,
        gameOver = 2,
        continu = 3,
        shop = 4,
        Rank = 5
    }
}
declare module "lab/coin" {
    export class coin extends m4m.framework.behaviour {
        trans: m4m.framework.transform;
        baseHeight: number;
        onPlay(): void;
        update(delta: number): void;
        rollingSpeed: number;
        rollingTheta: number;
        eular: number;
        roll(delta: number): void;
        flyDistance: number;
        flyTime: number;
        flySpeed: number;
        flyTimer: number;
        isFlying: boolean;
        fly(delta: number): void;
        remove(): void;
    }
}
declare module "AutoCode/Net/DataEvents/GameArchiveDataEvent" {
    export class GameArchiveDataEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 角色配置数据*/
        static baseData: string;
        /** 关卡数据*/
        static Currentlevel: string;
        /** 上次使用时间*/
        static lastTime: string;
        /** 是否是nft*/
        static ism4mnft: string;
        /** 使用者*/
        static playerToken: string;
    }
}
declare module "AutoCode/Net/DataEvents/LevelBaseEvent" {
    export class LevelBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 数量*/
        static amount: string;
        /** 关卡名称*/
        static stageName: string;
        /** 跑道长度*/
        static runwayLength: string;
        /** 跑道宽度*/
        static runwayWeight: string;
        /** 最小值*/
        static cubeSpMin: string;
        /** 最大值*/
        static cubeSpMax: string;
        /** 速度*/
        static beyondRate: string;
        /** 重力*/
        static bootsWght: string;
        /** 复活计数*/
        static reviveCount: string;
    }
}
declare module "AutoCode/Net/DataEvents/MainBaseEvent" {
    export class MainBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 角色速度*/
        static roleBspeed: string;
        /** 角色加速度*/
        static roleStepSpeed: string;
        /** 色彩速度*/
        static colorSpeed: string;
        /** 分配器速度*/
        static DistorSpeed: string;
        /** 距离传感器量程*/
        static DistorVrange: string;
        /** 距离传感器范围*/
        static DistorHrange: string;
        /** 间隙*/
        static obsBaseGap: string;
        /** 升压发电机速度*/
        static BoostGenSpeed: string;
        /** 单立方根速率*/
        static singleCubeGenRate: string;
        /** 场景颜色间隙*/
        static sceneColorHGap: string;
        /** 第一种颜色H*/
        static firstColorH: string;
        /** 第一种颜色S*/
        static firstColorS: string;
        /** 第一种颜色V*/
        static firstColorV: string;
        /** 速度相加距离*/
        static speedAddDistance: string;
        /** 速度增加率*/
        static speedAddRate: string;
        /** 玩家最大速度*/
        static playerMaxSpeed: string;
        /** 添加最大步长*/
        static addMaxStepNum: string;
        /** 步长时间长度*/
        static stepTimeLength: string;
        /** 方块速度*/
        static DiamonGenSpeed: string;
        /** 机器人速度*/
        static robotBSpeed: string;
        /** 机器人超越限制*/
        static robotReSurpassLimit: string;
        /** 看广告*/
        static watchVideo: string;
        /** 需要刷新广告横幅*/
        static needRefreshADBanner: string;
    }
}
declare module "AutoCode/Net/DataEvents/SkinBaseEvent" {
    export class SkinBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 名称*/
        static skinName: string;
        /** 头像名*/
        static headPortrait: string;
        /** 皮肤名*/
        static skinSticker: string;
        /** 解锁条件*/
        static deblocking: string;
        /** 颜色*/
        static color: string;
        /** 类型*/
        static renderType: string;
    }
}
declare module "AutoCode/Net/DataEvents/ThemeBaseEvent" {
    export class ThemeBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 名称*/
        static sceneName: string;
        /** 图片1名称*/
        static image1: string;
        /** 图片2名称*/
        static image2: string;
        /** 模型图片*/
        static cubeImage: string;
        /** 解锁条件*/
        static deblocking: string;
        /** 颜色*/
        static color: string;
        /** 范围*/
        static hRange: string;
        /** 因素1*/
        static sFactor: string;
        /** 因素2*/
        static vFactor: string;
        /** 图标名称*/
        static icon: string;
        /** 类型*/
        static isDynamicColor: string;
    }
}
declare module "AutoCode/Net/DataEvents/UploadIpfsDataEvent" {
    export class UploadIpfsDataEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 图片名称*/
        static ImageName: string;
        /** 本地图片路径*/
        static ImageUrl: string;
        /** 上传的ipfs上的图片唯一标识*/
        static IpfsImagehash: string;
        /** 本地资源路径*/
        static modelUrl: string;
        /** 上传的ipfs上到资源唯一标识*/
        static Ipfsmodelhash: string;
    }
}
declare module "AutoCode/Net/WsDataManager" {
    import { ArrangementData } from "ArrangementData";
    import { EquipBase } from "EquipBase";
    import { EquipDate } from "EquipDate";
    import { EquipEffectBase } from "EquipEffectBase";
    import { EquipExpBase } from "EquipExpBase";
    import { ErrorInfo } from "ErrorInfo";
    import { Formulas } from "Formulas";
    import { GameArchiveData } from "GameArchiveData";
    import { ItemBase } from "ItemBase";
    import { ItemData } from "ItemData";
    import { LevelBase } from "LevelBase";
    import { MainBase } from "MainBase";
    import { RoleBase } from "RoleBase";
    import { RoleData } from "RoleData";
    import { ServerUserData } from "ServerUserData";
    import { SeverConfigBase } from "SeverConfigBase";
    import { SeverData } from "SeverData";
    import { SkinBase } from "SkinBase";
    import { test } from "test";
    import { ThemeBase } from "ThemeBase";
    import { TimeEvent } from "TimeEvent";
    import { UploadIpfsData } from "UploadIpfsData";
    import { UserDataBase } from "UserDataBase";
    import { UserVarBase } from "UserVarBase";
    import { WalletErrLog } from "WalletErrLog";
    import { WalletLog } from "WalletLog";
    export class WsDataManager {
        static ArrangementDataData: ArrangementData;
        static EquipBaseData: EquipBase;
        static EquipDateData: EquipDate;
        static EquipEffectBaseData: EquipEffectBase;
        static EquipExpBaseData: EquipExpBase;
        static GameArchiveDataData: GameArchiveData;
        static ItemBaseData: ItemBase;
        static ItemDataData: ItemData;
        static LevelBaseData: LevelBase;
        static MainBaseData: MainBase;
        static RoleBaseData: RoleBase;
        static RoleDataData: RoleData;
        static SkinBaseData: SkinBase;
        static testData: test;
        static ThemeBaseData: ThemeBase;
        static UploadIpfsDataData: UploadIpfsData;
        static UserDataBaseData: UserDataBase;
        static UserVarBaseData: UserVarBase;
        static WalletErrLogData: WalletErrLog;
        static WalletLogData: WalletLog;
        static ErrorInfoData: ErrorInfo;
        static FormulasData: Formulas;
        static ServerUserDataData: ServerUserData;
        static SeverConfigBaseData: SeverConfigBase;
        static SeverDataData: SeverData;
        static TimeEventData: TimeEvent;
        static ArrangementDataDataList: typeof ArrangementData;
        static EquipBaseDataList: typeof EquipBase;
        static EquipDateDataList: typeof EquipDate;
        static EquipEffectBaseDataList: typeof EquipEffectBase;
        static EquipExpBaseDataList: typeof EquipExpBase;
        static GameArchiveDataDataList: typeof GameArchiveData;
        static ItemBaseDataList: typeof ItemBase;
        static ItemDataDataList: typeof ItemData;
        static LevelBaseDataList: typeof LevelBase;
        static MainBaseDataList: typeof MainBase;
        static RoleBaseDataList: typeof RoleBase;
        static RoleDataDataList: typeof RoleData;
        static SkinBaseDataList: typeof SkinBase;
        static testDataList: typeof test;
        static ThemeBaseDataList: typeof ThemeBase;
        static UploadIpfsDataDataList: typeof UploadIpfsData;
        static UserDataBaseDataList: typeof UserDataBase;
        static UserVarBaseDataList: typeof UserVarBase;
        static WalletErrLogDataList: typeof WalletErrLog;
        static WalletLogDataList: typeof WalletLog;
        static ErrorInfoDataList: typeof ErrorInfo;
        static FormulasDataList: typeof Formulas;
        static ServerUserDataDataList: typeof ServerUserData;
        static SeverConfigBaseDataList: typeof SeverConfigBase;
        static SeverDataDataList: typeof SeverData;
        static TimeEventDataList: typeof TimeEvent;
        static setData(className: any, data: any): void;
        static changeDataList(className: string, data: any): void;
        static changeData(className: string, proName: string, paramType: string, data: any): void;
        static dispatchTipData(className: string, data: any): void;
    }
}
declare module "Net/AwaitDataManager" {
    export class AwaitDataManager {
        private static _map;
        static awaitFor(name: string, success: Function, error?: Function): void;
        static dispatchSuccess(name: string, params: any[]): void;
        static dispatchError(name: string, params: any[]): void;
    }
}
declare module "AutoCode/Net/BufferDatas/ArrangementDataBuffer" {
    export class ArrangementDataBuffer {
        static get Instance(): ArrangementDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/EquipBaseBuffer" {
    export class EquipBaseBuffer {
        static get Instance(): EquipBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/EquipDateBuffer" {
    export class EquipDateBuffer {
        static get Instance(): EquipDateBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/EquipEffectBaseBuffer" {
    export class EquipEffectBaseBuffer {
        static get Instance(): EquipEffectBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/EquipExpBaseBuffer" {
    export class EquipExpBaseBuffer {
        static get Instance(): EquipExpBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/ErrorInfoBuffer" {
    export class ErrorInfoBuffer {
        static get Instance(): ErrorInfoBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/FormulasBuffer" {
    export class FormulasBuffer {
        static get Instance(): FormulasBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/SkinBaseBuffer" {
    export class SkinBaseBuffer {
        static get Instance(): SkinBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/LevelBaseBuffer" {
    export class LevelBaseBuffer {
        static get Instance(): LevelBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/GameArchiveDataBuffer" {
    export class GameArchiveDataBuffer {
        static get Instance(): GameArchiveDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/ItemBaseBuffer" {
    export class ItemBaseBuffer {
        static get Instance(): ItemBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/ItemDataBuffer" {
    export class ItemDataBuffer {
        static get Instance(): ItemDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/MainBaseBuffer" {
    export class MainBaseBuffer {
        static get Instance(): MainBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/RoleBaseBuffer" {
    export class RoleBaseBuffer {
        static get Instance(): RoleBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/RoleDataBuffer" {
    export class RoleDataBuffer {
        static get Instance(): RoleDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/ServerUserDataBuffer" {
    export class ServerUserDataBuffer {
        static get Instance(): ServerUserDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/SeverConfigBaseBuffer" {
    export class SeverConfigBaseBuffer {
        static get Instance(): SeverConfigBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/SeverDataBuffer" {
    export class SeverDataBuffer {
        static get Instance(): SeverDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/testBuffer" {
    export class testBuffer {
        static get Instance(): testBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/ThemeBaseBuffer" {
    export class ThemeBaseBuffer {
        static get Instance(): ThemeBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/TimeEventBuffer" {
    export class TimeEventBuffer {
        static get Instance(): TimeEventBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/UserDataBaseBuffer" {
    export class UserDataBaseBuffer {
        static get Instance(): UserDataBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/UserVarBaseBuffer" {
    export class UserVarBaseBuffer {
        static get Instance(): UserVarBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/WalletErrLogBuffer" {
    export class WalletErrLogBuffer {
        static get Instance(): WalletErrLogBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/WalletLogBuffer" {
    export class WalletLogBuffer {
        static get Instance(): WalletLogBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/TipInfoBuffer" {
    export class TipInfoBuffer {
        static get Instance(): TipInfoBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/UploadIpfsDataBuffer" {
    export class UploadIpfsDataBuffer {
        static get Instance(): UploadIpfsDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/BufferDataReader" {
    export class BufferDataReader {
        static get Instance(): BufferDataReader;
        private static _instance;
        readArrayBuffer(className: string, br: m4m.io.binTool): {};
    }
}
declare module "Net/NetData" {
    export class NetData {
        /**
         * json字符串
         */
        code: string;
        arrayBuffer: any;
        /**
         * 头部字符串
         */
        head: string;
        isBuffer: boolean;
        constructor(str: any);
        private static reg;
        private obj;
        /**
         * 获取json对象
         */
        GetJson(): any;
        private getParams;
        private getDataClassByTypeId;
        private getDataByBuffer;
        static readString(bytes: m4m.io.binTool): string;
    }
}
declare module "AutoCode/Net/WebsocketTool" {
    import { NetData } from "Net/NetData";
    export class WebsocketTool {
        static get Instance(): WebsocketTool;
        private static _instance;
        onmessage(netData: NetData): boolean;
        getMsg(className: any, functionName: any, text: any): string;
        /***
         * 获取全部test数据
         */
        ExcelManager_testDataGetAll(): void;
        /***
         * 通过ID数组获取多条test数据
         */
        ExcelManager_testDataByIds(ids: any): void;
        /***
         * 修改单test数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifytestDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个test数据
         */
        ExcelManager_addtestData(value: any): void;
        /***
         * 添加test数组数据
         */
        ExcelManager_addtestDatas(value: any): void;
        /***
         * 删除一条test
         */
        ExcelManager_removetestData(id: any): void;
        /***
         * 通过ID获取UserDataBase数据
         */
        ExcelManager_UserDataBaseDataById(id: any): void;
        /***
         * 获取全部UserDataBase数据
         */
        ExcelManager_UserDataBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条UserDataBase数据
         */
        ExcelManager_UserDataBaseDataByIds(ids: any): void;
        /***
         * 修改单UserDataBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyUserDataBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个UserDataBase数据
         */
        ExcelManager_addUserDataBaseData(value: any): void;
        /***
         * 添加UserDataBase数组数据
         */
        ExcelManager_addUserDataBaseDatas(value: any): void;
        /***
         * 删除一条UserDataBase
         */
        ExcelManager_removeUserDataBaseData(id: any): void;
        /***
         * 通过ID获取UserVarBase数据
         */
        ExcelManager_UserVarBaseDataById(id: any): void;
        /***
         * 获取全部UserVarBase数据
         */
        ExcelManager_UserVarBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条UserVarBase数据
         */
        ExcelManager_UserVarBaseDataByIds(ids: any): void;
        /***
         * 修改单UserVarBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyUserVarBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个UserVarBase数据
         */
        ExcelManager_addUserVarBaseData(value: any): void;
        /***
         * 添加UserVarBase数组数据
         */
        ExcelManager_addUserVarBaseDatas(value: any): void;
        /***
         * 删除一条UserVarBase
         */
        ExcelManager_removeUserVarBaseData(id: any): void;
        /***
         * 通过ID获取WalletErrLog数据
         */
        ExcelManager_WalletErrLogDataById(id: any): void;
        /***
         * 获取全部WalletErrLog数据
         */
        ExcelManager_WalletErrLogDataGetAll(): void;
        /***
         * 通过ID数组获取多条WalletErrLog数据
         */
        ExcelManager_WalletErrLogDataByIds(ids: any): void;
        /***
         * 修改单WalletErrLog数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyWalletErrLogDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个WalletErrLog数据
         */
        ExcelManager_addWalletErrLogData(value: any): void;
        /***
         * 添加WalletErrLog数组数据
         */
        ExcelManager_addWalletErrLogDatas(value: any): void;
        /***
         * 删除一条WalletErrLog
         */
        ExcelManager_removeWalletErrLogData(id: any): void;
        /***
         * 通过ID获取WalletLog数据
         */
        ExcelManager_WalletLogDataById(id: any): void;
        /***
         * 获取全部WalletLog数据
         */
        ExcelManager_WalletLogDataGetAll(): void;
        /***
         * 通过ID数组获取多条WalletLog数据
         */
        ExcelManager_WalletLogDataByIds(ids: any): void;
        /***
         * 修改单WalletLog数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyWalletLogDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个WalletLog数据
         */
        ExcelManager_addWalletLogData(value: any): void;
        /***
         * 添加WalletLog数组数据
         */
        ExcelManager_addWalletLogDatas(value: any): void;
        /***
         * 删除一条WalletLog
         */
        ExcelManager_removeWalletLogData(id: any): void;
        /***
         * 通过ID获取ErrorInfo数据
         */
        ExcelManager_ErrorInfoDataById(id: any): void;
        /***
         * 获取全部ErrorInfo数据
         */
        ExcelManager_ErrorInfoDataGetAll(): void;
        /***
         * 通过ID数组获取多条ErrorInfo数据
         */
        ExcelManager_ErrorInfoDataByIds(ids: any): void;
        /***
         * 修改单ErrorInfo数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyErrorInfoDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ErrorInfo数据
         */
        ExcelManager_addErrorInfoData(value: any): void;
        /***
         * 添加ErrorInfo数组数据
         */
        ExcelManager_addErrorInfoDatas(value: any): void;
        /***
         * 删除一条ErrorInfo
         */
        ExcelManager_removeErrorInfoData(id: any): void;
        /***
         * 通过ID获取Formulas数据
         */
        ExcelManager_FormulasDataById(id: any): void;
        /***
         * 获取全部Formulas数据
         */
        ExcelManager_FormulasDataGetAll(): void;
        /***
         * 通过ID数组获取多条Formulas数据
         */
        ExcelManager_FormulasDataByIds(ids: any): void;
        /***
         * 修改单Formulas数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyFormulasDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个Formulas数据
         */
        ExcelManager_addFormulasData(value: any): void;
        /***
         * 添加Formulas数组数据
         */
        ExcelManager_addFormulasDatas(value: any): void;
        /***
         * 删除一条Formulas
         */
        ExcelManager_removeFormulasData(id: any): void;
        /***
         * 通过ID获取ServerUserData数据
         */
        ExcelManager_ServerUserDataDataById(id: any): void;
        /***
         * 获取全部ServerUserData数据
         */
        ExcelManager_ServerUserDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条ServerUserData数据
         */
        ExcelManager_ServerUserDataDataByIds(ids: any): void;
        /***
         * 修改单ServerUserData数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyServerUserDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ServerUserData数据
         */
        ExcelManager_addServerUserDataData(value: any): void;
        /***
         * 添加ServerUserData数组数据
         */
        ExcelManager_addServerUserDataDatas(value: any): void;
        /***
         * 删除一条ServerUserData
         */
        ExcelManager_removeServerUserDataData(id: any): void;
        /***
         * 通过ID获取SeverConfigBase数据
         */
        ExcelManager_SeverConfigBaseDataById(id: any): void;
        /***
         * 获取全部SeverConfigBase数据
         */
        ExcelManager_SeverConfigBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条SeverConfigBase数据
         */
        ExcelManager_SeverConfigBaseDataByIds(ids: any): void;
        /***
         * 修改单SeverConfigBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifySeverConfigBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个SeverConfigBase数据
         */
        ExcelManager_addSeverConfigBaseData(value: any): void;
        /***
         * 添加SeverConfigBase数组数据
         */
        ExcelManager_addSeverConfigBaseDatas(value: any): void;
        /***
         * 删除一条SeverConfigBase
         */
        ExcelManager_removeSeverConfigBaseData(id: any): void;
        /***
         * 通过ID获取SeverData数据
         */
        ExcelManager_SeverDataDataById(id: any): void;
        /***
         * 获取全部SeverData数据
         */
        ExcelManager_SeverDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条SeverData数据
         */
        ExcelManager_SeverDataDataByIds(ids: any): void;
        /***
         * 修改单SeverData数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifySeverDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个SeverData数据
         */
        ExcelManager_addSeverDataData(value: any): void;
        /***
         * 添加SeverData数组数据
         */
        ExcelManager_addSeverDataDatas(value: any): void;
        /***
         * 删除一条SeverData
         */
        ExcelManager_removeSeverDataData(id: any): void;
        /***
         * 通过ID获取TimeEvent数据
         */
        ExcelManager_TimeEventDataById(id: any): void;
        /***
         * 获取全部TimeEvent数据
         */
        ExcelManager_TimeEventDataGetAll(): void;
        /***
         * 通过ID数组获取多条TimeEvent数据
         */
        ExcelManager_TimeEventDataByIds(ids: any): void;
        /***
         * 修改单TimeEvent数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyTimeEventDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个TimeEvent数据
         */
        ExcelManager_addTimeEventData(value: any): void;
        /***
         * 添加TimeEvent数组数据
         */
        ExcelManager_addTimeEventDatas(value: any): void;
        /***
         * 删除一条TimeEvent
         */
        ExcelManager_removeTimeEventData(id: any): void;
        /***
         * 通过ID获取ArrangementData数据
         */
        ExcelManager_ArrangementDataDataById(id: any): void;
        /***
         * 获取全部ArrangementData数据
         */
        ExcelManager_ArrangementDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条ArrangementData数据
         */
        ExcelManager_ArrangementDataDataByIds(ids: any): void;
        /***
         * 修改单ArrangementData数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyArrangementDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ArrangementData数据
         */
        ExcelManager_addArrangementDataData(value: any): void;
        /***
         * 添加ArrangementData数组数据
         */
        ExcelManager_addArrangementDataDatas(value: any): void;
        /***
         * 删除一条ArrangementData
         */
        ExcelManager_removeArrangementDataData(id: any): void;
        /***
         * 通过ID获取EquipBase数据
         */
        ExcelManager_EquipBaseDataById(id: any): void;
        /***
         * 获取全部EquipBase数据
         */
        ExcelManager_EquipBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipBase数据
         */
        ExcelManager_EquipBaseDataByIds(ids: any): void;
        /***
         * 修改单EquipBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyEquipBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipBase数据
         */
        ExcelManager_addEquipBaseData(value: any): void;
        /***
         * 添加EquipBase数组数据
         */
        ExcelManager_addEquipBaseDatas(value: any): void;
        /***
         * 删除一条EquipBase
         */
        ExcelManager_removeEquipBaseData(id: any): void;
        /***
         * 通过ID获取EquipDate数据
         */
        ExcelManager_EquipDateDataById(id: any): void;
        /***
         * 获取全部EquipDate数据
         */
        ExcelManager_EquipDateDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipDate数据
         */
        ExcelManager_EquipDateDataByIds(ids: any): void;
        /***
         * 修改单EquipDate数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyEquipDateDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipDate数据
         */
        ExcelManager_addEquipDateData(value: any): void;
        /***
         * 添加EquipDate数组数据
         */
        ExcelManager_addEquipDateDatas(value: any): void;
        /***
         * 删除一条EquipDate
         */
        ExcelManager_removeEquipDateData(id: any): void;
        /***
         * 通过ID获取EquipEffectBase数据
         */
        ExcelManager_EquipEffectBaseDataById(id: any): void;
        /***
         * 获取全部EquipEffectBase数据
         */
        ExcelManager_EquipEffectBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipEffectBase数据
         */
        ExcelManager_EquipEffectBaseDataByIds(ids: any): void;
        /***
         * 修改单EquipEffectBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyEquipEffectBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipEffectBase数据
         */
        ExcelManager_addEquipEffectBaseData(value: any): void;
        /***
         * 添加EquipEffectBase数组数据
         */
        ExcelManager_addEquipEffectBaseDatas(value: any): void;
        /***
         * 删除一条EquipEffectBase
         */
        ExcelManager_removeEquipEffectBaseData(id: any): void;
        /***
         * 通过ID获取EquipExpBase数据
         */
        ExcelManager_EquipExpBaseDataById(id: any): void;
        /***
         * 获取全部EquipExpBase数据
         */
        ExcelManager_EquipExpBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipExpBase数据
         */
        ExcelManager_EquipExpBaseDataByIds(ids: any): void;
        /***
         * 修改单EquipExpBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyEquipExpBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipExpBase数据
         */
        ExcelManager_addEquipExpBaseData(value: any): void;
        /***
         * 添加EquipExpBase数组数据
         */
        ExcelManager_addEquipExpBaseDatas(value: any): void;
        /***
         * 删除一条EquipExpBase
         */
        ExcelManager_removeEquipExpBaseData(id: any): void;
        /***
         * 通过ID获取GameArchiveData数据
         */
        ExcelManager_GameArchiveDataDataById(id: any): void;
        /***
         * 获取全部GameArchiveData数据
         */
        ExcelManager_GameArchiveDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条GameArchiveData数据
         */
        ExcelManager_GameArchiveDataDataByIds(ids: any): void;
        /***
         * 修改单GameArchiveData数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyGameArchiveDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个GameArchiveData数据
         */
        ExcelManager_addGameArchiveDataData(value: any): void;
        /***
         * 添加GameArchiveData数组数据
         */
        ExcelManager_addGameArchiveDataDatas(value: any): void;
        /***
         * 删除一条GameArchiveData
         */
        ExcelManager_removeGameArchiveDataData(id: any): void;
        /***
         * 通过ID获取ItemBase数据
         */
        ExcelManager_ItemBaseDataById(id: any): void;
        /***
         * 获取全部ItemBase数据
         */
        ExcelManager_ItemBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条ItemBase数据
         */
        ExcelManager_ItemBaseDataByIds(ids: any): void;
        /***
         * 修改单ItemBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyItemBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ItemBase数据
         */
        ExcelManager_addItemBaseData(value: any): void;
        /***
         * 添加ItemBase数组数据
         */
        ExcelManager_addItemBaseDatas(value: any): void;
        /***
         * 删除一条ItemBase
         */
        ExcelManager_removeItemBaseData(id: any): void;
        /***
         * 通过ID获取ItemData数据
         */
        ExcelManager_ItemDataDataById(id: any): void;
        /***
         * 获取全部ItemData数据
         */
        ExcelManager_ItemDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条ItemData数据
         */
        ExcelManager_ItemDataDataByIds(ids: any): void;
        /***
         * 修改单ItemData数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyItemDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ItemData数据
         */
        ExcelManager_addItemDataData(value: any): void;
        /***
         * 添加ItemData数组数据
         */
        ExcelManager_addItemDataDatas(value: any): void;
        /***
         * 删除一条ItemData
         */
        ExcelManager_removeItemDataData(id: any): void;
        /***
         * 通过ID获取LevelBase数据
         */
        ExcelManager_LevelBaseDataById(id: any): void;
        /***
         * 获取全部LevelBase数据
         */
        ExcelManager_LevelBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条LevelBase数据
         */
        ExcelManager_LevelBaseDataByIds(ids: any): void;
        /***
         * 修改单LevelBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyLevelBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个LevelBase数据
         */
        ExcelManager_addLevelBaseData(value: any): void;
        /***
         * 添加LevelBase数组数据
         */
        ExcelManager_addLevelBaseDatas(value: any): void;
        /***
         * 删除一条LevelBase
         */
        ExcelManager_removeLevelBaseData(id: any): void;
        /***
         * 通过ID获取RoleBase数据
         */
        ExcelManager_RoleBaseDataById(id: any): void;
        /***
         * 获取全部RoleBase数据
         */
        ExcelManager_RoleBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条RoleBase数据
         */
        ExcelManager_RoleBaseDataByIds(ids: any): void;
        /***
         * 修改单RoleBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyRoleBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个RoleBase数据
         */
        ExcelManager_addRoleBaseData(value: any): void;
        /***
         * 添加RoleBase数组数据
         */
        ExcelManager_addRoleBaseDatas(value: any): void;
        /***
         * 删除一条RoleBase
         */
        ExcelManager_removeRoleBaseData(id: any): void;
        /***
         * 通过ID获取RoleData数据
         */
        ExcelManager_RoleDataDataById(id: any): void;
        /***
         * 获取全部RoleData数据
         */
        ExcelManager_RoleDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条RoleData数据
         */
        ExcelManager_RoleDataDataByIds(ids: any): void;
        /***
         * 修改单RoleData数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifyRoleDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个RoleData数据
         */
        ExcelManager_addRoleDataData(value: any): void;
        /***
         * 添加RoleData数组数据
         */
        ExcelManager_addRoleDataDatas(value: any): void;
        /***
         * 删除一条RoleData
         */
        ExcelManager_removeRoleDataData(id: any): void;
        /***
         * 通过ID获取SkinBase数据
         */
        ExcelManager_SkinBaseDataById(id: any): void;
        /***
         * 获取全部SkinBase数据
         */
        ExcelManager_SkinBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条SkinBase数据
         */
        ExcelManager_SkinBaseDataByIds(ids: any): void;
        /***
         * 修改单SkinBase数组的指定属性，propertyName：属性名，value：值
         */
        ExcelManager_modifySkinBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个SkinBase数据
         */
        ExcelManager_addSkinBaseData(value: any): void;
        /***
         * 添加SkinBase数组数据
         */
        ExcelManager_addSkinBaseDatas(value: any): void;
        /***
         * 删除一条SkinBase
         */
        ExcelManager_removeSkinBaseData(id: any): void;
        /***
         * 通过ID获取test数据
         */
        ExcelManager_testDataById(id: any): void;
        /***
         * 记录客户端异常消息
         */
        ErrorInfoManager_CreateErrorInfo(message: any, modelType: any): void;
        /***
         * callService
         */
        FrontDataManager_callService(className: any, funcName: any, args: any): void;
        /***
         * callFunc
         */
        FrontDataManager_callFunc(tableName: any, funcName: any, args: any): void;
        /***
         * 获取LevelBase配置数据
         */
        GameArchiveManager_getLevelBase(): void;
        /***
         * 获取SkinBase配置数据
         */
        GameArchiveManager_getSkinBase(): void;
        /***
         * 玩家登录,userId:玩家ID,passWord:密码
         */
        LoginManager_loginWithOutWallet(userId: any, passWord: any): void;
        /***
         * 切换账号
         */
        LoginManager_switchLogin(): void;
        /***
         * 修改服务器时间,count：时间便宜量，单位秒
         */
        ServerManager_timePlus(count: any): void;
        /***
         * 心跳检测
         */
        ServerManager_heartBeat(): void;
        /***
         * 延迟检测
         */
        ServerManager_ping(): void;
        /***
         * 获取服务器时间
         */
        ServerManager_servertime(): void;
    }
}
declare module "AutoCode/Net/ClientRequest/LoginManagerRequest" {
    export class LoginManagerRequest {
        static get Instance(): LoginManagerRequest;
        private static _instance;
        /***
         * 玩家登录,userId:玩家ID,passWord:密码
         */
        loginWithOutWallet(userId: any, passWord: any): void;
        /***
         * 切换账号
         */
        switchLogin(): void;
    }
}
declare module "AutoCode/Net/ClientRequest/ServerManagerRequest" {
    export class ServerManagerRequest {
        static get Instance(): ServerManagerRequest;
        private static _instance;
        /***
         * 修改服务器时间,count：时间便宜量，单位秒
         */
        timePlus(count: any): void;
        /***
         * 心跳检测
         */
        heartBeat(): void;
        /***
         * 延迟检测
         */
        ping(): void;
        /***
         * 获取服务器时间
         */
        servertime(): void;
    }
}
declare module "Inputer" {
    export class Inputer {
        static init(): void;
        private static click;
        private static lastPoint_x;
        private static isDonw;
        private static onDown;
        private static onUp;
        private static onMove;
        static onHorizTouch: (delta: number) => {};
    }
}
declare module "Loader/idleLoadMgr" {
    export class idleLoadMgr {
        private static loadList;
        static init(): void;
        private static addToList;
        private static start;
        private static gapTime;
        private static count;
        private static loop;
        private static loadEnd;
        private static loadNext;
        private static onloaded;
    }
}
declare module "ui/launchPageHandle" {
    import { uiPage } from "ui/base/uiPage";
    export class launchPageHandle extends uiPage {
        pergress: m4m.framework.progressbar;
        login: m4m.framework.button;
        s: m4m.framework.transform2D;
        private startPos;
        private opt;
        onPlay(): void;
        initY: number;
        carY: number;
        isup: boolean;
        disY: number;
        speed: number;
        private FastLoadTime;
        loadCount: number;
        private fastRate;
        update(delta: number): void;
        private pergressAnim;
        private sliderSpeed;
        private sliderRange;
        private tp;
        private sliderAnimation;
        private tween;
        remove(): void;
    }
}
declare module "ui/pages/launchPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { launchPageHandle } from "ui/launchPageHandle";
    export class launchPage implements IPageBase {
        private static _instance;
        static get Instance(): launchPage;
        handle: launchPageHandle;
        private inited;
        private init;
        static inLoadend: boolean;
        private static endCallBack;
        /** 加载完成回调 */
        static onLoadend(): m4m.threading.gdPromise<unknown>;
        private static endFun;
        private static wxAuthOk;
        private static ckWxAuthorization;
        show(): void;
        hide(): void;
    }
}
declare module "loadingUIMgr" {
    export class loadingUIMgr {
        private static root;
        static assetmgr: m4m.framework.assetMgr;
        static launch_page: m4m.framework.prefab;
        static init(): void;
        static hide(): void;
    }
}
declare module "Manager/UIOpenOrHideManager" {
    export class UIOpenOrHideManager {
        static get Instance(): UIOpenOrHideManager;
        static needShowLoading: boolean;
        static neeshowwloaidn: boolean;
        _showRoomEuler: number;
        touchPadTran: m4m.framework.transform2D;
        roleId: number;
        nextOpenUiName: string;
        /**设置矿洞页面 */
        cavePageNumber: number;
        init(): void;
        private static _instance;
        private uiloadingCanShow;
    }
}
declare module "AutoCode/Net/DataEvents/UserDataBaseEvent" {
    export class UserDataBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 用户uid*/
        static id: string;
        /** 用户名*/
        static playerName: string;
        /** token*/
        static token: string;
        /** 密码*/
        static passWord: string;
        /** 账号状态*/
        static status: string;
        /** 持有货币*/
        static currency: string;
        /** 是否屏蔽*/
        static isBlock: string;
        /** 是否记录*/
        static isLogUser: string;
        /** 登录时间*/
        static loginTime: string;
        /** 第三方账号*/
        static thirdPartyAccount: string;
        /** 服务器渠道*/
        static serverChannel: string;
        /** 账号权限*/
        static accountAccess: string;
        /** 黑名单*/
        static blacklist: string;
        /** 玩家姓名*/
        static frinedName: string;
        /** 玩家头像*/
        static icon: string;
        /** 游戏存档*/
        static GameArchive: string;
    }
}
declare module "Manager/UserDataManager" {
    export class UserDataManager {
        static get Instance(): UserDataManager;
        private static _instance;
        init(): void;
        userInfoFun(data: any): void;
    }
}
declare module "Manager/GameDataEventInitManager" {
    export class GameDataEventInitManager {
        static init(): void;
    }
}
declare module "Core/StageMgr" {
    export class StageMgr {
        static get PlayerGUID(): string;
        static init(): void;
        private static serverConnect;
        private static resCom;
        /**已连接上服务器 */
        static serverConnected(): void;
        /**资源加载完毕 可登录 */
        private static resComFun;
        static defToken: string;
        private static enterLogin;
        static isLevelBase: boolean;
        static isSkinBase: boolean;
        static isMainBase: boolean;
        static isThemeBase: boolean;
        static enterBase(): void;
        static onLoginServerSuccess(): void;
        private static _playerGUID;
    }
}
declare module "Manager/TipsManager" {
    export class TipsManager {
        static get Instance(): TipsManager;
        static descTips: string;
        static tipsbool: boolean;
        private static _instance;
        static ShowTips(desc: string, bool?: boolean): void;
    }
}
declare module "Net/PingTimeManager" {
    /**
     * 网络品质类型
     */
    export enum NetworkQualityType {
        height = 1,
        middle = 2,
        low = 3
    }
    export class PingTimeManager {
        static get Instance(): PingTimeManager;
        /**
         * 网络延迟时间  毫秒
         * */
        timeQualityNum: number;
        constructor();
        private static _instance;
        private pingtimeStart;
        getNetworkQuality(): NetworkQualityType;
        pingTimeFun(): void;
        serverBackFun(): void;
        private updateFun;
    }
}
declare module "Net/NetWebsocket" {
    export class NetWebscoket {
        static get Instance(): NetWebscoket;
        /**********是否需要请求 配置数据***********
        */
        static reqconfigMes: boolean;
        fuck: string;
        private static _instance;
        private _webscoket;
        private _connected;
        connect(url: string): void;
        onmessage(e: any): void;
        sendMessage(buff: Uint8Array): void;
        onopen(e: any): void;
        send(bytes: Uint8Array): void;
        sendStr(mess: string): void;
        onclose(e: any): void;
        onerror(e: any): void;
        private onmessageHandler;
        private Close;
    }
}
declare module "AutoCode/Net/ClientRequest/GameArchiveManagerRequest" {
    export class GameArchiveManagerRequest {
        static get Instance(): GameArchiveManagerRequest;
        private static _instance;
        /***
         * 获取LevelBase配置数据
         */
        getLevelBase(): void;
        /***
         * 获取SkinBase配置数据
         */
        getSkinBase(): void;
        /***
         * 获取MainBase配置数据
         */
        getMainBase(): void;
        /***
         * 获取ThemeBase配置数据
         */
        getThemeBase(): void;
        /***
         * 创建存档
         */
        CreateArchive(): void;
        /***
         * 选择存档
         */
        SelectArchive(archiveID: any): void;
        /***
         * 注册NFT
         */
        LogonNft(archiveID: any): void;
        /***
         * 切换皮肤
         */
        SwitchSkin(archiveID: any, skinID: any): void;
        /***
         * 修改该存档的关卡
         */
        updataGame(archiveID: any, levelID: any): void;
        /**
         * 修改存档使用者
         */
        M4MNftAddGame(skinNameDic: any): void;
        M4MNFTAddUploadIpfs(ipfsDic: any): void;
        /***
         * 添加数据
         */
        UploadData(imageName: any, url: any, model: any, Ipfsimage: any, Ipfsmodel: any): void;
        /**
         *查询上传到Ipfs数据
         */
        selectData(image: any): void;
        /**
         * 修改本地路径资源数据
         */
        updateData(image: any, resUrl: any): void;
        /**
         * 修改上传到ipfs资源路径
         */
        updateIpfsData(image: any, resUrl: any): void;
    }
}
declare module "Core/blockchain/ConnectWalletManager" {
    import { cMap } from "Data/Map";
    export const M4M_NFT_ID = "m4m-nft";
    export const M4M_COMPONENT_ID = "m4m-components";
    export const ZipContract = "0x757464676A09b46fE522B8d2A1413371E317e089";
    export const M4mNFTRegistry = "0xc9d7d33f679000d7621ea381569259eb599ab1c4";
    export const VersionManager = "0xd8b1FB6c7f7A2d3Ed5CECF87cBa516c245f3BbAf";
    export const m4mDAO = "0x38cd1db1b3eafee726f790470bd675d2d7850a86";
    export const m4mNFT = "0xfa860d48571fa0d19324cbde77e0fbdfdffb0a47";
    export const m4mComponent = "0xb6bb4812a8e075cbad0128e318203553c4ca463d";
    export class ConnectWalletManager {
        static get Instance(): ConnectWalletManager;
        address: any;
        private static _instance;
        private M4M_SDK;
        private axios;
        private wallet;
        private M4MComponentsCmap;
        constructor();
        onAccountsChanged(accounts: any): void;
        logineg(): Promise<void>;
        onChainChanged(chainId: any): void;
        onDisconnect(error: any): void;
        onError(error: any): void;
        destroy(): Promise<void>;
        IsMetaMaskLinked(): Promise<boolean>;
        loginAccount(callBackFun: Function): void;
        claimLoot(componentids: any, componentNums: any, backendSig: any, fun: Function): void;
        /**获取M4M-Components */
        getM4MComponents(index: number): Promise<cMap<cMap<CollectionNFT>>>;
        fetchUserCollectionNFTs(collection_id: any, index: any): Promise<IGetCollectionNFTsData>;
        /**请求nft数组 */
        getCollectionNFTs(data: IGetCollectionNFTsParams): Promise<IGetCollectionNFTsData>;
        judgeNFT(data: any): void;
    }
    export interface IGetIpfsParams {
        prev: string;
        url: string;
    }
    export enum ENUM_CHAIN_NAME {
        CHAIN_NAME_MAINNET = "mainnet",
        CHAIN_NAME_POLYGON = "polygon",
        CHAIN_NAME_RINKEBY = "rinkeby",
        CHAIN_NAME_MUMBAI = "mumbai"
    }
    export interface IBindMetadataParams {
        chain_name: ENUM_CHAIN_NAME;
        m4m_token_id: string;
        description: string;
        name: string;
        uri: string;
    }
    export interface IpareComponentParams {
        prev: string;
        Id: string;
        desc: string;
        itemName: string;
        symbol: string;
        rolePartName: string;
        tokenid: string;
        address: string;
        pictureRes: string;
        imageBase64: string;
        keybool: any;
    }
    export interface IGetCollectionNFTsParams {
        collection_id: string;
        chain_name: string;
        addr: string;
        page?: number;
        gap?: number;
    }
    export interface CollectionNFT {
        contract: string;
        erc: string;
        token_id: string;
        amount: string;
        uri: string;
        data: any;
        owner: string;
    }
    export interface IGetCollectionNFTsData {
        collection_id: string;
        collection_name: string;
        collection_img: string;
        total: number;
        data: CollectionNFT[];
    }
}
declare module "Data/BindKeyName" {
    export class BindKeyName {
        static clickSlide: string;
        static skinImage: string;
        static skinBtnVisible: string;
    }
}
declare module "Net/SDKWebsocket" {
    export class SDKWebsocket {
        static get Instance(): SDKWebsocket;
        /**********是否需要请求 配置数据***********
        */
        static reqconfigMes: boolean;
        private static _instance;
        private _webscoket;
        connect(url: string): void;
        onmessage(e: MessageEvent): Promise<void>;
        sendMessage(buff: Uint8Array): void;
        onopen(e: any): void;
        send(bytes: Uint8Array): void;
        sendStr(mess: any): void;
        onclose(e: any): void;
        onerror(e: any): void;
        private Close;
    }
}
declare module "Net/SDKWebsokectTool" {
    import { IBindMetadataParams, IpareComponentParams } from "Core/blockchain/ConnectWalletManager";
    export class SDKWebsokectTool {
        static get Instance(): SDKWebsokectTool;
        private static _instance;
        getMsg(className: any, functionName: any, text: any): string;
        /***
         * 发送消息 type:消息类型，comp:阵营，quality,content:内容,username:名字
         */
        SDKManager_testprepareComponent(parma: IpareComponentParams): void;
        IPFSManager_IPFSImageJsonData(fileUrl: any): void;
        IPFSManager_IPFSJsondata(fileUrl: any): void;
        SDKManager_axiaosData(parma: IBindMetadataParams): void;
        SDKManager_RenewComponentData(parma: IpareComponentParams): void;
    }
}
declare module "Manager/ViewModeChangeMgr" {
    export enum ViewModeType {
        /** 普通视角 */
        Normal = 0,
        /** 换装视角 */
        PartChange = 1
    }
    /** 视角选项 */
    export type ViewOpt = {
        /** 相机 距离 */
        camDist?: number;
        /** 相机 FOV */
        camFOV?: number;
        /** 相机 Y轴偏移点 */
        camYOffset?: number;
    };
    /** 视角模式切换 管理器 */
    export class ViewModeChangeMgr {
        private static readonly helpV3;
        private static currMode;
        private static viewOptMap;
        static Init(): void;
        /**
         * 设置指定模式的 选项
         * @param mode view模式
         * @param opt 选项数据
         */
        static setViewOpt(mode: ViewModeType, opt: ViewOpt): void;
        /**
         * 模式改变
         * @param mode 视角模式
         * @param vOpt 强行指定选项
         */
        static change(mode: ViewModeType, vOpt?: ViewOpt): void;
        private static calcaFrontPAngle;
        private static capNormalOpt;
    }
}
declare module "Manager/PhotoSceneManager" {
    export class PhotoSceneManager {
        static get Instance(): PhotoSceneManager;
        private static _instance;
        private static sShotCuttingX;
        private static sShotCuttingY;
        private static sShotCuttingW;
        private static sShotCuttingH;
        private static b64Str;
        static PartBOOL: boolean;
        /**
         *设置相机模式
         * @static
         * @memberof ShowroomUIManager
         */
        static PartChange(): void;
        /**
         *
         *截图
         * @static
         * @static
         * @memberof PhotoSceneManager
         */
        static ChangeScen(): void;
        /**
         *转为普通模式
         * @static
         * @memberof ShowroomUIManager
         */
        static Normal(): void;
        /**
         *显示隐藏天空盒
         *
         * @static
         * @param {boolean} v
         * @memberof ShowroomUIManager
         */
        static ShowSkyBox(v: boolean): void;
        /**
         *显示隐藏场景
         * @static
         * @param {boolean} val
         * @memberof ShowroomUIManager
         */
        static sceneVisible(val: boolean): void;
        /**
         * 是否显示3D对象
         * @param v 是否显示3D对象
         */
        static Trans3DVisible(v: boolean): void;
        /**
         *截图
         * @static
         * @memberof ShowroomUIManager
         */
        static screenshot(): void;
        /**
         * 下载截图
         * @static
         * @memberof ShowroomUIManager
         */
        static downloadIamge(): void;
        /**
         * 初始化3D对象
         * @returns
         */
        static Trans3D: m4m.framework.transform;
        static createPrimitive(): m4m.framework.transform;
    }
}
declare module "Manager/GameArchiveManager" {
    import { GameArchiveData } from "GameArchiveData";
    import { UploadIpfsData } from "UploadIpfsData";
    export class GameArchiveManager {
        static get Instance(): GameArchiveManager;
        isArchive: boolean;
        GameArchiveData: GameArchiveData;
        isLevel: number;
        private static _instance;
        init(): void;
        levelFunbind(data: any): void;
        skinFunbind(data: any): void;
        mainFunbind(data: any): void;
        themeFunbind(data: any): void;
        gameArchiveFunbind(data: any): void;
        baseDataFun(data: any): void;
        ism4mNFTFun(data: any): void;
        CurrentlevelFun(data: any): void;
        UploadIpfsFun(data: UploadIpfsData): void;
    }
}
declare module "stageMgr" {
    import { CameraFollowCtrBR } from "CameraFollowCtr";
    import { level } from "levelMgr";
    export class stageMgr {
        static camCtr: CameraFollowCtrBR;
        private static camLpos;
        private static readonly camBaseYg;
        static scene: m4m.framework.scene;
        private static pRole;
        static stageRoot: m4m.framework.transform;
        static visibleRobotNum: number;
        static preInit(): void;
        static inited: boolean;
        static init(): void;
        private static cam_Light_Init;
        private static readonly waitTime;
        private static waitCount;
        private static waitlateBeginRace;
        private static raceStartTime;
        static onPlayerStep(step: number): void;
        static replay(): void;
        static update(delta: number): void;
        static currentLevel: level;
        static selectLevel(index: number): void;
        static backTrackMovement: m4m.math.vector3;
        static backTrack(delta: number): void;
        static tracingDistance: number;
        static tracingVec: m4m.math.vector3;
        static tracingTime: number;
        static backTrackPlay(): void;
        static ballEntryOffset: number;
        static ballEntrytimer: number;
        static ballEntrySpeed: number;
        static ballEntry(delta: number): void;
        static ballEntryPlay(): void;
        private static runLevel;
        static reState(): void;
        private static needFristUpd;
        private static ckTimeLen;
        private static fCkCount;
        private static homePageFristIcon;
        private static tryShowFristIcon;
        static gameOverConsole(): void;
        /** 获取分数 通过 关卡和 排名 信息 */
        static getScore(level: number, ranking: number): number;
        static settlement(level: number, ranking: number): void;
        private static _rankingSort;
        private static cacheIngamePage;
        private static rankRefTime;
        private static rankRefCount;
        private static lastPRank;
        static rankingCache: any[];
        static rankingCalculate(d: number): void;
        private static readonly frontTag;
        private static robotUpdate;
        private static AI;
        private static ckRobotInvisible;
        private static ckRobotInvisibleAll;
        private static r_front;
        private static r_back;
        private static ckHasInActRange;
        private static robotInRange;
        private static ckRobotOnFront;
        private static robotCKCollision;
        private static late_low_z;
        private static cacheFun;
        private static downCam;
        private static reUpcam;
        /**
         * 检查角色的碰撞
         * 0：没碰到 、1:死亡 、2：坡道 、4：加速带 8：钻石
         */
        private static CKRoleCollision;
        static dieRanking: number;
        static gameDiamond: number;
        /** 玩家 碰撞检测*/
        static playerCollision(): void;
        static closeHeadFollow(): void;
        /**
         * 播放完特效后
         */
        static playCall(): void;
        static levelComplete(): void;
        private static fx_gx;
        private static fx_sl;
        private static playCPLevelFx;
        /** 隐藏通关特效 */
        static hideCPLevelFx(): void;
        static dataTracing(chunk: any): void;
    }
}
declare module "role/roleHandle" {
    export class roleHandle extends m4m.framework.behaviour {
        static funVibrateShort: Function;
        isPlayer: boolean;
        ball: m4m.framework.transform;
        realBall: m4m.framework.transform;
        raelSpeed: number;
        private readonly edge_w;
        private readonly edge_h;
        currSpeed: number;
        stop: boolean;
        private _stepNum;
        lowMode: boolean;
        get stepNum(): number;
        onStepCg: (step: number) => any;
        lastObs: number;
        onPlay(): void;
        static headSteepNum: number;
        static tailSteepNum: number;
        private readonly ckCD;
        private ckDcount;
        private isCooling;
        private lastLowMode;
        private ckDropout;
        private tryBeyond;
        /** 已经掉队 */
        isDropout: boolean;
        private doDropout;
        /** 关闭更新 */
        closeUpdate(): void;
        update(delta: number): void;
        initstate(): void;
        private H_MovingLimit;
        private targetSpeed;
        private timeRemain;
        private lastRandomMission;
        setAim(pos: number, timeScale?: number): void;
        private moveToTarget;
        private randomMission;
        private befSlowSpeed;
        private _isSlowing;
        /** 减速 到停止*/
        doSlowing(): void;
        get isSlowing(): boolean;
        /** 减速恢复到正常 */
        slowReNormal(): void;
        private slowS;
        /** 减速 结束 */
        onSlowEnd: Function;
        private ckSlowing;
        /** 检查 步阶的变化 ，一小条路面为一步 */
        private ckStep;
        private horizV;
        horizMove(xLen: number): void;
        /** 行走奔跑 */
        private run;
        /** 基础的行走 */
        baseRun(delta: number): void;
        private eular;
        private rolling;
        private edgeLength;
        private getRollingAngleFromDistance;
        private isJumping;
        jump(): void;
        private g;
        private v;
        private baseHeight;
        private jumped;
        private riseTime;
        private vCost;
        private energy;
        private jumping;
        private boom;
        onRealSpeed: (dist: number, offset: number) => any;
        onBoostLevelCg: (level: number) => any;
        private readonly stepSpeed;
        private boostNum;
        private boostSpeed;
        boost(): void;
        private addTime;
        private ckAttenuation;
        remove(): void;
    }
}
declare module "lab/Trailer" {
    export class Trailer extends m4m.framework.behaviour {
        static LateUpdateMgr: any;
        private texName;
        mat: m4m.framework.material;
        private rePlay;
        private trailrender;
        private isOnplay;
        private Cupdate;
        onPlay(): void;
        play(): void;
        stop(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "role/role" {
    import { roleHandle } from "role/roleHandle";
    import { roleData } from "role/roleData";
    import { Trailer } from "lab/Trailer";
    export class role {
        godMode: boolean;
        roleD: roleData;
        lastBoost_z: number;
        lastDiamond_z: number;
        root: roleHandle;
        ball: m4m.framework.transform;
        instance: m4m.framework.transform;
        mat: m4m.framework.material;
        taril: Trailer;
        boomFx: m4m.framework.f14EffectSystem;
        godFx: m4m.framework.f14EffectSystem;
        shadow: m4m.framework.transform;
        rankingLable: m4m.framework.label;
        private _rankNum;
        /** 当前名次 */
        get rankNum(): number;
        mr: m4m.framework.meshRenderer;
        private static tempRoleID;
        constructor(mat: m4m.framework.material, data: roleData);
        private onThouchGround;
        private lastRank;
        /** 设置 排名名次 */
        setRank(rank: number): void;
        private lastCgSkinId;
        changeSkin(skinId: any): void;
        initState(): void;
        die(): void;
        recover(): void;
        /** 复活 */
        relive(): void;
        /** 减速到0 */
        toSlowdown(): void;
        /** 减速恢复正常 */
        slowReNormal(): void;
        toStop(): void;
        sensor: m4m.framework.transform;
        AIisEnabled: boolean;
        initialAI(): void;
        private adjustHeadIconPos;
        private openHeadFollow;
        private iconMap;
        private lastIconUrl;
        private loadPasserbyIcon;
        static isOpenFollow: boolean;
        private testOnce;
        private readonly ckLimitDis;
        private readonly offsetHead;
        lastFollowed: boolean;
        /** 好友头像更随*/
        ckHeadIconFollow(delta: number): void;
        /** 检查能否跟随 */
        private ckCanFollow;
        private readonly DIST;
        private calcWPosToDistort;
        private lastSV;
        /** 设置渲染显示 */
        setVisible(isVisible: boolean): void;
    }
}
declare module "Scripts/windHandle" {
    export class windHandle extends m4m.framework.behaviour {
        static mat: m4m.framework.material;
        private static scene;
        private runingArr;
        stop: boolean;
        boostlevel: number;
        onPlay(): void;
        private playlist;
        private readonly zLen;
        private readonly tag_x;
        private readonly tag_y;
        private setOne;
        private clearList;
        private readonly speed;
        update(delta: number): void;
        private moveAndDel;
        private ckPlay;
        private gCount;
        private gSpeed;
        private ckGenline;
        remove(): void;
        private static genLineOne;
        private static poolArr;
        private static new_one;
        private static delete_one;
    }
}
declare module "role/playerMgr" {
    import { role } from "role/role";
    export class playerMgr {
        static get RoleSpeed(): number;
        static reached: boolean;
        private static moveSpeed;
        private static _role;
        private static wind;
        static getRole(): role;
        private static fx_js;
        static preInit(): void;
        static init(): void;
        static changeTheme(): void;
        /** 改皮肤 */
        static changeSkin(skinId: number): void;
        private static raceStartTime;
        static racePlay(): void;
        private static cacheIngamePage;
        private static raceTime;
        static getRaceTime(): number;
        private static palyerInfoUpd;
        static initState(): void;
        private static sacle;
        private static onHorizTouch;
        static regStepBC(callBack: (step: number) => any): void;
        private static dieCount;
        static toDie(): void;
        static toJump(): void;
        static toBoost(): void;
        private static onBoostLevelCg;
        static toRaceCount: number;
        /** 复活 */
        static relive(): void;
        private static lastRank;
        /** 检查自己超越 其他对手*/
        static ckOverOpponent(rank: number, opponent: role): void;
        private static onSlowend;
        private static random;
    }
}
declare module "ui/codePageHandle" {
    import { uiPop } from "ui/base/uiPage";
    export class codePageHandle extends uiPop {
        close: m4m.framework.button;
        img: m4m.framework.rawImage2D;
        save: m4m.framework.button;
        bt: m4m.framework.button;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/pages/codePage" {
    import { codePageHandle } from "ui/codePageHandle";
    export class codePage {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<codePage>;
        handle: codePageHandle;
        private inited;
        private init;
        /**
     * 加载外部图片
     *  @param rwaImg 需要加载外部图片的组件
     *  @param  src 外部图片地址
     */
        private loadRwaImg2D;
        /**
       * 关闭
       */
        private onCloseClick;
        /**
          * 保存
          */
        private onSavaClick;
        show(): void;
        hide(): void;
    }
}
declare module "ui/rankPageHandle" {
    import { uiPage } from "ui/base/uiPage";
    export class rankPageHandle extends uiPage {
        per: m4m.framework.button;
        next: m4m.framework.button;
        share: m4m.framework.button;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/pages/rankPag" {
    import { IPageBase } from "ui/base/uiPage";
    import { rankPageHandle } from "ui/rankPageHandle";
    export class rankPag implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<rankPag>;
        handle: rankPageHandle;
        private inited;
        private init;
        /**
         * 分享
         */
        private onShareClick;
        /**
         * 下一页
         */
        private onNextClick;
        /**
         * 上一页
         */
        private onPerClick;
        hide(): void;
        show(): void;
    }
}
declare module "ui/newYearPageHandle" {
    import { uiPop } from "ui/base/uiPage";
    export class newYearPageHandle extends uiPop {
        bt: m4m.framework.button;
        close: m4m.framework.button;
        title: m4m.framework.image2D;
        title2: m4m.framework.image2D;
        state: m4m.framework.image2D;
        friend: m4m.framework.rawImage2D;
        skin: m4m.framework.rawImage2D;
        theme: m4m.framework.rawImage2D;
        invite: m4m.framework.button;
        againInvite: m4m.framework.button;
        use: m4m.framework.button;
        countDown: m4m.framework.label;
        info2: m4m.framework.transform2D;
        give: m4m.framework.button;
        againGive: m4m.framework.button;
        onPlay(): void;
        onUpdate: (d: number) => any;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/pages/newYearPage" {
    import { IPageBase } from "ui/base/uiPage";
    import { newYearPageHandle } from "ui/newYearPageHandle";
    export class newYearPage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<newYearPage>;
        handle: newYearPageHandle;
        private inited;
        private init;
        private onUpdate;
        private readonly cd;
        private cdCount;
        private countDown;
        /**
         * 关闭
         */
        private onCloseClick;
        /**
         *  新年邀请
         */
        onInviteClick(): void;
        private onInvite;
        onUse(): void;
        Pageurl: string;
        prize(info: any): void;
        setShowBT(invite: boolean, againInvite: boolean, use: boolean, give: boolean, againGive: boolean): void;
        /**
          * 加载外部图片
          *  @param rwaImg 需要加载外部图片的组件0
          */
        loadRwaImg2D(rwaImg: m4m.framework.rawImage2D, src: string): void;
        show(): void;
        hide(): void;
    }
}
declare module "ui/pages/homePage" {
    import { IPageBase } from "ui/base/uiPage";
    import { homePageHandle } from "ui/homePageHandle";
    import { newYearPage } from "ui/pages/newYearPage";
    export class homePage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<homePage>;
        handle: homePageHandle;
        private animation;
        static cacheNewYearPage: newYearPage;
        private inited;
        private init;
        private update;
        private timeRefresh;
        private c_Time_R;
        private ckShareLs;
        pigSkinAndTheme(): void;
        inviteAwardShow(d: number): void;
        private static cache_d;
        private static cache_h;
        private static cache_m;
        private static CDText;
        static getNewYearCDText(): string;
        static getNewYearCDText_minute(): string;
        private static day;
        private static h;
        private static m;
        private readonly cd;
        private cdCount;
        private countDown;
        /**
         * 邀请按钮click事件
         */
        onInviteClick(): void;
        /**
         * 打开二维码按钮click事件
         */
        onCodeclick(): void;
        /**
         * 排行榜按钮click事件
         */
        onRankClick(): void;
        /**
         * 皮肤按钮click事件
         */
        onSkinClick(): void;
        /**
         * 音乐按钮click事件
         */
        onMusiclick(): void;
        /**
         * 新春
         */
        onNerYearClick([ev]: [any]): void;
        /**
         *  剩余可以用邀请人数
         */
        setCanInviteNum(num: any): void;
        /**
         * 是否可以解锁新皮肤
         *
         * @param isShowNew 是否可以解锁新皮肤
         */
        isShowNewIcon(isShowNew: boolean): void;
        private onToStart;
        /** 显示 开始按钮 */
        setShowStartBtn(): void;
        private youqingcg;
        private activity;
        static beforeActivitys: any[];
        private static hello_year;
        private static newYearShare;
        private ckactivitsOnce;
        private activits;
        private needTipNY;
        private tryTipNewYear;
        show(): void;
        /** 显示并且 设置 ingamePage 的状态 */
        showAndCgInGame(): void;
        hide(): void;
    }
}
declare module "ui/pages/videoPrizePage" {
    import { IPageBase } from "ui/base/uiPage";
    import { videoPrizePageHandle } from "ui/videoPrizePageHandle";
    export class videoPrizePage implements IPageBase {
        private static _instance;
        static prefabName: string;
        static atlasList: string[];
        static Instance(): Promise<videoPrizePage>;
        handle: videoPrizePageHandle;
        fun: Function;
        private inited;
        private init;
        setInfo(num: number, fun?: Function): void;
        fun1: Function;
        setfun(fun: Function): void;
        isGame_Over: boolean;
        /**
         * 结算界面的返回首页
         */
        IsGameOver_homePage(isGame_Over: boolean): void;
        /**
         *  返回首页
         */
        private onHomePageClick;
        /**
         * 关闭
         */
        private onCloseClick;
        show(): void;
        isContinue: boolean;
        c_Time: number;
        hide(): void;
        static hasShareCP: boolean;
        static shareCardParams(): void;
    }
}
declare module "Tool/wxTool" {
    export class wxTool {
        static wx: any;
        static init(): void;
        private static wxSystemInfo;
        static getStatusBarHeight(): any;
        static getScreenHeightHeight(): any;
        static _loadImgFun(url: any, callBack: any): void;
        static _loadFun(url: any, callBack: any, fail: any): void;
        static login_invite: boolean;
        static myinfo: any;
        /** 显示用户授权按钮 */
        static showUserInfoBtn(callback: Function): void;
        private static sharedCanvas;
        private static ckInitSCanvas;
        private static setSCanvasWH;
        private static fIconSize;
        /** 设置 头像Icon跟随 或者 全屏 画板模式 */
        static setHeadFollowMode(isHFollow: boolean): void;
        private static setfullMode;
        private static texCount;
        /** 刷新SharedCanvas */
        static refSharedCanvas(): void;
        static openMiniPrograme(appid: string, path: string): void;
        static request(method: any, url: any, data?: any, success?: any, complete?: any, fail?: any): void;
        private static loadTexIdx;
        static ImgLoad(FilePath: string, backFun: (tex: m4m.framework.texture) => any): void;
        static overAudio(): void;
        private static createAUD;
        static saveData(fName: string, data_: object, callBack: Function, fial_: Function): void;
        static reqData(fName: string, callBack: (data: any) => any, fial_: Function): void;
        static vibrateShort(): void;
        static vibrateLong(): void;
        static saveImageToPhotosAlbum(filePath: string): void;
        private static readonly scopeUif;
        static appid: string;
        /** 用户授权设置 */
        static userSetings(callback: Function, ckEnd?: (isAuthed: boolean) => any): void;
        static ckUserInfoScope(callback: (isOk: boolean) => any): void;
        private static userInfoRes;
        /** 获取用户info */
        private static getUserInfo;
        static token: string;
        static isNewPlayer: boolean;
        static youqingcg: boolean;
        private static readonly Fname;
        static wxLogin(callback: Function): void;
        static loginToWX(callback: Function): void;
        /** 初次登录 用户 */
        static isFristLogin: boolean;
        private static loginToServer;
        private static ckTime;
        private static ckLoginTimeOut;
        private static viaShare;
        private static ckReAct;
        private static CKShareCardParams;
    }
}
declare module "Tool/saveTool" {
    export class saveTool {
        private static readonly Fname;
        static swSound: boolean;
        static swHighEffect: boolean;
        static swVibrate: boolean;
        static diamond: number;
        static currentLevel: number;
        static unlockSkins: {
            0: boolean;
            23: boolean;
        };
        static currUseSkin: number;
        static lastLoginTime: number;
        static unlockTheme: {
            0: boolean;
            6: boolean;
        };
        static currUseTheme: number;
        static newRecord: number;
        static newYear_invite: boolean;
        static newYear_inviteSucceed: boolean;
        static shareActivity: number;
        static videoSkin_num: {};
        static rests: {};
        static win_time: string;
        static user_imgs: any[];
        private static requestData;
        private static syncData;
        static clearData(): void;
        private static jsonObj;
        static save(callBack: Function, fial: Function): void;
        /** 下载同步数据 */
        static downLoad(callBack: Function, fial: Function): void;
        private static setConf;
        static headPortrait(): void;
        static savaToNative(callBack: Function, fial: Function): void;
        static downLoaodNative(callBack: Function, fial: Function): void;
        /**
         * 统计数据存储
         * @info  统计内内容串
         * @targetId  统计目标id
         */
        static sava_statistics(info: string, targetId: number): void;
    }
}
declare module "GameMgr" {
    export class GameMgr {
        static raceStage: number;
        static app: m4m.framework.application;
        static assetMgr: m4m.framework.assetMgr;
        static inputMgr: m4m.framework.inputMgr;
        private static appUpdateFun;
        private static nullFun;
        static init(app: m4m.framework.application): void;
        /** 引擎暂停 */
        static enginePause(): void;
        /** 引擎恢复运行 */
        static engineReplay(): void;
        static onGameHide: Function;
        static onGameShow: Function;
        static downLoadData(): m4m.threading.gdPromise<unknown>;
        static get swSound(): boolean;
        static set swSound(val: boolean);
        static get swVibrate(): boolean;
        static set swVibrate(val: boolean);
        static get diamond(): number;
        static set diamond(val: number);
        static get newRecord(): number;
        static set newRecord(val: number);
        static get currentLevel(): number;
        static set currentLevel(val: number);
        static get unlockSkins(): {
            0: boolean;
            23: boolean;
        };
        static set unlockSkins(val: {
            0: boolean;
            23: boolean;
        });
        static get newYear_invite(): boolean;
        static set newYear_invite(val: boolean);
        static get newYear_inviteSucceed(): boolean;
        static set newYear_inviteSucceed(val: boolean);
        static get unlockTheme(): {
            0: boolean;
            6: boolean;
        };
        static set unlockTheme(val: {
            0: boolean;
            6: boolean;
        });
        static get shareActivity(): number;
        static set shareActivity(val: number);
        static get currUseSkin(): number;
        static set currUseSkin(val: number);
        static get currUseTheme(): number;
        static set currUseTheme(val: number);
        static readonly gameName = "ballsrace";
        static isNewAuth: boolean;
        static readonly developModel = false;
        static readonly netMode = true;
        static gameVersion: string;
        static readonly maxLoadingCount = 16;
        static readonly cubeLayer = 8;
        static readonly limitDtime = 0.06;
        static readonly configPath = "res/config/";
        static readonly atlasPath = "res/art/atlas/";
        static readonly TexPath = "res/art/texture/";
        static readonly UIPath = "res/art/ui/";
        static readonly propsPath = "res/art/props/";
        static readonly bgPath = "res/art/img/bg/";
        static readonly iconPath = "res/art/img/icon/";
        static readonly fxPath = "res/art/FX/";
        static readonly audioPath = "res/art/audio/";
        static readonly fontPath = "res/art/font/";
        static readonly skinTexPath = "res/art/skin/textures/";
        static readonly skinIconPath = "res/art/skin/icon/";
        static readonly themeTexPath = "res/art/theme/textures/";
        static readonly themeIconPath = "res/art/theme/icon/";
        static readonly newYearIconPath = "res/art/newYear/";
        static openWalletBol: boolean;
        static connectWalletLoadingBool: boolean;
        static DNS_AND_PORT: string;
        private static _CDNURL;
        static get CDNURL(): string;
        static readonly BoostTag = "BoostTag";
        static readonly CoinTag = "CoinTag";
        static readonly RampTag = "RampTag";
        static readonly WayBunchLength = 100;
    }
}
declare module "AudioMgr" {
    export class AudioMgr {
        static readonly ball: string;
        static readonly boost: string;
        static readonly character: string;
        static readonly environment: string;
        static readonly touch: string;
        static readonly gold: string;
        static readonly btMusic: string;
        private static _isoff;
        static get IsOff(): boolean;
        private static bgm_volume;
        private static bgPlayer;
        private static res;
        private static wxRes;
        static init(): void;
        private static ckAddAudio;
        static setMute(mute: boolean): void;
        /** 播放指定音源 */
        static Play(resName?: string, isloop?: boolean): void;
        /** 停止播放 */
        static Stop(resName?: string): void;
        /** 跳到指定进度位置 */
        static Seek(resName: string, position: number): void;
        static stopAll(): void;
        static pause(resName?: string): void;
        static buttonMusic(): void;
    }
}
declare module "Tool/consTool" {
    export class consTool {
        private static tag;
        private static userCode;
        static init(): void;
        private static scanAllUsercode;
        private static scan_new;
    }
}
declare module "appMain" {
    /** core enter point */
    export class AppMain {
        constructor();
        private connectWebSocket;
        private SDKconnectWebSocket;
        private initEngine;
    }
}
declare module "network" {
    export class network {
        hello(): void;
    }
}
declare namespace Entity {
    type Dictionary<K, V> = {
        [key: string | number]: V;
    };
    type List<V> = {
        [Symbol.iterator]: V;
        [key: number]: V;
        get length(): number;
    };
    type AbyssBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 深渊层数 */
        abyssLayer?: number;
        /** 表类型: string, 注释: 深渊名称 */
        abyssName?: string;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 背景图 */
        background?: string;
        /** 表类型: data_ArmyDate, 注释: 怪物配置 */
        monsterConfiguration?: ArmyDate;
        /** 表类型: int, 注释: 挑战消耗次数 */
        challengeConsumptionTimes?: number;
        /** 表类型: string, 注释: 消耗探索卷数量 */
        consumptionExplorationVolume?: string;
    };
    type AbyssPurchaseTimesBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 贵族等级 */
        nobleLv?: number;
        /** 表类型: int, 注释: 每日购买次数上限 */
        dayLimit?: number;
        /** 表类型: int, 注释: 每次购买获得次数 */
        timesBuy?: number;
        /** 表类型: string, 注释: 单次购买消耗 */
        consume?: string;
    };
    type AbyssSweepsBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 扫荡等级 */
        SweepingLv?: number;
        /** 表类型: int, 注释: 解锁层数 */
        unlockLayer?: number;
        /** 表类型: string, 注释: 攻击符文奖池 */
        actRuneJackpot?: string;
        /** 表类型: string, 注释: 防御符文奖池 */
        defRuneJackpot?: string;
        /** 表类型: string, 注释: 统率符文奖池 */
        comRuneJackpot?: string;
    };
    type AccelerateBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 加速名称 */
        accelerateName?: string;
        /** 表类型: string, 注释: 所加速功能：
1.建造加速
2.研发科技
3.招募士兵
4.铁匠加速 */
        accelerateSystem?: string;
        /** 表类型: byte, 注释: 加速类型
1.钻石加速直接完成
2.道具加速 */
        accelerateType?: number;
        /** 表类型: data_ItemBase, 注释: 加速 */
        accelerateTime?: ItemBase;
        /** 表类型: data_ItemExchangeBase, 注释: 道具兑换 */
        accelerateExchange?: ItemExchangeBase;
        /** 表类型: byte, 注释: 最小时间间隔（秒） */
        minInterval?: number;
    };
    type AchievementReward = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 支线任务累计完成奖励宝箱 */
        achievementName?: string;
        /** 表类型: int, 注释: 支线任务完成数量 */
        achievementGoal?: number;
        /** 表类型: string, 注释: 支线任务完成累计奖励 */
        achievementReward?: string;
        /** 表类型: string, 注释: 奖励宝箱显示图 */
        RewardIcon?: string;
        /** 表类型: string, 注释: 已领取宝箱显示图 */
        GetRewardIcon?: string;
    };
    type ActivetyCloseData = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动类型
1抽奖活动
2任务活动
3buff活动
4积分排名活动
5成长基金活动
6体力赠送活动
7每日登录活动 */
        activityType?: number;
        /** 表类型: int, 注释: 活动编号 */
        activityNumber?: number;
        /** 表类型: byte, 注释: 排序优先级
1high
2Medium
3low */
        sortPriority?: number;
        /** 表类型: string, 注释: 活动名称 */
        activityName?: string;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 背景图 */
        backgroundPicture?: string;
        /** 表类型: string, 注释: 横幅 */
        banner?: string;
        /** 表类型: string, 注释: 开启条件 */
        OpeningConditions?: string;
        /** 表类型: string, 注释: 活动说明 */
        activityDescription?: string;
        /** 表类型: int, 注释: 时间类型
1.永久活动
2.固定年月日开启
3.开服后第n天
4.合服后第n天
5.每月第n天开始
6.每周第n天开始
7.每天n点开始
8.开始时间点，每隔n天开启一次 */
        timeType?: number;
        /** 表类型: string, 注释: 开始时间点 */
        startTime?: string;
        /** 表类型: string, 注释: 持续时间{秒} */
        endTime?: string;
        /** 表类型: string, 注释: 活动提前预览时间{秒} */
        activityPreviewTime?: string;
        /** 表类型: string, 注释: 活动保留时间{秒} */
        activityRetentionTime?: string;
    };
    type ActivetyOpenData = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动类型
1抽奖活动
2任务活动3buff活动
4积分排名活动 */
        activityType?: number;
        /** 表类型: int, 注释: 活动编号 */
        activityNumber?: number;
        /** 表类型: string, 注释: 开启条件 */
        OpeningConditions?: string;
        /** 表类型: string, 注释: 活动说明 */
        activityDescription?: string;
        /** 表类型: ulong, 注释: 开始时间点 */
        startTime?: number;
        /** 表类型: ulong, 注释: 持续时间{秒} */
        endTime?: number;
        /** 表类型: ulong, 注释: 活动提前预览时间{秒} */
        activityPreviewTime?: number;
        /** 表类型: ulong, 注释: 活动保留时间{秒} */
        activityRetentionTime?: number;
        /** 表类型: int, 注释: 所属活动组 */
        activityGroup?: number;
        /** 表类型: int, 注释: 时间类型
1.永久活动
2.固定年月日开启
3.开服后第n天
4.合服后第n天
5.每月第n天开始
6.每周第n天开始
7.每天n点开始
8.开始时间点，每隔n天开启一次 */
        timeType?: number;
    };
    type ActivityBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动类型
1转盘活动
2任务活动
3buff活动
4积分排名活动
5成长基金活动
6体力赠送活动
7每日登录活动
8八日登录活动
9个人目标活动
10在线奖励活动
11新服抽奖活动
12上古矿脉
13领取奖励活动
14新服冲榜活动
15.新服挑战活动
16.首充活动
17.召唤怪活动
18.召唤怪积分活动
19.返利活动
20.特价礼包活动
21.弹脸礼包活动
22.商店每日礼品
 */
        activityType?: number;
        /** 表类型: int, 注释: 活动编号 */
        activityNumber?: number;
        /** 表类型: int, 注释: 所属活动组 */
        activityGroup?: number;
        /** 表类型: byte, 注释: 排序优先级
1high
2Medium
3low */
        sortPriority?: number;
        /** 表类型: int, 注释: 入口类型
不填不开放显示
1.主界面
2.福利界面
3.活动界面
4.礼包界面 */
        enterType?: number;
        /** 表类型: string, 注释: 活动名称 */
        activityName?: string;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 背景图 */
        backgroundPicture?: string;
        /** 表类型: string, 注释: 横幅 */
        banner?: string;
        /** 表类型: string, 注释: 摆放spine */
        spine?: string;
        /** 表类型: int, 注释: spine位置x */
        spineLocX?: number;
        /** 表类型: int, 注释: spine位置y */
        spineLocY?: number;
        /** 表类型: string, 注释: 开启条件 */
        OpeningConditions?: string;
        /** 表类型: string, 注释: 活动标语 */
        activityTitle?: string;
        /** 表类型: string, 注释: 活动说明 */
        activityDescription?: string;
        /** 表类型: int, 注释: 时间类型
1.永久活动
2.固定年月日开启
3.开服后第n天
4.合服后第n天
5.每月第n天开始
6.每周第n天开始
7.每天n点开始
8.开始时间点，每隔n天开启一次 */
        timeType?: number;
        /** 表类型: string, 注释: 开始时间点 */
        startTime?: string;
        /** 表类型: string, 注释: 间隔时间 */
        intervalTime?: string;
        /** 表类型: string, 注释: 任务刷新时间 */
        taskRefreshTime?: string;
        /** 表类型: string, 注释: 活动提前预览时间{秒} */
        activityPreviewTime?: string;
        /** 表类型: string, 注释: 持续时间{秒} */
        endTime?: string;
        /** 表类型: string, 注释: 活动保留时间{秒} */
        activityRetentionTime?: string;
        /** 表类型: string, 注释: 奖励结算时间 */
        rewardGetTime?: string;
        /** 表类型: int, 注释: 开服n天内不开启 */
        availableDay?: number;
        /** 表类型: string, 注释: 下一活动ID */
        nextActivityId?: string;
        /** 表类型: string, 注释: 提供buff */
        buffReward?: string;
        /** 表类型: stringMap, 注释: 概率随机（物品id，怪物id */
        fixReward?: Dictionary<string, string>;
        /** 表类型: int, 注释: 每天掉落上限 */
        dailyDropLimit?: number;
    };
    type ActivityIntegralBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 行为类型
1.fortifiedbeatwin :据点战斗胜利
2.playerbeatwin：击败玩家
3.itemcollection：收集道具
4.fieldarmybeat：击败野怪
5.armslost:损失士兵
6.forgingequipment：打造装备
7.itemconsume：消耗道具
8.equipmentenchant：附魔装备
9.arrangementheroequip:上阵英雄穿戴装备
10.travelerstarrating：旅人升星
11.favorabilityget:旅人好感度获取
12.arrangementheroequipenchanting：上阵英雄装备附魔
13.arrangementherolevelup：主战英雄等级
14.arrangementherogrownup：主战英雄成长值
15.campdev：阵营建设 */
        taskId?: string;
        /** 表类型: string, 注释: 积分获取条件[[获取方式，完成数量，获取积分数量，道具id]] */
        getIntegral?: string;
        /** 表类型: ints, 注释: 条件完成次数|获取积分数量 */
        getIntegralNum?: List<number>;
    };
    type ActivityIntegralRewardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 积分编号 */
        integralNum?: string;
        /** 表类型: string, 注释: 需求积分条件 */
        demandIntegrationCondition?: string;
        /** 表类型: string, 注释: 积分奖励 */
        integralReward?: string;
    };
    type AltarData = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 玩家id */
        token?: string;
        /** 表类型: int, 注释: 当前进度 */
        currentProgress?: number;
        /** 表类型: int, 注释: 上一次进度 */
        chargeCount?: number;
        /** 表类型: string, 注释: 当前物品baseid */
        currentItem?: string;
        /** 表类型: int*, 注释: 随机表下标 */
        index?: number;
        /** 表类型: int, 注释: 此次暴击倍率 */
        criticalRate?: number;
    };
    type AltarListBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 祭坛效果名称 */
        itemName?: string;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 模型 */
        model?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: int, 注释: 戒指类型 */
        ringType?: number;
        /** 表类型: int, 注释: 等级 */
        level?: number;
        /** 表类型: string, 注释: 突破后下一级ID */
        nextLevelId?: string;
        /** 表类型: string, 注释: 获得下一级道具 */
        nextLevelItem?: string;
        /** 表类型: string, 注释: 解锁条件 */
        unlockRing?: string;
        /** 表类型: string, 注释: 单次充能消耗 */
        chargeCost?: string;
        /** 表类型: int, 注释: 充能进度 */
        chargeProgress?: number;
        /** 表类型: int, 注释: 最大充能进度 */
        maxChargingProgress?: number;
    };
    type AltarPositionBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 戒指名字 */
        ringName?: string;
        /** 表类型: int, 注释: 戒指类型 */
        ringType?: number;
        /** 表类型: string, 注释: 未解锁描述 */
        unlockDepict?: string;
        /** 表类型: string, 注释: 强化描述 */
        strongDepict?: string;
        /** 表类型: string, 注释: 解锁条件 */
        unlockRing?: string;
        /** 表类型: string, 注释: 解锁消耗 */
        unlockCost?: string;
        /** 表类型: string, 注释: 跳转位置 */
        jumpTo?: string;
        /** 表类型: string, 注释: 跳转描述 */
        jumpToDescribe?: string;
    };
    type AncientVeinActivityBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 活动id */
        activityId?: string;
        /** 表类型: int, 注释: 最大兑换次数 */
        maxNumOfExchanges?: number;
        /** 表类型: strings, 注释: 对应次数消耗与获得奖励（填AncientVeinConsumptionBase中的id） */
        consumptionNum?: List<string>;
    };
    type AncientVeinActivityData = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动编号 */
        activityNum?: number;
        /** 表类型: string, 注释: 玩家token */
        token?: string;
        /** 表类型: int, 注释: 已抽取次数 */
        numOfDraws?: number;
        /** 表类型: string, 注释: 获得奖励 */
        rewarded?: string;
        /** 表类型: intMap, 注释: 历史记录 */
        history?: Dictionary<string, number>;
    };
    type AncientVeinConsumptionBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 对应消耗次数 */
        consumptionNum?: number;
        /** 表类型: string, 注释: 消耗数量 */
        consumptionQuantity?: string;
        /** 表类型: string, 注释: 获得奖励 */
        rewarded?: string;
    };
    type ArmsData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 玩家ID */
        playerId?: string;
        /** 表类型: byte, 注释: 兵营类型
1.war 兵营
2.mag 秘术营地
3.str 靶场 */
        barracksType?: number;
        /** 表类型: int, 注释: 士兵等级 */
        soldiersLevel?: number;
        /** 表类型: int, 注释: 军营等级 */
        barracksLevel?: number;
        /** 表类型: int, 注释: 士兵容量 */
        soldierCapacity?: number;
        /** 表类型: byte, 注释: 已解锁队列序号 */
        unlockedQueueNumber?: number;
        /** 表类型: int, 注释: 募兵时间等级 */
        recruitmentTimeLevel?: number;
        /** 表类型: int, 注释: 科技加成募兵数 */
        technologyRecruitmentSoldiers?: number;
        /** 表类型: int, 注释: 道具加成募兵数 */
        propRecruitmentSoldiers?: number;
        /** 表类型: bool, 注释: 士兵容量满 */
        soldierCapacityFull?: boolean;
    };
    type ArmyDate = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 队伍类型:
1.普通野外怪物
100.召唤怪
101.精英怪
102.深渊怪 */
        armyType?: number;
        /** 表类型: string, 注释: 玩家token */
        playerToken?: string;
        /** 表类型: byte, 注释: 阵营 */
        camp?: number;
        /** 表类型: string, 注释: 队伍名称（备注） */
        teamName?: string;
        /** 表类型: int, 注释: 等级 */
        lv?: number;
        /** 表类型: datas_RoleData, 注释: 玩家队伍角色 */
        armyRole?: List<RoleData>;
        /** 表类型: string, 注释: 展示模型 */
        showModle?: string;
        /** 表类型: int, 注释: 当前兵力 */
        currentTroops?: number;
        /** 表类型: int, 注释: 最大兵力 */
        maxTroops?: number;
        /** 表类型: string, 注释: 头像 */
        icon?: string;
        /** 表类型: string*, 注释: 概率随机（物品id，概率万分率，最小值，最大值） */
        fixReward?: string;
        /** 表类型: int*, 注释: 随机奖励数量 */
        randomCount?: number;
        /** 表类型: string*, 注释: 权重随机（物品数量权重） */
        randomWeight?: string;
        /** 表类型: bool*, 注释: 是否重复获取 */
        ifRepeat?: boolean;
        /** 表类型: string, 注释: 战斗推荐 */
        fightAdvice?: string;
        /** 表类型: float, 注释: 损兵补偿% */
        lostSoldiersCompensation?: number;
        /** 表类型: string, 注释: 怪物显示图标 */
        armyIcon?: string;
    };
    type ArrangementData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 玩家id */
        token?: string;
        /** 表类型: stringsMap, 注释: 队列安排 */
        Arrangement?: Dictionary<string, List<string>>;
        /** 表类型: ints, 注释: 队伍上限 */
        Limit?: List<number>;
    };
    type AudioBase = {
        /** 表类型: string, 注释: 音频ID */
        id?: string;
        /** 表类型: string, 注释: 资源名 */
        resName?: string;
        /** 表类型: string, 注释: 音频key */
        audioKey?: string;
        /** 表类型: float, 注释: 音量（0-1） */
        volume?: number;
        /** 表类型: bool, 注释: 是否循环播放 */
        isLoop?: boolean;
        /** 表类型: string, 注释: 备注 */
        depict?: string;
        /** 表类型: byte, 注释: 播放bgm类型
1，登录界面bgm
2.主城界面bgm
3.战斗bgm1 */
        audioType?: number;
    };
    type BagTag = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 页签名称 */
        tagName?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: bytes, 注释: 页签类型 */
        include?: List<number>;
    };
    type BarracksBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 扩建类型
1.近战招募队列扩建
2.法师招募队列扩建
3.弓箭手招募队列扩建
4.步兵加时等级
5.法师加时等级
6.射手加时等级
7.招募步兵
8.招募法师
9.招募射手 */
        queueType?: number;
        /** 表类型: string, 注释: 队列名称 */
        queueName?: string;
        /** 表类型: string, 注释: 获得 */
        soldiersCapacityIncreases?: string;
        /** 表类型: string, 注释: 消耗 */
        unlockCostDiamond?: string;
        /** 表类型: string, 注释: 扩建特殊条件：
 */
        unlockNeedViplevel?: string;
        /** 表类型: string, 注释: 扩建条件描述 */
        unlockNeedDes?: string;
        /** 表类型: string, 注释: 下一级效果 */
        nextLevel?: string;
        /** 表类型: string, 注释: 当前等级 */
        currentLevel?: string;
    };
    type BarracksConfig = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 军营类型
1.war 兵营
2.mag 秘术营地
3.str 靶场 */
        barracksType?: number;
        /** 表类型: ulong, 注释: 募兵时间刻度 */
        recruitmentTimeScale?: number;
    };
    type BarracksData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 玩家ID */
        playerId?: string;
        /** 表类型: byte, 注释: 军营类型
1.war 兵营
2.mag 秘术营地
3.str 靶场 */
        barracksType?: number;
        /** 表类型: int, 注释: 军营等级 */
        barracksLevel?: number;
        /** 表类型: int, 注释: 模型 */
        model?: number;
        /** 表类型: bool, 注释: 军营能否升级 */
        barracksLevelUp?: boolean;
    };
    type BattleLog = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 战斗类型 */
        battleType?: number;
        /** 表类型: bytes, 注释: 战斗数据 */
        battleInfo?: List<number>;
        /** 表类型: date, 注释: 战斗时间 */
        battleTime?: number;
        /** 表类型: string, 注释: 显示野怪名字等级 */
        battleShowName?: string;
    };
    type Broadcast = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: byte, 注释: 广播类型 */
        type?: number;
        /** 表类型: strings, 注释: 触发id */
        triggerId?: List<string>;
        /** 表类型: string, 注释: 广播的内容 （@@ 中间的字不要乱改 如需添加需要修改程序） */
        content?: string;
    };
    type BuffActivityBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 活动编号 */
        activityNum?: number;
        /** 表类型: ulongMap, 注释: buff编号 */
        buffNum?: Dictionary<string, number>;
        /** 表类型: string, 注释: 归属背包 */
        bagMove?: string;
    };
    type BuildingConfig = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: byte, 注释: 建筑id */
        buildingId?: number;
        /** 表类型: byte, 注释: 最大建造数量 */
        maxBuilding?: number;
    };
    type BuildingData = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: data_ItemBase, 注释: 建筑配置 */
        buildingData?: ItemBase;
        /** 表类型: string, 注释: 建筑名 */
        buildingName?: string;
        /** 表类型: data_ItemBase, 注释: 角色配置 */
        baseData?: ItemBase;
        /** 表类型: byte, 注释: 建筑状态（0空闲 1 建造中 2忙碌） */
        buildingState?: number;
        /** 表类型: ulong, 注释: 建造开始时间 */
        buildingStartTime?: number;
        /** 表类型: ulong, 注释: 建造结束时间 */
        buildingEndTime?: number;
        /** 表类型: string, 注释: 玩家id */
        playerId?: string;
        /** 表类型: uint, 注释: 建筑当前位置X坐标 */
        buildingLocationx?: number;
        /** 表类型: uint, 注释: 建筑当前位置Y坐标 */
        buildingLocationy?: number;
    };
    type BuildingGain = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 建筑增益类型名称 */
        gainTypeName?: string;
        /** 表类型: byte, 注释: 增益类型
1.战争保护
2.雇佣建筑队伍
3.行军加速
4.训练加速
5.攻击提升
6.防御提升
7.训练加速 */
        GainType?: number;
        /** 表类型: string, 注释: 增益名称 */
        gainName?: string;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: byte, 注释: 增益类型：
11.玩家效果增益
16.玩家持有英雄增益 */
        toBag?: number;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: string, 注释: 使用条件 */
        supportLevelUpcondition?: string;
        /** 表类型: string, 注释: 支援道具 */
        supportItem?: string;
        /** 表类型: bool, 注释: 是否叠加 */
        isCover?: boolean;
        /** 表类型: int, 注释: 持续时间（s） */
        supportTime?: number;
        /** 表类型: string, 注释: 消耗物品数量[道具id，数量] */
        supportMaterial?: string;
        /** 表类型: string, 注释: 资源不足时替换 */
        ExMaterial?: string;
    };
    type BuildingListBase = {
        /** 表类型: string, 注释: 配置Id */
        id?: string;
        /** 表类型: string, 注释: 建造建筑 */
        buildingList?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: byte, 注释: 建造种类
1:建造
2:升级
3:维修
4:拆除 */
        buildingFunType?: number;
        /** 表类型: data_ItemBase, 注释: 建造id */
        buildingID?: ItemBase;
        /** 表类型: int, 注释: 建筑类型（2001-2999）：
2001：城镇大厅
2002：铁匠铺
2003：兵营
2004：秘术营地
2005：靶场
2006：学院
2007：战争广场
2008：仓库
2009：金矿
2010：伐木场
2011：牧场
2012：魔石矿
2013：集合石
2014：商店
2015：贸易所
2016：里程碑
2017：祭坛
2018：附魔台
2019：元素之力
2020：旅行者号
2021：哨塔 */
        buildingType?: number;
        /** 表类型: ulong, 注释: 最大建造数量 */
        maxNum?: number;
        /** 表类型: string, 注释: 特殊条件：
 */
        useLimit?: string;
        /** 表类型: string, 注释: 特殊条件描述 */
        limitdesc?: string;
        /** 表类型: string, 注释: 效果描述 */
        effectDesc?: string;
        /** 表类型: string, 注释: 建筑效果 */
        buildingEffect?: string;
        /** 表类型: uint, 注释: 建筑等级 */
        lv?: number;
        /** 表类型: int, 注释: 下一级id */
        breakdownID?: number;
        /** 表类型: uint, 注释: 建造时间（s） */
        productionTime?: number;
        /** 表类型: string, 注释: 消耗
[[物品id */
        itemCost?: string;
        /** 表类型: bool, 注释: 是否显示在建筑列表中 */
        visable?: boolean;
        /** 表类型: bool, 注释: 是否显示等级 */
        visableLevel?: boolean;
    };
    type BuildingSupportBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 建筑支援单位 */
        supportName?: string;
        /** 表类型: byte, 注释: 支援类型
1.铁匠铺打造装备
2.低级生产专家
3.高级生产专家
4.低级学者
5.高级学者
6.雇佣建筑队2号 */
        supportType?: number;
        /** 表类型: byte, 注释: 等级 */
        supportLevel?: number;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 大图标 */
        bigPic?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: string, 注释: 支援建筑类型
1.主城建设
2.铁匠铺
3.仓库
4.学院
 */
        supportBildingType?: string;
        /** 表类型: string, 注释: 支援效果
条件内容格式



 */
        supportEffect?: string;
        /** 表类型: string, 注释: 下一级 */
        supportNextLevel?: string;
        /** 表类型: string, 注释: 升级消耗 */
        supportLevelUpMaterial?: string;
        /** 表类型: string, 注释: 雇佣条件 */
        supportLevelUpcondition?: string;
        /** 表类型: string, 注释: 支援道具 */
        supportItem?: string;
        /** 表类型: string, 注释: 持续时间（s） */
        supportTime?: string;
        /** 表类型: string, 注释: 消耗物品数量[道具id，数量] */
        supportMaterial?: string;
        /** 表类型: string, 注释: 资源不足时替换 */
        ExMaterial?: string;
    };
    type BuildingSupportDate = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: data_BuildingSupportBase, 注释: 支援配置 */
        supportData?: BuildingSupportBase;
        /** 表类型: string, 注释: 建筑支援单位 */
        supportName?: string;
        /** 表类型: byte, 注释: 角色状态（0空闲 1 雇佣中） */
        roleState?: number;
        /** 表类型: ulong, 注释: 支援开始时间 */
        supportStartTime?: number;
        /** 表类型: ulong, 注释: 支援结束时间 */
        supportEndTime?: number;
        /** 表类型: string, 注释: 玩家id */
        playerId?: string;
    };
    type CampaignBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 章节ID */
        chapterId?: string;
        /** 表类型: string, 注释: 章节序号 */
        chapterNumber?: string;
        /** 表类型: string, 注释: 章节名称 */
        chapterName?: string;
        /** 表类型: string, 注释: 关卡名称 */
        campaignName?: string;
        /** 表类型: string, 注释: 精英怪名称 */
        monsterName?: string;
        /** 表类型: string, 注释: 怪物阵营图标 */
        monsterCampIcon?: string;
        /** 表类型: string, 注释: 怪物阵营名称 */
        monsterCampName?: string;
        /** 表类型: int, 注释: 怪物战力 */
        monsterPowerValue?: number;
        /** 表类型: string, 注释: BOSS图片 */
        bossPicture?: string;
        /** 表类型: string, 注释: 关卡描述 */
        depict?: string;
        /** 表类型: byte, 注释: 关卡类型
1.普通关卡
2.精英关卡
3.BOSS关卡 */
        checkpointType?: number;
        /** 表类型: string, 注释: 关卡图标 */
        icon?: string;
        /** 表类型: string, 注释: 奖励预览[道具ID */
        rewardPreview?: string;
        /** 表类型: data_ArmyDate, 注释: 怪物配置 */
        monsterConfiguration?: ArmyDate;
        /** 表类型: string, 注释: 首通奖励[道具ID */
        firstPassReward?: string;
        /** 表类型: string, 注释: 扫荡固定奖励[道具ID */
        sweepReward?: string;
        /** 表类型: int, 注释: 扫荡英雄经验 */
        sweepHeroExp?: number;
        /** 表类型: bool, 注释: 能否重复挑战 */
        repeatChallenge?: boolean;
        /** 表类型: int, 注释: 挑战消耗体力 */
        challengeCost?: number;
        /** 表类型: int, 注释: 挑战失败返还体力 */
        failureReturn?: number;
        /** 表类型: uint, 注释: X坐标 */
        x?: number;
        /** 表类型: uint, 注释: Y坐标 */
        y?: number;
    };
    type CampaignConfig = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 玩家体力值上限 */
        playerStaminaCeiling?: number;
        /** 表类型: ulong, 注释: 每点体力恢复时间 */
        nextRecoveryTime?: number;
        /** 表类型: int, 注释: 每日大体力药剂使用上限 */
        dailyUseLimit?: number;
        /** 表类型: string, 注释: 小体力药剂ID */
        smallPhysicalAgentsId?: string;
        /** 表类型: string, 注释: 大体力药剂ID */
        bigPhysicalAgentsId?: string;
    };
    type CampaignData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 玩家token */
        playerToken?: string;
        /** 表类型: string, 注释: 当前进度关卡ID */
        currentProgressCheckpointId?: string;
        /** 表类型: stringsMap, 注释: 扫荡英雄列表 */
        sweepsTheHeroList?: Dictionary<string, List<string>>;
    };
    type CampaignMapBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 章节ID */
        chapterId?: string;
        /** 表类型: string, 注释: 地区名称 */
        regionName?: string;
        /** 表类型: string, 注释: 地区图片 */
        regionPicture?: string;
        /** 表类型: uint, 注释: X坐标 */
        x?: number;
        /** 表类型: uint, 注释: Y坐标 */
        y?: number;
        /** 表类型: uint, 注释: 图片宽 */
        IconW?: number;
        /** 表类型: uint, 注释: 图片高 */
        IconH?: number;
    };
    type CampAssembleData = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 集结发起玩家 */
        assemblePlayerId?: string;
        /** 表类型: ulong, 注释: 集结开始时间 */
        assembleStartTime?: number;
        /** 表类型: ulong, 注释: 集结结束时间 */
        assemblEndTime?: number;
        /** 表类型: int, 注释: 已响应人数 */
        assemblPerson?: number;
        /** 表类型: int, 注释: 最大响应人数 */
        assemblMaxPerson?: number;
        /** 表类型: string, 注释: 集结响应条件 */
        assembleLimit?: string;
        /** 表类型: int, 注释: 集结响应范围 */
        assembleRange?: number;
        /** 表类型: int, 注释: 所属阵营 */
        campId?: number;
        /** 表类型: int, 注释: 集结位置x */
        assembleLocationX?: number;
        /** 表类型: int, 注释: 集结位置y */
        assembleLocationY?: number;
    };
    type CampBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: byte, 注释: 阵营id */
        campId?: number;
        /** 表类型: string, 注释: 阵营名称 */
        campName?: string;
        /** 表类型: string, 注释: 阵营全显示名称 */
        campFullName?: string;
        /** 表类型: string, 注释: 阵营图标 */
        campIcon?: string;
        /** 表类型: string, 注释: 阵营图标（大） */
        campIconbig?: string;
        /** 表类型: string, 注释: 阵营主界面图标 */
        campMainIcon?: string;
        /** 表类型: string, 注释: 阵营主界面图标（大） */
        campMainIconbig?: string;
        /** 表类型: string, 注释: 阵营排行界面图标 */
        campRankIcon?: string;
        /** 表类型: string, 注释: 阵营颜色 */
        campColoer?: string;
        /** 表类型: string, 注释: 阵营介绍 */
        campIntroduce?: string;
        /** 表类型: string, 注释: 阵营底图 */
        campBG?: string;
    };
    type CampData = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: byte, 注释: 阵营id */
        campId?: number;
        /** 表类型: string, 注释: 阵营名称 */
        campName?: string;
        /** 表类型: byte, 注释: 阵营等级 */
        campLevel?: number;
        /** 表类型: ulong, 注释: 阵营经验 */
        campExp?: number;
        /** 表类型: ulong, 注释: 阵营荣耀点数 */
        campHonour?: number;
        /** 表类型: stringMap, 注释: 阵营排行记录 */
        campRankInfo?: Dictionary<string, string>;
        /** 表类型: ulong, 注释: 修改公告冷却时间 */
        campNoticeCd?: number;
        /** 表类型: string, 注释: 公告内容 */
        campNotice?: string;
    };
    type CampDevelopBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: byte, 注释: 次数id */
        countID?: number;
        /** 表类型: string, 注释: 建设消耗物品数量权重[道具id，数量] */
        devMaterial?: string;
        /** 表类型: uint, 注释: 当此建设提供的经验值 */
        devExp?: number;
        /** 表类型: string, 注释: 建设后奖励 */
        devReward?: string;
    };
    type CampElectionBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: int, 注释: 选举排名 */
        electionRank?: number;
        /** 表类型: string, 注释: 排名对应官员 */
        electionOfficial?: string;
    };
    type CampEventsListbase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 任务名称 */
        CampEventName?: string;
        /** 表类型: byte, 注释: 任务类型：
1.主线任务
2.支线任务
3.日常任务
4.阵营任务 */
        eventType?: number;
        /** 表类型: data_ItemBase, 注释: 任务基础id */
        eventBaseid?: ItemBase;
        /** 表类型: string, 注释: 任务完成条件 */
        goal?: string;
        /** 表类型: string, 注释: 任务奖励 */
        eventReward?: string;
        /** 表类型: string, 注释: 任务引导跳转 */
        jump?: string;
        /** 表类型: int, 注释: 阵营荣誉点数奖励 */
        campGloryReward?: number;
    };
    type CampGloryBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: int, 注释: 阵营荣誉点数要求 */
        CampGlory?: number;
        /** 表类型: string, 注释: 名称 */
        CampGloryRewardName?: string;
        /** 表类型: string, 注释: 阵营荣耀奖励 */
        CampGloryReward?: string;
        /** 表类型: string, 注释: 阵营荣耀奖励未领取icon */
        CampGloryUnrewardIcon?: string;
        /** 表类型: string, 注释: 阵营荣耀奖励icon */
        CampGloryRewardIcon?: string;
    };
    type CampGloryWeekBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: int, 注释: 周排行种类
1.据点战
2.领地战
3.阵营建设 */
        GloryWeekType?: number;
        /** 表类型: int, 注释: 排名 */
        GloryWeekRank?: number;
        /** 表类型: int, 注释: 票数奖励 */
        ticketReward?: number;
    };
    type CampLevelBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: byte, 注释: 对应阵营等级 */
        lv?: number;
        /** 表类型: string, 注释: 升级所需exp */
        expMax?: string;
    };
    type CampOfficialBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 官员名称 */
        officialName?: string;
        /** 表类型: string, 注释: 官员图标 */
        officialIcon?: string;
        /** 表类型: int, 注释: 官职类型
1.官员1
2.官员2
3.官员3
4.官员4
5.平民 */
        officialType?: number;
        /** 表类型: bool, 注释: 是否可以修改阵营公告 */
        campNotice?: boolean;
        /** 表类型: ulong, 注释: 公告修改cd */
        NoticeChangeCd?: number;
        /** 表类型: bool, 注释: 是否可以跨区宣战 */
        ArearBattle?: boolean;
        /** 表类型: int, 注释: 每日最大集结次数 */
        assembleDailyTimes?: number;
        /** 表类型: int, 注释: 集结玩家人数 */
        assemblePlayerTimes?: number;
        /** 表类型: string, 注释: 集结响应条件 */
        assembleLimit?: string;
        /** 表类型: int, 注释: 集结响应范围 */
        assembleRange?: number;
        /** 表类型: string, 注释: 弃用 */
        assembleCost?: string;
        /** 表类型: strings, 注释: 集结消耗 */
        assemblesCost?: List<string>;
        /** 表类型: ulong, 注释: 集结时间 */
        assembleTime?: number;
        /** 表类型: string, 注释: 集结次数刷新时间（timeevent id） */
        assembleRefreshTime?: string;
        /** 表类型: string, 注释: 每日奖励 */
        officialReward?: string;
        /** 表类型: string, 注释: 官员加成 */
        officialBuff?: string;
        /** 表类型: string, 注释: 阵营邮件发送条件 */
        campEmailLimit?: string;
        /** 表类型: string, 注释: 条件描述 */
        LimitDesc?: string;
        /** 表类型: string, 注释: 阵营邮件消耗（LuckyDrawConsumeBase的id） */
        campEmailCost?: string;
        /** 表类型: ulong, 注释: 阵营邮件发送间隔 */
        campEmailCd?: number;
        /** 表类型: string, 注释: 邮件消耗刷新时间 */
        EmailCostRefresh?: string;
    };
    type CampRank = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 对应爵位 */
        campRank?: string;
        /** 表类型: string, 注释: 爵位图标 */
        rankIcon?: string;
        /** 表类型: byte, 注释: 爵位星级 */
        rankStart?: number;
        /** 表类型: byte, 注释: 爵位最大星级 */
        rankMaxStart?: number;
        /** 表类型: string, 注释: 爵位提升消耗物品数量[道具id，数量] */
        rankMaterial?: string;
        /** 表类型: string, 注释: 爵位提升奖励[道具id，数量] */
        rankReward?: string;
        /** 表类型: string, 注释: 爵位每日奖励[道具id，数量] */
        rankDailyReward?: string;
        /** 表类型: string, 注释: 爵位提供效果（buffbase id） */
        rankEffect?: string;
        /** 表类型: string, 注释: 爵位提供效果（在配置表中创建一个道具代表对应效果） */
        rankEffectDesc?: string;
        /** 表类型: int, 注释: 爵位额外票数 */
        campRankTicket?: number;
    };
    type CampRankingAwardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 排名编号 */
        typeNum?: number;
        /** 表类型: string, 注释: 积分道具id */
        integralPropsId?: string;
        /** 表类型: int, 注释: 阵营排名 */
        campRanking?: number;
        /** 表类型: string, 注释: 排名奖励 */
        numReward?: string;
    };
    type ChallengeTaskListBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 活动编号 */
        activityNumber?: string;
        /** 表类型: int, 注释: 任务天数
1第一天
2第二天
3第三天
4第四天
5第五天
6第六天
7第七天
8第八天 */
        taskDays?: number;
        /** 表类型: byte, 注释: 页签类型
 */
        taskType?: number;
        /** 表类型: string, 注释: 任务类型名称 */
        taskTypeName?: string;
        /** 表类型: strings, 注释: 任务ID */
        taskId?: List<string>;
        /** 表类型: string, 注释: 背景图 */
        backgroundPicture?: string;
        /** 表类型: string, 注释: 对应天数图标 */
        icon?: string;
        /** 表类型: int, 注释: 位置X */
        locX?: number;
        /** 表类型: int, 注释: 位置Y */
        locY?: number;
        /** 表类型: string, 注释: 路线解锁图 */
        routeUnlockingMap?: string;
        /** 表类型: string, 注释: 标语1 */
        slogan1?: string;
        /** 表类型: string, 注释: 标语2 */
        slogan2?: string;
    };
    type ChargeSet = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 充值商店ID
1001.购买钻石
1002.礼包
1003.月卡
1004.周卡
1005.旅人礼包
1006.每日特惠礼包 */
        chargeShopId?: number;
        /** 表类型: int, 注释: 商店页签类型 */
        shopType?: number;
        /** 表类型: string, 注释: 页签描述 */
        typeDepict?: string;
        /** 表类型: string, 注释: 礼包描述 */
        giftbagDescription?: string;
        /** 表类型: string, 注释: 充值图标 */
        chargeIcon?: string;
        /** 表类型: string, 注释: 背景图 */
        backgroundPicture?: string;
        /** 表类型: string, 注释: 充值名称 */
        chargeName?: string;
        /** 表类型: intMap, 注释: 商品{"id":数量} */
        goodsList?: Dictionary<string, number>;
        /** 表类型: intMap, 注释: 首充额外获得{"id":数量} */
        ExGoodsList?: Dictionary<string, number>;
        /** 表类型: string, 注释: 获取贵族点数（贵族点数放入包裹7） */
        noblePointGet?: string;
        /** 表类型: int, 注释: 实际售价 */
        sellPrice?: number;
        /** 表类型: string, 注释: 货币类型 */
        sellCurrency?: string;
        /** 表类型: bool, 注释: 是否显示 */
        visible?: boolean;
        /** 表类型: string, 注释: 内容描述 */
        contentDescription?: string;
        /** 表类型: int, 注释: 限购次数 */
        numberOfPurchasing?: number;
        /** 表类型: float, 注释: 显示折扣 */
        accordingDiscount?: number;
        /** 表类型: string, 注释: 标签展示 */
        showTag?: string;
        /** 表类型: string, 注释: 限制条件 */
        chargeLimit?: string;
        /** 表类型: int, 注释: 礼包权重 */
        randomWeight?: number;
        /** 表类型: string, 注释: 宣传文字 */
        propagandaText?: string;
    };
    type ChatMessage = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 频道类型 */
        channel?: number;
        /** 表类型: data_UseSimpleInfo, 注释: 发送者ID */
        sender?: UseSimpleInfo;
        /** 表类型: string, 注释: 接收者 */
        recipient?: string;
        /** 表类型: string, 注释: 聊天内容 */
        content?: string;
        /** 表类型: byte, 注释: 阵营 */
        comp?: number;
        /** 表类型: ulong, 注释: 发送时间 */
        time?: number;
        /** 表类型: int, 注释: 对话类型 */
        chatType?: number;
    };
    type ChatConfig = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 对话类型 */
        chatType?: number;
        /** 表类型: string, 注释: 对话名称 */
        chatName?: string;
        /** 表类型: string, 注释: 对话格式 */
        chatContentDesc?: string;
    };
    type DailyCheckActivityBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        loginActiveName?: string;
        /** 表类型: int, 注释: 登录活动编号 */
        loginActiveType?: number;
        /** 表类型: string, 注释: 领取奖励 */
        loginActiveReward?: string;
        /** 表类型: bool, 注释: 贵族双倍领取 */
        nobleDoubleClaim?: boolean;
        /** 表类型: string, 注释: 双倍领取条件 */
        doubleClaimConditions?: string;
    };
    type DailyCheckRewardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: strings, 注释: 可领取奖励id */
        rewardId?: List<string>;
        /** 表类型: string, 注释: 标语1 */
        slogan1?: string;
        /** 表类型: string, 注释: 标语2 */
        slogan2?: string;
    };
    type DailyDiscountBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 每日特惠名称 */
        dailyDiscountName?: string;
        /** 表类型: string, 注释: 领取等级 */
        lvClass?: string;
        /** 表类型: strings, 注释: 礼包组 */
        chargeGroup?: List<string>;
        /** 表类型: string, 注释: 购买全部礼包组 */
        buyGroup?: string;
    };
    type DailyEventsListBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 任务名称 */
        eventName?: string;
        /** 表类型: byte, 注释: 任务类型：
1.主线任务
2.支线任务
3.日常任务 */
        eventType?: number;
        /** 表类型: data_ItemBase, 注释: 任务基础id */
        eventBaseid?: ItemBase;
        /** 表类型: string, 注释: 任务完成条件 */
        goal?: string;
        /** 表类型: string, 注释: 任务奖励 */
        eventReward?: string;
        /** 表类型: string, 注释: 每日活跃奖励 */
        dailyActiveReward?: string;
        /** 表类型: string, 注释: 任务引导跳转 */
        jump?: string;
    };
    type DailyEventsReward = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 活跃度任务名 */
        activityName?: string;
        /** 表类型: int, 注释: 活跃度目标 */
        activityGoal?: number;
        /** 表类型: string, 注释: 活跃值奖励 */
        activityReward?: string;
        /** 表类型: string, 注释: 奖励宝箱显示图 */
        RewardIcon?: string;
        /** 表类型: string, 注释: 已领取宝箱显示图 */
        GetRewardIcon?: string;
    };
    type DialogueBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 对话名称 */
        dialogueName?: string;
        /** 表类型: strings, 注释: 下一句对话id（如果是最后的对话就不填 */
        dialogueDesc?: List<string>;
        /** 表类型: string, 注释: 发起者(npc)id */
        dialogueNpc?: string;
        /** 表类型: string, 注释: 对话内容 */
        dialogueWord?: string;
        /** 表类型: string, 注释: 对话分支 */
        dialoguedifference?: string;
        /** 表类型: long, 注释: 播放持续时间 */
        dialogueTime?: number;
        /** 表类型: long, 注释: 延时播放时间 */
        dialogueTimeDelay?: number;
        /** 表类型: string, 注释: 对应音频 */
        dialogueAudio?: string;
        /** 表类型: string, 注释: 对话开始前触发的事件 */
        frontEvent?: string;
        /** 表类型: bool, 注释: 是否等待前置事件完成才开始播放对话内容（TREU/FALSE） */
        ifPlayFrontEvent?: boolean;
        /** 表类型: string, 注释: 对话完成后触发的事件 */
        afterEvent?: string;
        /** 表类型: bool, 注释: 是否等待后置事件完成后才结束当前对象内容（TREU/FALSE） */
        ifPlayAfterEvent?: boolean;
    };
    type EliteMonsterBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: data_ArmyDate, 注释: 精英id */
        eliteMonster?: ArmyDate;
        /** 表类型: ulong, 注释: 精英怪持续时间 */
        eliteMonsterTime?: number;
        /** 表类型: int, 注释: 精英怪刷新位置 */
        eliteMonsterBorn?: number;
        /** 表类型: int, 注释: 最大刷新数量 */
        maxRefreshNum?: number;
        /** 表类型: string, 注释: 每日首次击败奖励 */
        dailyFirstReward?: string;
        /** 表类型: string, 注释: 每日参与奖励（物品id，概率万分率，最小值，最大值） */
        dailyPartakeReward?: string;
        /** 表类型: int, 注释: 最大参与人数 */
        maxPartakePersonNum?: number;
        /** 表类型: ulong, 注释: 精英怪消失后刷新时间 */
        eliteRefreshTime?: number;
        /** 表类型: int, 注释: 随机奖励数量 */
        randomcCunt?: number;
        /** 表类型: string, 注释: 随机物品数量权重[道具id */
        randomwWeight?: string;
        /** 表类型: bool, 注释: 是否可以重复获取同一奖励 */
        ifRepeat?: boolean;
    };
    type EnchantingBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 对应品质 */
        quality?: number;
        /** 表类型: byte, 注释: 品质词条数量 */
        effectNumber?: number;
        /** 表类型: int, 注释: 词条最高等级 */
        effectMaxLevel?: number;
        /** 表类型: string, 注释: 初始词条[[词条id */
        origineffectTypeInclude?: string;
        /** 表类型: string, 注释: 可随机词条类型[[词条equipType类型 */
        effectTypeInclude?: string;
        /** 表类型: byte, 注释: 初始秘技词条数量 */
        origineExtraSkillNumber?: number;
        /** 表类型: byte, 注释: 最大秘技词条数量 */
        extraSkillNumber?: number;
        /** 表类型: string, 注释: 可随机秘技[[秘技id */
        extraSkillInclude?: string;
        /** 表类型: int, 注释: 极品装备概率(百分比) */
        EnchantingProbability?: number;
        /** 表类型: int, 注释: 触发最小次数 */
        minEnchantingTime?: number;
        /** 表类型: int, 注释: 保底触发值 */
        maxEnchantingTime?: number;
        /** 表类型: int, 注释: 类型
1.装备附魔
2.装备锻造或宝箱 */
        enchantingType?: number;
    };
    type EnchantingLvBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 对应等级和 */
        lvSum?: number;
        /** 表类型: int, 注释: 普通附魔积分 */
        comEnchantingPoint?: number;
        /** 表类型: int, 注释: 高级附魔积分 */
        seniorEnchantingPoint?: number;
        /** 表类型: int, 注释: 累计保底值 */
        breakOutMax?: number;
        /** 表类型: int, 注释: 普通附魔升级概率（x%） */
        commonbreakOutProbability?: number;
        /** 表类型: int, 注释: 高级附魔升级概率（x%） */
        seniorbreakOutProbability?: number;
    };
    type EquipBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        equipName?: string;
        /** 表类型: string, 注释: 可预览条件 */
        visibl?: string;
        /** 表类型: string, 注释: 打造解锁条件 */
        eliminate?: string;
        /** 表类型: string, 注释: 打造时间 */
        buildTime?: string;
        /** 表类型: data_PortfolioBase, 注释: 打造公式 */
        equipPortfolio?: PortfolioBase;
        /** 表类型: string, 注释: 打造消耗 */
        PortfolioCost?: string;
        /** 表类型: byte, 注释: 最大词条数量 */
        maxEffect?: number;
        /** 表类型: string*, 注释: 随机词条效果权重 */
        randomEffect?: string;
    };
    type EquipDate = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: datas_ItemBase, 注释: 装备打造id */
        equipData?: List<ItemBase>;
        /** 表类型: ulong, 注释: 打造开始时间 */
        equipStartTime?: number;
        /** 表类型: ulong, 注释: 打造结束时间 */
        equipEndTime?: number;
        /** 表类型: string*, 注释: 获取的词条 */
        equipEffect?: string;
    };
    type EquipExpBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 引用id */
        quoteuId?: string;
        /** 表类型: int, 注释: 装备对应等级 */
        lv?: number;
        /** 表类型: int, 注释: 升级所需exp */
        expMax?: number;
    };
    type EquipVolumeBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        equipVolumeName?: string;
        /** 表类型: string, 注释: 特殊条件：
 */
        useLimit?: string;
        /** 表类型: string, 注释: 消耗
[[物品id */
        itemCost?: string;
        /** 表类型: string, 注释: 扩容效果 */
        volumeEffect?: string;
    };
    type EventActivityBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 活动ID */
        activityId?: string;
        /** 表类型: strings, 注释: 任务ID */
        eventId?: List<string>;
        /** 表类型: string, 注释: 活动描述 */
        activityDesc?: string;
    };
    type EventData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: date, 注释: 接受时间 */
        accep?: number;
        /** 表类型: date, 注释: 领取时间 */
        draw?: number;
        /** 表类型: string, 注释: 完成进度 */
        percent?: string;
        /** 表类型: string, 注释: 玩家id */
        playerId?: string;
        /** 表类型: data_ItemBase, 注释: 取任务配置 */
        baseData?: ItemBase;
    };
    type EventRankingAwardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 排名编号 */
        typeNum?: number;
        /** 表类型: string, 注释: 积分道具id */
        integralPropsId?: string;
        /** 表类型: int, 注释: 玩家排名最小区间 */
        miniPlayerRanking?: number;
        /** 表类型: int, 注释: 玩家排名最大区间 */
        maxPlayerRanking?: number;
        /** 表类型: string, 注释: 排名奖励 */
        numReward?: string;
    };
    type EventsListBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 任务名称 */
        eventName?: string;
        /** 表类型: byte, 注释: 任务类型：
1.主线任务
2.支线任务
3.活动任务 */
        eventType?: number;
        /** 表类型: data_ItemBase, 注释: 任务基础id */
        eventBaseid?: ItemBase;
        /** 表类型: string, 注释: 后续任务id */
        afterID?: string;
        /** 表类型: strings, 注释: 分支任务id(多个分支使用|隔开) */
        branchID?: List<string>;
        /** 表类型: string, 注释: 任务完成条件 */
        goal?: string;
        /** 表类型: string, 注释: 任务奖励 */
        eventReward?: string;
        /** 表类型: string, 注释: 任务引导跳转
 */
        jump?: string;
        /** 表类型: bool, 注释: 是否处于未激活状态
（不填或者填FALSE */
        eventAvailable?: boolean;
    };
    type ExchangeFormulaBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 转换类型 */
        exchangeType?: number;
        /** 表类型: string, 注释: 转换类型名称 */
        exchangeTypeName?: string;
        /** 表类型: string, 注释: 选中时页签图标 */
        logIcon?: string;
        /** 表类型: string, 注释: 未选中时页签图标 */
        UnLogIcon?: string;
        /** 表类型: string, 注释: 消耗 */
        consume?: string;
        /** 表类型: string, 注释: 资源消耗 */
        resourceCeonsume?: string;
        /** 表类型: string, 注释: 一份奖励 */
        reward?: string;
        /** 表类型: int, 注释: 随机最小数 */
        minmultiple?: number;
        /** 表类型: int, 注释: 随机最大倍数 */
        maxmultiple?: number;
        /** 表类型: string, 注释: 交易所等级 */
        ExchangeRank?: string;
        /** 表类型: int, 注释: 基础转换时间 */
        ExchangeTime?: number;
        /** 表类型: string, 注释: 备注 */
        ExchangeFormulaBaseDesc?: string;
    };
    type ExchangePositionBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 消耗资源需求 */
        NeedResources?: string;
        /** 表类型: string, 注释: 贸易所等级需求 */
        NeedExchangeRank?: string;
    };
    type ExpItemConversionBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 元素类型 */
        elementType?: number;
        /** 表类型: string, 注释: 经验道具id */
        expItemId?: string;
        /** 表类型: int, 注释: 转换经验 */
        conversionExp?: number;
    };
    type FirstRechargeActivityBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动编号 */
        activityNum?: number;
        /** 表类型: string, 注释: 充值奖励 */
        rechargeReward?: string;
        /** 表类型: string, 注释: 展示图 */
        showFigure?: string;
        /** 表类型: string, 注释: 活动标题 */
        activityTitle?: string;
        /** 表类型: string, 注释: 活动标语1 */
        activitySlogan1?: string;
        /** 表类型: string, 注释: 活动标语2 */
        activitySlogan2?: string;
        /** 表类型: string, 注释: 自动弹出条件 */
        automaticEjectCondition?: string;
    };
    type ForgingEquipment = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        equipName?: string;
        /** 表类型: string, 注释: 可预览条件 */
        visibl?: string;
        /** 表类型: string, 注释: 打造解锁条件 */
        eliminate?: string;
        /** 表类型: string, 注释: 打造时间(s) */
        buildTime?: string;
        /** 表类型: data_PortfolioBase, 注释: 打造公式 */
        equipPortfolio?: PortfolioBase;
        /** 表类型: string, 注释: 打造消耗(按钮上的资源消耗） */
        PortfolioCost?: string;
        /** 表类型: byte, 注释: 最大词条数量 */
        maxEffect?: number;
        /** 表类型: string, 注释: 随机词条效果权重 */
        randomEffect?: string;
    };
    type FortifiedBase = {
        /** 表类型: string*, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 据点头像 */
        fortifiedIcon?: string;
        /** 表类型: string, 注释: 据点头像阵营1 */
        fortifiedIconCamp1?: string;
        /** 表类型: string, 注释: 据点头像阵营2 */
        fortifiedIconCamp2?: string;
        /** 表类型: string, 注释: 据点头像阵营3 */
        fortifiedIconCamp3?: string;
        /** 表类型: string, 注释: 基础进攻据点奖励 */
        baseAttackReward?: string;
        /** 表类型: string, 注释: 据点资源 */
        fortifiedResource?: string;
        /** 表类型: ulong, 注释: 集结时间（秒） */
        assembleTime?: number;
        /** 表类型: int, 注释: 征收间隔 */
        collectionInterval?: number;
        /** 表类型: string, 注释: 征收消耗 */
        collectionCost?: string;
        /** 表类型: byte, 注释: 征收最大储存次数 */
        collectMax?: number;
        /** 表类型: data_ItemBase, 注释: 奖励道具 */
        collectItem?: ItemBase;
        /** 表类型: string, 注释: 征收描述 */
        collectionDepict?: string;
        /** 表类型: data_ItemBase, 注释: 总督上任奖励 */
        leaderReward?: ItemBase;
        /** 表类型: data_ItemBase, 注释: 总督每日奖励 */
        leaderDailyReward?: ItemBase;
        /** 表类型: string, 注释: 总督介绍 */
        leaderDepict?: string;
        /** 表类型: ulong, 注释: 总督担任时间 */
        leaderKeepTime?: number;
        /** 表类型: datas_RoleData, 注释: 防守部队 */
        fortifiedDefenser?: List<RoleData>;
        /** 表类型: string, 注释: 总督申请消耗 */
        leaderCost?: string;
        /** 表类型: intMap, 注释: 据点修复消耗 */
        fortifiedFix?: Dictionary<string, number>;
        /** 表类型: string, 注释: 据点进攻描述 */
        fortifiedAttackDesc?: string;
        /** 表类型: string, 注释: 据点解锁条件 */
        fortifiedUnlock?: string;
        /** 表类型: string, 注释: 据点解锁条件描述 */
        fortifiedUnlockDesc?: string;
        /** 表类型: string, 注释: 前往 */
        jump?: string;
    };
    type FortifiedData = {
        /** 表类型: string*, 注释: 配置ID */
        id?: string;
        /** 表类型: data_FortifiedBase, 注释: 据点信息 */
        fortifiedID?: FortifiedBase;
        /** 表类型: ulong, 注释: 上一次查看时间 */
        ExCheckOutTime?: number;
        /** 表类型: strings, 注释: 可申请总督 */
        candidateList?: List<string>;
        /** 表类型: string, 注释: 总督名字 */
        GvernorName?: string;
        /** 表类型: data_RoleData*, 注释: 总督信息 */
        GvernorInfo?: RoleData;
        /** 表类型: intMap, 注释: 总督列表给前端的 */
        GvernorListNames?: Dictionary<string, number>;
        /** 表类型: datas_RoleData*, 注释: 总督列表 */
        GvernorList?: List<RoleData>;
        /** 表类型: ulong, 注释: 总督上任时间 */
        GvernorTime?: number;
        /** 表类型: ulong, 注释: 总督卸任时间 */
        GvernorOverTime?: number;
        /** 表类型: int, 注释: 当前兵力 */
        CurrntArmy?: number;
        /** 表类型: int, 注释: 最大兵力 */
        MaxArmy?: number;
        /** 表类型: string, 注释: 地图id */
        mapDataId?: string;
    };
    type FriendConfig = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: byte, 注释: 好友数量 */
        quantity?: number;
        /** 表类型: byte, 注释: 黑名单数量 */
        blacklistQuantity?: number;
        /** 表类型: byte, 注释: 推荐好友最低等级 */
        suggestFriendLev?: number;
        /** 表类型: byte, 注释: 推荐好友最长离线时间（H） */
        suggestFriendLog?: number;
        /** 表类型: byte, 注释: 好友请求保存时间（h） */
        friendRequestTime?: number;
        /** 表类型: string, 注释: 备注 */
        depict?: string;
    };
    type FriendData = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 玩家Token */
        playerToken?: string;
        /** 表类型: byte, 注释: 好友状态：
1申请中
2好友 */
        friendStatus?: number;
        /** 表类型: ulong, 注释: 创角时间 */
        creatTime?: number;
        /** 表类型: data_UseSimpleInfo, 注释: 好友简略信息 */
        friendsInfo?: UseSimpleInfo;
        /** 表类型: ulong, 注释: 期限时间 */
        limitTime?: number;
        /** 表类型: string, 注释: 申请玩家token */
        ApplyplayerToken?: string;
    };
    type FristDownBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 首胜记录道具（同等级填同一首胜道具） */
        fdItem?: string;
        /** 表类型: data_ItemBase, 注释: 首胜奖励 */
        fdReward?: ItemBase;
    };
    type FristDownData = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: int, 注释: 等级 */
        lv?: number;
        /** 表类型: byte, 注释: 首杀状态
初始状态为0 */
        status?: number;
        /** 表类型: data_FristDownBase, 注释: 首杀配置 */
        baseData?: FristDownBase;
        /** 表类型: string, 注释: 备注 */
        FristDownDepict?: string;
        /** 表类型: string, 注释: 首杀据点名 */
        FortifiedName?: string;
        /** 表类型: datas_UseSimpleInfo, 注释: 首杀玩家列表 */
        playerList?: List<UseSimpleInfo>;
        /** 表类型: ulong, 注释: 首杀时间 */
        fdTime?: number;
    };
    type GameSystemBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 系统英文名字 */
        systemEnglishName?: string;
        /** 表类型: string, 注释: 系统中文名字 */
        systemChineseName?: string;
        /** 表类型: string, 注释: 系统介绍 */
        systemIntroduce?: string;
        /** 表类型: bool, 注释: 系统激活状态 */
        systemActivate?: boolean;
        /** 表类型: string, 注释: 系统激活条件 */
        activatecondition?: string;
    };
    type GiftBagGroupBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 活动编号 */
        activityId?: string;
        /** 表类型: int, 注释: 礼包组号 */
        giftBagGroupNum?: number;
        /** 表类型: byte, 注释: 礼包组优先级 */
        giftBagGroupPriority?: number;
        /** 表类型: strings, 注释: 礼包组内容（对应ChargeSet表ID） */
        giftBagGroupContent?: List<string>;
        /** 表类型: ulong, 注释: 触发后持续时间（秒） */
        giftBagGroupTime?: number;
        /** 表类型: string, 注释: 触发事件 */
        giftBagLimit?: string;
    };
    type GrowthFundAwardBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 基金类型 */
        growthFundType?: number;
        /** 表类型: string, 注释: 描述 */
        describe?: string;
        /** 表类型: string, 注释: 解锁消耗 */
        unlockConsumption?: string;
        /** 表类型: string, 注释: 领取等级 */
        lvClass?: string;
        /** 表类型: string, 注释: 领取奖励 */
        reward?: string;
    };
    type GrowthFundAwardData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 玩家token */
        token?: string;
        /** 表类型: int, 注释: 基金类型 */
        growthFundType?: number;
        /** 表类型: string, 注释: 进度id */
        growthFundProgress?: string;
        /** 表类型: string, 注释: 可领取奖励id */
        rewardAvailableProgress?: string;
        /** 表类型: string, 注释: 已领取奖励id */
        receivedId?: string;
    };
    type GrowthFundConditionsBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动编号 */
        activityNum?: number;
        /** 表类型: strings, 注释: 成长基金内容 */
        growthFundContent?: List<string>;
        /** 表类型: string, 注释: 解锁条件 */
        condition?: string;
        /** 表类型: string, 注释: 解锁消耗 */
        consume?: string;
        /** 表类型: string, 注释: 成长基金凭证 */
        growthFundPass?: string;
        /** 表类型: string, 注释: 标语1 */
        slogan1?: string;
        /** 表类型: string, 注释: 标语2 */
        slogan2?: string;
    };
    type GuideBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 引导名称 */
        guideName?: string;
        /** 表类型: int, 注释: 引导id（引导组） */
        guideID?: number;
        /** 表类型: byte, 注释: 步骤id */
        stepID?: number;
        /** 表类型: string, 注释: 引导备注 */
        guideDesc?: string;
        /** 表类型: string, 注释: 引导提示 */
        guideTips?: string;
        /** 表类型: byte, 注释: 引导框朝向
1.朝左
2.朝右 */
        guideDirection?: number;
        /** 表类型: float, 注释: 引导框大小 */
        guideFrame?: number;
        /** 表类型: string, 注释: 步骤行动 */
        guideActions?: string;
        /** 表类型: string, 注释: 引导前置条件 */
        guidePrecondition?: string;
        /** 表类型: string, 注释: (下一步id，若为分支对话则为x */
        nextGuide?: string;
        /** 表类型: string, 注释: 中断重开id（中断后从哪个id开始） */
        breakPoint?: string;
        /** 表类型: long, 注释: 延时执行时间 */
        GuideTimeDelay?: number;
        /** 表类型: string, 注释: 发起者(npc)姓名 */
        dialogueNpcName?: string;
        /** 表类型: byte, 注释: 对话类型
1.下方
2.中间 */
        dialogueType?: number;
        /** 表类型: string, 注释: 发起者(npc)头像 */
        dialogueNpcIcon?: string;
        /** 表类型: string, 注释: 发起者spine */
        dialogueNpcSpine?: string;
        /** 表类型: byte, 注释: 头像位置
1.左侧
2.右侧 */
        IconLoc?: number;
        /** 表类型: string, 注释: 对话内容 */
        dialogueWord?: string;
        /** 表类型: string, 注释: 对话分支 */
        dialoguedifference?: string;
        /** 表类型: bool, 注释: 是否可以跳过剧情 */
        jumpdDialogue?: boolean;
        /** 表类型: string, 注释: 对话开始前触发的事件 */
        frontEvent?: string;
        /** 表类型: bool, 注释: 是否等待前置事件完成才开始播放对话内容（TREU/FALSE） */
        ifPlayFrontEvent?: boolean;
        /** 表类型: string, 注释: 对话完成后触发的事件 */
        afterEvent?: string;
        /** 表类型: bool, 注释: 是否等待后置事件完成后才结束当前对象内容（TREU/FALSE） */
        ifPlayAfterEvent?: boolean;
        /** 表类型: int, 注释: 下一个要监听的组 */
        link?: number;
        /** 表类型: string, 注释: 引导完成条件 */
        guideFinishCondition?: string;
    };
    type GuideTypeBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 类型 */
        type?: string;
        /** 表类型: strings, 注释: 引导id（引导组） */
        guideID?: List<string>;
    };
    type HandbookBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 图鉴类型
1.英雄 */
        handbookType?: number;
        /** 表类型: int, 注释: 图鉴等级 */
        handbookRank?: number;
        /** 表类型: int, 注释: 升至这一级所需总图鉴值 */
        nextHandbookPoint?: number;
        /** 表类型: string, 注释: 所获buff */
        buff?: string;
    };
    type HandbookTagBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 标签类型 */
        handbookTagType?: number;
        /** 表类型: string, 注释: 标签名称 */
        handbookTagName?: string;
        /** 表类型: string, 注释: 标签颜色 */
        handbookTagColor?: string;
        /** 表类型: bytes, 注释: 包含英雄id */
        handbookTagContent?: List<number>;
    };
    type HangUpMonthCardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 解锁下一级损兵上限 */
        nextCeiling?: number;
        /** 表类型: int, 注释: 每次补充兵力 */
        supplementSoldiers?: number;
        /** 表类型: int, 注释: 兵力补充上限 */
        supplementSoldiersCeiling?: number;
        /** 表类型: int, 注释: 结算间隔S */
        settlementTime?: number;
        /** 表类型: int, 注释: 消耗兵力最小值 */
        minConsumption?: number;
        /** 表类型: int, 注释: 消耗兵力最大值 */
        maxConsumption?: number;
    };
    type HeadPortraitListBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        itemName?: string;
        /** 表类型: string, 注释: 获取描述 */
        getDepict?: string;
        /** 表类型: data_ItemBase, 注释: 关联id */
        HeadPortraitid?: ItemBase;
    };
    type HelpContentBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 系统英文名字 */
        systemEnglishName?: string;
        /** 表类型: string, 注释: 系统中文名字 */
        systemChineseName?: string;
        /** 表类型: string, 注释: 帮助描述 */
        helpDescribe?: string;
        /** 表类型: strings, 注释: 特殊内容 */
        specialContent?: List<string>;
        /** 表类型: strings, 注释: 特殊内容颜色 */
        specialContentColor?: List<string>;
        /** 表类型: strings, 注释: 特殊内容字号 */
        specialContentWordSize?: List<string>;
    };
    type InitialItemBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 道具ID */
        itemID?: string;
        /** 表类型: string, 注释: 道具名称 */
        itemName?: string;
        /** 表类型: ulong, 注释: 数量 */
        itemNum?: number;
        /** 表类型: string, 注释: 放入包裹位置 */
        packageLoc?: string;
        /** 表类型: string, 注释:  */
        listid?: string;
    };
    type IntegralRankingActivityBase = {
        /** 表类型: string, 注释: 活动编号 */
        id?: string;
        /** 表类型: string, 注释: 暂时不用 */
        activityNum?: string;
        /** 表类型: string, 注释: 活动积分id */
        integralID?: string;
        /** 表类型: strings, 注释: 获取积分(ActivityIntegralBase) */
        forIntegral?: List<string>;
        /** 表类型: strings, 注释: 排名奖励（EventRankingAwardBase中的id） */
        numReward?: List<string>;
        /** 表类型: strings, 注释: 积分奖励（ActivityIntegralRewardBase中的id） */
        integralReward?: List<string>;
        /** 表类型: string, 注释: 排序方式（关联RankingBase表） */
        rankingMode?: string;
        /** 表类型: ulong, 注释: 邮件发送间隔时间 */
        mailInterval?: number;
        /** 表类型: int, 注释: 单次邮件发送数量 */
        singleMailCount?: number;
        /** 表类型: bool, 注释: 是否阵营奖励 */
        whetherCampReward?: boolean;
        /** 表类型: strings, 注释: 阵营奖励 */
        campReward?: List<string>;
        /** 表类型: int, 注释: 排名奖励领取方式
1.活跃类结算（根据历史最高排名，领取多个档次）
2.充值类结算
（根据结算排名领取对应排名奖励） */
        rewardGetType?: number;
        /** 表类型: int, 注释: 页签类型
1.领主冲级
2.装备提升
3.旅人成长
4.英雄历练 */
        tabType?: number;
        /** 表类型: string, 注释: 积分获取提示 */
        integraGetDesc?: string;
    };
    type IntelligenceData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: byte, 注释: 页签类型 */
        intelligenceType?: number;
        /** 表类型: string, 注释: 攻方阵营图标 */
        attckerCampicon?: string;
        /** 表类型: string, 注释: 攻方名字 */
        attckerName?: string;
        /** 表类型: string, 注释: 攻方头像 */
        attckerIcon?: string;
        /** 表类型: int, 注释: 攻方兵力 */
        attckerTroops?: number;
        /** 表类型: float, 注释: 攻方x坐标 */
        attckerX?: number;
        /** 表类型: float, 注释: 攻方y坐标 */
        attckerY?: number;
        /** 表类型: string, 注释: 防方阵营图标 */
        defenderCampicon?: string;
        /** 表类型: string, 注释: 防方名字 */
        defenderName?: string;
        /** 表类型: string, 注释: 防方头像 */
        defenderIcon?: string;
        /** 表类型: int, 注释: 防方兵力 */
        defenderTroops?: number;
        /** 表类型: float, 注释: 防方x坐标 */
        defenderX?: number;
        /** 表类型: float, 注释: 防方y坐标 */
        defenderY?: number;
        /** 表类型: ulong, 注释: 战斗倒计时时间 */
        combatTime?: number;
        /** 表类型: ulong, 注释: 起始时间 */
        startTime?: number;
        /** 表类型: ulong, 注释: 终止时间 */
        endTime?: number;
        /** 表类型: bool, 注释: 参战状态 */
        warStatus?: boolean;
        /** 表类型: bool, 注释: 阅读状态 */
        readStatus?: boolean;
    };
    type ItemData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 道具名字 */
        itemName?: string;
        /** 表类型: string, 注释: 配置ID */
        baseId?: string;
        /** 表类型: data_ItemBase, 注释: 配置数据 */
        baseData?: ItemBase;
        /** 表类型: ulong, 注释: 数量 */
        count?: number;
        /** 表类型: ulong, 注释: 最大数量 */
        maxNum?: number;
        /** 表类型: string, 注释: 来源 */
        fromWhere?: string;
        /** 表类型: intMap, 注释: 获取使用货币 */
        buyCurrency?: Dictionary<string, number>;
        /** 表类型: intMap, 注释: 属性 */
        status?: Dictionary<string, number>;
        /** 表类型: datas_ItemData, 注释: 装备词条效果（样例：1001|1002） */
        equipEffect?: List<ItemData>;
        /** 表类型: int, 注释: 等级 */
        lv?: number;
        /** 表类型: int, 注释: 稀有度 */
        rera?: number;
        /** 表类型: int, 注释: 品质 */
        quality?: number;
        /** 表类型: string, 注释: 持有者 */
        playerUuid?: string;
        /** 表类型: ulong, 注释: 获取时间 */
        getTime?: number;
        /** 表类型: byte, 注释: 物品状态：
1.新获得
2.暂时获得
3.无状态
4.锁定 */
        statustype?: number;
        /** 表类型: bool, 注释: 是否满足使用限制 */
        ifUseLimit?: boolean;
        /** 表类型: ulong, 注释: 生效时间 */
        forceTime?: number;
        /** 表类型: ulong, 注释: 失效事件 */
        invalidTime?: number;
        /** 表类型: ulong, 注释: 获得显示时间 */
        getsShowTime?: number;
        /** 表类型: stringMap, 注释: 自定义数据 */
        customizeData?: Dictionary<string, string>;
        /** 表类型: intMap, 注释: 计算属性 */
        statusCalculation?: Dictionary<string, number>;
    };
    type ItemExchangeBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: data_ItemBase, 注释: 对应道具 */
        exchangeItem?: ItemBase;
        /** 表类型: string, 注释: 兑换花费 */
        exchangeCost?: string;
    };
    type ItemLog = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 道具名字 */
        itemName?: string;
        /** 表类型: string, 注释: 数据ID */
        dataId?: string;
        /** 表类型: ulong, 注释: 数量 */
        count?: number;
        /** 表类型: intMap, 注释: 获取使用货币 */
        buyCurrency?: Dictionary<string, number>;
        /** 表类型: string, 注释: 持有者 */
        playerUuid?: string;
        /** 表类型: date, 注释: 消耗时间 */
        useTime?: number;
        /** 表类型: byte, 注释: 消耗方式 */
        useType?: number;
    };
    type JobBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 职业名称 */
        jobName?: string;
        /** 表类型: byte, 注释: 职业类型 */
        jobType?: number;
        /** 表类型: int, 注释: 攻击占比权重 */
        atkWeight?: number;
        /** 表类型: int, 注释: 防御占比权重 */
        defWeight?: number;
        /** 表类型: int, 注释: 率领士兵类型（填士兵的itemtype） */
        soldier?: number;
    };
    type JumpBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 跳转位置 */
        jumpTo?: string;
        /** 表类型: string, 注释: 跳转描述 */
        jumpDesc?: string;
        /** 表类型: string, 注释: 跳转限制 */
        jumpLimit?: string;
        /** 表类型: string, 注释: 跳转限制描述 */
        jumpLimitDesc?: string;
    };
    type LimitData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: token */
        token?: string;
        /** 表类型: int, 注释: 限制类型
 */
        limitType?: number;
        /** 表类型: int, 注释: 限制编号 */
        limitNumber?: number;
        /** 表类型: intMap, 注释: 商品购买次数 */
        goodsLimit?: Dictionary<string, number>;
        /** 表类型: ulong, 注释: 上次刷新时间 */
        lastRefreshTime?: number;
    };
    type LoginActiveBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        loginActiveName?: string;
        /** 表类型: int, 注释: 登录活动编号 */
        loginActiveType?: number;
        /** 表类型: string, 注释: 领取奖励 */
        loginActiveReward?: string;
        /** 表类型: string, 注释: 重点奖励展示 */
        highLevelReward?: string;
        /** 表类型: string, 注释: 重点奖励文字描述 */
        highLevelDesc?: string;
        /** 表类型: string, 注释: 宣传语 */
        propaganda?: string;
        /** 表类型: string, 注释: 宣传语2 */
        propaganda2?: string;
        /** 表类型: bool, 注释: 是否为重点奖励 */
        ifhighLevel?: boolean;
    };
    type LoginActiveData = {
        /** 表类型: string, 注释: 玩家id */
        id?: string;
        /** 表类型: int, 注释: 登录活动编号 */
        loginActiveType?: number;
        /** 表类型: string, 注释: 活动进度id */
        activeProgress?: string;
        /** 表类型: string, 注释: 可领取奖励id */
        rewardAvailableProgress?: string;
        /** 表类型: ulong, 注释: 活动开始时间 */
        activeStartTime?: number;
        /** 表类型: ulong, 注释: 上一次领取时间 */
        lastCollectionTime?: number;
    };
    type LoginLogBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: token */
        token?: string;
        /** 表类型: date, 注释: 登陆时间 */
        loginTime?: number;
        /** 表类型: byte, 注释: 状态 */
        status?: number;
    };
    type LuckyDrawBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 抽奖单次消耗(填写消耗表中对应ID) */
        singleConsumption?: string;
        /** 表类型: string, 注释: 十连消耗（不填代表没有十连） */
        tenConsumption?: string;
        /** 表类型: datas_LuckyDrawContentBase, 注释: 抽奖配置 */
        LuckyDraw?: List<LuckyDrawContentBase>;
        /** 表类型: datas_LuckyDrawContentBase, 注释: 抽奖兑换商店配置 */
        LuckyDrawExchangeBase?: List<LuckyDrawContentBase>;
        /** 表类型: string, 注释: 活动对应积分id */
        integralReward?: string;
        /** 表类型: int, 注释: 每日免费次数 */
        dailyFreeTime?: number;
    };
    type LuckyDrawConsumeBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: byte, 注释: 类型
1消耗增加
2列表循环 */
        type?: number;
        /** 表类型: string, 注释: 活动名称 */
        activityName?: string;
        /** 表类型: string, 注释: 消耗道具id（item表中对应ID） */
        consumptionItemId?: string;
        /** 表类型: ints, 注释: 基础消耗列表 */
        basicConsumption?: List<number>;
        /** 表类型: int, 注释: 消耗增量 */
        increment?: number;
        /** 表类型: int, 注释: 消耗上限 */
        upperLimit?: number;
    };
    type LuckyDrawContentBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 奖池类型 */
        luckyDrawType?: string;
        /** 表类型: byte, 注释: 稀有度类型
1.大图标
2.中图标
3.小图标 */
        rareType?: number;
        /** 表类型: string, 注释: 奖励物品 */
        rewardItems?: string;
        /** 表类型: int, 注释: 物品权重 */
        goodsweight?: number;
        /** 表类型: int, 注释: 可获取次数 */
        availableCount?: number;
        /** 表类型: int, 注释: 对应物品积分 */
        integral?: number;
        /** 表类型: int, 注释: 最低抽取次数 */
        drawTimes?: number;
        /** 表类型: int, 注释: 保底获取次数 */
        maxDrawTimes?: number;
        /** 表类型: string, 注释: 后续补充id */
        supportId?: string;
        /** 表类型: bool, 注释: 是否广播 */
        ifNotice?: boolean;
    };
    type LuckyDrawData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 玩家id */
        playerId?: string;
        /** 表类型: string, 注释: 活动id */
        activeId?: string;
        /** 表类型: string, 注释: 活动卡池进度 */
        drawTypeProgress?: string;
        /** 表类型: int, 注释: 免费单抽 */
        freePoint?: number;
        /** 表类型: long, 注释: 下一次免费单抽时间 */
        lastTime?: number;
        /** 表类型: datas_LuckyDrawContentBase, 注释: 当前卡池 */
        drawProgress?: List<LuckyDrawContentBase>;
        /** 表类型: strings*, 注释: 抽奖信息 */
        drawInformation?: List<string>;
        /** 表类型: intMap, 注释: 抽奖次数 */
        drawCount?: Dictionary<string, number>;
        /** 表类型: long, 注释: 此活动总抽奖次数 */
        drawNum?: number;
    };
    type LuckyDrawExchangeDate = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 所属活动id */
        luckyDrawType?: string;
        /** 表类型: intMap, 注释: 道具Id */
        itemId?: Dictionary<string, number>;
        /** 表类型: int, 注释: 商品购买次数 */
        goodsBuyLimit?: number;
    };
    type LuckyDrawPositionBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 卡池展示类型 */
        luckyDrawType?: string;
        /** 表类型: byte, 注释: 稀有度类型
1.大图标
2.中图标
3.小图标 */
        rareType?: number;
        /** 表类型: int, 注释: 位置x */
        locaX?: number;
        /** 表类型: int, 注释: 位置y */
        locaY?: number;
    };
    type MailBase = {
        /** 表类型: string, 注释: 邮件ID */
        id?: string;
        /** 表类型: string, 注释: 邮件图标 */
        mailicon?: string;
        /** 表类型: string, 注释: 邮件来源 */
        mailFrom?: string;
        /** 表类型: string, 注释: 邮件标题 */
        mailTitle?: string;
        /** 表类型: string, 注释: 邮件内容 */
        mailContent?: string;
        /** 表类型: datas_ItemData, 注释: 附带道具 */
        items?: List<ItemData>;
        /** 表类型: date, 注释: 发送时间 */
        sendTime?: number;
        /** 表类型: date, 注释: 过期时间 */
        expires?: number;
    };
    type MailConfig = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 邮件类型 */
        mailType?: number;
        /** 表类型: string, 注释: 邮件标题 */
        mailName?: string;
        /** 表类型: string, 注释: 邮件icon */
        mailIcon?: string;
        /** 表类型: string, 注释: 邮件内大图 */
        mailBanner?: string;
        /** 表类型: string, 注释: 邮件副标题 */
        mailMainTitle?: string;
        /** 表类型: string, 注释: 邮件内容 */
        mailContentDesc?: string;
        /** 表类型: bool, 注释: 是否可以分享 */
        sharetAvailable?: boolean;
        /** 表类型: bool, 注释: 是否可以回放 */
        replayAvailable?: boolean;
    };
    type MailData = {
        /** 表类型: string, 注释: 邮件ID */
        id?: string;
        /** 表类型: uint, 注释: 邮件状态：
1.已读
2.收藏
4.已领取
 */
        mailStatus?: number;
        /** 表类型: uint, 注释: 邮件类型：
1.无奖励邮件
2.包含奖励邮件
3.侦察邮件成功
4.战斗情报邮件
5.阵营邮件
6.侦察失败 */
        mailType?: number;
        /** 表类型: string, 注释: 邮件图标 */
        mailicon?: string;
        /** 表类型: string, 注释: 邮件来源 */
        mailFrom?: string;
        /** 表类型: string, 注释: 邮件接收者 */
        mailTo?: string;
        /** 表类型: string, 注释: 邮件标题 */
        mailTitle?: string;
        /** 表类型: string, 注释: 邮件内容 */
        mailContent?: string;
        /** 表类型: string, 注释: 战斗数据 */
        BattleCountent?: string;
        /** 表类型: string, 注释: 侦察数据 */
        scoutCountent?: string;
        /** 表类型: byte, 注释: 战斗结果 */
        battleResult?: number;
        /** 表类型: datas_ItemData, 注释: 附带道具 */
        items?: List<ItemData>;
        /** 表类型: date, 注释: 发送时间 */
        sendTime?: number;
        /** 表类型: ulong, 注释: 过期时间 */
        expires?: number;
        /** 表类型: string, 注释: 道具显示数量 */
        showItemIcon?: string;
        /** 表类型: string, 注释: 群体邮件id */
        mailGroupID?: string;
    };
    type MailGroupData = {
        /** 表类型: string, 注释: 邮件ID */
        id?: string;
        /** 表类型: uint, 注释: 邮件状态：
1.已读
2.收藏
4.已领取
 */
        mailStatus?: number;
        /** 表类型: uint, 注释: 邮件类型：
1.无奖励邮件
2.包含奖励邮件
3.侦察邮件成功
4.战斗情报邮件
5.阵营邮件
6.侦察失败 */
        mailType?: number;
        /** 表类型: string, 注释: 邮件图标 */
        mailicon?: string;
        /** 表类型: string, 注释: 邮件来源 */
        mailFrom?: string;
        /** 表类型: string, 注释: 邮件接收者 */
        mailTo?: string;
        /** 表类型: string, 注释: 邮件标题 */
        mailTitle?: string;
        /** 表类型: string, 注释: 邮件内容 */
        mailContent?: string;
        /** 表类型: string, 注释: 战斗数据 */
        BattleCountent?: string;
        /** 表类型: string, 注释: 侦察数据 */
        scoutCountent?: string;
        /** 表类型: byte, 注释: 战斗结果 */
        battleResult?: number;
        /** 表类型: datas_ItemData, 注释: 附带道具 */
        items?: List<ItemData>;
        /** 表类型: date, 注释: 发送时间 */
        sendTime?: number;
        /** 表类型: ulong, 注释: 标记发送事件 */
        showSendTime?: number;
        /** 表类型: ulong, 注释: 过期时间 */
        expires?: number;
        /** 表类型: string, 注释: 道具显示数量 */
        showItemIcon?: string;
        /** 表类型: ints, 注释: 发送阵营 */
        campSend?: List<number>;
    };
    type MailTag = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 页签名称 */
        tagName?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: bytes, 注释: 包含邮件类型 */
        include?: List<number>;
    };
    type MapBase = {
        /** 表类型: string*, 注释: 配置ID */
        id?: string;
        /** 表类型: uint, 注释: X坐标 */
        x?: number;
        /** 表类型: uint, 注释: Y坐标 */
        y?: number;
        /** 表类型: byte, 注释: 据点类型，1怪， */
        type?: number;
        /** 表类型: byte*, 注释: 地图编号 */
        mapId?: number;
        /** 表类型: string, 注释: 显示名称 */
        showName?: string;
        /** 表类型: byte, 注释: 阵营 */
        camp?: number;
        /** 表类型: string*, 注释: 显示图标 */
        icon?: string;
        /** 表类型: int, 注释: 据点尺寸 */
        mapSize?: number;
        /** 表类型: string*, 注释: 展示模型 */
        model?: string;
        /** 表类型: byte, 注释: 等级 */
        level?: number;
        /** 表类型: data_ArmyDate*, 注释: 交战信息 */
        fightdata?: ArmyDate;
        /** 表类型: string, 注释: 交战信息id */
        fightdataId?: string;
        /** 表类型: string, 注释: 据点配置 */
        fortifiedID?: string;
        /** 表类型: data_FortifiedBase, 注释: 据点情报 */
        fortifiedInfo?: FortifiedBase;
    };
    type MapConfig = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: byte, 注释: 地图编号 */
        mapId?: number;
        /** 表类型: byte, 注释: 列数 */
        mapColumn?: number;
        /** 表类型: byte, 注释: 行数 */
        mapRow?: number;
        /** 表类型: int, 注释: 最大玩家数 */
        maxPlayers?: number;
        /** 表类型: string, 注释: 下一张地图 */
        nextId?: string;
        /** 表类型: bool, 注释: 是否已经初始化 */
        isInit?: boolean;
        /** 表类型: string, 注释: 地图名称 */
        mapName?: string;
        /** 表类型: bool, 注释: 是否开放 */
        mapAvailable?: boolean;
        /** 表类型: byte, 注释: 开放条件 */
        progress?: number;
        /** 表类型: string, 注释: 大地图对应地点 */
        place?: string;
        /** 表类型: byte, 注释: 阵营 */
        camp?: number;
        /** 表类型: string, 注释: 大地图对应icon */
        icon?: string;
        /** 表类型: data_MonsterRefreshBase, 注释: 怪物刷新配置 */
        enemyRefresh?: MonsterRefreshBase;
        /** 表类型: data_MinerRefreshBase, 注释: 矿洞刷新配置 */
        minerRefresh?: MinerRefreshBase;
        /** 表类型: datas_EliteMonsterBase, 注释: 精英怪配置 */
        eliteMonster?: List<EliteMonsterBase>;
        /** 表类型: int, 注释: 最大怪物数量 */
        maxEnemy?: number;
        /** 表类型: int, 注释: 空地保留数量 */
        emptyLand?: number;
        /** 表类型: string, 注释: 光明占领显示地图 */
        camp1MapPic?: string;
        /** 表类型: string, 注释: 暗影占领显示地图 */
        camp2MapPic?: string;
        /** 表类型: string, 注释: 自然神殿显示地图 */
        camp3MapPic?: string;
        /** 表类型: string, 注释: 中立显示地图 */
        camp4MapPic?: string;
        /** 表类型: string, 注释: 地图名图片 */
        mapNamePic?: string;
        /** 表类型: int, 注释: 世界地图位置x */
        locaX?: number;
        /** 表类型: int, 注释: 世界地图位置y */
        locaY?: number;
        /** 表类型: int, 注释: 标签位置x */
        logLocaX?: number;
        /** 表类型: int, 注释: 标签位置y */
        logLocaY?: number;
        /** 表类型: int, 注释: 地图名x */
        nameLocX?: number;
        /** 表类型: int, 注释: 地图名y */
        nameLocY?: number;
        /** 表类型: string, 注释: 叛军等级 */
        logEnemy?: string;
        /** 表类型: string, 注释: 资源等级 */
        logResources?: string;
        /** 表类型: data_FristDownBaseMap*, 注释: 首杀配置 */
        fristDownBases?: Dictionary<string, FristDownBase>;
        /** 表类型: string, 注释: 未首杀时显示的名字 */
        unFristDownShow?: string;
        /** 表类型: data_FristDownDataMap, 注释: 首杀配置 */
        fristDownDatas?: Dictionary<string, FristDownData>;
        /** 表类型: int, 注释: 地图最高等级据点 */
        highestFortified?: number;
        /** 表类型: bytes, 注释: 可宣战区域 */
        declareWarAvailable?: List<number>;
        /** 表类型: bytes, 注释: 可参战区域 */
        battleAvailable?: List<number>;
        /** 表类型: string, 注释: 精英组队介绍 */
        EliteMonsterDesc?: string;
        /** 表类型: string, 注释: 未解锁提示 */
        unlockTips?: string;
    };
    type MapData = {
        /** 表类型: string*, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 点位ID */
        pointId?: string;
        /** 表类型: uint, 注释: X坐标 */
        x?: number;
        /** 表类型: uint, 注释: Y坐标 */
        y?: number;
        /** 表类型: byte, 注释: 据点类型，1怪， */
        type?: number;
        /** 表类型: byte*, 注释: 地图编号 */
        mapId?: number;
        /** 表类型: byte, 注释: 地图状态（0 空闲 1交战中） */
        mapState?: number;
        /** 表类型: string, 注释: 玩家Token */
        userToken?: string;
        /** 表类型: string, 注释: 显示名称 */
        showName?: string;
        /** 表类型: byte, 注释: 阵营 */
        camp?: number;
        /** 表类型: string, 注释: 显示图标 */
        icon?: string;
        /** 表类型: int, 注释: 据点尺寸 */
        mapSize?: number;
        /** 表类型: string, 注释: 展示模型 */
        model?: string;
        /** 表类型: byte, 注释: 等级 */
        level?: number;
        /** 表类型: ulong, 注释: 下个等级时间 */
        nextLvTime?: number;
        /** 表类型: byte, 注释: 下个等级 */
        nextLevel?: number;
        /** 表类型: data_ArmyDate*, 注释: 交战信息 */
        fightdata?: ArmyDate;
        /** 表类型: string, 注释: 交战信息id */
        fightdataId?: string;
        /** 表类型: data_ArmyDate*, 注释: 城墙守卫 */
        wallGuard?: ArmyDate;
        /** 表类型: data_ArmyDate*, 注释: 驻守友军 */
        defenseteam?: ArmyDate;
        /** 表类型: ulong, 注释: 免战时间 */
        avoidWarTime?: number;
        /** 表类型: string, 注释: 据点配置 */
        fortifiedID?: string;
        /** 表类型: data_FortifiedData, 注释: 据点情报 */
        fortifiedInfo?: FortifiedData;
        /** 表类型: data_MinerData, 注释: 矿洞信息 */
        minerData?: MinerData;
        /** 表类型: int, 注释: 组队人数限制 */
        teamLimit?: number;
        /** 表类型: data_CampAssembleData, 注释: 召集信息 */
        campAssembleData?: CampAssembleData;
        /** 表类型: data_ArmyDateMap*, 注释: 驻守友军 */
        defenseteams?: Dictionary<string, ArmyDate>;
    };
    type MarchData = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 角色名 */
        roleName?: string;
        /** 表类型: byte, 注释: 阵营 */
        camp?: number;
        /** 表类型: float, 注释: 出发点x坐标 */
        startPointx?: number;
        /** 表类型: float, 注释: 出发点y坐标 */
        startPointy?: number;
        /** 表类型: float, 注释: 当前x坐标 */
        currentPointx?: number;
        /** 表类型: float, 注释: 当前y坐标 */
        currentPointy?: number;
        /** 表类型: float, 注释: 终点x坐标 */
        endPointx?: number;
        /** 表类型: float, 注释: 终点y坐标 */
        endPointy?: number;
        /** 表类型: float, 注释: 行军速度 */
        marchSpeed?: number;
        /** 表类型: ulong, 注释: 行军开始时间 */
        marchstartTime?: number;
        /** 表类型: ulong, 注释: 行军结束时间 */
        marchendTime?: number;
        /** 表类型: intMap, 注释: 行军消耗 */
        marchConsumption?: Dictionary<string, number>;
        /** 表类型: string, 注释: 头像 */
        icon?: string;
        /** 表类型: int, 注释: 兵力 */
        troops?: number;
        /** 表类型: datas_ArmyDate, 注释: 队伍配置 */
        squadConfiguration?: List<ArmyDate>;
        /** 表类型: string, 注释: 玩家id */
        playerId?: string;
    };
    type MasterDiscipleBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 解锁师徒条件 */
        MasterDiscipleConditions?: string;
        /** 表类型: string, 注释: 拜师条件 */
        fromMasterConditions?: string;
        /** 表类型: string, 注释: 拜师条件描述 */
        fromMasterDescribe?: string;
        /** 表类型: string, 注释: 收徒条件 */
        enlighteningConditions?: string;
        /** 表类型: string, 注释: 收徒条件描述 */
        enlighteningDescribe?: string;
        /** 表类型: int, 注释: 徒弟上限 */
        discipleCeiling?: number;
        /** 表类型: ulong, 注释: 开始离线天数显示时间 */
        offlineDisplayTime?: number;
        /** 表类型: ulong, 注释: 免费解除关系时间 */
        freeDissolveRelationshipTime?: number;
        /** 表类型: string, 注释: 解除关系消耗 */
        dissolveRelationshipConsumption?: string;
        /** 表类型: ulong, 注释: 拜师冷却时间 */
        fromMasterCoolingTime?: number;
        /** 表类型: string, 注释: 首次拜师奖励 */
        firstFromMasterReward?: string;
    };
    type MasterDiscipleData = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 玩家Token */
        playerToken?: string;
        /** 表类型: byte, 注释: 徒弟状态:
1申请中
2徒弟 */
        discipleStatus?: number;
        /** 表类型: ulong, 注释: 申请时间 */
        creatTime?: number;
        /** 表类型: data_UseSimpleInfo, 注释: 徒弟简略信息 */
        discipleInfo?: UseSimpleInfo;
        /** 表类型: ulong, 注释: 限制时间 */
        limitTime?: number;
        /** 表类型: string, 注释: 申请玩家token */
        applyplayerToken?: string;
        /** 表类型: data_UseSimpleInfo, 注释: 师父简略信息 */
        masterInfo?: UseSimpleInfo;
    };
    type MasterDiscipleTaskBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 任务条件 */
        taskConditions?: string;
        /** 表类型: string, 注释: 任务描述 */
        taskDescribe?: string;
        /** 表类型: string, 注释: 任务奖励 */
        taskReward?: string;
    };
    type MileStoneBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 里程碑名称 */
        MileStoneName?: string;
        /** 表类型: ulong, 注释: 持续时间 */
        DurationTime?: number;
        /** 表类型: string, 注释: 里程碑完成条件描述 */
        MileStoneDesc?: string;
        /** 表类型: string, 注释: 里程碑完成条件 */
        MileStonegoal?: string;
        /** 表类型: string, 注释: 任务奖励 */
        MileStoneBaseReward?: string;
        /** 表类型: intMap, 注释: 解锁功能 */
        unlock?: Dictionary<string, number>;
        /** 表类型: string, 注释: 解锁展示 */
        unlockShow?: string;
        /** 表类型: string, 注释: 下一个里程碑id */
        NextMileStone?: string;
        /** 表类型: string, 注释: 未解锁状态背景图 */
        unlcokBg?: string;
        /** 表类型: string, 注释: 进行中状态背景图 */
        inProgressBg?: string;
        /** 表类型: string, 注释: 完成状态背景图 */
        finishBg?: string;
        /** 表类型: string, 注释: 据点解锁提示 */
        unlockTips?: string;
    };
    type MileStoneDate = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: data_MileStoneBase, 注释: 里程碑配置 */
        baseData?: MileStoneBase;
        /** 表类型: int, 注释: 任务进度 */
        MileStoneProgress?: number;
        /** 表类型: int, 注释: 完成目标 */
        MileStoneGoal?: number;
        /** 表类型: byte, 注释: 里程碑状态 */
        MileStoneState?: number;
        /** 表类型: ulong, 注释: 开始时间 */
        StartTime?: number;
        /** 表类型: ulong, 注释: 结束时间 */
        EndTime?: number;
    };
    type MinerBase = {
        /** 表类型: string*, 注释: 配置ID */
        id?: string;
        /** 表类型: byte, 注释: 矿物类型
1.金矿
2.伐木场
3.牧场
4.矿场
5.钻石矿 */
        minerType?: number;
        /** 表类型: string, 注释: 显示名称 */
        minerShowName?: string;
        /** 表类型: string, 注释: 矿场显示图标 */
        icon?: string;
        /** 表类型: string, 注释: 矿物图标 */
        minerResourceicon?: string;
        /** 表类型: int, 注释: 矿物尺寸 */
        mineralSize?: number;
        /** 表类型: string, 注释: 展示模型 */
        model?: string;
        /** 表类型: byte, 注释: 矿物等级 */
        level?: number;
        /** 表类型: string, 注释: 最大采集量 */
        maxAcquisition?: string;
        /** 表类型: ulong, 注释: 最大采集时间 */
        maxTime?: number;
        /** 表类型: string, 注释: 残矿奖励 */
        completionReward?: string;
        /** 表类型: float, 注释: 每秒采集获取经验值 */
        expPreSecond?: number;
    };
    type MinerData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: data_MinerBase, 注释: ItemBase数据 */
        baseData?: MinerBase;
        /** 表类型: ulong, 注释: 已经开采 */
        acquisition?: number;
        /** 表类型: ulong, 注释: 当前队伍开始采集时间 */
        startTime?: number;
        /** 表类型: data_RoleData, 注释: 采集的英雄 */
        minerRole?: RoleData;
        /** 表类型: string, 注释: 玩家token */
        playerToken?: string;
    };
    type MinerRefreshBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: int, 注释: 最大数量 */
        maxNum?: number;
        /** 表类型: byte, 注释: 等级 */
        lv?: number;
        /** 表类型: datas_MinerBase, 注释: 矿洞刷新类型 */
        type?: List<MinerBase>;
        /** 表类型: ints, 注释: 矿洞刷新权重 */
        weight?: List<number>;
        /** 表类型: int, 注释: 每次刷新数(个) */
        number?: number;
        /** 表类型: uint, 注释: 刷新频率(s) */
        rate?: number;
    };
    type ModleActionBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 动作名称 */
        actionName?: string;
        /** 表类型: string, 注释: 备注 */
        des?: string;
        /** 表类型: float, 注释: 播放速度 */
        speed?: number;
        /** 表类型: bool, 注释: 是否倒放 */
        mirror?: boolean;
    };
    type MonsterRefreshBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: int, 注释: 最大数量 */
        maxNum?: number;
        /** 表类型: byte, 注释: 等级 */
        lv?: number;
        /** 表类型: datas_ArmyDate, 注释: 怪物类型 */
        type?: List<ArmyDate>;
        /** 表类型: ints, 注释: 怪物权重 */
        weight?: List<number>;
        /** 表类型: int, 注释: 每次刷新数(个) */
        number?: number;
        /** 表类型: uint, 注释: 刷新频率(s) */
        rate?: number;
    };
    type MonsterSummonyBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: data_ArmyDate, 注释: 召唤怪id */
        summonMonsterId?: ArmyDate;
        /** 表类型: ulong, 注释: 召唤怪持续时间 */
        summonMonsterTime?: number;
        /** 表类型: int, 注释: 召唤半径 */
        summonRadius?: number;
        /** 表类型: ulong, 注释: 集结时间 */
        gatheringTime?: number;
        /** 表类型: string, 注释: 召唤怪图标 */
        summonMonsterIcon?: string;
    };
    type MonthlyCardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: data_ChargeSet, 注释: ChargeSet表ID */
        baseData?: ChargeSet;
        /** 表类型: int, 注释: 类型
1.月卡
2.周卡
3.挂机月卡 */
        type?: number;
        /** 表类型: string, 注释: 宣传图 */
        publicityFigure?: string;
        /** 表类型: string, 注释: 背景 */
        background?: string;
        /** 表类型: string, 注释: 宣传语1 */
        slogan1?: string;
        /** 表类型: string, 注释: 宣传语2 */
        slogan2?: string;
        /** 表类型: string, 注释: 名称 */
        designation?: string;
        /** 表类型: string, 注释: 立刻获得 */
        immediatelyGet?: string;
        /** 表类型: string, 注释: 每日获得 */
        dailyGet?: string;
        /** 表类型: int, 注释: 持续天数 */
        continuousDays?: number;
        /** 表类型: string, 注释: 奖励刷新时间 */
        rewardRefreshTime?: string;
        /** 表类型: int, 注释: 续费提示天数 */
        renewalTipsDays?: number;
        /** 表类型: string, 注释: 已领取点击飘字 */
        floatText?: string;
    };
    type MoveCity = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 迁城名称 */
        moveCityName?: string;
        /** 表类型: string, 注释: 迁城描述 */
        moveCityDesc?: string;
        /** 表类型: byte, 注释: 迁城类型 */
        moveCityType?: number;
        /** 表类型: string, 注释: 使用条件 */
        moveCitycondition?: string;
        /** 表类型: string, 注释: 消耗物品数量[道具id，数量] */
        moveCityMaterial?: string;
        /** 表类型: string, 注释: 资源不足时替换 */
        moveCityExMaterial?: string;
        /** 表类型: byte, 注释: 区域移动概率 */
        moveCityProbability?: number;
    };
    type NobleBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 贵族等级 */
        nobleLevel?: number;
        /** 表类型: string, 注释: 贵族名称 */
        nobleName?: string;
        /** 表类型: int, 注释: 贵族点数 */
        noblePoint?: number;
        /** 表类型: string, 注释: 贵族礼包名称 */
        nobleGiftBagName?: string;
        /** 表类型: string, 注释: 贵族图标 */
        nobleIcon?: string;
        /** 表类型: string, 注释: 贵族礼包内容（[道具ID */
        nobleGiftBag?: string;
        /** 表类型: string, 注释: 贵族礼包原始价格 */
        nobleGiftBagPrice?: string;
        /** 表类型: string, 注释: 贵族礼包当前价格 */
        currentNobleGiftBagPrice?: string;
        /** 表类型: string, 注释: 贵族特权描述(加成内容，加成数值，是否为新增加:0为否，1为是) */
        nobleEffectDescribe?: string;
        /** 表类型: string, 注释: 贵族特权效果 */
        nobleEffect?: string;
    };
    type NobleData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 玩家ID */
        playerId?: string;
        /** 表类型: int, 注释: 当前贵族点数 */
        currentNoblePoints?: number;
        /** 表类型: int, 注释: 当前贵族等级 */
        currentNobleLevel?: number;
    };
    type NoticeBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 公告类型
1普通公告
 */
        noticeType?: number;
        /** 表类型: string, 注释: 公告标题 */
        noticeHeadline?: string;
        /** 表类型: string, 注释: 公告内容 */
        noticeContent?: string;
        /** 表类型: strings, 注释: 特殊内容 */
        specialContent?: List<string>;
        /** 表类型: strings, 注释: 特殊内容颜色 */
        specialContentColor?: List<string>;
    };
    type RoleData = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 角色名 */
        roleName?: string;
        /** 表类型: string, 注释: 所属服务器 */
        server?: string;
        /** 表类型: data_RoleBase, 注释: 角色配置 */
        baseData?: RoleBase;
        /** 表类型: byte, 注释: 角色类型 */
        roleType?: number;
        /** 表类型: byte, 注释: 角色状态（0空闲 1 外出） */
        roleState?: number;
        /** 表类型: long, 注释: 上次行动时间 */
        lastTime?: number;
        /** 表类型: intMap, 注释: 属性值1.atk 攻击
2.def 防御
3.com 统率
4.cbatk 城战攻击
5.cbdef 城战防御
6.fire 火元素攻击
7 ice 冰元素攻击
8.lighting 雷元素攻击
9. firedef 火元素抵抗
10.icedef 冰元素抵抗
11.lightdef 雷元素抵抗 */
        status?: Dictionary<string, number>;
        /** 表类型: string, 注释: 玩家id */
        playerId?: string;
        /** 表类型: data_SkillBaseMap, 注释: 技能列表 */
        skills?: Dictionary<string, SkillBase>;
        /** 表类型: int, 注释: 当前等级 */
        lv?: number;
        /** 表类型: int, 注释: 当前经验 */
        exp?: number;
        /** 表类型: int, 注释: 当前稀有度 */
        rera?: number;
        /** 表类型: int, 注释: 当前品质 */
        quality?: number;
        /** 表类型: int, 注释: 当前成长值 */
        currentGrowth?: number;
        /** 表类型: int, 注释: 当前突破值 */
        breakThrough?: number;
        /** 表类型: int, 注释: 当前状态 */
        currentState?: number;
        /** 表类型: stringMap, 注释: 人物属性 */
        roleStatus?: Dictionary<string, string>;
        /** 表类型: intMap, 注释: 持有货币 */
        currency?: Dictionary<string, number>;
        /** 表类型: data_ItemDataMap, 注释: 装备 */
        equip?: Dictionary<string, ItemData>;
        /** 表类型: int, 注释: 当前装备库上限 */
        equipmMaxHold?: number;
        /** 表类型: data_ItemDataMap, 注释: 持有道具 */
        items?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 邮箱道具 */
        mailItem?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 持有建筑 */
        building?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 军营 */
        barracks?: Dictionary<string, ItemData>;
        /** 表类型: bytes, 注释: 二进制数据 */
        bytesinfo?: List<number>;
        /** 表类型: data_ItemDataMap, 注释: 未领取道具背包 */
        unclaimedItem?: Dictionary<string, ItemData>;
        /** 表类型: intMap, 注释: 计算属性 */
        statusCalculation?: Dictionary<string, number>;
        /** 表类型: data_ItemDataMap, 注释: 贵族特权效果 */
        nobleEffect?: Dictionary<string, ItemData>;
        /** 表类型: ulongMap, 注释: 记录时间 */
        recordTime?: Dictionary<string, number>;
        /** 表类型: data_ItemDataMap, 注释: 探索区域背包 */
        Territory?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 探索事件背包 */
        TerritoryEvent?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 探索NPC背包 */
        TerritoryNPC?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: buff特殊效果 */
        buffEffect?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 学院buff效果 */
        collegeEffect?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 主要任务（包括主线支线） */
        mainEvent?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 日常任务 */
        dailyEvent?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 活动任务 */
        activityEvent?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 阵营任务 */
        campEvent?: Dictionary<string, ItemData>;
        /** 表类型: stringMap, 注释: 自定义数据 */
        customizeData?: Dictionary<string, string>;
        /** 表类型: data_ItemDataMap, 注释: 角色经验 */
        roleExperience?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 英雄buff特殊效果 */
        heroBuffEffect?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 头像头像框 */
        HeadPortrait?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 里程碑记录 */
        MileStone?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 交易所记录 */
        ExchangeHouse?: Dictionary<string, ItemData>;
        /** 表类型: strings, 注释: 记录引导数据 */
        GuideRecord?: List<string>;
        /** 表类型: data_LimitDataMap, 注释: 限制次数记录 */
        limitData?: Dictionary<string, LimitData>;
        /** 表类型: data_AltarDataMap, 注释: 祭坛记录 */
        altarData?: Dictionary<string, AltarData>;
        /** 表类型: data_ItemDataMap, 注释: 图鉴记录 */
        handBookData?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 符文背包 */
        runeBag?: Dictionary<string, ItemData>;
        /** 表类型: data_ItemDataMap, 注释: 旅人背包 */
        travelerBag?: Dictionary<string, ItemData>;
        /** 表类型: long, 注释: 上次精英怪首杀时间 */
        lastEliteKill?: number;
        /** 表类型: long, 注释: 上次精英怪参战时间 */
        lastEliteFight?: number;
        /** 表类型: data_ItemDataMap, 注释: 挂机兵力背包 */
        autoJungleSoldiersBag?: Dictionary<string, ItemData>;
        /** 表类型: long, 注释: 挂机开始时间 */
        hangUpStartTime?: number;
        /** 表类型: long, 注释: 挂机结束时间 */
        hangUpEndTime?: number;
        /** 表类型: long, 注释: 挂机扣兵时间 */
        hangUpDeductSoldiersTime?: number;
        /** 表类型: data_ItemDataMap, 注释: 挂机未领取奖励背包 */
        hangUpUnclaimedBag?: Dictionary<string, ItemData>;
    };
    type ObtianBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 获取组id（ObtianGroupBaseid） */
        groupID?: string;
        /** 表类型: string, 注释: 获取id */
        ObtianId?: string;
        /** 表类型: strings, 注释: 通用获取方法id */
        obtianComId?: List<string>;
        /** 表类型: string, 注释: 跳转（jumpbase） */
        jump?: string;
        /** 表类型: string, 注释: 跳转图标 */
        jumpIcon?: string;
        /** 表类型: string, 注释: 批量购买（填shopsetid） */
        pluralBuy?: string;
        /** 表类型: string, 注释: 批量购买图标 */
        pluralBuyIcon?: string;
        /** 表类型: string, 注释: 单个购买（填shopsetid） */
        singleBuy?: string;
        /** 表类型: string, 注释: 单个购买图标 */
        singleBuyIcon?: string;
        /** 表类型: string, 注释: 使用宝箱获取 */
        TreasureID?: string;
        /** 表类型: string, 注释: 使用宝箱图标 */
        TreasureIDIcon?: string;
        /** 表类型: string, 注释: 物品描述 */
        itemDesc?: string;
        /** 表类型: string, 注释: 物品描述图标 */
        itemDescIcon?: string;
    };
    type ObtianComBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 补兵类型
1 */
        groupType?: number;
        /** 表类型: int, 注释: 类型
1.跳转前往
2.使用道具
3.单个购买类型
4.批量购买类型
5.文字说明类型
6.增益效果 */
        getType?: number;
        /** 表类型: string, 注释: 跳转（jumpbase） */
        jump?: string;
        /** 表类型: string, 注释: 图标 */
        showIcon?: string;
        /** 表类型: string, 注释: 显示名称 */
        showName?: string;
        /** 表类型: string, 注释: 显示描述 */
        showDesc?: string;
        /** 表类型: string, 注释: 支援道具 */
        supportItem?: string;
        /** 表类型: bool, 注释: 是否叠加 */
        isCover?: boolean;
        /** 表类型: int, 注释: 持续时间（s） */
        supportTime?: number;
        /** 表类型: string, 注释: 增益效果支持id（填buildingGain中的id） */
        buildingGainId?: string;
        /** 表类型: string, 注释: 消耗物品数量[道具id，数量] */
        supportMaterial?: string;
        /** 表类型: string, 注释: 资源不足时替换 */
        ExMaterial?: string;
        /** 表类型: string, 注释: 购买id（填shopsetid） */
        pluralBuy?: string;
    };
    type ObtianGroupBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 获取组类型 */
        groupType?: number;
        /** 表类型: strings, 注释: 获取组内道具id */
        groupID?: List<string>;
    };
    type OnlineActiveBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        loginActiveName?: string;
        /** 表类型: int, 注释: 登录活动编号 */
        loginActiveType?: number;
        /** 表类型: string, 注释: 领取奖励 */
        loginActiveReward?: string;
        /** 表类型: string, 注释: 领取等级 */
        lvClass?: string;
        /** 表类型: int, 注释: 等级 */
        lv?: number;
        /** 表类型: int, 注释: 在线奖励间隔时间 */
        RefreshTime?: number;
    };
    type OnlineActiveData = {
        /** 表类型: string, 注释: 玩家id */
        id?: string;
        /** 表类型: string, 注释: 领取进度 */
        GetProgress?: string;
        /** 表类型: ulong, 注释: 上一个领取结束时间 */
        BeforeGetEndTime?: number;
        /** 表类型: string, 注释: 今天开始进度 */
        startProgress?: string;
    };
    type PayOrder = {
        /** 表类型: string, 注释: 订单号 */
        id?: string;
        /** 表类型: string, 注释: 用户uuid */
        userOpenid?: string;
        /** 表类型: string, 注释: 游戏充值平台id */
        payPlatformID?: string;
        /** 表类型: string, 注释: ip地址 */
        ip?: string;
        /** 表类型: string, 注释: 道具id */
        gameItemID?: string;
        /** 表类型: int, 注释: 法币价格 */
        legalTender?: number;
        /** 表类型: date, 注释: 创建时间 */
        timeStart?: number;
        /** 表类型: date, 注释: 付款期限 */
        timeLimit?: number;
        /** 表类型: date, 注释: 付款时间 */
        timePay?: number;
        /** 表类型: int, 注释: 实际退款金额 */
        refundAmount?: number;
        /** 表类型: string, 注释: 退款审批人 */
        refund?: string;
        /** 表类型: string, 注释: 备注 */
        remark?: string;
    };
    type OrderPlatformConfig = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 游戏名字 */
        gameName?: string;
        /** 表类型: string, 注释: 平台名字 */
        platformName?: string;
        /** 表类型: string, 注释: 发货地址URL */
        orderCallBackURL?: string;
        /** 表类型: string, 注释: ip地址 */
        ip?: string;
        /** 表类型: string, 注释: 紧急联系人手机号码（发货服务器异常的时候会发送短信通知） */
        emergencyContactNumber?: string;
        /** 表类型: string, 注释: 紧急联系人微信账号 */
        emergencyContactWechatID?: string;
    };
    type OrderRefund = {
        /** 表类型: string, 注释: 用户uuid */
        id?: string;
        /** 表类型: string, 注释: 订单号 */
        orderid?: string;
        /** 表类型: string, 注释: ip地址 */
        ip?: string;
        /** 表类型: string, 注释: 道具id */
        gameItemID?: string;
        /** 表类型: int, 注释: 法币价格 */
        legalTender?: number;
        /** 表类型: int, 注释: 实际退款金额 */
        refundAmount?: number;
        /** 表类型: string, 注释: 退款审批人 */
        refund?: string;
    };
    type PayPlatform = {
        /** 表类型: string, 注释: 游戏充值平台id */
        id?: string;
        /** 表类型: string, 注释: 服务器url */
        severUrl?: string;
        /** 表类型: string, 注释: 备注 */
        remark?: string;
    };
    type PersonalActiveBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 名称 */
        PersonalActiveName?: string;
        /** 表类型: int, 注释: 活动编号 */
        PersonalActiveType?: number;
        /** 表类型: string, 注释: 任务奖励 */
        eventReward?: string;
        /** 表类型: string, 注释: 重点奖励展示 */
        highLevelReward?: string;
        /** 表类型: string, 注释: 任务完成条件 */
        goal?: string;
        /** 表类型: string, 注释: 标语描述 */
        sloganDescription?: string;
        /** 表类型: string, 注释: 完成条件描述 */
        conditionDescription?: string;
    };
    type PersonalActiveData = {
        /** 表类型: string, 注释: 玩家id */
        id?: string;
        /** 表类型: int, 注释: 登录活动编号 */
        loginActiveType?: number;
        /** 表类型: string, 注释: 可领取奖励id */
        rewardAvailableProgress?: string;
        /** 表类型: strings*, 注释: 已领取id */
        hasReward?: List<string>;
    };
    type PhysicalConfig = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 体力补充 */
        physicalPurchaseReply?: number;
        /** 表类型: string, 注释: 钻石消耗 */
        diamondCost?: string;
    };
    type PhysicalGiftActiveBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 体力赠送档次 */
        physcalPowerGrade?: string;
        /** 表类型: string, 注释: 开始领取时间 */
        startTime?: string;
        /** 表类型: string, 注释: 结束领取时间 */
        endTime?: string;
        /** 表类型: string, 注释: 领取奖励 */
        receiveRewards?: string;
        /** 表类型: string, 注释: 补领消耗 */
        replenishmentConsumption?: string;
    };
    type PhysicalGiftActiveNumRewardBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 活动编号 */
        activityNum?: number;
        /** 表类型: strings, 注释: 档数奖励 */
        numOfReward?: List<string>;
        /** 表类型: string, 注释: 标语1 */
        slogan1?: string;
        /** 表类型: string, 注释: 标语2 */
        slogan2?: string;
    };
    type PlayerConfig = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: int, 注释: 每日野外战斗次数 */
        npcBattle?: number;
    };
    type PlayerExpBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 玩家对应等级 */
        lv?: number;
        /** 表类型: ulong, 注释: 升级所需exp */
        expMax?: number;
        /** 表类型: string, 注释: 升级奖励
例子：[[物品id */
        lvUpReward?: string;
        /** 表类型: string, 注释: 升级奖励描述 */
        lvUpRewardDsec?: string;
        /** 表类型: string, 注释: 升级体力描述 */
        lvUpPhysicalDsec?: string;
    };
    type PortfolioBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 备注描述 */
        depict?: string;
        /** 表类型: string, 注释: 物品数量权重[道具id，数量] */
        material?: string;
        /** 表类型: string, 注释: 合成结果（道具配置表id） */
        result?: string;
    };
    type PowerComparison = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 属性名称 */
        propertyName?: string;
        /** 表类型: byte, 注释: 属性类型 */
        propertyType?: number;
        /** 表类型: string, 注释: 计算的公式id */
        formulaId?: string;
    };
    type PowerUpBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 战力提升类型 */
        powerUpType?: string;
        /** 表类型: string, 注释: 战力提升名称 */
        powerUpName?: string;
        /** 表类型: string, 注释: 战力提升图标 */
        powerUpIcon?: string;
        /** 表类型: string, 注释: 战力途径描述 */
        powerUpDepict?: string;
        /** 表类型: string, 注释: 显示条件
 */
        visableLimit?: string;
        /** 表类型: string, 注释: 跳转
前往 */
        jump?: string;
    };
    type PreferentialTabBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 特惠类型
1.特价礼包
2.每日特惠
3.月卡
4.充值 */
        perferentialType?: number;
        /** 表类型: string, 注释: 特惠名称 */
        perferentialName?: string;
        /** 表类型: byte, 注释: 排序优先级
1.high
2.medium
3.low */
        sortPriority?: number;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 开启条件 */
        openingConditions?: string;
    };
    type PubContentBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 招募类型
1.英雄招募
2.传奇宴会 */
        pubType?: number;
        /** 表类型: byte, 注释: 稀有度类型
1.大图标
2.小图标 */
        rareType?: number;
        /** 表类型: string, 注释: 奖励物品 */
        rewardItems?: string;
        /** 表类型: int, 注释: 物品权重 */
        goodsweight?: number;
        /** 表类型: int, 注释: 累计进度值 */
        integral?: number;
        /** 表类型: int, 注释: 抽取类型 */
        guaranteeType?: number;
        /** 表类型: bool, 注释: 是否广播 */
        ifNotice?: boolean;
        /** 表类型: string, 注释: 重复转换物品（空为不转换） */
        exchangeItems?: string;
    };
    type PubData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: token */
        token?: string;
        /** 表类型: strings, 注释: 英雄招募抽取记录 */
        heroRecruitpubRecord?: List<string>;
        /** 表类型: strings, 注释: 传奇宴会抽取记录 */
        legendRecruitpubRecord?: List<string>;
        /** 表类型: uint, 注释: 英雄招募抽取次数 */
        heroRecruitTimes?: number;
        /** 表类型: uint, 注释: 传奇宴会抽取次数 */
        legendRecruitTimes?: number;
        /** 表类型: ulong, 注释: 传奇宴会开启时间 */
        legendOpen?: number;
        /** 表类型: ulong, 注释: 传奇宴会关闭时间 */
        legendEnd?: number;
        /** 表类型: int, 注释: 英雄招募每日免费次数 */
        heroDailyFreeTimes?: number;
        /** 表类型: int, 注释: 英雄半价招募次数 */
        heroHalfPriceTime?: number;
        /** 表类型: int, 注释: 传奇宴会免费次数 */
        legendFreeTimes?: number;
        /** 表类型: string, 注释: 每日半价次数刷新时间 */
        halfPriceReflashTime?: string;
        /** 表类型: ulong, 注释: 每日半价次数刷新时间 */
        dailyHalfPriceReflashTime?: number;
        /** 表类型: ulong, 注释: 每日免费次数刷新时间 */
        FreeReflashTime?: number;
        /** 表类型: string, 注释: 每日免费次数刷新时间 */
        dailyFreeReflashTime?: string;
        /** 表类型: strings, 注释: 抽取结果 */
        PubResult?: List<string>;
        /** 表类型: int, 注释: 传奇宴会进度累计 */
        legendCharge?: number;
        /** 表类型: intMap, 注释: 额外奖励记录 */
        PubRewardTime?: Dictionary<string, number>;
        /** 表类型: int, 注释: 剩余英雄招募触发保底次数 */
        nextHeroGuaranteeTimes?: number;
        /** 表类型: int, 注释: 剩余传奇招募触发保底次数 */
        nextLegendGuaranteeTimes?: number;
    };
    type PubRecruitBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 卡池类型
1.英雄招募
2.传奇宴会 */
        recruitType?: number;
        /** 表类型: string, 注释: 卡池介绍 */
        recruitDesc?: string;
        /** 表类型: string, 注释: 抽奖单次消耗(填写LuckyDrawConsumeBase对应ID) */
        singleConsumption?: string;
        /** 表类型: string, 注释: 十连消耗（不填代表没有十连） */
        tenConsumption?: string;
        /** 表类型: string, 注释: 半价消耗(填写LuckyDrawConsumeBase中对应ID) */
        halfPriceConsumption?: string;
        /** 表类型: string, 注释: 单次抽奖券消耗(填写LuckyDrawConsumeBase中对应ID) */
        singleTicketConsumption?: string;
        /** 表类型: string, 注释: 10连抽奖券消耗 */
        tenTicketConsumption?: string;
        /** 表类型: datas_LuckyDrawContentBase, 注释: 抽奖配置 */
        LuckyDraw?: List<LuckyDrawContentBase>;
        /** 表类型: datas_PubContentBase, 注释: 抽奖配置 */
        PubRecruit?: List<PubContentBase>;
        /** 表类型: int, 注释: 免费次数 */
        dailyFreeTime?: number;
        /** 表类型: string, 注释: 每日免费次数刷新时间 */
        dailyFreeReflashTime?: string;
        /** 表类型: int, 注释: 半价次数 */
        halfPriceTime?: number;
        /** 表类型: string, 注释: 每日半价次数刷新时间 */
        halfPriceReflashTime?: string;
        /** 表类型: ulong, 注释: 持续时间 */
        sustainTime?: number;
        /** 表类型: int, 注释: 卡池进度值触发条件 */
        chargePoint?: number;
        /** 表类型: int, 注释: 保底类型（填抽取类型） */
        guarantee?: number;
        /** 表类型: int, 注释: 保底数量 */
        guaranteeMax?: number;
        /** 表类型: int, 注释: 保护类型（抽取类型） */
        protect?: number;
        /** 表类型: int, 注释: 保护数量 */
        protectMax?: number;
        /** 表类型: int, 注释: 保底触发次数 */
        guarant?: number;
        /** 表类型: string, 注释: 抽取提示 */
        recruitTips?: string;
    };
    type PubRewardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 奖励类型
1.英雄招募累计奖励
2.宴会累计奖励 */
        rewardType?: number;
        /** 表类型: int, 注释: 奖励显示类型
1.列表
2.最终奖励 */
        showType?: number;
        /** 表类型: string, 注释: 奖励内容 */
        rewardContent?: string;
        /** 表类型: string, 注释: 奖励描述 */
        rewardDesc?: string;
        /** 表类型: int, 注释: 达到奖励需要的值 */
        rewardNeedNum?: number;
    };
    type PubShowBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 奖励类型
1.英雄招募累计奖励
2.宴会累计奖励 */
        rewardType?: number;
        /** 表类型: string, 注释: 普通奖励内容 */
        normalShow?: string;
        /** 表类型: string, 注释: 稀有奖励展示[[第一排英雄id] */
        rareShow?: string;
        /** 表类型: int, 注释: 达到奖励需要的值 */
        rewardNeedNum?: number;
    };
    type QualityEffect = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 对应品质 */
        quality?: number;
        /** 表类型: string, 注释: 品质名称 */
        qualityName?: string;
        /** 表类型: string, 注释: 品质描述 */
        qualityDepict?: string;
        /** 表类型: string, 注释: 品质颜色 */
        qualityColour?: string;
        /** 表类型: int, 注释: 对应品质英雄每升一级提高统率值 */
        qualitycomGrowth?: number;
        /** 表类型: string, 注释: 普通成长提升[[成长值道具 */
        commonGrowth?: string;
        /** 表类型: string, 注释: 高级成长提升[[成长值道具 */
        seniorGrowth?: string;
        /** 表类型: string, 注释: 普通成长消耗 */
        commonGrowthCost?: string;
        /** 表类型: string, 注释: 高级成长每次消耗 */
        seniorGrowthCost?: string;
        /** 表类型: string, 注释: 突破累计值 */
        breakOutPoint?: string;
        /** 表类型: string, 注释: 突破消耗 */
        breakOutCost?: string;
        /** 表类型: string, 注释: 突破概率（x%） */
        breakOutProbability?: string;
    };
    type QueueBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: byte, 注释: 兵营类型
1.近战招募队列
2.法师招募队列
3.弓箭手招募队列 */
        queueType?: number;
        /** 表类型: string, 注释: 队列名称 */
        queueName?: string;
        /** 表类型: int, 注释: 扩建后士兵容量增加 */
        soldiersCapacityIncreases?: number;
        /** 表类型: string, 注释: 扩建消耗 */
        unlockCostDiamond?: string;
        /** 表类型: string, 注释: 扩建特殊条件：
x:y;x:y

x：代表任务主要类型
1：等级达到y级
2:贵族等级达到y级

y：对应限制代表目标 */
        unlockNeedViplevel?: string;
    };
    type QueueData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 玩家ID */
        playerId?: string;
        /** 表类型: byte, 注释: 兵营类型
1.war 兵营
2.mag 秘术营地
3.str 靶场 */
        barracksType?: number;
        /** 表类型: byte, 注释: 队列序号 */
        queueNumber?: number;
        /** 表类型: bool, 注释: 是否解锁 */
        eliminate?: boolean;
        /** 表类型: bool, 注释: 贵族等级是否能够解锁 */
        vipLevelCanUnlock?: boolean;
    };
    type RankingBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 排行类型
1.全服排行
2.阵营内排行 */
        rankingType?: number;
        /** 表类型: string, 注释: 排序名称 */
        sortName?: string;
        /** 表类型: int, 注释: 单次发送数量 */
        frontName?: number;
        /** 表类型: ulong, 注释: 排序时间间隔 */
        sortRefresh?: number;
        /** 表类型: bool, 注释: 能否查看自己的每次 */
        canFindRankSelf?: boolean;
        /** 表类型: bool, 注释: 能否查看排名外玩家 */
        canFindOutRank?: boolean;
        /** 表类型: string, 注释: 排序条件 */
        rankCondition?: string;
        /** 表类型: bool, 注释: 是否降序排序 */
        upRank?: boolean;
        /** 表类型: ulong, 注释: 上榜积分要求 */
        entrPointsRequirement?: number;
    };
    type RankingData = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 玩家token */
        playerId?: string;
        /** 表类型: string, 注释: 所属活动id */
        activeId?: string;
        /** 表类型: int, 注释: 玩家排名 */
        playerRank?: number;
        /** 表类型: strings, 注释: 排好序的前n名 */
        rank?: List<string>;
        /** 表类型: ulong, 注释: 玩家分数 */
        pointNum?: number;
        /** 表类型: ulong, 注释: 排名更新时间 */
        rankUpdateTime?: number;
        /** 表类型: data_UseSimpleInfo, 注释: 玩家信息 */
        userInfo?: UseSimpleInfo;
        /** 表类型: int, 注释: 历史最高排名 */
        historyHighRank?: number;
        /** 表类型: ulong, 注释: 下一档位剩余积分 */
        nextRewardPoint?: number;
    };
    type RankingListData = {
        /** 表类型: string, 注释: 顺序id */
        id?: string;
        /** 表类型: data_RankingData, 注释: 数据排名表 */
        RankingData?: RankingData;
        /** 表类型: int, 注释: 所在页签 */
        Tab?: number;
        /** 表类型: string, 注释: 所属活动id */
        activeId?: string;
    };
    type RebateActiveBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动编号 */
        activityNum?: number;
        /** 表类型: string, 注释: 宣传图 */
        publicityFigure?: string;
        /** 表类型: string, 注释: 宣传语1 */
        slogan1?: string;
        /** 表类型: string, 注释: 宣传语2 */
        slogan2?: string;
        /** 表类型: string, 注释: 礼包名称 */
        giftBagName?: string;
        /** 表类型: strings, 注释: 礼包内容 */
        giftBagContent?: List<string>;
        /** 表类型: string, 注释: 礼包消耗 */
        giftBagConsume?: string;
        /** 表类型: string, 注释: 提示 */
        giftBagTips?: string;
    };
    type RebateRewardBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 天数 */
        days?: string;
        /** 表类型: string, 注释: 礼包奖励 */
        giftBagReward?: string;
    };
    type ResourceExchangeBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: byte, 注释: 仓库等级 */
        lv?: number;
        /** 表类型: int, 注释: 单次冷却时间 */
        SingleCooldownTime?: number;
        /** 表类型: int, 注释: 冷却时间最大值 */
        MaxCoolingTime?: number;
        /** 表类型: string, 注释: 基础消耗数量 */
        BaseConsumptionQuantity?: string;
        /** 表类型: string, 注释: 转换后数量 */
        QuantityAfterConversion?: string;
    };
    type ResourceObtian = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 资源获取名称 */
        ResourceObtianName?: string;
        /** 表类型: string, 注释: 资源获取icon */
        ResourceObtianIcon?: string;
        /** 表类型: string, 注释: 资源获取描述 */
        ResourceObtianIconDesc?: string;
        /** 表类型: byte, 注释: 获取种类：
1.获取金币
2.获取木头
3.获取食物
4.获取矿石 */
        ResourceObtianSystem?: number;
        /** 表类型: byte, 注释: 获取类类型
1.直接获取一定时间产量的资源
2.使用道具获取固定数量资源
3.获取提示 */
        ResourceObtianType?: number;
        /** 表类型: int, 注释: 时间 */
        accelerateTime?: number;
        /** 表类型: string, 注释: 道具兑换 */
        ResourceObtianItem?: string;
        /** 表类型: string, 注释: 跳转 */
        jump?: string;
        /** 表类型: string, 注释: 最低获取 */
        minGet?: string;
    };
    type RewardActivityBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 活动id */
        activityId?: string;
        /** 表类型: string, 注释: 获取奖励 */
        rewardContent?: string;
    };
    type RoleBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 角色名 */
        roleName?: string;
        /** 表类型: data_JobBase, 注释: 职业类型
10001.战士
10002.法师
10003.游侠 */
        jobType?: JobBase;
        /** 表类型: byte, 注释: 英雄id */
        heroId?: number;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 圆图标 */
        circularIcon?: string;
        /** 表类型: string, 注释: 模型
这部分的标色不要动，用来表示美术资源是不是正式的 */
        model?: string;
        /** 表类型: string, 注释: 士兵模型 */
        soldier?: string;
        /** 表类型: string, 注释: 动态立绘
这部分的标色不要动，用来表示美术资源是不是正式的 */
        spine?: string;
        /** 表类型: string, 注释: 立绘背景 */
        backround?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: int, 注释: 等级上限 */
        lv?: number;
        /** 表类型: byte, 注释: 稀有度
1.r
2.sr
3.ssr */
        rera?: number;
        /** 表类型: data_QualityEffect, 注释: 品质
1001.绿
1002.蓝
1003.紫
1004.橙
1005.红 */
        originQuality?: QualityEffect;
        /** 表类型: data_QualityEffect, 注释: 最大品质
1001.绿
1002.蓝
1003.紫
1004.橙
1005.红 */
        maxQuality?: QualityEffect;
        /** 表类型: intMap, 注释: 属性值
1.atk 攻击
2.def 防御
3.com 统率
4.cbatk 城战攻击
5.cbdef 城战防御
6.fire 火元素攻击
7 ice 冰元素攻击
8.lighting 雷元素攻击
9. firedef 火元素抵抗
10.icedef 冰元素抵抗
11.lightdef 雷元素抵抗
12.crit暴击率
13.critdamage暴击伤害 */
        attributeMax?: Dictionary<string, number>;
        /** 表类型: int, 注释: 初始成长值
（废弃） */
        growthLim?: number;
        /** 表类型: int, 注释: 成长值上限 */
        growthMax?: number;
        /** 表类型: int, 注释: 突破后赠送成长点 */
        growthSend?: number;
        /** 表类型: string, 注释: 初始获得物品 */
        originItem?: string;
        /** 表类型: string, 注释: 突破后获得物品 */
        brokenItem?: string;
        /** 表类型: string, 注释: 重复获得转化（填道具表id） */
        ownedExchange?: string;
        /** 表类型: string, 注释: 突破解锁道具 */
        breakUnlock?: string;
        /** 表类型: int, 注释: 突破保险值 */
        breakThroughMin?: number;
        /** 表类型: int, 注释: 突破最大值 */
        breakThroughMax?: number;
        /** 表类型: data_SkillBaseMap, 注释: 技能列表（填技能表id） */
        skills?: Dictionary<string, SkillBase>;
        /** 表类型: string, 注释: 突破后id */
        breakThroughChange?: string;
        /** 表类型: int, 注释: 突破次数 */
        breakThroughCount?: number;
        /** 表类型: int, 注释: 潜力值 */
        Potential?: number;
        /** 表类型: float, 注释: 英雄攻击距离 */
        heroAttackDistance?: number;
        /** 表类型: float, 注释: 士兵攻击距离 */
        soldierAttackDistance?: number;
        /** 表类型: int, 注释: 图鉴值 */
        handbookPoint?: number;
        /** 表类型: int, 注释: 英雄所属元素 */
        element?: number;
    };
    type RoleEquipConfig = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 装备位置 */
        equipLoc?: number;
        /** 表类型: string, 注释: 装备位置名称 */
        equipName?: string;
        /** 表类型: bool, 注释: 是否显示 */
        viewShow?: boolean;
        /** 表类型: string, 注释: 装备位置底图 */
        equipLocIcon?: string;
        /** 表类型: string, 注释: 装备解锁条件 */
        unlockTri?: string;
    };
    type RoleExpBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: int, 注释: 对应等级 */
        lv?: number;
        /** 表类型: int, 注释: 升级所需exp */
        expmax?: number;
    };
    type RoleLevelUpBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 强化名称 */
        strengthName?: string;
        /** 表类型: data_ItemBase, 注释: 强化道具 */
        strengthItem?: ItemBase;
        /** 表类型: string, 注释: 获得经验 */
        strengthExchange?: string;
    };
    type RuleBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: int, 注释: 说明系统类型 */
        ruleType?: number;
        /** 表类型: string, 注释: 规则系统名称 */
        ruleName?: string;
        /** 表类型: string, 注释: 规则系统说明 */
        ruleDesc?: string;
        /** 表类型: string, 注释: 显示颜色 */
        rulecolor?: string;
    };
    type RuneSlotBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 符文槽 */
        runeSlot?: number;
        /** 表类型: int, 注释: 符文类型
9001.攻击
9002.防御
9003.统率 */
        runeType?: number;
        /** 表类型: string, 注释: 解锁条件 */
        OpeningConditions?: string;
    };
    type ScoutConfig = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 侦察名称 */
        scoutName?: string;
        /** 表类型: byte, 注释: 侦察类型
1：普通侦察
2：高级侦察
0：顶级侦察 */
        scoutType?: number;
        /** 表类型: string, 注释: 侦察条件 */
        scoutCondition?: string;
        /** 表类型: string, 注释: 侦察描述 */
        scoutDesc?: string;
        /** 表类型: string, 注释: 侦察消耗 */
        scoutCost?: string;
    };
    type ScoutLog = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: uint, 注释: 侦察坐标x */
        scoutLocX?: number;
        /** 表类型: uint, 注释: 侦察坐标y */
        scoutLocY?: number;
        /** 表类型: bytes, 注释: 侦察数据 */
        scoutResult?: List<number>;
    };
    type ServerLog = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: ulongMap*, 注释: 道具相关记录 */
        itemCount?: Dictionary<string, number>;
        /** 表类型: ulongMap*, 注释: 战斗相关记录 */
        battleCount?: Dictionary<string, number>;
        /** 表类型: ulongMap*, 注释: 商店相关记录 */
        shopCount?: Dictionary<string, number>;
        /** 表类型: ulongMap*, 注释: 其他记录 */
        otherCount?: Dictionary<string, number>;
        /** 表类型: string, 注释: log的类型 */
        logType?: string;
        /** 表类型: int, 注释: 敌人的类型 */
        armyType?: number;
        /** 表类型: int, 注释: 等级 */
        lv?: number;
    };
    type ServerUserData = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: int, 注释: 玩家ID数量记录 */
        playerIDCount?: number;
        /** 表类型: intMap, 注释: 玩家阵营数量记录 */
        userCampCount?: Dictionary<string, number>;
    };
    type SeverConfigBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 备注 */
        depict?: string;
        /** 表类型: string, 注释: ip */
        ip?: string;
        /** 表类型: string, 注释: 网关地址 */
        gateWay?: string;
        /** 表类型: string, 注释: 区服ID */
        serverID?: string;
        /** 表类型: string, 注释: 区服名称 */
        serverName?: string;
        /** 表类型: byte, 注释: 区服状态:
1.爆满
2.维护
3.流畅 */
        serverState?: number;
        /** 表类型: bool, 注释: 新区 */
        newServer?: boolean;
        /** 表类型: string, 注释: MAC地址 */
        MAC?: string;
        /** 表类型: date, 注释: 启动时间 */
        setupTime?: number;
        /** 表类型: byte, 注释: 状态 */
        status?: number;
        /** 表类型: uint, 注释: 当前人数 */
        playerSum?: number;
        /** 表类型: bool, 注释: 是否为网关 */
        isGate?: boolean;
        /** 表类型: string, 注释: 备注IP */
        descIP?: string;
        /** 表类型: ulong, 注释: 地图更新序号 */
        mapSaveVer?: number;
        /** 表类型: byte, 注释: 小地图显示玩家等级下限 */
        mapShowLevel?: number;
        /** 表类型: int, 注释: 地图分割尺寸 */
        mapSplit?: number;
        /** 表类型: uint, 注释: 心跳断开限制 */
        heatbeatLimit?: number;
        /** 表类型: int, 注释: 每日最大野外战斗次数 */
        battleTimes?: number;
        /** 表类型: int, 注释: 精英每日首杀奖励次数 */
        EliteFirstMaxNum?: number;
        /** 表类型: int, 注释: 精英每日首杀奖励次数 */
        ElitePartakeMaxNum?: number;
        /** 表类型: float, 注释: 行军速度 */
        marchSpeed?: number;
        /** 表类型: int, 注释: 战役推图玩家基础最大体力 */
        campaignMaxStamina?: number;
        /** 表类型: int, 注释: 每日购买体力基础次数 */
        PhysicalTime?: number;
        /** 表类型: string, 注释: 购买体力跳转（jumpbaseid） */
        PhysicalTimeJump?: string;
        /** 表类型: int, 注释: 上阵基础数量 */
        arrangeNum?: number;
        /** 表类型: int, 注释: 战役起始关卡 */
        campaignStartId?: number;
        /** 表类型: string, 注释: 扫荡模式变更 */
        sweepModeChanged?: string;
        /** 表类型: string, 注释: 推荐阵营奖励 */
        recomCampReward?: string;
        /** 表类型: byte, 注释: 阵营加入等级 */
        campJoin?: number;
        /** 表类型: int, 注释: 围攻等待时间 */
        siegeWaitTime?: number;
        /** 表类型: int, 注释: 围攻提高消耗时间 */
        siegeMaxTime?: number;
        /** 表类型: string, 注释: 突袭消耗 */
        strikeCost?: string;
        /** 表类型: string, 注释: 围攻低消耗 */
        siegeMinCost?: string;
        /** 表类型: string, 注释: 围攻高消耗 */
        siegeMaxCost?: string;
        /** 表类型: string, 注释: 召回功能消耗道具与数量 */
        callBack?: string;
        /** 表类型: string, 注释: 快速召回消耗道具与数量 */
        fastCallBack?: string;
        /** 表类型: string, 注释: 行军加速消耗道具与数量 */
        marchSpeedUp?: string;
        /** 表类型: string, 注释: 超级行军加速消耗道具与数量 */
        superMarchSpeedUp?: string;
        /** 表类型: string, 注释: 炸矿消耗 */
        minerAttack?: string;
        /** 表类型: int, 注释: 同阵营炸矿每日次数 */
        sameCampMinerAttackLim?: number;
        /** 表类型: int, 注释: 领地失守后免战时间（秒） */
        avoidWarTime?: number;
        /** 表类型: string, 注释: 免战特效 */
        avoidWarEffect?: string;
        /** 表类型: int, 注释: 装备库最终解锁容量上限 */
        maxEquipVolume?: number;
        /** 表类型: string, 注释: 突破解锁条件 */
        breakOutUnlock?: string;
        /** 表类型: string, 注释: 日常任务解锁条件 */
        dailyEventUnlock?: string;
        /** 表类型: int, 注释: 解锁野外需要的玩家等级 */
        unlockWildLevel?: number;
        /** 表类型: string, 注释: 军情功能解锁条件 */
        IntelligenceUnlock?: string;
        /** 表类型: byte, 注释: 装备自动锁定品质 */
        equipAuutoLock?: number;
        /** 表类型: int, 注释: 普通成长恢复时间（秒） */
        commonGrowthRecover?: number;
        /** 表类型: int, 注释: 普通成长恢复最大上限 */
        commonGrowthMaxTime?: number;
        /** 表类型: string, 注释: 没有使用 */
        seniorGrowthCost?: string;
        /** 表类型: int, 注释: 跳过战斗时间（秒） */
        battleJumpTime?: number;
        /** 表类型: string, 注释: 跳过战斗条件 */
        battleJumpUnlock?: string;
        /** 表类型: int, 注释: 狂暴开始回合 */
        furiousRound?: number;
        /** 表类型: float, 注释: 狂暴强化倍率 */
        furiousStrengthen?: number;
        /** 表类型: float, 注释: 狂暴强化上限 */
        furiousMaxStrengthen?: number;
        /** 表类型: int, 注释: 据点免战时间（秒） */
        fortifiedAvoidWarTime?: number;
        /** 表类型: int, 注释: 申请总督时长（秒） */
        applyGvernorTime?: number;
        /** 表类型: int, 注释: 据点总督撤离时间（秒） */
        fortifiedRetreatTime?: number;
        /** 表类型: string, 注释: 玩家进攻据点限制 */
        fortifiedAvailable?: string;
        /** 表类型: int, 注释: 资源田收取间隔（间隔多少秒可以收取一次资源） */
        resourceGetInterval?: number;
        /** 表类型: int, 注释: 资源田计算时间（每隔多少秒获取一次addrescue） */
        resourceGetTime?: number;
        /** 表类型: string, 注释: 初次引导气泡获取奖励 */
        firstGuideReward?: string;
        /** 表类型: int, 注释: 掠夺资源数量% */
        plunderPrecent?: number;
        /** 表类型: int, 注释: 掠夺损失% */
        plunderLostPrecent?: number;
        /** 表类型: int, 注释: 补偿百分比 */
        plunderReturn?: number;
        /** 表类型: int, 注释: 高等补偿条件 */
        plunderHighReturnLimit?: number;
        /** 表类型: int, 注释: 高等补偿百分比 */
        plunderHighReturn?: number;
        /** 表类型: uintMap, 注释: 高等补偿消耗 */
        plunderHighReturnCost?: Dictionary<string, number>;
        /** 表类型: int, 注释: 工人掠夺的数量% */
        HamalplunderPrecent?: number;
        /** 表类型: int, 注释: 工人损失数量% */
        HamalLostPrecent?: number;
        /** 表类型: int, 注释: 阵营建设每日最大次数 */
        campDevelopMaxTime?: number;
        /** 表类型: string, 注释: 改名卡消耗 */
        changNameCost?: string;
        /** 表类型: string, 注释: 改名卡消耗不足替换 */
        changNameExchange?: string;
        /** 表类型: string, 注释: 喇叭消耗 */
        hornCost?: string;
        /** 表类型: string, 注释: 喇叭消耗不足替换 */
        hornCostExchange?: string;
        /** 表类型: int, 注释: 聊天间隔cd */
        chatCd?: number;
        /** 表类型: string, 注释: 聊天解锁等级 */
        chatUnlock?: string;
        /** 表类型: string, 注释: 聊天解锁等级描述 */
        chatUnlockDesc?: string;
        /** 表类型: string, 注释: 解锁队列1介绍 */
        Arrangement1UnlockDesc?: string;
        /** 表类型: string, 注释: 解锁队列2介绍 */
        Arrangement2UnlockDesc?: string;
        /** 表类型: int, 注释: 邮件分享CD */
        mailShareCd?: number;
        /** 表类型: int, 注释: 邮件默认保存时间 */
        mailSaveTime?: number;
        /** 表类型: int, 注释: 邮件最大持有数量 */
        mailMaxKeep?: number;
        /** 表类型: int, 注释: 免费附魔恢复间隔时间 */
        enchantingFreeRefreshInterval?: number;
        /** 表类型: string, 注释: 普通附魔消耗 */
        commonGrowthCost?: string;
        /** 表类型: string, 注释: 高级附魔每次消耗 */
        seniorEnchantingCost?: string;
        /** 表类型: string, 注释: 终极附魔消耗 */
        ultimateEnchantingCost?: string;
        /** 表类型: int, 注释: 免费附魔最大次数 */
        enchantingFreeTimesLimit?: number;
        /** 表类型: int, 注释: 附魔气泡出现免费次数 */
        EnchantingBubble?: number;
        /** 表类型: int, 注释: 祭坛出现条件，（消耗n倍时出现） */
        altarBubble?: number;
        /** 表类型: string, 注释: 活动按钮出现条件 */
        activityIconAvailable?: string;
        /** 表类型: string, 注释: 福利按钮出现条件 */
        welfareIconAvailable?: string;
        /** 表类型: string, 注释: 特惠按钮出现条件 */
        preferentialIconAvailable?: string;
        /** 表类型: string, 注释: 商店礼品解锁条件 */
        shopGiftsAvailable?: string;
        /** 表类型: int, 注释: 商店礼品每日最大领取次数 */
        shopGiftsMaxGetNum?: number;
        /** 表类型: int, 注释: 礼品领取后CD(秒) */
        giftCollectionCd?: number;
        /** 表类型: int, 注释: 精英怪刷怪圈数 */
        eliteMonsterCircles?: number;
        /** 表类型: int, 注释: 友军驻守英雄最大数量 */
        friendlyGarrisonHeroMax?: number;
        /** 表类型: int, 注释: 深渊重置次数 */
        abyssResetNum?: number;
        /** 表类型: int, 注释: 密谈重置次数 */
        communeResetNum?: number;
        /** 表类型: int, 注释: 精力重置值 */
        energyResetNum?: number;
        /** 表类型: string, 注释: 阵营拉票消耗 */
        campCanvassConsume?: string;
        /** 表类型: string, 注释: 挂机功能解锁 */
        hangUpUnlock?: string;
        /** 表类型: string, 注释: 采集栏位解锁 */
        collectionHeroUnlock?: string;
        /** 表类型: string, 注释: 采集栏位解锁提示 */
        collectionHeroUnlockDesc?: string;
        /** 表类型: string, 注释: 防守栏位解锁 */
        defenceHeroUnlock?: string;
        /** 表类型: string, 注释: 防守栏位解锁提示 */
        defenceHeroUnlockDesc?: string;
        /** 表类型: string, 注释: 战役胜利退回主界面 */
        pushMapBackMainId?: string;
        /** 表类型: string, 注释: 玩家描述修改限制 */
        playerDescLimit?: string;
        /** 表类型: int, 注释: 玩家描述字数上限 */
        playerDescNumLimit?: number;
        /** 表类型: string, 注释: 限制引导触发等级 */
        idleGuideLimit?: string;
        /** 表类型: int, 注释: 限制引导触发时间 */
        idleGuideTime?: number;
        /** 表类型: string, 注释: 图鉴功能限制 */
        handBookLimit?: string;
        /** 表类型: string, 注释: 等级排行榜限制 */
        RankingLimit?: string;
        /** 表类型: intMap, 注释: 初始的解锁如 地图移动 据点可攻打 征收播报等 */
        unlockInit?: Dictionary<string, number>;
        /** 表类型: string, 注释: 精英组队解锁条件 */
        eliteTeamLimit?: string;
        /** 表类型: string, 注释: 旅行者号解锁 */
        TravelerUnlock?: string;
        /** 表类型: int, 注释: 世界喇叭显示时间 */
        publicHronWorldShowtime?: number;
        /** 表类型: int, 注释: 系统公告显示时间 */
        publicSystemNoticeShowtime?: number;
        /** 表类型: int, 注释: 世界喇叭移动速度 */
        publicHronWorldMoveSpeed?: number;
        /** 表类型: int, 注释: 系统公告移动速度 */
        publicSystemNoticeMoveSpeed?: number;
        /** 表类型: string, 注释: 加速浪费提示弹窗解锁条件 */
        wastePopupLimit?: string;
        /** 表类型: int, 注释: 加速道具每日掉落次数 */
        acceleDropNum?: number;
        /** 表类型: int, 注释: 加速道具掉落概率(百分之多少) */
        acceleDropPer?: number;
    };
    type SeverData = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: byte, 注释: 区服状态:
1.爆满
2.维护
3.流畅 */
        serverState?: number;
        /** 表类型: bool, 注释: 新区 */
        newServer?: boolean;
        /** 表类型: date, 注释: 启动时间 */
        setupTime?: number;
        /** 表类型: byte, 注释: 状态 */
        status?: number;
        /** 表类型: uint, 注释: 当前人数 */
        playerSum?: number;
        /** 表类型: ulong, 注释: 地图更新序号 */
        mapSaveVer?: number;
        /** 表类型: date, 注释: 开服时间 */
        openTime?: number;
        /** 表类型: long, 注释: 服务器偏移时间 */
        addTime?: number;
    };
    type ShopList = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 备注 */
        depict?: string;
        /** 表类型: data_ItemData, 注释: 道具配置 */
        itemData?: ItemData;
        /** 表类型: intMap, 注释: 道具Id */
        itemId?: Dictionary<string, number>;
        /** 表类型: int, 注释: 货币类型 */
        shopType?: number;
        /** 表类型: intMap, 注释: 实际售价 */
        sellPrice?: Dictionary<string, number>;
        /** 表类型: intMap, 注释: 显示原价 */
        showPrice?: Dictionary<string, number>;
        /** 表类型: floats, 注释: 折扣 */
        onOff?: List<number>;
        /** 表类型: int, 注释: 商品购买次数 */
        goodsBuyLimit?: number;
        /** 表类型: ulong, 注释: 商品刷新时间 */
        goodsRefreshTime?: number;
        /** 表类型: string, 注释: 商品购买限制条件 */
        buyLimit?: string;
    };
    type ShopSet = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 商店ID
1001.普通商店
1002.贵族商店
20001.新服兑换商店
30001.召唤怪活动兑换
40001.礼品商店
50001.师徒兑换商店 */
        shopId?: string;
        /** 表类型: int, 注释: 商店页签类型 */
        shopType?: number;
        /** 表类型: string, 注释: 页签描述 */
        typeDepict?: string;
        /** 表类型: string, 注释: 道具名字 */
        itemName?: string;
        /** 表类型: intMap, 注释: 商品{"id":数量} */
        goodsList?: Dictionary<string, number>;
        /** 表类型: int, 注释: 商品购买次数 */
        goodsBuyLimit?: number;
        /** 表类型: int, 注释: 单次购买最大数量 */
        goodsBuyCountLimit?: number;
        /** 表类型: string, 注释: 商品刷新时间（对应timeevent中任务回调名字的内容） */
        goodsRefreshTime?: string;
        /** 表类型: intMap, 注释: 实际售价{"id":数量} */
        sellPrice?: Dictionary<string, number>;
        /** 表类型: intMap, 注释: 显示原价{"id":数量} */
        showPrice?: Dictionary<string, number>;
        /** 表类型: floats, 注释: 折扣 */
        onOff?: List<number>;
        /** 表类型: string, 注释: 商品购买限制条件 */
        buyLimit?: string;
        /** 表类型: string, 注释: 商品购买限制描述 */
        buyLimitDesc?: string;
        /** 表类型: bool, 注释: 是否显示 */
        visible?: boolean;
        /** 表类型: bool, 注释: 是否显示红点 */
        redPoint?: boolean;
    };
    type SignInBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 活动编号 */
        activityNum?: number;
        /** 表类型: strings, 注释: 奖励组id */
        rewardGroups?: List<string>;
        /** 表类型: int, 注释: 循环模式 */
        loopMode?: number;
        /** 表类型: string, 注释: 刷新时间 */
        refreshTimeEvent?: string;
    };
    type SkillBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 技能名 */
        skillName?: string;
        /** 表类型: string, 注释: 技能描述 */
        depict?: string;
        /** 表类型: string, 注释: 动画 */
        anim?: string;
        /** 表类型: byte, 注释: 技能类型 */
        skillType?: number;
        /** 表类型: int, 注释: 技能战力 */
        skillPower?: number;
        /** 表类型: string, 注释: 技能图标 */
        icon?: string;
        /** 表类型: byte, 注释: 发动优先级 */
        priority?: number;
        /** 表类型: ints, 注释: 发动回合
 */
        castRounds?: List<number>;
        /** 表类型: int, 注释: 发动次数
 */
        castNum?: number;
        /** 表类型: string, 注释: 公式 */
        actions?: string;
        /** 表类型: string, 注释: 技能播放特效 */
        effect?: string;
        /** 表类型: float, 注释: 特效播放延迟 */
        effectpDelay?: number;
        /** 表类型: string, 注释: 音效 */
        voice?: string;
    };
    type SpecilEffectBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 备注描述 */
        depict?: string;
        /** 表类型: string, 注释: 特效名 */
        effectName?: string;
        /** 表类型: string, 注释: 特效资源 */
        effect?: string;
        /** 表类型: float, 注释: 播放速度 */
        speed?: number;
        /** 表类型: string, 注释: 特效点位置 */
        effectPoint?: string;
        /** 表类型: string, 注释: 下一个特效 */
        nextEffect?: string;
        /** 表类型: float, 注释: 下一个特效延迟 */
        nextDelay?: number;
        /** 表类型: bool, 注释: 是否为盾特效 */
        isSheld?: boolean;
        /** 表类型: byte, 注释: 曲线类型
0：没有曲线
1：直接出现在目标上
2：平直弹道
3：抛物线
4：弓箭混合（近距离直线/远距离曲线） */
        curvetype?: number;
        /** 表类型: float, 注释: 子弹速度 */
        bulletSpeed?: number;
    };
    type StatusDepict = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 对应属性 */
        status?: string;
        /** 表类型: string, 注释: 属性名称 */
        statusName?: string;
        /** 表类型: string, 注释: 属性描述 */
        statusDepict?: string;
    };
    type SummonMonsterActivityBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 活动id */
        activityId?: string;
        /** 表类型: string, 注释: 参与活动条件 */
        joinActivityCondition?: string;
        /** 表类型: string, 注释: 低级召唤怪编号(怪物召唤表编号) */
        lowSummonMonsterNum?: string;
        /** 表类型: string, 注释: 低级召唤怪消耗道具 */
        lowSummonMonstersConsumeItems?: string;
        /** 表类型: string, 注释: 中级召唤怪编号 */
        midSummonMonsterNum?: string;
        /** 表类型: string, 注释: 中级召唤怪消耗道具 */
        midSummonMonstersConsumeItems?: string;
        /** 表类型: string, 注释: 高级召唤怪编号 */
        highSummonMonsterNum?: string;
        /** 表类型: string, 注释: 高级召唤怪消耗道具 */
        highSummonMonstersConsumeItems?: string;
        /** 表类型: string, 注释: 兑换预览 */
        exchangePreview?: string;
        /** 表类型: string, 注释: 兑换商店id */
        exchangeShopId?: string;
    };
    type SystemConsumeBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 类型
1.深渊次数购买
2.世界boss挑战消耗
3.集结消耗 */
        consumeType?: number;
        /** 表类型: int, 注释: 第N次购买 */
        buyNum?: number;
        /** 表类型: string, 注释: 该次消耗 */
        consumeContent?: string;
    };
    type TechnologyListBase = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: int, 注释: 提升
1001金币科技
1002.木材科技
1003.食物科技
1004.魔矿石科技
1005.全资源科技
1006.建造加速科技
1007.仓库容量科技
1008.秘技科技
1009.极品装备科技
1010.贸易专家科技
1100.近战军营容量提升科技
1101.法师军营容量提升科技
1102.射手军营容量提升科技
1103.近战
1200.行军速度科技
1206.遗物注能术科技 */
        technologyType?: number;
        /** 表类型: string, 注释: 科技图标 */
        technologyIcon?: string;
        /** 表类型: byte, 注释: 所属页签
1.内政页签
2.军事页签
3.进阶页签 */
        logType?: number;
        /** 表类型: string, 注释: 获得道具id */
        technologyItem?: string;
        /** 表类型: string, 注释: 科技显示名称 */
        technologyShowName?: string;
        /** 表类型: string, 注释: 备注 */
        technologyList?: string;
        /** 表类型: string, 注释: 效果描述 */
        effectDesc?: string;
        /** 表类型: string, 注释: 下一级效果描述 */
        nextEffectDesc?: string;
        /** 表类型: string, 注释: 科技阶段
没填则没有阶段
填值则显示对应阶段 */
        technologysStage?: string;
        /** 表类型: string, 注释: 总共几个阶段 */
        allStage?: string;
        /** 表类型: string, 注释: 当前等级 */
        currentLevel?: string;
        /** 表类型: string, 注释: 显示等级 */
        showLevel?: string;
        /** 表类型: string, 注释: 研发特殊条件：
 */
        technologyCondition?: string;
        /** 表类型: string, 注释: 研发条件描述：
 */
        technologyDes?: string;
        /** 表类型: string, 注释: 消耗 */
        itemCost?: string;
        /** 表类型: string, 注释: 下一级id */
        nextLevel?: string;
        /** 表类型: string, 注释: 研发时间 */
        productionTime?: string;
        /** 表类型: int, 注释: 位置x */
        locX?: number;
        /** 表类型: int, 注释: 位置y */
        locY?: number;
        /** 表类型: string, 注释: 连接线位置 */
        connectLine?: string;
    };
    type TerritoryEventListBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 探索事件名称 */
        terEventName?: string;
        /** 表类型: string, 注释: 任务摘要 */
        terEventSynopsis?: string;
        /** 表类型: byte, 注释: 探索事件类型
1.任务事件
2.清除障碍物
3.击败敌人
4.与npc互动
5.过程场画
6.招募英雄
7.自动接任务
8.接任务自动完成 */
        terEventType?: number;
        /** 表类型: string, 注释: 事件对应id（填） */
        terEventId?: string;
        /** 表类型: string, 注释: 探索事件开始剧情对话（填入引导id） */
        terEventdialogue?: string;
        /** 表类型: string, 注释: 探索事件过程中剧情对话（填入引导id） */
        terEventProgressdialogue?: string;
        /** 表类型: string, 注释: 事件完成时剧情对话（填入引导id） */
        terEventEnddialogue?: string;
        /** 表类型: string, 注释: 后续探索事件id
填入[[TerritoryEventBase中的id]] */
        nextTerEvent?: string;
        /** 表类型: string, 注释: 事件出现条件 */
        eventvVisableLimit?: string;
        /** 表类型: string, 注释: 事件接受条件 */
        eventAcceptLimit?: string;
        /** 表类型: string, 注释: 事件接受条件描述 */
        eventAcceptLimitDesc?: string;
        /** 表类型: string, 注释: 完成条件 */
        finishLimit?: string;
        /** 表类型: string, 注释: 完成奖励
若此任务完成需要解锁区域，请填入TerritoryBase中的区域id[[物品 */
        finishReward?: string;
        /** 表类型: string, 注释: 完成后删除的道具 */
        finishCost?: string;
        /** 表类型: string, 注释: 任务归属的npc的id
TerritoryNpcListBase中的id */
        terEventNpc?: string;
        /** 表类型: string, 注释: 战斗信息(如果是战斗任务，则不需要填完成条件) */
        battleID?: string;
        /** 表类型: ulong, 注释: 事件等待时间 */
        eventWaitTime?: number;
        /** 表类型: string, 注释: jumpbase跳转id */
        jumpId?: string;
    };
    type TerritoryListBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 区域名称 */
        areaName?: string;
        /** 表类型: string, 注释: 区域场景模型 */
        areaModel?: string;
        /** 表类型: string, 注释: 探索区域对应id
填TechnologyBase中的id
 */
        TerritoryBaseid?: string;
        /** 表类型: int, 注释: 探索等级 */
        exploreLevel?: number;
        /** 表类型: strings, 注释: 区域中的npcid（多个时使用|隔开） */
        areaNpc?: List<string>;
        /** 表类型: string, 注释: 下一级区域id（若同时解锁多个） */
        nextArea?: string;
    };
    type TerritoryNpcListBase = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: npc名称 */
        NpcName?: string;
        /** 表类型: string, 注释: 图标 */
        icon?: string;
        /** 表类型: string, 注释: 模型 */
        model?: string;
        /** 表类型: string, 注释: 执行动作 */
        modelAction?: string;
        /** 表类型: string, 注释: 动态立绘 */
        spine?: string;
        /** 表类型: string, 注释: 对应npcid
填TerritoryNpcBase的id */
        NpcId?: string;
        /** 表类型: int, 注释: npc类型
1.普通npc（对话任务）
2 */
        NpcType?: number;
        /** 表类型: string, 注释: 所在区域（填TerritoryListBase中的id） */
        NpcArea?: string;
        /** 表类型: float, 注释: 坐标位置x */
        areaLocX?: number;
        /** 表类型: float, 注释: 坐标位置y */
        areaLocY?: number;
        /** 表类型: float, 注释: 模型旋转角度 */
        angle?: number;
        /** 表类型: data_DialogueBase, 注释: 空闲时对话事件（填入对话表id） */
        dialogue?: DialogueBase;
        /** 表类型: string, 注释: npc对应事件（填入事件表id） */
        npcEvent?: string;
        /** 表类型: string, 注释: npc出现条件 */
        visableLimit?: string;
        /** 表类型: string, 注释: NPC消失条件 */
        unviableLimit?: string;
        /** 表类型: string, 注释: 互动限制 */
        activeLimit?: string;
        /** 表类型: string, 注释: 互动限制提示 */
        activeLimitDesc?: string;
    };
    type Test = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 道具名字 */
        itemName?: string;
        /** 表类型: data_ItemBase, 注释: test1 */
        test1?: ItemBase;
        /** 表类型: datas_ItemBase, 注释: test2 */
        test2?: List<ItemBase>;
        /** 表类型: stringMap, 注释: test3 */
        test3?: Dictionary<string, string>;
        /** 表类型: stringsMap, 注释: test4 */
        test4?: Dictionary<string, List<string>>;
        /** 表类型: data_ItemBaseMap, 注释: test5 */
        test5?: Dictionary<string, ItemBase>;
        /** 表类型: datas_ItemBaseMap, 注释: test6 */
        test6?: Dictionary<string, List<ItemBase>>;
    };
    type TipsShow = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: ui名 */
        uiName?: string;
        /** 表类型: string, 注释: ui备注 */
        uiDesc?: string;
        /** 表类型: bool, 注释: 是否显示本日不在提示 */
        ifShow?: boolean;
    };
    type TowerBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 下一级id */
        nextId?: string;
        /** 表类型: int, 注释: 防守类型
1.防守等级加成
2.防守火焰元素加成
3.防守冰霜元素加成
4.防守雷电元素加成 */
        defType?: number;
        /** 表类型: int, 注释: 防守等级 */
        defLv?: number;
        /** 表类型: string, 注释: 消耗 */
        itemCost?: string;
        /** 表类型: string, 注释: 特殊条件： */
        useLimit?: string;
        /** 表类型: string, 注释: 特殊条件描述 */
        limitdesc?: string;
        /** 表类型: ulongMap, 注释: 提供buff（对应BuffBaseID） */
        provideBuff?: Dictionary<string, number>;
        /** 表类型: string, 注释: buff描述 */
        provideBuffDesc?: string;
    };
    type TowerSettingBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 自动补兵百分比条件 */
        autoReinforcements?: number;
        /** 表类型: string, 注释: 补兵消耗（每个兵需要消耗的资源） */
        replenishmentCost?: string;
        /** 表类型: int, 注释: 消耗时间（0-100%兵力需要消耗的时间）秒 */
        consumeTime?: number;
        /** 表类型: int, 注释: 加速补兵最小时间 */
        consumeMinTime?: number;
        /** 表类型: string, 注释: 消耗钻石数 */
        consumeDiamond?: string;
        /** 表类型: int, 注释: 参战百分比条件 */
        joinBattleConditions?: number;
        /** 表类型: ulong, 注释: 驻守英雄单次最大时长 */
        garrisonHeroMaxTime?: number;
    };
    type TravelerBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: string, 注释: 下一级id */
        frontId?: string;
        /** 表类型: string, 注释: 旅人名称 */
        travelerName?: string;
        /** 表类型: int, 注释: 旅人id */
        travelerId?: number;
        /** 表类型: string, 注释: 对应baseid */
        itemBaseId?: string;
        /** 表类型: int, 注释: 获得类型
1.解锁获得
2.购买获得 */
        unlockType?: number;
        /** 表类型: string, 注释: 解锁条件 */
        unlockingConditions?: string;
        /** 表类型: string, 注释: 解锁条件描述 */
        unlockingConditionsDesc?: string;
        /** 表类型: int, 注释: 星级 */
        starRating?: number;
        /** 表类型: string, 注释: 升下一级所需升星材料 */
        nextLvNeedMaterials?: string;
        /** 表类型: string, 注释: 获得奖励 */
        rewards?: string;
        /** 表类型: ulongMap, 注释: 提供buff（对应BuffBaseID） */
        provideBuff?: Dictionary<string, number>;
        /** 表类型: string, 注释: buff描述 */
        provideBuffDesc?: string;
        /** 表类型: string, 注释: 动态立绘 */
        spine?: string;
        /** 表类型: string, 注释: 立绘背景 */
        backround?: string;
        /** 表类型: string, 注释: 旅人生平介绍 */
        travelerDesc?: string;
        /** 表类型: ulongMap, 注释: 送礼所获好感度[ItemBaseID */
        giftGetFavorability?: Dictionary<string, number>;
    };
    type TravelerDialogueBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 好感度等级 */
        favorability?: number;
        /** 表类型: strings, 注释: 互动台词 */
        DialogueId?: List<string>;
        /** 表类型: strings, 注释: 冷淡互动台词库id */
        coldDialogueId?: List<string>;
        /** 表类型: strings, 注释: 中立互动台词库id */
        neutralDialogueId?: List<string>;
        /** 表类型: strings, 注释: 友善互动台词库id */
        friendlyDialogueId?: List<string>;
        /** 表类型: strings, 注释: 尊敬互动台词库id */
        respectDialogueId?: List<string>;
        /** 表类型: strings, 注释: 崇敬互动台词库id */
        reverenceDialogueId?: List<string>;
        /** 表类型: strings, 注释: 崇拜互动台词库id */
        worshipDialogueId?: List<string>;
        /** 表类型: strings, 注释: 爱慕互动台词库id */
        aimerDialogueId?: List<string>;
    };
    type TravelerFavorabilityBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 旅人id */
        travelerId?: number;
        /** 表类型: int, 注释: 友好度
0.冷淡
1.初识
2.友善
3.熟悉
4.亲切
5.亲密
6.爱慕
7.尊敬
8.崇敬
9.崇拜
10.生死相许 */
        favorability?: number;
        /** 表类型: ulongMap, 注释: 提供buff（对应BuffBaseID） */
        provideBuff?: Dictionary<string, number>;
        /** 表类型: string, 注释: buff描述 */
        provideBuffDesc?: string;
        /** 表类型: int, 注释: 到达本级所需友好度 */
        requiredFavorability?: number;
        /** 表类型: string, 注释: 解锁条件 */
        unlockingConditions?: string;
        /** 表类型: string, 注释: 解锁条件描述 */
        unlockingConditionsDesc?: string;
        /** 表类型: strings, 注释: 台词库id */
        lineLibraryId?: List<string>;
        /** 表类型: strings, 注释: 互动库id（对应TravelerInteractiveBaseID） */
        interactiveId?: List<string>;
    };
    type TravelerFavorabilityConfig = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 旅人id */
        favorabilityType?: number;
        /** 表类型: string, 注释: 友好度
 */
        favorabilityName?: string;
    };
    type TravelerInteractiveBase = {
        /** 表类型: string, 注释: 配置id */
        id?: string;
        /** 表类型: int, 注释: 所属旅人id */
        heroInteractiveId?: number;
        /** 表类型: int, 注释: 互动类型
1.问候
2.喝酒
3.密谈 */
        interactiveType?: number;
        /** 表类型: string, 注释: 解锁条件 */
        unlockingConditions?: string;
        /** 表类型: string, 注释: 解锁阶段显示 */
        ulockFavorabilityType?: string;
        /** 表类型: string, 注释: 解锁条件描述 */
        unlockingConditionsDesc?: string;
        /** 表类型: int, 注释: 获得友好度 */
        getFavorability?: number;
        /** 表类型: int, 注释: 消耗精力 */
        consumeEnergy?: number;
        /** 表类型: int, 注释: 消耗次数 */
        consumeTime?: number;
        /** 表类型: strings, 注释: 台词库id */
        lineLibraryId?: List<string>;
    };
    type TreasureBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 备注描述 */
        depict?: string;
        /** 表类型: byte, 注释: 奖励类型
1.自选奖励
2.随机奖励 */
        treasureType?: number;
        /** 表类型: string, 注释: 自选奖励 */
        treasureChoice?: string;
        /** 表类型: string, 注释: 随机固定奖励(id */
        fixReward?: string;
        /** 表类型: int, 注释: 随机奖励数量 */
        randomcCunt?: number;
        /** 表类型: string, 注释: 随机物品数量权重[道具id */
        randomwWeight?: string;
        /** 表类型: bool, 注释: 是否可以重复获取同一奖励 */
        ifRepeat?: boolean;
    };
    type UnlockConfig = {
        /** 表类型: string, 注释: id */
        id?: string;
        /** 表类型: string, 注释: 解锁内容 */
        position?: string;
        /** 表类型: string, 注释: 解锁条件 */
        eliminate?: string;
    };
    type UserDataBase = {
        /** 表类型: string, 注释: 用户uid */
        id?: string;
        /** 表类型: string, 注释: 用户名 */
        playerName?: string;
        /** 表类型: string, 注释: token */
        token?: string;
        /** 表类型: string, 注释: 玩家搜索ID */
        searchId?: string;
        /** 表类型: string*, 注释: 密码 */
        passWord?: string;
        /** 表类型: byte, 注释: 账号状态 */
        status?: number;
        /** 表类型: intMap, 注释: 持有货币 */
        currency?: Dictionary<string, number>;
        /** 表类型: bool, 注释: 是否屏蔽 */
        isBlock?: boolean;
        /** 表类型: bool, 注释: 是否记录 */
        isLogUser?: boolean;
        /** 表类型: ulong, 注释: 登录时间 */
        loginTime?: number;
        /** 表类型: ulong, 注释: 登出时间 */
        logOutTime?: number;
        /** 表类型: byte, 注释: 第三方账号 */
        thirdPartyAccount?: number;
        /** 表类型: byte, 注释: 服务器渠道 */
        serverChannel?: number;
        /** 表类型: byte, 注释: 账号权限 */
        accountAccess?: number;
        /** 表类型: strings, 注释: 黑名单 */
        blacklist?: List<string>;
        /** 表类型: bool, 注释: 是否是npc */
        isNPC?: boolean;
        /** 表类型: string, 注释: 玩家姓名 */
        frinedName?: string;
        /** 表类型: string, 注释: 玩家头像 */
        icon?: string;
        /** 表类型: string, 注释: 玩家头像框 */
        frame?: string;
        /** 表类型: int, 注释: 玩家阵营 */
        camp?: number;
        /** 表类型: int, 注释: 玩家等级 */
        rank?: number;
        /** 表类型: int, 注释: 玩家经验 */
        rankExp?: number;
        /** 表类型: byte, 注释: 玩家阵营爵位等级 */
        campRank?: number;
        /** 表类型: data_FriendDataMap, 注释: 好友列表 */
        friendList?: Dictionary<string, FriendData>;
        /** 表类型: string, 注释: 玩家描述 */
        playerDecipt?: string;
        /** 表类型: data_FriendDataMap, 注释: 申请中好友 */
        application?: Dictionary<string, FriendData>;
        /** 表类型: int, 注释: 玩家战斗力 */
        power?: number;
        /** 表类型: data_MapData, 注释: 玩家主城位置 */
        playerCityLocation?: MapData;
        /** 表类型: ulong, 注释: 野外战斗次数刷新时间 */
        lastRefreshTime?: number;
        /** 表类型: ulong, 注释: 战役推图体力刷新时间 */
        CampaignAPRefreshTime?: number;
        /** 表类型: ulong, 注释: 使用体力药水刷新时间 */
        APPotionRefreshTime?: number;
        /** 表类型: ulong, 注释: 钻石购买体力刷新时间 */
        APBuyRefreshTime?: number;
        /** 表类型: ulong, 注释: 阵营建设次数刷新时间 */
        campDevRefreshTime?: number;
        /** 表类型: ulong, 注释: 阵营爵位每日薪酬 */
        campRankDailyReward?: number;
        /** 表类型: ulong, 注释: 每日任务刷新时间 */
        dailyEventRefreshTime?: number;
        /** 表类型: ulong, 注释: 贵族商店刷新时间 */
        nobleShopRefreshTime?: number;
        /** 表类型: ulong, 注释: 阵营任务刷新时间 */
        campEventRefreshTime?: number;
        /** 表类型: ulong, 注释: 工人最终刷新时间 */
        hamalRefreshTime?: number;
        /** 表类型: data_CampaignData, 注释: 关卡进度 */
        campaignProgress?: CampaignData;
        /** 表类型: ulong, 注释: 免费附魔次数刷新 */
        enchantingFreeRefreshTime?: number;
        /** 表类型: float, 注释: 当前登录时间 */
        currentLoginTIme?: number;
        /** 表类型: string, 注释: 有这个码就可以调用用户任何操作，登陆后生成，每次随机 */
        securityToken?: string;
        /** 表类型: string, 注释: 用户名 */
        userid?: string;
        /** 表类型: string, 注释: 用户密码 */
        userpwd?: string;
        /** 表类型: int, 注释: 账户人民币金额 */
        monery?: number;
        /** 表类型: bool, 注释: 账户状态 */
        active?: boolean;
        /** 表类型: float, 注释: 用户被封禁的时间 */
        blokerTime?: number;
        /** 表类型: string, 注释: 微信平台唯一识别码 */
        wechatToken?: string;
        /** 表类型: string, 注释: 苹果账户唯一识别码 */
        appleToken?: string;
        /** 表类型: string, 注释: qq平台唯一识别码 */
        qqToken?: string;
        /** 表类型: stringMap, 注释: 玩家设置 */
        playerSeting?: Dictionary<string, string>;
        /** 表类型: data_UseSimpleInfo, 注释: 玩家简易信息 */
        useSimpleInfo?: UseSimpleInfo;
        /** 表类型: datas_ChatMessageMap, 注释: 聊天记录 */
        chatLog?: Dictionary<string, List<ChatMessage>>;
        /** 表类型: data_FortifiedData, 注释: 担任据点总督 */
        keepGvernor?: FortifiedData;
        /** 表类型: bytes, 注释: 玩家交易所效率表 */
        ExchangeEfficiencyList?: List<number>;
        /** 表类型: data_GrowthFundAwardDataMap, 注释: 成长基金数据 */
        growthFundAwardData?: Dictionary<string, GrowthFundAwardData>;
        /** 表类型: stringMap, 注释: 玩家抽卡数据 */
        luckyDrawData?: Dictionary<string, string>;
        /** 表类型: int, 注释: 新服挑战活动天数进度 */
        challengeTaskProgress?: number;
        /** 表类型: ulong, 注释: buff活动奖励刷新时间 */
        buffActivityBonusRefreshTime?: number;
        /** 表类型: ulong, 注释: 深渊刷新时间 */
        abyssRefreshTime?: number;
        /** 表类型: int, 注释: 深渊重置次数 */
        abyssResetNum?: number;
        /** 表类型: int, 注释: 密谈重置次数 */
        communeResetNum?: number;
        /** 表类型: int, 注释: 精力重置值 */
        energyResetNum?: number;
        /** 表类型: ulongMap, 注释: 旅行者号记录 */
        travelerRecord?: Dictionary<string, number>;
        /** 表类型: string, 注释: 阵营拉票消耗 */
        campCanvassConsume?: string;
        /** 表类型: data_MasterDiscipleDataMap, 注释: 徒弟列表 */
        discipleList?: Dictionary<string, MasterDiscipleData>;
        /** 表类型: data_MasterDiscipleDataMap, 注释: 申请中徒弟 */
        applicationDisciple?: Dictionary<string, MasterDiscipleData>;
        /** 表类型: data_MasterDiscipleData, 注释: 当前师父 */
        currentMaster?: MasterDiscipleData;
        /** 表类型: ulong, 注释: 解除师徒关系时间 */
        dissolveRelationshipTime?: number;
        /** 表类型: data_MasterDiscipleDataMap, 注释: 申请中师父 */
        applicationMaster?: Dictionary<string, MasterDiscipleData>;
    };
    type UserVarBase = {
        /** 表类型: string, 注释: 用户uid */
        id?: string;
        /** 表类型: byte, 注释: 游戏中账号状态 */
        inGameStatus?: number;
        /** 表类型: intMap, 注释: 持有货币 */
        currency?: Dictionary<string, number>;
        /** 表类型: bool, 注释: 小人图标 */
        littleManIcon?: boolean;
        /** 表类型: data_RoleData, 注释: 玩家角色 */
        PlayerAccount?: RoleData;
        /** 表类型: data_RoleDataMap, 注释: 英雄列表 */
        listOfFigures?: Dictionary<string, RoleData>;
        /** 表类型: data_ArrangementData, 注释: 布阵信息 */
        Arrangement?: ArrangementData;
        /** 表类型: date*, 注释: 创角时间 */
        creatTime?: number;
        /** 表类型: byte, 注释: 阵营 */
        camp?: number;
    };
    type UseSimpleInfo = {
        /** 表类型: string, 注释: 用户uid */
        id?: string;
        /** 表类型: int, 注释: 玩家阵营 */
        camp?: number;
        /** 表类型: string, 注释: 玩家头像 */
        icon?: string;
        /** 表类型: string, 注释: 玩家头像框 */
        frame?: string;
        /** 表类型: string, 注释: 玩家姓名 */
        frinedName?: string;
        /** 表类型: int, 注释: 玩家等级 */
        rank?: number;
        /** 表类型: byte, 注释: 玩家阵营爵位等级 */
        campRank?: number;
        /** 表类型: string, 注释: 玩家所在区域 */
        Area?: string;
        /** 表类型: int, 注释: 玩家战斗力 */
        playerPower?: number;
        /** 表类型: int, 注释: 玩家胜利次数 */
        victoryNum?: number;
        /** 表类型: string, 注释: 玩家搜索ID */
        searchId?: string;
        /** 表类型: int, 注释: 持有票数 */
        ownTicketNum?: number;
        /** 表类型: int, 注释: 竞选票数 */
        ticketNum?: number;
        /** 表类型: string, 注释: 票投给谁 */
        ticketTar?: string;
        /** 表类型: int, 注释: 官职 */
        position?: number;
        /** 表类型: string, 注释: 阵营官职 */
        officeposition?: string;
        /** 表类型: intMap, 注释: 记录每日宝箱的领取状态 */
        campTreasure?: Dictionary<string, number>;
        /** 表类型: int, 注释: 每周排行据点战次数 */
        weekCampFortifiedBattleNum?: number;
        /** 表类型: int, 注释: 每周排行领地战次数 */
        weekCampPlayerBattle?: number;
        /** 表类型: int, 注释: 每周排行阵营建设次数 */
        weekCampDevelopNum?: number;
    };
    type WalletErrLog = {
        /** 表类型: string, 注释: 记录ID */
        id?: string;
        /** 表类型: string, 注释: 类名 */
        className?: string;
        /** 表类型: string, 注释: 方法名 */
        methodName?: string;
        /** 表类型: string, 注释: 玩家ID */
        userToken?: string;
        /** 表类型: string, 注释: log信息 */
        logMessage?: string;
        /** 表类型: date, 注释: 记录时间 */
        resultTime?: number;
    };
    type WalletLog = {
        /** 表类型: string, 注释: 记录ID */
        id?: string;
        /** 表类型: string, 注释: 类名 */
        className?: string;
        /** 表类型: string, 注释: 方法名 */
        methodName?: string;
        /** 表类型: string, 注释: 玩家ID */
        userToken?: string;
        /** 表类型: string, 注释: log信息 */
        logMessage?: string;
        /** 表类型: date, 注释: 记录时间 */
        resultTime?: number;
    };
    type WorldBossBase = {
        /** 表类型: string, 注释: 活动编号 */
        id?: string;
        /** 表类型: string, 注释: 世界boss活动id */
        integralID?: string;
        /** 表类型: strings, 注释: 排名奖励（EventRankingAwardBase中的id） */
        numReward?: List<string>;
        /** 表类型: string, 注释: 排序方式（关联RankingBase表） */
        rankingMode?: string;
        /** 表类型: ulong, 注释: 邮件发送间隔时间 */
        mailInterval?: number;
        /** 表类型: int, 注释: 单次邮件发送数量 */
        singleMailCount?: number;
        /** 表类型: bool, 注释: 是否阵营奖励 */
        whetherCampReward?: boolean;
        /** 表类型: strings, 注释: 阵营奖励 */
        campReward?: List<string>;
        /** 表类型: ulong, 注释: 阵营奖励分数限制 */
        campRewardLimit?: number;
        /** 表类型: int, 注释: 每日挑战次数 */
        dailyTime?: number;
        /** 表类型: string, 注释: boss战id */
        armyBaseid?: string;
        /** 表类型: string, 注释: 刷新时间 */
        timeRefresh?: string;
        /** 表类型: strings, 注释: 挑战消耗 */
        worldBossConsume?: List<string>;
        /** 表类型: string, 注释: 不可战斗状态模型 */
        unBattleModel?: string;
        /** 表类型: bool, 注释: 不可战斗需要底座 */
        unBattleNeedBase?: boolean;
        /** 表类型: string, 注释: 战斗中状态模型 */
        battleModel?: string;
        /** 表类型: bool, 注释: 战斗需要底座 */
        battleNeedBase?: boolean;
        /** 表类型: string, 注释: 结束后状态模型 */
        battledModel?: string;
        /** 表类型: bool, 注释: 结束需要底座 */
        battledNeedBase?: boolean;
        /** 表类型: string, 注释: 底座模型 */
        baseModel?: string;
        /** 表类型: string, 注释: 体积(x */
        volume?: string;
        /** 表类型: string, 注释: 领地中位置（X，Y) */
        areaLoc?: string;
        /** 表类型: string, 注释: boss显示条件 */
        shouwLimit?: string;
        /** 表类型: string, 注释: 下一个boss的id */
        nextBossId?: string;
        /** 表类型: string, 注释: 点击boss弹窗文字 */
        clickText?: string;
        /** 表类型: ints, 注释: 狂暴追加攻击力（第一天增加|第二天增加。。。。|后续重复增加） */
        furiousAttack?: List<number>;
    };
    type ItemBase = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 引用id */
        quoteuId?: string;
        /** 表类型: string, 注释: 祭坛效果名称 */
        itemName?: string;
        /** 表类型: string, 注释: 描述 */
        depict?: string;
        /** 表类型: string, 注释: 阵营1图标 */
        icon?: string;
        /** 表类型: string, 注释: 阵营2图标 */
        camp2icon?: string;
        /** 表类型: string, 注释: 阵营3图标 */
        camp3icon?: string;
        /** 表类型: string, 注释: 模型 */
        model?: string;
        /** 表类型: string, 注释: 暗影模型 */
        camp2model?: string;
        /** 表类型: string, 注释: 自然模型 */
        camp3model?: string;
        /** 表类型: string, 注释: 特效 */
        effect?: string;
        /** 表类型: string, 注释: 暗影特效 */
        camp2effect?: string;
        /** 表类型: string, 注释: 自然特效 */
        camp3effect?: string;
        /** 表类型: int, 注释: 页签类型 */
        tagType?: number;
        /** 表类型: int, 注释: 道具品类 */
        itemClass?: number;
        /** 表类型: int, 注释: 戒指类型
7000勇气之戒
7001力量之戒
7002智慧之戒
7003正义之戒
7004幸运之戒 */
        itemType?: number;
        /** 表类型: int, 注释: 品质 */
        quality?: number;
        /** 表类型: ulong, 注释: 最大数量 */
        maxNum?: number;
        /** 表类型: int, 注释: 使用类型
1.直接单个使用
2.批量使用 */
        useType?: number;
        /** 表类型: data_TreasureBase, 注释: 宝箱获得奖励 */
        treasureReward?: TreasureBase;
        /** 表类型: string, 注释:   */
        useLimit?: string;
        /** 表类型: string, 注释: buff效果对象 */
        useEffect?: string;
        /** 表类型: string, 注释: 跳转 */
        jump?: string;
        /** 表类型: string, 注释: 去使用（引导） */
        utilize?: string;
        /** 表类型: data_PortfolioBase, 注释: 合成获取 */
        portfolio?: PortfolioBase;
        /** 表类型: int, 注释: 生产道具类型类型（填物品id）

2.金币
3.木头
4.食物
5.矿石 */
        currencytype?: number;
        /** 表类型: int, 注释: 装备类型
1：头盔
2：盔甲 */
        equipType?: number;
        /** 表类型: intMap, 注释: buff效果 */
        status?: Dictionary<string, number>;
        /** 表类型: string, 注释: 附魔方案（对应EnchantingBase配置id） */
        enchantingId?: string;
        /** 表类型: string, 注释: 突破前置id */
        breakdownID?: string;
        /** 表类型: intMap, 注释: 升级提升属性 */
        statusUp?: Dictionary<string, number>;
        /** 表类型: uint, 注释: 戒指等级 */
        lv?: number;
        /** 表类型: int, 注释: 稀有度 */
        rera?: number;
        /** 表类型: intMap, 注释: 出售价格 */
        sale?: Dictionary<string, number>;
        /** 表类型: intMap, 注释: 购买价格 */
        buy?: Dictionary<string, number>;
        /** 表类型: string, 注释: 拆除建筑获得物品数量[道具id，数量] */
        fixdecompose?: string;
        /** 表类型: string, 注释: 拆除建筑获得物品数量[道具id，数量区间最小值:数量区间最大值] */
        randomdecompose?: string;
        /** 表类型: bool, 注释: 是否立即使用 */
        imUse?: boolean;
        /** 表类型: string, 注释: 建造速度 */
        productionTime?: string;
        /** 表类型: string, 注释: 消耗 */
        itemCost?: string;
        /** 表类型: string, 注释: 体积(x */
        volume?: string;
        /** 表类型: string, 注释: 归属背包 */
        bagMove?: string;
    };
    type ErrorInfo = {
        /** 表类型: string, 注释: ID */
        id?: string;
        /** 表类型: string, 注释: 错误消息 */
        message?: string;
        /** 表类型: string, 注释: 异常类型 */
        errorType?: string;
        /** 表类型: string, 注释: 创建时间 */
        time?: string;
        /** 表类型: string, 注释: 机型 */
        modelType?: string;
        /** 表类型: string, 注释: IP地址 */
        ip?: string;
    };
    type Formulas = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 备注 */
        depict?: string;
        /** 表类型: string, 注释: 公式 */
        formulas?: string;
        /** 表类型: float, 注释: 浮动范围（填0.1代表 ±0.1 即为 0.9~1.1） */
        randomRange?: number;
    };
    type TimeEvent = {
        /** 表类型: string, 注释: 配置ID */
        id?: string;
        /** 表类型: string, 注释: 任务名称 */
        eventName?: string;
        /** 表类型: ulong, 注释: 任务实际开始时间 */
        taskstartTime?: number;
        /** 表类型: ulong, 注释: 任务结束时间 */
        taskEndTime?: number;
        /** 表类型: ulong, 注释: 上次开始时间 */
        lastStartTime?: number;
        /** 表类型: ulong, 注释: 上次结束时间 */
        lastEndTime?: number;
        /** 表类型: int, 注释: 默认时间是0也就是utc时间 */
        serverTimeZone?: number;
        /** 表类型: int, 注释: 重复循环次数，0就是无限次循环 */
        LoopCount?: number;
        /** 表类型: int, 注释: 已经重复的次数 */
        LoopTimers?: number;
        /** 表类型: bool, 注释: 第一次是否有cd */
        isFristNoCD?: boolean;
        /** 表类型: ulong, 注释: 任务间隔执行时间 */
        taskLoopTime?: number;
        /** 表类型: byte, 注释: 循环类型
1.日循环
2.周循环
3.月循环 */
        timeType?: number;
        /** 表类型: ulong, 注释: 每天任务开始的时间，和loopTime共同执行 */
        startTime?: number;
        /** 表类型: ulong, 注释: 每天任务开始的时间的结束时间 */
        startLimitTime?: number;
        /** 表类型: string, 注释: 前置任务id，可以组成任务集合 */
        predecessorTaskID?: string;
        /** 表类型: string, 注释: 任务的回调事件名字 */
        taskEventString?: string;
        /** 表类型: string, 注释: 任务执行日志列表 */
        taskEventLog?: string;
        /** 表类型: int, 注释: 任务目前状态，0等待执行，1正在执行，2执行错误，3执行成功 */
        taskState?: number;
        /** 表类型: int, 注释: 任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况 */
        taskPreviousState?: number;
    };
}
declare module "AutoCode/Net/BufferDatas/FriendConfigBuffer" {
    export class FriendConfigBuffer {
        static get Instance(): FriendConfigBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/FriendDataBuffer" {
    export class FriendDataBuffer {
        static get Instance(): FriendDataBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/BufferDatas/RoleExpBaseBuffer" {
    export class RoleExpBaseBuffer {
        static get Instance(): RoleExpBaseBuffer;
        private static _instance;
        readArrayBuffer(br: m4m.io.binTool): {};
    }
}
declare module "AutoCode/Net/ClientRequest/ErrorInfoManagerRequest" {
    export class ErrorInfoManagerRequest {
        static get Instance(): ErrorInfoManagerRequest;
        private static _instance;
        /***
         * 记录客户端异常消息
         */
        CreateErrorInfo(message: any, modelType: any): void;
    }
}
declare module "AutoCode/Net/ClientRequest/ExcelManagerRequest" {
    export class ExcelManagerRequest {
        static get Instance(): ExcelManagerRequest;
        private static _instance;
        /***
         * 获取全部test数据
         */
        testDataGetAll(): void;
        /***
         * 通过ID数组获取多条test数据
         */
        testDataByIds(ids: any): void;
        /***
         * 修改单test数组的指定属性，propertyName：属性名，value：值
         */
        modifytestDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个test数据
         */
        addtestData(value: any): void;
        /***
         * 添加test数组数据
         */
        addtestDatas(value: any): void;
        /***
         * 删除一条test
         */
        removetestData(id: any): void;
        /***
         * 通过ID获取UserDataBase数据
         */
        UserDataBaseDataById(id: any): void;
        /***
         * 获取全部UserDataBase数据
         */
        UserDataBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条UserDataBase数据
         */
        UserDataBaseDataByIds(ids: any): void;
        /***
         * 修改单UserDataBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyUserDataBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个UserDataBase数据
         */
        addUserDataBaseData(value: any): void;
        /***
         * 添加UserDataBase数组数据
         */
        addUserDataBaseDatas(value: any): void;
        /***
         * 删除一条UserDataBase
         */
        removeUserDataBaseData(id: any): void;
        /***
         * 通过ID获取UserVarBase数据
         */
        UserVarBaseDataById(id: any): void;
        /***
         * 获取全部UserVarBase数据
         */
        UserVarBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条UserVarBase数据
         */
        UserVarBaseDataByIds(ids: any): void;
        /***
         * 修改单UserVarBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyUserVarBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个UserVarBase数据
         */
        addUserVarBaseData(value: any): void;
        /***
         * 添加UserVarBase数组数据
         */
        addUserVarBaseDatas(value: any): void;
        /***
         * 删除一条UserVarBase
         */
        removeUserVarBaseData(id: any): void;
        /***
         * 通过ID获取WalletErrLog数据
         */
        WalletErrLogDataById(id: any): void;
        /***
         * 获取全部WalletErrLog数据
         */
        WalletErrLogDataGetAll(): void;
        /***
         * 通过ID数组获取多条WalletErrLog数据
         */
        WalletErrLogDataByIds(ids: any): void;
        /***
         * 修改单WalletErrLog数组的指定属性，propertyName：属性名，value：值
         */
        modifyWalletErrLogDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个WalletErrLog数据
         */
        addWalletErrLogData(value: any): void;
        /***
         * 添加WalletErrLog数组数据
         */
        addWalletErrLogDatas(value: any): void;
        /***
         * 删除一条WalletErrLog
         */
        removeWalletErrLogData(id: any): void;
        /***
         * 通过ID获取WalletLog数据
         */
        WalletLogDataById(id: any): void;
        /***
         * 获取全部WalletLog数据
         */
        WalletLogDataGetAll(): void;
        /***
         * 通过ID数组获取多条WalletLog数据
         */
        WalletLogDataByIds(ids: any): void;
        /***
         * 修改单WalletLog数组的指定属性，propertyName：属性名，value：值
         */
        modifyWalletLogDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个WalletLog数据
         */
        addWalletLogData(value: any): void;
        /***
         * 添加WalletLog数组数据
         */
        addWalletLogDatas(value: any): void;
        /***
         * 删除一条WalletLog
         */
        removeWalletLogData(id: any): void;
        /***
         * 通过ID获取ErrorInfo数据
         */
        ErrorInfoDataById(id: any): void;
        /***
         * 获取全部ErrorInfo数据
         */
        ErrorInfoDataGetAll(): void;
        /***
         * 通过ID数组获取多条ErrorInfo数据
         */
        ErrorInfoDataByIds(ids: any): void;
        /***
         * 修改单ErrorInfo数组的指定属性，propertyName：属性名，value：值
         */
        modifyErrorInfoDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ErrorInfo数据
         */
        addErrorInfoData(value: any): void;
        /***
         * 添加ErrorInfo数组数据
         */
        addErrorInfoDatas(value: any): void;
        /***
         * 删除一条ErrorInfo
         */
        removeErrorInfoData(id: any): void;
        /***
         * 通过ID获取Formulas数据
         */
        FormulasDataById(id: any): void;
        /***
         * 获取全部Formulas数据
         */
        FormulasDataGetAll(): void;
        /***
         * 通过ID数组获取多条Formulas数据
         */
        FormulasDataByIds(ids: any): void;
        /***
         * 修改单Formulas数组的指定属性，propertyName：属性名，value：值
         */
        modifyFormulasDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个Formulas数据
         */
        addFormulasData(value: any): void;
        /***
         * 添加Formulas数组数据
         */
        addFormulasDatas(value: any): void;
        /***
         * 删除一条Formulas
         */
        removeFormulasData(id: any): void;
        /***
         * 通过ID获取ServerUserData数据
         */
        ServerUserDataDataById(id: any): void;
        /***
         * 获取全部ServerUserData数据
         */
        ServerUserDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条ServerUserData数据
         */
        ServerUserDataDataByIds(ids: any): void;
        /***
         * 修改单ServerUserData数组的指定属性，propertyName：属性名，value：值
         */
        modifyServerUserDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ServerUserData数据
         */
        addServerUserDataData(value: any): void;
        /***
         * 添加ServerUserData数组数据
         */
        addServerUserDataDatas(value: any): void;
        /***
         * 删除一条ServerUserData
         */
        removeServerUserDataData(id: any): void;
        /***
         * 通过ID获取SeverConfigBase数据
         */
        SeverConfigBaseDataById(id: any): void;
        /***
         * 获取全部SeverConfigBase数据
         */
        SeverConfigBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条SeverConfigBase数据
         */
        SeverConfigBaseDataByIds(ids: any): void;
        /***
         * 修改单SeverConfigBase数组的指定属性，propertyName：属性名，value：值
         */
        modifySeverConfigBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个SeverConfigBase数据
         */
        addSeverConfigBaseData(value: any): void;
        /***
         * 添加SeverConfigBase数组数据
         */
        addSeverConfigBaseDatas(value: any): void;
        /***
         * 删除一条SeverConfigBase
         */
        removeSeverConfigBaseData(id: any): void;
        /***
         * 通过ID获取SeverData数据
         */
        SeverDataDataById(id: any): void;
        /***
         * 获取全部SeverData数据
         */
        SeverDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条SeverData数据
         */
        SeverDataDataByIds(ids: any): void;
        /***
         * 修改单SeverData数组的指定属性，propertyName：属性名，value：值
         */
        modifySeverDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个SeverData数据
         */
        addSeverDataData(value: any): void;
        /***
         * 添加SeverData数组数据
         */
        addSeverDataDatas(value: any): void;
        /***
         * 删除一条SeverData
         */
        removeSeverDataData(id: any): void;
        /***
         * 通过ID获取TimeEvent数据
         */
        TimeEventDataById(id: any): void;
        /***
         * 获取全部TimeEvent数据
         */
        TimeEventDataGetAll(): void;
        /***
         * 通过ID数组获取多条TimeEvent数据
         */
        TimeEventDataByIds(ids: any): void;
        /***
         * 修改单TimeEvent数组的指定属性，propertyName：属性名，value：值
         */
        modifyTimeEventDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个TimeEvent数据
         */
        addTimeEventData(value: any): void;
        /***
         * 添加TimeEvent数组数据
         */
        addTimeEventDatas(value: any): void;
        /***
         * 删除一条TimeEvent
         */
        removeTimeEventData(id: any): void;
        /***
         * 通过ID获取ArrangementData数据
         */
        ArrangementDataDataById(id: any): void;
        /***
         * 获取全部ArrangementData数据
         */
        ArrangementDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条ArrangementData数据
         */
        ArrangementDataDataByIds(ids: any): void;
        /***
         * 修改单ArrangementData数组的指定属性，propertyName：属性名，value：值
         */
        modifyArrangementDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ArrangementData数据
         */
        addArrangementDataData(value: any): void;
        /***
         * 添加ArrangementData数组数据
         */
        addArrangementDataDatas(value: any): void;
        /***
         * 删除一条ArrangementData
         */
        removeArrangementDataData(id: any): void;
        /***
         * 通过ID获取EquipBase数据
         */
        EquipBaseDataById(id: any): void;
        /***
         * 获取全部EquipBase数据
         */
        EquipBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipBase数据
         */
        EquipBaseDataByIds(ids: any): void;
        /***
         * 修改单EquipBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyEquipBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipBase数据
         */
        addEquipBaseData(value: any): void;
        /***
         * 添加EquipBase数组数据
         */
        addEquipBaseDatas(value: any): void;
        /***
         * 删除一条EquipBase
         */
        removeEquipBaseData(id: any): void;
        /***
         * 通过ID获取EquipDate数据
         */
        EquipDateDataById(id: any): void;
        /***
         * 获取全部EquipDate数据
         */
        EquipDateDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipDate数据
         */
        EquipDateDataByIds(ids: any): void;
        /***
         * 修改单EquipDate数组的指定属性，propertyName：属性名，value：值
         */
        modifyEquipDateDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipDate数据
         */
        addEquipDateData(value: any): void;
        /***
         * 添加EquipDate数组数据
         */
        addEquipDateDatas(value: any): void;
        /***
         * 删除一条EquipDate
         */
        removeEquipDateData(id: any): void;
        /***
         * 通过ID获取EquipEffectBase数据
         */
        EquipEffectBaseDataById(id: any): void;
        /***
         * 获取全部EquipEffectBase数据
         */
        EquipEffectBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipEffectBase数据
         */
        EquipEffectBaseDataByIds(ids: any): void;
        /***
         * 修改单EquipEffectBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyEquipEffectBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipEffectBase数据
         */
        addEquipEffectBaseData(value: any): void;
        /***
         * 添加EquipEffectBase数组数据
         */
        addEquipEffectBaseDatas(value: any): void;
        /***
         * 删除一条EquipEffectBase
         */
        removeEquipEffectBaseData(id: any): void;
        /***
         * 通过ID获取EquipExpBase数据
         */
        EquipExpBaseDataById(id: any): void;
        /***
         * 获取全部EquipExpBase数据
         */
        EquipExpBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条EquipExpBase数据
         */
        EquipExpBaseDataByIds(ids: any): void;
        /***
         * 修改单EquipExpBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyEquipExpBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个EquipExpBase数据
         */
        addEquipExpBaseData(value: any): void;
        /***
         * 添加EquipExpBase数组数据
         */
        addEquipExpBaseDatas(value: any): void;
        /***
         * 删除一条EquipExpBase
         */
        removeEquipExpBaseData(id: any): void;
        /***
         * 通过ID获取GameArchiveData数据
         */
        GameArchiveDataDataById(id: any): void;
        /***
         * 获取全部GameArchiveData数据
         */
        GameArchiveDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条GameArchiveData数据
         */
        GameArchiveDataDataByIds(ids: any): void;
        /***
         * 修改单GameArchiveData数组的指定属性，propertyName：属性名，value：值
         */
        modifyGameArchiveDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个GameArchiveData数据
         */
        addGameArchiveDataData(value: any): void;
        /***
         * 添加GameArchiveData数组数据
         */
        addGameArchiveDataDatas(value: any): void;
        /***
         * 删除一条GameArchiveData
         */
        removeGameArchiveDataData(id: any): void;
        /***
         * 通过ID获取ItemBase数据
         */
        ItemBaseDataById(id: any): void;
        /***
         * 获取全部ItemBase数据
         */
        ItemBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条ItemBase数据
         */
        ItemBaseDataByIds(ids: any): void;
        /***
         * 修改单ItemBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyItemBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ItemBase数据
         */
        addItemBaseData(value: any): void;
        /***
         * 添加ItemBase数组数据
         */
        addItemBaseDatas(value: any): void;
        /***
         * 删除一条ItemBase
         */
        removeItemBaseData(id: any): void;
        /***
         * 通过ID获取ItemData数据
         */
        ItemDataDataById(id: any): void;
        /***
         * 获取全部ItemData数据
         */
        ItemDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条ItemData数据
         */
        ItemDataDataByIds(ids: any): void;
        /***
         * 修改单ItemData数组的指定属性，propertyName：属性名，value：值
         */
        modifyItemDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个ItemData数据
         */
        addItemDataData(value: any): void;
        /***
         * 添加ItemData数组数据
         */
        addItemDataDatas(value: any): void;
        /***
         * 删除一条ItemData
         */
        removeItemDataData(id: any): void;
        /***
         * 通过ID获取LevelBase数据
         */
        LevelBaseDataById(id: any): void;
        /***
         * 获取全部LevelBase数据
         */
        LevelBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条LevelBase数据
         */
        LevelBaseDataByIds(ids: any): void;
        /***
         * 修改单LevelBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyLevelBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个LevelBase数据
         */
        addLevelBaseData(value: any): void;
        /***
         * 添加LevelBase数组数据
         */
        addLevelBaseDatas(value: any): void;
        /***
         * 删除一条LevelBase
         */
        removeLevelBaseData(id: any): void;
        /***
         * 通过ID获取RoleBase数据
         */
        RoleBaseDataById(id: any): void;
        /***
         * 获取全部RoleBase数据
         */
        RoleBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条RoleBase数据
         */
        RoleBaseDataByIds(ids: any): void;
        /***
         * 修改单RoleBase数组的指定属性，propertyName：属性名，value：值
         */
        modifyRoleBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个RoleBase数据
         */
        addRoleBaseData(value: any): void;
        /***
         * 添加RoleBase数组数据
         */
        addRoleBaseDatas(value: any): void;
        /***
         * 删除一条RoleBase
         */
        removeRoleBaseData(id: any): void;
        /***
         * 通过ID获取RoleData数据
         */
        RoleDataDataById(id: any): void;
        /***
         * 获取全部RoleData数据
         */
        RoleDataDataGetAll(): void;
        /***
         * 通过ID数组获取多条RoleData数据
         */
        RoleDataDataByIds(ids: any): void;
        /***
         * 修改单RoleData数组的指定属性，propertyName：属性名，value：值
         */
        modifyRoleDataDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个RoleData数据
         */
        addRoleDataData(value: any): void;
        /***
         * 添加RoleData数组数据
         */
        addRoleDataDatas(value: any): void;
        /***
         * 删除一条RoleData
         */
        removeRoleDataData(id: any): void;
        /***
         * 通过ID获取SkinBase数据
         */
        SkinBaseDataById(id: any): void;
        /***
         * 获取全部SkinBase数据
         */
        SkinBaseDataGetAll(): void;
        /***
         * 通过ID数组获取多条SkinBase数据
         */
        SkinBaseDataByIds(ids: any): void;
        /***
         * 修改单SkinBase数组的指定属性，propertyName：属性名，value：值
         */
        modifySkinBaseDataById(id: any, propertyName: any, value: any): void;
        /***
         * 添加一个SkinBase数据
         */
        addSkinBaseData(value: any): void;
        /***
         * 添加SkinBase数组数据
         */
        addSkinBaseDatas(value: any): void;
        /***
         * 删除一条SkinBase
         */
        removeSkinBaseData(id: any): void;
        /***
         * 通过ID获取test数据
         */
        testDataById(id: any): void;
    }
}
declare module "AutoCode/Net/ClientRequest/FrontDataManagerRequest" {
    export class FrontDataManagerRequest {
        static get Instance(): FrontDataManagerRequest;
        private static _instance;
        /***
         * callService
         */
        callService(className: any, funcName: any, args: any): void;
        /***
         * callFunc
         */
        callFunc(tableName: any, funcName: any, args: any): void;
    }
}
declare module "AutoCode/Net/ClientRequest/ItemUseManagerRequest" {
    export class ItemUseManagerRequest {
        static get Instance(): ItemUseManagerRequest;
        private static _instance;
        /***
         * 往指定包裹创建一组道具 currItemObj:用于兑换的道具数组 currBagType:兑换包裹 targetItemObj：兑换的道具ID数组 IsDisplay:是否显示奖励弹窗, bagType:指定包裹  forceTime:生效时间
         */
        creatNewItemsArrToBag(itemInfo: any, buyCurrency: any, IsDisplay: any, bagType: any, fromWhere: any, forceTime: any): void;
        /***
         * 兑换道具 currItemObj:用于兑换的道具数组 currBagType:兑换包裹 targetItemObj：兑换的道具ID数组  targetBagType:目标包裹 IsDisplay:是否显示奖励弹窗 格式类型为 ItemExchangeMessageObj  ItemExchangeTargetMessageObj
         */
        exchange(currItemObj: any, currBagType: any, targetItemObj: any, targetBagType: any, IsDisplay: any): void;
        /***
         * 移除道具 itemsIds:道具uuid列表  itemId:道具baseid  count：数量  useType:通过什么方式消耗  bagType:包裹
         */
        removeItemStatic(itemsIds: any, itemId: any, count: any, useType: any, bagType: any): void;
        /***
         * 删除一个道具 id：道具唯一id  ,IsReturn:是否返回数据
         */
        DelItemdataByBag(id: any, IsReturn: any, bagType: any): void;
        /***
         * 创建新道具 itemId:道具id userId：玩家uid uint：数量，buyCurrency：买卖价格， IsDisplay:是否显示奖励弹窗, fromWhere:途径
         */
        AddcreatNewItem(itemId: any, userId: any, count: any, buyCurrency: any, IsDisplay: any, fromWhere: any): void;
        /***
         * 创建新道具到指定包裹 itemId:道具id userId：玩家uid uint：数量，buyCurrency：买卖价格， IsDisplay:是否显示奖励弹窗,bagType:包裹（1：装备 2：普通包裹 3：邮件 4建筑） fromWhere:途径
         */
        AddcreatNewItemToBag(itemId: any, userId: any, count: any, buyCurrency: any, IsDisplay: any, bagType: any, fromWhere: any): void;
        /***
         * 修改道具数量 itemId:道具唯一id count：数量 , ClientData data:
         */
        SetchangeItemNum(itemDataId: any, count: any): void;
        /***
         * 修改角色身上的道具items和itemData的数据 不返回数据  itemDataId:道具的唯一ID，count：数量
         */
        SetRoleItemsDataNum(itemDataId: any, count: any): void;
        /***
         * 删除一条ItemData 数据 id：道具唯一id  ,IsReturn:是否返回数据
         */
        DelItemdata(id: any, IsReturn: any): void;
        /***
         * 英雄道具碎片转化 RoleBaseId: token:玩家token
         */
        AddItemListsData(RoleBaseId: any, token: any): void;
        /***
         * 宝箱道具处理 itemdataId:道具唯一id RoleBaseId:道具id，token:玩家token, count:数量
         */
        AddBoxBagListData(itemdataId: any, itemboxId: any, token: any, count: any): void;
        /***
         * 领取奖励把邮件中的道具放入背包 List<string>itemuuIds:道具唯一id数组 to:玩家token
         */
        SetEmailToBag(itemuuIds: any, token: any): void;
    }
}
declare module "AutoCode/Net/DataEvents/ArrangementDataEvent" {
    export class ArrangementDataEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 玩家id*/
        static token: string;
        /** 队列安排*/
        static Arrangement: string;
        /** 队伍上限*/
        static Limit: string;
    }
}
declare module "AutoCode/Net/DataEvents/AudioBaseEvent" {
    export class AudioBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 音频ID*/
        static id: string;
        /** 资源名*/
        static resName: string;
        /** 音频key*/
        static audioKey: string;
        /** 音量（0-1）*/
        static volume: string;
        /** 是否循环播放*/
        static isLoop: string;
        /** 备注*/
        static desc: string;
    }
}
declare module "AutoCode/Net/DataEvents/EquipBaseEvent" {
    export class EquipBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 名称*/
        static equipName: string;
        /** 可预览条件*/
        static visibl: string;
        /** 打造解锁条件*/
        static unlock: string;
        /** 打造时间*/
        static buildTime: string;
        /** 打造消耗*/
        static PortfolioCost: string;
        /** 最大词条数量*/
        static maxEffect: string;
        /** 随机词条效果权重*/
        static randomEffect: string;
    }
}
declare module "AutoCode/Net/DataEvents/EquipDateEvent" {
    export class EquipDateEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 装备打造id*/
        static equipData: string;
        /** 打造开始时间*/
        static equipStartTime: string;
        /** 打造结束时间*/
        static equipEndTime: string;
        /** 获取的词条*/
        static equipEffect: string;
    }
}
declare module "AutoCode/Net/DataEvents/EquipEffectBaseEvent" {
    export class EquipEffectBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 词条名称*/
        static equipEffectName: string;
        /** 词条描述*/
        static equipEffectdesc: string;
        /** 词条图标*/
        static equipEffecticon: string;
        /** 词条类型*/
        static equipEffectType: string;
        /** 属性*/
        static status: string;
        /** 词条效果脚本*/
        static equipEffect: string;
    }
}
declare module "AutoCode/Net/DataEvents/EquipExpBaseEvent" {
    export class EquipExpBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 装备对应等级*/
        static lv: string;
        /** 升级所需exp*/
        static expMax: string;
    }
}
declare module "AutoCode/Net/DataEvents/ErrorInfoEvent" {
    export class ErrorInfoEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 错误消息*/
        static message: string;
        /** 异常类型*/
        static errorType: string;
        /** 创建时间*/
        static time: string;
        /** 机型*/
        static modelType: string;
        /** IP地址*/
        static ip: string;
    }
}
declare module "AutoCode/Net/DataEvents/FormulasEvent" {
    export class FormulasEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static depict: string;
        /** 公式*/
        static formulas: string;
        /** 浮动范围（填0.1代表 ±0.1 即为 0.9~1.1）*/
        static randomRange: string;
    }
}
declare module "AutoCode/Net/DataEvents/ItemBaseEvent" {
    export class ItemBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 道具名字*/
        static itemName: string;
        /** 描述*/
        static desc: string;
        /** 图标*/
        static icon: string;
        /** 模型*/
        static model: string;
        /** 特效*/
        static effect: string;
        /** 页签类型*/
        static tagType: string;
        /** 道具类型
    1.基础货币
    2.消耗品
    3.宝箱
    4.碎片
    5.其他物品
    6.装备*/
        static itemType: string;
        /** 品质*/
        static quality: string;
        /** 叠加数量限制*/
        static maxNum: string;
        /** 使用类型
    1.直接单个使用
    2.批量使用*/
        static useType: string;
        /** 使用限制*/
        static useLimit: string;
        /** 效果脚本*/
        static useEffect: string;
        /** 跳转*/
        static jump: string;
        /** 去使用（引导）*/
        static use: string;
        /** 装备类型
    1：头盔
    2：盔甲*/
        static equipType: string;
        /** 属性*/
        static status: string;
        /** 升级提升属性*/
        static statusUp: string;
        /** lv上限*/
        static lv: string;
        /** 稀有度*/
        static rera: string;
        /** 出售价格*/
        static sale: string;
        /** 购买价格*/
        static buy: string;
        /** 分解获得消耗物品数量[道具id，数量区间最小值:数量区间最大值]*/
        static decompose: string;
        /** 是否立即使用*/
        static imUse: string;
    }
}
declare module "AutoCode/Net/DataEvents/ItemDataEvent" {
    export class ItemDataEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 道具名字*/
        static itemName: string;
        /** 配置ID*/
        static baseId: string;
        /** 配置数据*/
        static baseData: string;
        /** 数量*/
        static count: string;
        /** 最大数量*/
        static maxNum: string;
        /** 来源*/
        static fromWhere: string;
        /** 获取使用货币*/
        static buyCurrency: string;
        /** 属性*/
        static status: string;
        /** 等级*/
        static lv: string;
        /** 稀有度*/
        static rera: string;
        /** 品质*/
        static quality: string;
        /** 持有者*/
        static playerUuid: string;
        /** 获取时间*/
        static getTime: string;
        /** 物品状态：
    1.新获得
    2.暂时获得
    3.无状态
    4.锁定*/
        static statustype: string;
        /** 是否满足使用限制*/
        static ifUseLimit: string;
        /** 生效时间*/
        static forceTime: string;
    }
}
declare module "AutoCode/Net/DataEvents/RoleBaseEvent" {
    export class RoleBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** id*/
        static id: string;
        /** 角色名*/
        static roleName: string;
        /** 职业类型
    1.战士
    2.法师
    3.游侠*/
        static jobType: string;
        /** 英雄id*/
        static heroId: string;
        /** 图标*/
        static icon: string;
        /** 模型*/
        static model: string;
        /** 士兵模型*/
        static soldier: string;
        /** 动态立绘*/
        static spine: string;
        /** 立绘背景*/
        static backround: string;
        /** 描述*/
        static desc: string;
        /** 等级上限*/
        static lv: string;
        /** 稀有度
    1.r
    2.sr
    3.ssr*/
        static rera: string;
        /** 品质
    1.绿
    2.蓝
    3.紫
    4.橙
    5.红*/
        static originQuality: string;
        /** 属性值
    1.atk 攻击
    2.def 防御
    3.com 统率
    4.cbatk 城战攻击
    5.cbdef 城战防御
    6.fire 火元素攻击
    7 ice 冰元素攻击
    8.lighting 雷元素攻击
    9. firedef 火元素抵抗
    10.icedef 冰元素抵抗
    11.lightdef 雷元素抵抗*/
        static attributeMax: string;
        /** 初始成长值*/
        static growthLim: string;
        /** 成长值上限*/
        static growthMax: string;
        /** 突破后赠送成长点*/
        static growthSend: string;
        /** 重复获得转化（填道具表id）*/
        static change: string;
        /** 突破保险值*/
        static breakThroughMin: string;
        /** 突破最大值*/
        static breakThroughMax: string;
        /** 突破后id*/
        static breakThroughChange: string;
        /** 突破次数*/
        static breakThroughCount: string;
        /** 潜力值*/
        static Potential: string;
    }
}
declare module "AutoCode/Net/DataEvents/RoleDataEvent" {
    export class RoleDataEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** id*/
        static id: string;
        /** 角色名*/
        static roleName: string;
        /** 所属服务器*/
        static server: string;
        /** 角色配置*/
        static baseData: string;
        /** 角色类型*/
        static roleType: string;
        /** 角色状态（0空闲 1 外出）*/
        static roleState: string;
        /** 上次行动时间*/
        static lastTime: string;
        /** 属性值1.atk 攻击
    2.def 防御
    3.com 统率
    4.cbatk 城战攻击
    5.cbdef 城战防御
    6.fire 火元素攻击
    7 ice 冰元素攻击
    8.lighting 雷元素攻击
    9. firedef 火元素抵抗
    10.icedef 冰元素抵抗
    11.lightdef 雷元素抵抗*/
        static status: string;
        /** 玩家id*/
        static playerId: string;
        /** 当前等级*/
        static lv: string;
        /** 当前经验*/
        static exp: string;
        /** 当前稀有度*/
        static rera: string;
        /** 当前品质*/
        static quality: string;
        /** 当前成长值*/
        static currentGrowth: string;
        /** 当前突破值*/
        static breakThrough: string;
        /** 当前状态*/
        static condition: string;
        /** 人物属性*/
        static roleStatus: string;
        /** 持有货币*/
        static currency: string;
        /** 装备*/
        static equip: string;
        /** 当前装备库上限*/
        static equipmMaxHold: string;
        /** 持有道具*/
        static items: string;
        /** 邮箱道具*/
        static mailItem: string;
        /** 持有建筑*/
        static building: string;
    }
}
declare module "AutoCode/Net/DataEvents/RoleExpBaseEvent" {
    export class RoleExpBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 对应等级*/
        static lv: string;
        /** 升级所需exp*/
        static expmax: string;
    }
}
declare module "AutoCode/Net/DataEvents/ServerUserDataEvent" {
    export class ServerUserDataEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** ID*/
        static id: string;
        /** 玩家ID数量记录*/
        static playerIDCount: string;
        /** 玩家阵营数量记录*/
        static userCampCount: string;
    }
}
declare module "AutoCode/Net/DataEvents/SeverConfigBaseEvent" {
    export class SeverConfigBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static depict: string;
        /** ip*/
        static ip: string;
        /** 网关地址*/
        static gateWay: string;
        /** 区服ID*/
        static serverID: string;
        /** 区服名称*/
        static serverName: string;
        /** 区服状态:
    1.爆满
    2.维护
    3.流畅*/
        static serverState: string;
        /** 新区*/
        static newServer: string;
        /** MAC地址*/
        static MAC: string;
        /** 启动时间*/
        static setupTime: string;
        /** 状态*/
        static status: string;
        /** 当前人数*/
        static playerSum: string;
        /** 是否为网关*/
        static isGate: string;
        /** 备注IP*/
        static descIP: string;
        /** 地图更新序号*/
        static mapSaveVer: string;
        /** 小地图显示玩家等级下限*/
        static mapShowLevel: string;
        /** 地图分割尺寸*/
        static mapSplit: string;
        /** 心跳断开限制*/
        static heatbeatLimit: string;
        /** 每日最大野外战斗次数*/
        static battleTimes: string;
        /** 行军速度*/
        static marchSpeed: string;
        /** 战役推图玩家基础最大体力*/
        static campaignMaxStamina: string;
        /** 每日购买体力基础次数*/
        static PhysicalTime: string;
        /** 上阵基础数量*/
        static arrangeNum: string;
        /** 战役起始关卡*/
        static campaignStartId: string;
        /** 扫荡模式变更*/
        static sweepModeChanged: string;
        /** 推荐阵营奖励*/
        static recomCampReward: string;
        /** 阵营加入等级*/
        static campJoin: string;
        /** 围攻等待时间*/
        static siegeWaitTime: string;
        /** 围攻提高消耗时间*/
        static siegeMaxTime: string;
        /** 突袭消耗*/
        static strikeCost: string;
        /** 围攻低消耗*/
        static siegeMinCost: string;
        /** 围攻高消耗*/
        static siegeMaxCost: string;
        /** 召回功能消耗道具与数量*/
        static callBack: string;
        /** 快速召回消耗道具与数量*/
        static fastCallBack: string;
        /** 行军加速消耗道具与数量*/
        static marchSpeedUp: string;
        /** 超级行军加速消耗道具与数量*/
        static superMarchSpeedUp: string;
        /** 炸矿消耗*/
        static minerAttack: string;
        /** 同阵营炸矿每日次数*/
        static sameCampMinerAttackLim: string;
        /** 领地失守后免战时间（秒）*/
        static avoidWarTime: string;
        /** 免战特效*/
        static avoidWarEffect: string;
        /** 装备库最终解锁容量上限*/
        static maxEquipVolume: string;
        /** 突破解锁条件*/
        static breakOutUnlock: string;
        /** 日常任务解锁条件*/
        static dailyEventUnlock: string;
        /** 解锁野外需要的玩家等级*/
        static unlockWildLevel: string;
        /** 军情功能解锁条件*/
        static IntelligenceUnlock: string;
        /** 装备自动锁定品质*/
        static equipAuutoLock: string;
        /** 普通成长恢复时间（秒）*/
        static commonGrowthRecover: string;
        /** 普通成长恢复最大上限*/
        static commonGrowthMaxTime: string;
        /** 没有使用*/
        static seniorGrowthCost: string;
        /** 跳过战斗时间（秒）*/
        static battleJumpTime: string;
        /** 狂暴开始回合*/
        static furiousRound: string;
        /** 狂暴强化倍率*/
        static furiousStrengthen: string;
        /** 狂暴强化上限*/
        static furiousMaxStrengthen: string;
        /** 据点免战时间（秒）*/
        static fortifiedAvoidWarTime: string;
        /** 申请总督时长（秒）*/
        static applyGvernorTime: string;
        /** 据点总督撤离时间（秒）*/
        static fortifiedRetreatTime: string;
        /** 玩家进攻据点限制*/
        static fortifiedAvailable: string;
        /** 资源田收取间隔（间隔多少秒可以收取一次资源）*/
        static resourceGetInterval: string;
        /** 资源田计算时间（每隔多少秒获取一次addrescue）*/
        static resourceGetTime: string;
        /** 初次引导气泡获取奖励*/
        static firstGuideReward: string;
        /** 掠夺资源数量%*/
        static plunderPrecent: string;
        /** 工人掠夺的数量%*/
        static HamalplunderPrecent: string;
        /** 工人损失数量%*/
        static HamalLostPrecent: string;
        /** 阵营建设每日最大次数*/
        static campDevelopMaxTime: string;
        /** 改名卡消耗*/
        static changNameCost: string;
        /** 改名卡消耗不足替换*/
        static changNameExchange: string;
        /** 喇叭消耗*/
        static hornCost: string;
        /** 喇叭消耗不足替换*/
        static hornCostExchange: string;
        /** 聊天间隔cd*/
        static chatCd: string;
        /** 解锁队列1介绍*/
        static Arrangement1UnlockDesc: string;
        /** 解锁队列2介绍*/
        static Arrangement2UnlockDesc: string;
        /** 邮件分享CD*/
        static mailShareCd: string;
        /** 邮件默认保存时间*/
        static mailSaveTime: string;
        /** 邮件最大持有数量*/
        static mailMaxKeep: string;
        /** 免费附魔恢复间隔时间*/
        static enchantingFreeRefreshInterval: string;
        /** 普通附魔消耗*/
        static commonGrowthCost: string;
        /** 高级附魔每次消耗*/
        static seniorEnchantingCost: string;
        /** 终极附魔消耗*/
        static ultimateEnchantingCost: string;
        /** 免费附魔最大次数*/
        static enchantingFreeTimesLimit: string;
        /** 附魔气泡出现免费次数*/
        static EnchantingBubble: string;
        /** 祭坛出现条件，（消耗n倍时出现）*/
        static altarBubble: string;
        /** 活动按钮出现条件*/
        static activityIconAvailable: string;
        /** 福利按钮出现条件*/
        static welfareIconAvailable: string;
        /** 特惠按钮出现条件*/
        static preferentialIconAvailable: string;
    }
}
declare module "AutoCode/Net/DataEvents/SeverDataEvent" {
    export class SeverDataEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 区服状态:
    1.爆满
    2.维护
    3.流畅*/
        static serverState: string;
        /** 新区*/
        static newServer: string;
        /** 启动时间*/
        static setupTime: string;
        /** 状态*/
        static status: string;
        /** 当前人数*/
        static playerSum: string;
        /** 地图更新序号*/
        static mapSaveVer: string;
        /** 开服时间*/
        static openTime: string;
        /** 服务器偏移时间*/
        static addTime: string;
    }
}
declare module "AutoCode/Net/DataEvents/TimeEventEvent" {
    export class TimeEventEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 任务名称*/
        static eventName: string;
        /** 任务实际开始时间*/
        static taskstartTime: string;
        /** 任务结束时间*/
        static taskEndTime: string;
        /** 上次开始时间*/
        static lastStartTime: string;
        /** 上次结束时间*/
        static lastEndTime: string;
        /** 默认时间是0也就是utc时间*/
        static serverTimeZone: string;
        /** 重复循环次数，0就是无限次循环*/
        static LoopCount: string;
        /** 已经重复的次数*/
        static LoopTimers: string;
        /** 第一次是否有cd*/
        static isFristNoCD: string;
        /** 任务间隔执行时间*/
        static taskLoopTime: string;
        /** 循环类型
    1.日循环
    2.周循环
    3.月循环*/
        static timeType: string;
        /** 每天任务开始的时间，和loopTime共同执行*/
        static startTime: string;
        /** 每天任务开始的时间的结束时间*/
        static startLimitTime: string;
        /** 前置任务id，可以组成任务集合*/
        static predecessorTaskID: string;
        /** 任务的回调事件名字*/
        static taskEventString: string;
        /** 任务执行日志列表*/
        static taskEventLog: string;
        /** 任务目前状态，0等待执行，1正在执行，2执行错误，3执行成功*/
        static taskState: string;
        /** 任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
        static taskPreviousState: string;
    }
}
declare module "AutoCode/Net/DataEvents/UserVarBaseEvent" {
    export class UserVarBaseEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 用户uid*/
        static id: string;
        /** 游戏中账号状态*/
        static inGameStatus: string;
        /** 持有货币*/
        static currency: string;
        /** 小人图标*/
        static littleManIcon: string;
        /** 玩家角色*/
        static PlayerAccount: string;
        /** 英雄列表*/
        static listOfFigures: string;
        /** 布阵信息*/
        static Arrangement: string;
        /** 创角时间*/
        static creatTime: string;
    }
}
declare module "AutoCode/Net/DataEvents/WalletErrLogEvent" {
    export class WalletErrLogEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 记录ID*/
        static id: string;
        /** 类名*/
        static className: string;
        /** 方法名*/
        static methodName: string;
        /** 玩家ID*/
        static userToken: string;
        /** log信息*/
        static logMessage: string;
        /** 记录时间*/
        static resultTime: string;
    }
}
declare module "AutoCode/Net/DataEvents/WalletLogEvent" {
    export class WalletLogEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 记录ID*/
        static id: string;
        /** 类名*/
        static className: string;
        /** 方法名*/
        static methodName: string;
        /** 玩家ID*/
        static userToken: string;
        /** log信息*/
        static logMessage: string;
        /** 记录时间*/
        static resultTime: string;
    }
}
declare module "AutoCode/Net/DataEvents/testEvent" {
    export class testEvent {
        /** 初始化全部数据*/
        static All: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 提示数据*/
        static TipData: string;
        /** 配置ID*/
        static id: string;
        /** 道具名字*/
        static itemName: string;
        /** test1*/
        static test1: string;
        /** test2*/
        static test2: string;
        /** test3*/
        static test3: string;
        /** test4*/
        static test4: string;
        /** test5*/
        static test5: string;
        /** test6*/
        static test6: string;
    }
}
declare module "Common/CommonCell" {
    import { Cell } from "Data/Cell";
    export class CommonCell extends Cell {
        pointerDownFun(): void;
    }
}
declare module "Manager/InputManager" {
    export class InputManager {
        static init(): void;
        static onHorizTouch: Function;
        static onDragTouch: Function;
        static lastPoint_x: number;
        static lastPoint_y: number;
        static downPointX: number;
        static downPointY: number;
        static upPointX: number;
        static upPointY: number;
        private static CallBackList;
        private static isDonw;
        private static lastPos;
        static addUpCallBackFun(callBackFun: Function): void;
        static removeUpCallBackFun(callBackFun: Function): void;
        private static moveCallBackList;
        static addMoveCallBackFun(callBackFun: Function): void;
        static removeMoveCallBackFun(callBackFun: Function): void;
        private static onDown;
        private static onUp;
        private static onMove;
    }
}
declare module "Common/SliderComponentExted" {
    import { SliderComponent } from "Data/SliderComponent";
    export class SliderComponentExtend extends SliderComponent {
        offsetPercent: number;
        offsetWidth: number;
        callBackFun: Function;
        maxNum: number;
        protected get transWidth(): number;
        btnDown_event(): void;
        /****设置值
         * maxNum 如果有设置值 需传入小于等于maxNum的值
         * maxNum 默认值 -1   需传入百分比值 0.x
        */
        setValue(value: any): void;
        private reshPosFun;
        private onHorizTouchFun;
    }
}
declare module "Data/CommonUIUtils" {
    import { cMap } from "Data/Map";
    import { imgSpriteArrange } from "UIBase/imgSpriteArrange";
    type layoutOption = m4m.framework.layoutOption;
    export class CommonUIUtils {
        static uiRepUrl: string;
        static specialIconDic: cMap<any>;
        static showAmounts: any[];
        static skinAmounts: any[];
        static _spellIconDic: cMap<any>;
        static replaceUIUrl(icon: any): string;
        static getSprite(spriteStr: string): m4m.framework.sprite;
        /** 快速创建一个 imgSpriteArrange 对象 */
        static getImgSpriteArrange(img: m4m.framework.image2D, hlayout?: layoutOption, vlayout?: layoutOption): imgSpriteArrange;
    }
}
declare module "Data/LinkedList" {
    /**链表节点接口*/
    export interface ILNode<T> {
        element: T;
        next: ILNode<T>;
    }
    /**
     * 链表节点类
     */
    export class LNode<T> implements ILNode<T> {
        element: T;
        next: LNode<T>;
        constructor(element: T);
    }
    /**
     * 单链表:一些列由指针链接的元素节点组成的存储结构
     */
    export class LinkedList<T> {
        private length;
        private _head;
        /**
         * 向列表尾部添加一个新的节点元素。
         * @param element 指定节点元素
         */
        append(element: T): void;
        /**
         * 向列表的特定位置插入一个新的节点元素。
         * @param position  指定位置
         * @param element  指定节点元素
         */
        insert(position: number, element: T): boolean;
        /**
         * 从列表中移除指定节点元素。
         * @param element  指定节点元素
         */
        remove(element: T): T;
        /**
         * 返回元素在列表中的索引。如果列表中没有该元素则返回-1。
         * @param element  指定节点元素
         */
        indexOf(element: T): number;
        /**
         * 从列表的特定位置移除一节点元素
         * @param position  指定节点元素
         */
        removeAt(position: number): T;
        /**是否为空*/
        get isEmpty(): boolean;
        /**返回链表包含的元素个数*/
        get size(): number;
        /**链表的第一个节点元素*/
        get head(): LNode<T>;
        /**所有元素值输出为字符串*/
        toString(): string;
    }
}
declare module "Event/EventList" {
    /**
     * 事件定义 列表类
     *
     */
    export class EventList {
    }
}
declare module "Net/HeartBeatManager" {
    export class HeartBeatManager {
        static get Instance(): HeartBeatManager;
        constructor();
        private static _instance;
        SyncServerTime(): void;
        private updateFun;
    }
}
declare module "lab/New3dCompScript" {
    import { mixMesh } from "Tool/mixMesh";
    export class New3dCompScript extends m4m.framework.behaviour {
        meshCompressor: mixMesh;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "lab/dropAndRotate" {
    export class dropAndRotate extends m4m.framework.behaviour2d {
        coin: m4m.framework.image2D;
        baseValue: number;
        vCenterOffset: number;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
        timeRange: number[];
        play(): void;
        lastCircle: any;
        private isFalling;
        private g;
        private maxV;
        private v;
        private falling;
        private isRotating;
        private rotateTimer;
        private rotationSpeed;
        private rotate;
        private isScale;
        private scaleTimer;
        scale(delta: number): void;
    }
}
declare module "lab/effectPlayer" {
    export class effectPlayer extends m4m.framework.behaviour {
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "lab/jump" {
    export class jump extends m4m.framework.behaviour {
        private g;
        v: number;
        private baseHeight;
        onPlay(): void;
        update(delta: number): void;
        jump(v: any): void;
        remove(): void;
    }
}
declare module "lab/testCgVerColor" {
    export class testCgVerColor extends m4m.framework.behaviour {
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "lab/testObs" {
    export class testObs extends m4m.framework.behaviour {
        transform1: m4m.framework.transform;
        transform2: m4m.framework.transform;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "lab/testShowBoxc" {
    export class testShowBoxc extends m4m.framework.behaviour {
        bc: m4m.framework.boxcollider;
        start(): void;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "lab/testcollider" {
    export class testcollider extends m4m.framework.behaviour {
        collider: m4m.framework.boxcollider;
        MyC: m4m.framework.boxcollider;
        isstrat: boolean;
        start(): void;
        onPlay(): void;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "lab/tweenTest" {
    export class tweenTest extends m4m.framework.behaviour {
        onPlay(): void;
        private count;
        dis: number;
        over: boolean;
        update(delta: number): void;
        tween(p: any, dis: any): number;
        remove(): void;
    }
}
declare module "ui/uiScaleAnimation" {
    /** 序列帧动画 */
    export class uiScaleAnimation extends m4m.framework.behaviour2d {
        /** 是否循环播放 */
        isLoop: boolean;
        /** 播放速度 f/s (帧每秒)*/
        playSpeed: number;
        private sps;
        private isStop;
        onPlay(): void;
        private inited;
        private init;
        resTransform(): void;
        play(): void;
        stop(): void;
        private time;
        private coutTime;
        private scale;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/base/sequenceFrame" {
    /** 序列帧动画 */
    export class sequenceFrame extends m4m.framework.behaviour2d {
        /** 是否循环播放 */
        isLoop: boolean;
        /** 播放速度 f/s (帧每秒)*/
        playSpeed: number;
        private sps;
        private isStop;
        private img;
        private currF;
        onPlay(): void;
        private inited;
        private init;
        play(): void;
        stop(): void;
        private allCount;
        private Fcount;
        update(delta: number): void;
        remove(): void;
    }
}
declare module "ui/base/uiScaleAnimation" {
    /** 序列帧动画 */
    export class uiScaleAnimation extends m4m.framework.behaviour2d {
        /** 是否循环播放 */
        isLoop: boolean;
        /** 播放速度 f/s (帧每秒)*/
        playSpeed: number;
        private sps;
        private isStop;
        onPlay(): void;
        private inited;
        private init;
        resTransform(): void;
        play(): void;
        stop(): void;
        private time;
        private coutTime;
        private scale;
        update(delta: number): void;
        remove(): void;
    }
}
