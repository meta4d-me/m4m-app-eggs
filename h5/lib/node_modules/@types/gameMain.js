var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
System.register("Tool/tdTool", [], function (exports_1, context_1) {
    "use strict";
    var tdTool;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            exports_1("tdTool", tdTool = /** @class */ (function () {
                //talkingdata 平台工具
                function tdTool() {
                }
                tdTool.FirstTimeFunnelEvent = "FirstTimeFunnel";
                tdTool.ClickEvent = "Click";
                //初次转换漏斗
                // static readonly Finish_1st_loading = "Finish_1st_loading";
                tdTool.Clicked_login_button = "Clicked_login_button"; //点击 微信登录 按钮
                tdTool.Clicked_approve_button = "Clicked_approve_button"; //点击 授权 按钮
                tdTool.Finished_model_loading = "Finished_model_loading"; //加载结束
                tdTool.Started_1st_game = "Started_1st_game"; //开始第一次 游戏
                tdTool.finished_1st_game = "finished_1st_game"; //第一局游戏 结束
                //参数
                //--------FirstTimeFunnel
                tdTool.Loading_done = "Loading_done"; //加载完毕
                tdTool.Clicked_play = "Clicked_play"; //初次点击 开始游戏
                tdTool.Player_lose = "Player_lose"; // 指玩家第一次失败出现 视频复活界面
                tdTool.Tap_to_restart = "Tap_to_restart"; //指玩家再次开始 操纵小球界面
                //-------Click
                tdTool.Leaderboard = "Leaderboard"; //点击排行榜
                tdTool.QRSkin = "QRSkin"; //首页 二维码按钮 点击
                tdTool.Store = "Store"; //点击商店
                tdTool.Mute = "Mute"; //点击静音
                tdTool.Othergamelink = "Othergamelink"; //其他游戏跳转 （点击右上角 adIcon ）
                tdTool.DailyShare = "DailyShare"; //点击每日分享
                tdTool.Setting = "Setting"; //点击设置
                tdTool.GameStart = "GameStart"; //点击开始游戏
                tdTool.AdClick = "AdClick"; //点击了底部banner 广告 的追踪 (微信没有开放banner的点击回调)
                tdTool.NewYearPackage = "NewYearPackage"; //新春活动按钮点击 
                tdTool.FirstGameIcon = "FirstGameIcon"; //点击 设置按面板中的第一个 按钮 
                tdTool.SecondGameIcon = "SecondGameIcon"; //点击 设置按面板中的第二个 按钮 
                tdTool.ThirdGameIcon = "ThirdGameIcon"; //点击 设置按面板中的第三个 按钮 
                tdTool.LoseWatchAdToContinue = "LoseWatchAdToContinue"; //点击 死亡后 继续按钮 
                tdTool.LoseNoThanks = "LoseNoThanks"; //点击 死亡后 不谢谢按钮 
                tdTool.LoseTryonemoretime = "LoseTryonemoretime"; //点击 死亡后 再试一次
                tdTool.LoseWatchAdToGetDouble = "LoseWatchAdToGetDouble"; //点击 胜利看广告领取双倍金币
                tdTool.WinWatchAdToGetTriple = "WinWatchAdToGetTriple"; //点击 胜利看广告领取三倍金币
                tdTool.WinNextlevel = "WinNextlevel"; //胜利 下一关 点击
                tdTool.SaveQRcode = "SaveQRcode"; //保存 公众号二维码
                tdTool.WatchAdToGetFreeGems = "WatchAdToGetFreeGems"; //看视频 领取金币
                tdTool.FailedToBuySkinWatchToGetGems = "FailedToBuySkinWatchToGetGems"; //买皮肤失败后 看视频 获取金币
                tdTool.FailedToBuyThemeWatchToGetGems = "FailedToBuyThemeWatchToGetGems"; //买主题失败后 看视频 获取金币
                tdTool.InviteNow = "InviteNow"; //新春的 邀请按钮点击
                tdTool.SettlementWatchAdGetFreeGems = "SettlementWatchAdGetFreeGems"; //结算界面 看视频领取金币
                tdTool.watchAdToGetSkin = "watchAdToGetSkin"; //商店界面 看视频领取皮肤
                //------level 关卡通过事件
                tdTool.Passed_level_ = "Passed_level_";
                // 分享所得用户
                tdTool.viaShare = "viaShare";
                //视频广告 error
                tdTool.videoADError_1004 = "videoADError_1004";
                return tdTool;
            }()));
        }
    };
});
System.register("uiMgr", ["GameMgr"], function (exports_2, context_2) {
    "use strict";
    var GameMgr_1, uiMgr;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (GameMgr_1_1) {
                GameMgr_1 = GameMgr_1_1;
            }
        ],
        execute: function () {
            exports_2("uiMgr", uiMgr = /** @class */ (function () {
                function uiMgr() {
                }
                uiMgr.init = function () {
                    this.scene = GameMgr_1.GameMgr.app.getScene();
                    //创建overlayer2d
                    this.overlay = new m4m.framework.overlay2D();
                    //
                    this.overlay.scaleMode = m4m.framework.UIScaleMode.SCALE_WITH_SCREEN_SIZE;
                    this.overlay.matchReference_width = 720; //UI 固定分辨率
                    this.overlay.matchReference_height = 1280;
                    if (!this.scene.mainCamera) {
                        var camT = new m4m.framework.transform();
                        camT.name = "mainCam";
                        this.scene.getRoot().addChild(camT);
                        var cam = camT.gameObject.addComponent("camera");
                        this.scene.update(0);
                    }
                    this.scene.mainCamera.addOverLay(this.overlay);
                    //ui
                    var opt = m4m.framework.layoutOption;
                    this.uiRoot = this.overlay.canvas.getRoot();
                    //头像层
                    this.setHeadIcon();
                    //各层
                    this.baselayer = new m4m.framework.transform2D();
                    this.baselayer.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    this.uiRoot.addChild(this.baselayer);
                    this.highlayer = new m4m.framework.transform2D();
                    this.highlayer.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    this.uiRoot.addChild(this.highlayer);
                    // //shareCanvasImg
                    //scFullImg
                    var SCITran = new m4m.framework.transform2D();
                    SCITran.name = "scFullImg";
                    this.uiRoot.addChild(SCITran);
                    SCITran.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    var rimg = SCITran.addComponent("rawImage2D");
                    rimg.image = GameMgr_1.GameMgr.assetMgr.getDefaultTexture("grid");
                    SCITran.visible = false;
                    this.shareCanvasImg = this.scFullImg = rimg;
                    //     //scIconImg
                    // let SCITran_0 = new m4m.framework.transform2D();
                    // SCITran_0.name = "scIconImg";
                    // SCITran_0.width = SCITran_0.height =80;
                    // SCITran_0.pivot.x = 0.5;
                    // SCITran_0.pivot.y = 1;
                    // this.uiRoot.addChild(SCITran_0); 
                    // let rimg_0 = SCITran_0.addComponent("rawImage2D") as m4m.framework.rawImage2D ;
                    // rimg_0.image = GameMgr.assetMgr.getDefaultTexture("grid");
                    // SCITran_0.visible = false;
                    // this.scIconImg = rimg_0;
                    //pop
                    this.poplayer = new m4m.framework.transform2D();
                    this.poplayer.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    this.uiRoot.addChild(this.poplayer);
                };
                //头像显示
                uiMgr.setHeadIcon = function () {
                    var opt = m4m.framework.layoutOption;
                    var size = 80;
                    //headIcon root
                    this.headIcon = new m4m.framework.transform2D();
                    this.headIcon.name = "headIcon";
                    this.headIcon.width = this.headIcon.height = size;
                    this.headIcon.pivot.x = 0.5;
                    this.headIcon.pivot.y = 1;
                    this.uiRoot.addChild(this.headIcon);
                    // this.baselayer.addChild(this.headIcon);
                    //other Icon
                    var otherTran = new m4m.framework.transform2D();
                    otherTran.layoutState = opt.H_CENTER | opt.V_CENTER;
                    otherTran.name = "otherImg";
                    otherTran.width = otherTran.height = size;
                    this.headIcon.addChild(otherTran);
                    var rimg_1 = otherTran.addComponent("rawImage2D");
                    rimg_1.image = GameMgr_1.GameMgr.assetMgr.getDefaultTexture("grid");
                    otherTran.visible = false;
                    this.otherIconImg = rimg_1;
                    //scIconImg
                    var SCITran_0 = new m4m.framework.transform2D();
                    SCITran_0.layoutState = opt.H_CENTER | opt.V_CENTER;
                    SCITran_0.name = "scIconImg";
                    SCITran_0.width = SCITran_0.height = size;
                    this.headIcon.addChild(SCITran_0);
                    var rimg_0 = SCITran_0.addComponent("rawImage2D");
                    rimg_0.image = GameMgr_1.GameMgr.assetMgr.getDefaultTexture("grid");
                    SCITran_0.visible = false;
                    this.scIconImg = rimg_0;
                };
                Object.defineProperty(uiMgr, "sCanvIconMode", {
                    /** shareCanvas image 容器的 icon */
                    get: function () { return this._sCanvIconMode; },
                    set: function (isIconMode) {
                        this.shareCanvasImg.transform.visible = false;
                        if (isIconMode) {
                            this.shareCanvasImg = this.scIconImg;
                        }
                        else {
                            this.shareCanvasImg = this.scFullImg;
                        }
                        this._sCanvIconMode = isIconMode;
                    },
                    enumerable: false,
                    configurable: true
                });
                ;
                uiMgr.leapRenderFunMap = {}; //跳跃到 top_overlay 的渲染容器
                uiMgr.FrontBefRenderFunMap = {}; //overlay 的渲染前
                uiMgr._sCanvIconMode = false;
                return uiMgr;
            }()));
        }
    };
});
System.register("Tool/joinTool", ["Tool/wxTool", "Tool/tdTool", "uiMgr", "Tools/FrameMgr"], function (exports_3, context_3) {
    "use strict";
    var wxTool_1, tdTool_1, uiMgr_1, FrameMgr_1, joinTool;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [
            function (wxTool_1_1) {
                wxTool_1 = wxTool_1_1;
            },
            function (tdTool_1_1) {
                tdTool_1 = tdTool_1_1;
            },
            function (uiMgr_1_1) {
                uiMgr_1 = uiMgr_1_1;
            },
            function (FrameMgr_1_1) {
                FrameMgr_1 = FrameMgr_1_1;
            }
        ],
        execute: function () {
            // import { rankPage } from "../Game/ui/pages/rankPage";
            //对接 类
            joinTool = /** @class */ (function () {
                function joinTool() {
                }
                joinTool.preInit = function () {
                    var _a;
                    this.coordinator = m4m["__join"];
                    if (!this.coordinator) {
                        this.coordinator = {};
                    }
                    //加载完毕事件 追踪
                    joinTool.tdcustomEvent(tdTool_1.tdTool.FirstTimeFunnelEvent, tdTool_1.tdTool.FirstTimeFunnelEvent, (_a = {}, _a[tdTool_1.tdTool.Loading_done] = 1, _a));
                    //
                    this.regFun("refSharedCanvas", function () { }); //避免提前调用报错
                    this.regFun("shareCanvasShow", function () { }); //避免提前调用报错
                    this.regFun("shareCanvasHide", function () { }); //避免提前调用报错
                    this.regFun("setReliveMode", function () { }); //避免提前调用报错
                    this.regFun("setBottomADGap", function () { }); //避免提前调用报错
                };
                joinTool.init = function () {
                    //子域大小设置
                    var c = uiMgr_1.uiMgr.overlay.canvas;
                    this.setShareCanvasSize(c.pixelWidth, c.pixelHeight);
                    //注册
                    this.regFun("onShareSuccess", function () { });
                    this.regFun("token", function () { return wxTool_1.wxTool.token; });
                    this.regFun("refSharedCanvas", function () {
                        if (wxTool_1.wxTool.wx) {
                            wxTool_1.wxTool.refSharedCanvas();
                        }
                    });
                    this.regFun("shareCanvasShow", function () {
                        if (uiMgr_1.uiMgr.shareCanvasImg) {
                            uiMgr_1.uiMgr.shareCanvasImg.transform.visible = true;
                        }
                    });
                    this.regFun("shareCanvasHide", function () {
                        if (uiMgr_1.uiMgr.shareCanvasImg) {
                            uiMgr_1.uiMgr.shareCanvasImg.transform.visible = false;
                        }
                    });
                    this.regFun("setReliveMode", function (isReliveMode) {
                    });
                    //显示 群排行榜 
                    this.regFun("groupRankingPageShow", function () {
                        // runingPage.Instance.setRankingType(true);
                    });
                    //获取 用户自己的信息
                    this.regFun("getMyInfo", function () {
                        return wxTool_1.wxTool.myinfo;
                    });
                    this.callFun("inited");
                    //update start
                    FrameMgr_1.FrameMgr.Add(this.update, this);
                    // LateUpdateMgr.Add(this.update,this);
                };
                joinTool.test = function () {
                    this.callFun("test");
                };
                joinTool.update = function (d) {
                    this.callFun("update", d);
                };
                /** 注册方法 */
                joinTool.regFun = function (funName, fun) {
                    if (this.coordinator) {
                        this.coordinator[funName] = fun.bind(this);
                    }
                };
                /** 调用外部方法 */
                joinTool.callFun = function (funName) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    if (this.coordinator && this.coordinator[funName]) {
                        // this.coordinator[funName](parameter);
                        this.coordinator[funName].apply(this.coordinator, args);
                    }
                };
                //-------------------
                //隐藏游戏结算界面的排行榜
                joinTool.hide_item_Ranks = function () {
                    this.callFun("hide_item_Ranks");
                };
                //隐藏下一个超越对象的
                joinTool.hide_nextSurpass = function () {
                    this.callFun("hide_nextSurpass");
                };
                //显示完整好友排行榜
                joinTool.showRanks = function () {
                    this.callFun("showRanks");
                };
                //隐藏完整排行榜
                joinTool.hideRankings = function () {
                    this.callFun("hideRankings");
                };
                //排行榜分享
                joinTool.shareRankBoard = function () {
                    this.callFun("shareRankBoard");
                };
                //分享个人
                joinTool.shareGame = function () {
                    this.callFun("shareGame");
                };
                //分享到群
                joinTool.shareToGroup = function (SuccessCallBack) {
                    this.callFun("shareToGroup", SuccessCallBack);
                };
                //皮肤炫耀一下 （给皮肤id）
                joinTool.showBestSkin = function (iconUrl, id) {
                    this.callFun("showBestSkin", iconUrl, id);
                };
                //主题炫耀一下 （给皮肤id）
                joinTool.showBestTheme = function (id) {
                    this.callFun("showBestTheme", id);
                };
                //发起挑战
                joinTool.challengeFriend = function (score) {
                    this.callFun("challengeFriend", score);
                };
                //得分炫耀一下
                joinTool.showOffScore = function (score) {
                    this.callFun("showOffScore", score);
                };
                //每日邀请分享
                joinTool.invitation = function (token) {
                    this.callFun("invitation", token);
                };
                //新年邀请分享
                joinTool.newYearInvitation = function (token) {
                    this.callFun("newYearInvitation", token);
                };
                //更多玩法 游戏盒子
                joinTool.gameBox = function () {
                    this.callFun("gameBox");
                };
                //游戏结算 保存数据
                joinTool.settlement = function (score) {
                    this.callFun("settlement", score);
                };
                /** 视频复活 */
                joinTool.watchVideo = function (SuccessCallBack) {
                    //提示
                    var skipWxVideo = true;
                    if (skipWxVideo) {
                        alert("\u8DF3\u8FC7 \u64AD\u653E\u89C6\u9891");
                        SuccessCallBack(true);
                        return;
                    }
                    this.coordinator['watchVideo'](function (r) { return SuccessCallBack(r); });
                    // this.callFun("videoRelive", SuccessCallBack);
                };
                /** 分享复活 */
                joinTool.shareRelive = function (SuccessCallBack) {
                    this.callFun("shareRelive", SuccessCallBack);
                };
                /** 排行榜 上一页 */
                joinTool.lastPage = function () {
                    this.callFun("lastPage");
                };
                /** 排行榜 下一页 */
                joinTool.nextPage = function () {
                    this.callFun("nextPage");
                };
                /** 显示 底部广告 */
                joinTool.showBottomAd = function (bannerId) {
                    // console.error("底部广告");
                    this.callFun("showBottomAd", bannerId);
                };
                /** 重新构建 所有banner */
                joinTool.reMakeBottomAds = function () {
                    this.callFun("reMakeBottomAds");
                };
                /** 隐藏 底部广告 */
                joinTool.hideBottomAd = function () {
                    this.callFun("hideBottomAd");
                };
                /** 检查 超过的好友 */
                joinTool.ckOverFriend = function (score, x, y) {
                    this.callFun("ckOverFriend", score, x, y);
                };
                /** 下一个可以 超过的好友 */
                joinTool.nextSurpass = function (score) {
                    this.callFun("nextSurpass", score);
                };
                /** 爱微游 广告icon 点击触发*/
                joinTool.onIwyAdvIconClick = function () {
                    this.callFun("onIwyAdvIconClick");
                };
                /** 关注按钮 点击*/
                joinTool.onFocusClick = function () {
                    this.callFun("onFocusClick");
                };
                /** 领取双份 钻石*/
                joinTool.receiveDoubeDiamond = function (SuccessCallBack) {
                    this.callFun("receiveDoubeDiamond", SuccessCallBack);
                };
                /**游戏结算的排行榜 */
                joinTool.show_item_Ranks = function () {
                    this.callFun("show_item_Ranks");
                };
                //更随头像 打开 open
                joinTool.openFollowHead = function (insId) {
                    this.callFun("openFollowHead", insId);
                };
                //更随头像 关闭
                joinTool.closeFollowHead = function () {
                    this.callFun("closeFollowHead");
                };
                //开始比赛 ，准备安置好友头像
                joinTool.placeFriendIcon = function (ranks, level) {
                    this.callFun("placeFriendIcon", ranks, level);
                };
                //ShareCanvas 大小设置
                joinTool.setShareCanvasSize = function (w, h) {
                    this.callFun("setShareCanvasSize", w, h);
                };
                //ShareCanvas 大小设置
                joinTool.tdcustomEvent = function (id, label, params) {
                    if (params === void 0) { params = { "default": 1 }; }
                    this.callFun("tdcustomEvent", id, label, params);
                };
                //分享图 绘制canvas 初始化  
                joinTool.screenshotcanvasInit = function () {
                    this.callFun("screenshotcanvasInit");
                };
                return joinTool;
            }());
            exports_3("joinTool", joinTool);
        }
    };
});
System.register("ui/base/uiPage", ["Loader/loadMgr", "GameMgr", "uiMgr"], function (exports_4, context_4) {
    "use strict";
    var loadMgr_1, GameMgr_2, uiMgr_2, loadTool, uiPage, uiPop;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [
            function (loadMgr_1_1) {
                loadMgr_1 = loadMgr_1_1;
            },
            function (GameMgr_2_1) {
                GameMgr_2 = GameMgr_2_1;
            },
            function (uiMgr_2_1) {
                uiMgr_2 = uiMgr_2_1;
            }
        ],
        execute: function () {
            exports_4("loadTool", loadTool = /** @class */ (function () {
                /** 加载uipage工具类 */
                function loadTool() {
                }
                //加载图集工具
                loadTool.loadAtlas = function (atlas) {
                    return __awaiter(this, void 0, void 0, function () {
                        var urls, key, url;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!atlas || atlas.length < 1)
                                        return [2 /*return*/];
                                    urls = [];
                                    key = "";
                                    atlas.forEach(function (atl) {
                                        //过滤无效图集
                                        if (typeof (atl) == "string" && atl != "") {
                                            key += atl + "_";
                                            urls.push("".concat(GameMgr_2.GameMgr.atlasPath).concat(atl, "/").concat(atl, ".assetbundle.json"));
                                        }
                                    });
                                    if (this.atlas_endMap.has(key) && this.atlas_endMap.get(key))
                                        return [2 /*return*/]; //已经加载完了
                                    _a.label = 1;
                                case 1:
                                    if (!(urls.length > 0)) return [3 /*break*/, 4];
                                    url = urls.pop();
                                    if (!url) return [3 /*break*/, 3];
                                    return [4 /*yield*/, loadMgr_1.loadMgr.Instance.syncLoad(url, loadTool.priority_atlas)];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3: return [3 /*break*/, 1];
                                case 4:
                                    this.atlas_endMap.set(key, true);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //加载预设体
                loadTool.loadPrefeb = function (prefabName) {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, pfb;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (typeof (prefabName) != "string" || prefabName == "")
                                        return [2 /*return*/];
                                    if (this.PagePrefeb_map.has(prefabName) && this.PagePrefeb_map.get(prefabName))
                                        return [2 /*return*/];
                                    url = "".concat(GameMgr_2.GameMgr.UIPath).concat(prefabName, "/").concat(prefabName, ".assetbundle.json");
                                    return [4 /*yield*/, loadMgr_1.loadMgr.Instance.syncLoad(url, this.priority_pagePfb)];
                                case 1:
                                    _a.sent();
                                    pfb = GameMgr_2.GameMgr.assetMgr.getAssetByName("".concat(prefabName, ".prefab.json"), "".concat(prefabName, ".assetbundle.json"));
                                    this.PagePrefeb_map.set(prefabName, pfb);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                loadTool.atlas_endMap = new Map();
                loadTool.priority_atlas = 110;
                loadTool.priority_pagePfb = 100;
                loadTool.PagePrefeb_map = new Map();
                return loadTool;
            }()));
            exports_4("uiPage", uiPage = /** @class */ (function (_super) {
                __extends(uiPage, _super);
                /**全屏 面板handle 基组件类 */
                function uiPage() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiLayer = 0; // 0: base 、1 : high    
                    _this.notHideOnOtherShow = false; //其他面板show 时 不隐藏
                    _this.inited = false;
                    return _this;
                }
                uiPage.prototype.init = function () {
                    var layTran = this.getParent();
                    uiPage.pages.push(this);
                    layTran.addChild(this.transform);
                    this.inited = true;
                };
                uiPage.prototype.getParent = function () {
                    var layTran;
                    switch (this.uiLayer) {
                        case 0:
                            layTran = uiMgr_2.uiMgr.baselayer;
                            break;
                        case 1:
                            layTran = uiMgr_2.uiMgr.highlayer;
                            break;
                    }
                    return layTran;
                };
                uiPage.prototype.show = function () {
                    if (!this.inited) {
                        this.init();
                    }
                    var layTran = this.getParent();
                    layTran.addChild(this.transform);
                    this.transform.visible = true;
                    uiPage.hideAll(this);
                };
                uiPage.prototype.hide = function () {
                    if (!this.inited || !this.transform.visible)
                        return;
                    if (this.onHide) {
                        this.onHide();
                    }
                    this.transform.visible = false;
                    if (this.transform.parent) {
                        this.transform.parent.removeChild(this.transform);
                    }
                };
                uiPage.hideAll = function (without) {
                    uiPage.pages.forEach(function (page) {
                        if (page != without && !page.notHideOnOtherShow)
                            page.hide();
                    });
                };
                uiPage.pages = [];
                return uiPage;
            }(m4m.framework.behaviour2d)));
            /**pop 面板handle 基组件类 */
            uiPop = /** @class */ (function (_super) {
                __extends(uiPop, _super);
                function uiPop() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.inited = false;
                    return _this;
                }
                uiPop.prototype.init = function () {
                    var layTran = uiMgr_2.uiMgr.poplayer;
                    layTran.addChild(this.transform);
                    this.inited = true;
                };
                uiPop.prototype.show = function () {
                    if (!this.inited) {
                        this.init();
                    }
                    this.transform.visible = true;
                    uiMgr_2.uiMgr.poplayer.addChild(this.transform);
                };
                uiPop.prototype.hide = function () {
                    if (!this.inited || !this.transform.visible)
                        return;
                    if (this.onHide) {
                        this.onHide();
                    }
                    this.transform.visible = false;
                    if (this.transform.parent) {
                        this.transform.parent.removeChild(this.transform);
                    }
                };
                return uiPop;
            }(m4m.framework.behaviour2d));
            exports_4("uiPop", uiPop);
        }
    };
});
System.register("ui/videoPrizePageHandle", ["ui/base/uiPage"], function (exports_5, context_5) {
    "use strict";
    var uiPage_1, videoPrizePageHandle;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [
            function (uiPage_1_1) {
                uiPage_1 = uiPage_1_1;
            }
        ],
        execute: function () {
            exports_5("videoPrizePageHandle", videoPrizePageHandle = /** @class */ (function (_super) {
                __extends(videoPrizePageHandle, _super);
                function videoPrizePageHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.aRound = (Math.PI / 180) * 360;
                    _this.angleSpeed = (Math.PI / 180) * 90;
                    return _this;
                }
                videoPrizePageHandle.prototype.onPlay = function () {
                };
                videoPrizePageHandle.prototype.update = function (delta) {
                    this.aureole.localRotate = this.aureole.localRotate + (this.angleSpeed * delta);
                    this.aureole.localRotate = this.aureole.localRotate % this.aRound;
                    this.aureole.markDirty();
                };
                videoPrizePageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], videoPrizePageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], videoPrizePageHandle.prototype, "homePage", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], videoPrizePageHandle.prototype, "info", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], videoPrizePageHandle.prototype, "aureole", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], videoPrizePageHandle.prototype, "bt", void 0);
                videoPrizePageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], videoPrizePageHandle);
                return videoPrizePageHandle;
            }(uiPage_1.uiPop)));
        }
    };
});
System.register("ui/base/imgNum", ["GameMgr"], function (exports_6, context_6) {
    "use strict";
    var GameMgr_3, imgNum;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [
            function (GameMgr_3_1) {
                GameMgr_3 = GameMgr_3_1;
            }
        ],
        execute: function () {
            exports_6("imgNum", imgNum = /** @class */ (function (_super) {
                __extends(imgNum, _super);
                function imgNum() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.ImgArr = [];
                    _this.gap = 23;
                    _this.baseName = "";
                    _this.cacheColor = new m4m.math.color(1, 1, 1, 1);
                    _this.inited = false;
                    return _this;
                }
                imgNum_1 = imgNum;
                imgNum.prototype.setNum = function (num) {
                    this.init();
                    if (num == undefined || isNaN(num))
                        return;
                    var str = Math.floor(num).toString();
                    this.ckGenimg(str.length);
                    this.refreshImgs(str);
                };
                imgNum.prototype.setColor = function (color) {
                    if (!color)
                        return;
                    m4m.math.colorClone(color, this.cacheColor);
                    this.ImgArr.forEach(function (img) {
                        if (img) {
                            m4m.math.colorClone(color, img.color);
                            img.transform.markDirty();
                        }
                    });
                };
                imgNum.prototype.onPlay = function () {
                    this.template.transform.visible = false;
                    //this.setNum(1234567890);
                };
                imgNum.prototype.init = function () {
                    if (this.inited)
                        return;
                    /* this.baseName = (this.template["_spriteName"] as string);
                     this.baseName = this.baseName.substring(0, this.baseName.length - 1);
             
                     let assetmgr = GameMgr.assetMgr;
                     this.numImgToMap(assetmgr);*/
                    this.subsIconParse();
                    this.inited = true;
                };
                imgNum.prototype.subsIconParse = function () {
                    this.baseName = this.template["_spriteName"];
                    this.baseName = this.baseName.substring(0, this.baseName.length - 1);
                    var assetmgr = GameMgr_3.GameMgr.assetMgr;
                    this.numImgToMap(assetmgr);
                };
                imgNum.prototype.numImgToMap = function (assetmgr) {
                    if (this.baseName == "")
                        return;
                    var numArr = imgNum_1.NumsMap["".concat(this.baseName)] = [];
                    for (var i = 0; i < 10; i++) {
                        var sp = assetmgr.getAssetByName("".concat(this.baseName).concat(i));
                        numArr.push(sp);
                    }
                };
                imgNum.prototype.refreshImgs = function (str) {
                    var len = str.length;
                    this.ImgArr.forEach(function (img) {
                        img.transform.visible = false;
                    });
                    var num = Math.min(len, this.ImgArr.length);
                    for (var i = 0; i < num; i++) {
                        var val = Number(str[i]);
                        var img = this.ImgArr[i];
                        img.transform.visible = true;
                        if (!img.sprite || img.sprite.getName() != "".concat(this.baseName).concat(val)) {
                            var spt = imgNum_1.NumsMap["".concat(this.baseName)][val];
                            if (!spt || !spt.texture) {
                                img.transform.visible = false;
                                continue;
                            }
                            img.sprite = spt;
                            img.transform.width = img.sprite.rect.w;
                            img.transform.markDirty();
                        }
                    }
                    this.transform.width = len * this.gap;
                    this.transform.markDirty();
                };
                imgNum.prototype.ckGenimg = function (len) {
                    var needlen = len - this.ImgArr.length;
                    if (needlen < 0)
                        return;
                    var opt = m4m.framework.layoutOption;
                    for (var i = len - needlen; i < len; i++) {
                        var imgtran = this.template.transform.clone();
                        this.transform.addChild(this.addShell(imgtran, i));
                        var img = imgtran.getComponent("image2D");
                        m4m.math.colorClone(this.cacheColor, img.color);
                        this.ImgArr.push(img);
                    }
                };
                imgNum.prototype.addShell = function (tran, pos) {
                    var opt = m4m.framework.layoutOption;
                    var shell = new m4m.framework.transform2D();
                    shell.width = this.gap;
                    shell.layoutState = opt.V_CENTER | opt.LEFT;
                    tran.layoutState = opt.V_CENTER | opt.H_CENTER;
                    shell.transform.setLayoutValue(opt.LEFT, this.gap * pos);
                    shell.addChild(tran);
                    return shell;
                };
                imgNum.prototype.update = function (delta) {
                };
                imgNum.prototype.remove = function () {
                };
                var imgNum_1;
                imgNum.NumsMap = {};
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], imgNum.prototype, "template", void 0);
                __decorate([
                    m4m.reflect.Field("number")
                ], imgNum.prototype, "gap", void 0);
                imgNum = imgNum_1 = __decorate([
                    m4m.reflect.node2DComponent
                ], imgNum);
                return imgNum;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("ui/audioHandle", ["audio/AudioMgr", "GameMgr", "Tool/saveTool"], function (exports_7, context_7) {
    "use strict";
    var AudioMgr_1, GameMgr_4, saveTool_1, audioHandle;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [
            function (AudioMgr_1_1) {
                AudioMgr_1 = AudioMgr_1_1;
            },
            function (GameMgr_4_1) {
                GameMgr_4 = GameMgr_4_1;
            },
            function (saveTool_1_1) {
                saveTool_1 = saveTool_1_1;
            }
        ],
        execute: function () {
            exports_7("audioHandle", audioHandle = /** @class */ (function (_super) {
                __extends(audioHandle, _super);
                function audioHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.onImg = "home.atlas.json_shezhi_btn_yinxiao";
                    _this.offImg = "home.atlas.json_shezhi_btn_yinxiao0";
                    _this.isInArr = false;
                    return _this;
                }
                audioHandle_1 = audioHandle;
                Object.defineProperty(audioHandle, "IsOff", {
                    get: function () { return !GameMgr_4.GameMgr.swSound; },
                    enumerable: false,
                    configurable: true
                });
                ;
                Object.defineProperty(audioHandle.prototype, "assetMgr", {
                    get: function () {
                        if (!this._assetMgr) {
                            this._assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                        }
                        return this._assetMgr;
                    },
                    enumerable: false,
                    configurable: true
                });
                audioHandle.prototype.onPlay = function () {
                    if (!this.isInArr) {
                        audioHandle_1.AhArr.push(this);
                        this.isInArr = true;
                    }
                    this.img = this.transform.getComponent("image2D");
                    this.btn = this.transform.getComponent("button");
                    if (!this.img || !this.btn)
                        return;
                    this.btn.addListener(m4m.event.UIEventEnum.PointerClick, this.onClick, this);
                    this.refreashIcon();
                };
                audioHandle.prototype.onClick = function () {
                    GameMgr_4.GameMgr.swSound = !GameMgr_4.GameMgr.swSound;
                    // AudioMgr.setMute(!GameMgr.swSound);
                    if (GameMgr_4.GameMgr.swSound) {
                        //播放按钮声音
                        AudioMgr_1.AudioMgr.Play("touch.mp3");
                    }
                    saveTool_1.saveTool.save(null, null);
                    audioHandle_1.refreashAll();
                    if (this.onClickFun) {
                        this.onClickFun();
                    }
                };
                //刷新 喇叭 按钮
                audioHandle.prototype.refreashIcon = function () {
                    if (!this.img)
                        return;
                    if (!GameMgr_4.GameMgr.swSound) {
                        this.img.sprite = this.assetMgr.getAssetByName(this.offImg);
                    }
                    else {
                        this.img.sprite = this.assetMgr.getAssetByName(this.onImg);
                    }
                };
                //刷新所有icon
                audioHandle.refreashAll = function () {
                    this.AhArr.forEach(function (ah) {
                        if (ah) {
                            ah.refreashIcon();
                        }
                    });
                };
                audioHandle.prototype.update = function (delta) {
                };
                audioHandle.prototype.remove = function () {
                };
                var audioHandle_1;
                audioHandle.AhArr = []; //存放所有的 声音按钮
                audioHandle = audioHandle_1 = __decorate([
                    m4m.reflect.node2DComponent
                ], audioHandle);
                return audioHandle;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("ui/homePageHandle", ["ui/base/uiPage"], function (exports_8, context_8) {
    "use strict";
    var uiPage_2, homePageHandle;
    var __moduleName = context_8 && context_8.id;
    return {
        setters: [
            function (uiPage_2_1) {
                uiPage_2 = uiPage_2_1;
            }
        ],
        execute: function () {
            exports_8("homePageHandle", homePageHandle = /** @class */ (function (_super) {
                __extends(homePageHandle, _super);
                function homePageHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.sliderSpeed = 0.3;
                    _this.sliderRange = 490;
                    _this.tp = 0;
                    return _this;
                }
                homePageHandle.prototype.onPlay = function () {
                };
                homePageHandle.prototype.tween = function (p, dis) {
                    var mth, tp;
                    if (p <= 0.5) {
                        console.log(p);
                        mth = m4m.framework.tweenMethod.QuadEaseIn;
                        tp = p * 2;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2;
                    }
                    else {
                        console.log(p);
                        mth = m4m.framework.tweenMethod.QuadEaseOut;
                        tp = p * 2 - 1;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2 + dis / 2;
                    }
                };
                homePageHandle.prototype.update = function (delta) {
                    if (this.onUpdate)
                        this.onUpdate(delta);
                    this.sliderAnimation(delta);
                };
                homePageHandle.prototype.sliderAnimation = function (delta) {
                    if (!this.slider)
                        return;
                    this.tp += this.sliderSpeed * delta;
                    this.tp = this.tp > 1 ? this.tp - 1 : this.tp;
                    var len = 0;
                    if (this.tp <= 0.5) {
                        len = this.tween(this.tp * 2, this.sliderRange);
                    }
                    else {
                        len = this.tween((2 - this.tp * 2), this.sliderRange);
                    }
                    //let len =  this.tween(this.tp,this.sliderRange);
                    this.slider.transform.localTranslate.x = len;
                    // if(this.slider.transform.localTranslate.x > this.sliderRange || this.slider.transform.localTranslate.x < 0) {
                    //     this.sliderSpeed *= -1;
                    // }
                    this.slider.transform.markDirty();
                };
                homePageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], homePageHandle.prototype, "setting", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], homePageHandle.prototype, "invite", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], homePageHandle.prototype, "rank", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], homePageHandle.prototype, "skin", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], homePageHandle.prototype, "code", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "audioHandle")
                ], homePageHandle.prototype, "music", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], homePageHandle.prototype, "slider", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], homePageHandle.prototype, "startBtn", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], homePageHandle.prototype, "newYear", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], homePageHandle.prototype, "newYear_time", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], homePageHandle.prototype, "newYear_gold", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], homePageHandle.prototype, "newSkin", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], homePageHandle.prototype, "canInviteNum", void 0);
                homePageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], homePageHandle);
                return homePageHandle;
            }(uiPage_2.uiPage)));
        }
    };
});
System.register("Ress", ["Loader/loadMgr", "GameMgr"], function (exports_9, context_9) {
    "use strict";
    var loadMgr_2, GameMgr_5, Ress;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [
            function (loadMgr_2_1) {
                loadMgr_2 = loadMgr_2_1;
            },
            function (GameMgr_5_1) {
                GameMgr_5 = GameMgr_5_1;
            }
        ],
        execute: function () {
            exports_9("Ress", Ress = /** @class */ (function () {
                // import { loadMgr } from "./Loader/loadMgr";
                function Ress() {
                }
                Object.defineProperty(Ress, "fx_die_qiu", {
                    //fx
                    // static fx_die_qiu: m4m.framework.transform;  //死亡boom
                    get: function () { return Ress.assetmgr.getAssetByName("fx_die_qiu.prefab.json", "fx_die_qiu.assetbundle.json"); },
                    enumerable: false,
                    configurable: true
                });
                ; //死亡boom
                Object.defineProperty(Ress, "fx_wd", {
                    // static fx_wd: m4m.framework.transform; //无敌new
                    get: function () { return Ress.assetmgr.getAssetByName("fx_wd.prefab.json", "fx_wd.assetbundle.json"); },
                    enumerable: false,
                    configurable: true
                });
                ; //无敌new
                Object.defineProperty(Ress, "fx_js", {
                    // static fx_js: m4m.framework.transform; //加速特效
                    get: function () { return Ress.assetmgr.getAssetByName("fx_js.prefab.json", "fx_js.assetbundle.json"); },
                    enumerable: false,
                    configurable: true
                });
                ; //加速特效
                Ress.setList = function () {
                    var _this = this;
                    //shader 必须优先加载完成
                    var shaderURL = "res/shaders/customShader/customShader.assetbundle.json";
                    loadMgr_2.loadMgr.Instance.load(shaderURL, function () {
                        //字体
                        // this.lReslist.push(`${GameMgr.fontPath}defFont/defFont.assetbundle.json`);
                        _this.lReslist.push("".concat(GameMgr_5.GameMgr.TexPath, "texs_basePre/texs_basePre.assetbundle.json"));
                        _this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "qiu/qiu.assetbundle.json"));
                        _this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "floor/floor.assetbundle.json"));
                        _this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "trail/trail.assetbundle.json"));
                        //----------
                        //     //物体
                        //     this.lReslist.push(`${GameMgr.propsPath}boost/boost.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.propsPath}jinbi/jinbi.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.propsPath}decoraion1/decoraion1.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.propsPath}box001/box001.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.propsPath}lego2/lego2.assetbundle.json`);
                        //     //单图
                        //     //特效
                        //     // this.lReslist.push(`${GameMgr.atlasPath}speedLine/speedLine.assetbundle.json`);
                        //     // this.lReslist.push(`${GameMgr.UIPath}speed_line/speed_line.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.fxPath}fx_die_qiu/fx_die_qiu.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.fxPath}fx_wd/fx_wd.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.fxPath}fx_js/fx_js.assetbundle.json`);
                        //     // this.lReslist.push(`${GameMgr.fxPath}fx_gx/fx_gx.assetbundle.json`);
                        //     // this.lReslist.push(`${GameMgr.fxPath}fx_sl/fx_sl.assetbundle.json`);
                        //     //new 图集
                        _this.lReslist.push("".concat(GameMgr_5.GameMgr.atlasPath, "home/home.assetbundle.json"));
                        _this.lReslist.push("".concat(GameMgr_5.GameMgr.atlasPath, "common/common.assetbundle.json"));
                        //     this.lReslist.push(`${GameMgr.atlasPath}continue/continue.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}gameover/gameover.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}ingame/ingame.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}invite/invite.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}newyear/newyear.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}prize/prize.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}QRcode/QRcode.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}rank/rank.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}setting/setting.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}shop/shop.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}unlock/unlock.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}victory/victory.assetbundle.json`);
                        //     this.lReslist.push(`${GameMgr.atlasPath}videoPrize/videoPrize.assetbundle.json`);
                        //     //ui
                        _this.lReslist.push("".concat(GameMgr_5.GameMgr.UIPath, "home_page/home_page.assetbundle.json"));
                        // this.lReslist.push(`${GameMgr.UIPath}setting_page/setting_page.assetbundle.json`);
                        // this.lReslist.push(`${GameMgr.UIPath}continue_page/continue_page.assetbundle.json`);
                        var ps = [];
                        for (var i = 0; i < Ress.lReslist.length; i++) {
                            ps.push(loadMgr_2.loadMgr.Instance.syncLoad(Ress.lReslist[i]));
                        }
                        Promise.all(ps).then(function () {
                            _this.loadConfigJson().then(function () {
                                Ress.lReslist.length = 0;
                                _this.Lend();
                                _this.secondLoading();
                            });
                        });
                    });
                };
                Ress.init = function () {
                    return new m4m.threading.gdPromise(function (resolve, reject) {
                        // if (!Ress.isInit) {
                        //     resolve();
                        // }
                        Ress.assetmgr = GameMgr_5.GameMgr.app.getAssetMgr();
                        Ress.setList();
                        Ress.isInit = false;
                        Ress.lcallBack = function () {
                            resolve();
                        };
                    });
                };
                /** 获取去一个 distortion 材质 */
                Ress.getDistortionMat = function () {
                    var sh = this.assetmgr.getShader("distortion.shader.json");
                    var mat = new m4m.framework.material("distortion_".concat(this.dis_num));
                    mat.setShader(sh);
                    this.dis_num++;
                    return mat;
                };
                Ress.loadText = function (path) {
                    return new Promise(function (res, rej) {
                        m4m.io.loadText(path, function (txt) {
                            res(txt);
                        });
                    });
                };
                Ress.loadConfigJson = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var configs, invite;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    configs = [
                                        // `${GameMgr.configPath}main.json`,
                                        // `${GameMgr.configPath}skin.json`,
                                        // `${GameMgr.configPath}theme.json`,
                                        // `${GameMgr.configPath}level.json`,
                                        "".concat(GameMgr_5.GameMgr.configPath, "invite.json")
                                    ];
                                    return [4 /*yield*/, Promise.all(configs.map(function (p) { return _this.loadText(p); }))];
                                case 1:
                                    invite = (_a.sent())[0];
                                    // this.mainConfig = main;
                                    // this.skinConfig = skin;
                                    // this.themeConfig = theme;
                                    // this.levelConfig = level;
                                    this.inviteConfig = invite;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //加载结束 资源处理
                Ress.Lend = function () {
                    Ress.disShader = Ress.assetmgr.getShader("distortion.shader.json");
                    Ress.disShaderUnlight = Ress.assetmgr.getShader("distortionUnlight.shader.json");
                    Ress.ballShader = Ress.assetmgr.getShader("distortionBall.shader.json");
                    Ress.ballPBRShader = Ress.assetmgr.getShader("distortionMatBall.shader.json");
                    Ress.trailShader = Ress.assetmgr.getShader("distortionTrail.shader.json");
                    Ress.fontShader = Ress.assetmgr.getShader("distortionFont.shader.json");
                    Ress.character = Ress.assetmgr.getAssetByName("qiu.prefab.json", "qiu.assetbundle.json").getCloneTrans();
                    Ress.floor = Ress.assetmgr.getAssetByName("floor.prefab.json", "floor.assetbundle.json").getCloneTrans();
                    Ress.trail = Ress.assetmgr.getAssetByName("trail.prefab.json", "trail.assetbundle.json").getCloneTrans();
                    // this.home_page = (Ress.assetmgr.getAssetByName("home_page.prefab.json") as m4m.framework.prefab);
                    // Ress.arrowTex = Ress.assetmgr.getAssetByName("arrow_1.png") as m4m.framework.texture;
                    // Ress.brdfLUT = Ress.assetmgr.getAssetByName("brdf.png") as m4m.framework.texture;
                    // Ress.finishLine = Ress.assetmgr.getAssetByName("finish-plane-texture.png") as m4m.framework.texture;
                    // //装配资源
                    // Ress.lego1 = (Ress.assetmgr.getAssetByName("box001.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // Ress.lego2 = (Ress.assetmgr.getAssetByName("lego2.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // Ress.boost = (Ress.assetmgr.getAssetByName("boost.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // Ress.decoraion1 = (Ress.assetmgr.getAssetByName("decoraion1.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // // Ress.jinbi = (Ress.assetmgr.getAssetByName("jinbi.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // Ress.jinbi = (Ress.assetmgr.getAssetByName("jinbi.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // this.coustomMeshCg(Ress.decoraion1);
                    // //textrues
                    // // this.createCgrayTex();
                    // // Ress.speedLine = Ress.assetmgr.getAssetByName("speedLine.atlas.json") as m4m.framework.atlas;
                    Ress.shadowTex = Ress.assetmgr.getAssetByName("shadow.png", "texs_basePre.assetbundle.json");
                    // //UI
                    // // Ress.ui_speedLine = ( Ress.assetmgr.getAssetByName("speed_line.prefab.json") as m4m.framework.prefab) ;
                    // this.setting_page = (Ress.assetmgr.getAssetByName("setting_page.prefab.json") as m4m.framework.prefab);
                    // this.continue_page = (Ress.assetmgr.getAssetByName("continue_page.prefab.json") as m4m.framework.prefab);
                    // this.unlock_page = (Ress.assetmgr.getAssetByName("unlock_page.prefab.json") as m4m.framework.prefab);
                    // // this.skinShop_page = (Ress.assetmgr.getAssetByName("skinShop_page.prefab.json") as m4m.framework.prefab);
                    // // this.gameOver_page = (Ress.assetmgr.getAssetByName("gameOver_page.prefab.json") as m4m.framework.prefab);
                    // // this.inGame_page = (Ress.assetmgr.getAssetByName("inGame_page.prefab.json") as m4m.framework.prefab);
                    // // this.invite_page = (Ress.assetmgr.getAssetByName("invite_page.prefab.json") as m4m.framework.prefab);
                    // // this.videoPrize_page = (Ress.assetmgr.getAssetByName("videoPrize_page.prefab.json") as m4m.framework.prefab);
                    // // this.prize_page = (Ress.assetmgr.getAssetByName("prize_page.prefab.json") as m4m.framework.prefab);
                    // // this.code_page = (Ress.assetmgr.getAssetByName("code_page.prefab.json") as m4m.framework.prefab);
                    // // this.rank_page = (Ress.assetmgr.getAssetByName("rank_page.prefab.json") as m4m.framework.prefab);
                    // // this.victory_page = (Ress.assetmgr.getAssetByName("victory_page.prefab.json") as m4m.framework.prefab);
                    // // this.newYear_page = (Ress.assetmgr.getAssetByName("newYear_page.prefab.json") as m4m.framework.prefab);
                    // //fx
                    // Ress.fx_die_qiu = (Ress.assetmgr.getAssetByName("fx_die_qiu.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // Ress.fx_wd = (Ress.assetmgr.getAssetByName("fx_wd.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // Ress.fx_js = (Ress.assetmgr.getAssetByName("fx_js.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    if (Ress.lcallBack)
                        Ress.lcallBack();
                };
                //第二次加载 低优先级 资源 （字体、非首页 UI图集 等）
                Ress.secondLoading = function () {
                    var _this = this;
                    //物体
                    this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "boost/boost.assetbundle.json"));
                    this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "jinbi/jinbi.assetbundle.json"));
                    this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "decoraion1/decoraion1.assetbundle.json"));
                    this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "box001/box001.assetbundle.json"));
                    this.lReslist.push("".concat(GameMgr_5.GameMgr.propsPath, "lego2/lego2.assetbundle.json"));
                    //单图
                    this.lReslist.push("".concat(GameMgr_5.GameMgr.TexPath, "texs_base/texs_base.assetbundle.json"));
                    //特效
                    // this.lReslist.push(`${GameMgr.fxPath}fx_die_qiu/fx_die_qiu.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.fxPath}fx_wd/fx_wd.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.fxPath}fx_js/fx_js.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.fxPath}fx_gx/fx_gx.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.fxPath}fx_sl/fx_sl.assetbundle.json`);
                    // //new 图集
                    // this.lReslist.push(`${GameMgr.atlasPath}common/common.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}continue/continue.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}gameover/gameover.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}home/home.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}ingame/ingame.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}invite/invite.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}newyear/newyear.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}prize/prize.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}QRcode/QRcode.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}rank/rank.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}setting/setting.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}shop/shop.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}unlock/unlock.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}victory/victory.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.atlasPath}videoPrize/videoPrize.assetbundle.json`);
                    //ui
                    // this.lReslist.push(`${GameMgr.UIPath}home_page/home_page.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.UIPath}setting_page/setting_page.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.UIPath}continue_page/continue_page.assetbundle.json`);
                    // this.lReslist.push(`${GameMgr.UIPath}unlock_page/unlock_page.assetbundle.json`);
                    var ps = [];
                    for (var i = 0; i < Ress.lReslist.length; i++) {
                        ps.push(loadMgr_2.loadMgr.Instance.syncLoad(Ress.lReslist[i]));
                    }
                    Promise.all(ps).then(function () {
                        _this.seconedLend();
                        _this.finalLoading();
                    });
                };
                // //第二次加载 回调
                // private static onScLoaded(url: string) {
                //     let idx = Ress.lReslist.indexOf(url);
                //     if (idx != -1) {
                //         Ress.lReslist.splice(idx, 1);
                //     }
                //     if (Ress.lReslist.length <= 0) {
                //         this.seconedLend();
                //         this.finalLoading();
                //     }
                // }
                //第二次加载 完毕
                Ress.seconedLend = function () {
                    //处理资源
                    //装配资源
                    Ress.lego1 = Ress.assetmgr.getAssetByName("box001.prefab.json", "box001.assetbundle.json").getCloneTrans();
                    Ress.lego2 = Ress.assetmgr.getAssetByName("lego2.prefab.json", "lego2.assetbundle.json").getCloneTrans();
                    Ress.boost = Ress.assetmgr.getAssetByName("boost.prefab.json", "boost.assetbundle.json").getCloneTrans();
                    Ress.decoraion1 = Ress.assetmgr.getAssetByName("decoraion1.prefab.json", "decoraion1.assetbundle.json").getCloneTrans();
                    // Ress.jinbi = (Ress.assetmgr.getAssetByName("jinbi.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    Ress.jinbi = Ress.assetmgr.getAssetByName("jinbi.prefab.json", "jinbi.assetbundle.json").getCloneTrans();
                    this.coustomMeshCg(Ress.decoraion1);
                    //textrues
                    Ress.arrowTex = Ress.assetmgr.getAssetByName("arrow_1.png", "texs_base.assetbundle.json");
                    Ress.brdfLUT = Ress.assetmgr.getAssetByName("brdf.png", "texs_base.assetbundle.json");
                    Ress.finishLine = Ress.assetmgr.getAssetByName("finish-plane-texture.png", "texs_base.assetbundle.json");
                    //UI
                    //  Ress.ui_speedLine = ( Ress.assetmgr.getAssetByName("speed_line.prefab.json") as m4m.framework.prefab) ;
                    //  this.home_page = (Ress.assetmgr.getAssetByName("home_page.prefab.json") as m4m.framework.prefab);
                    //  this.setting_page = (Ress.assetmgr.getAssetByName("setting_page.prefab.json") as m4m.framework.prefab);
                    //  this.continue_page = (Ress.assetmgr.getAssetByName("continue_page.prefab.json") as m4m.framework.prefab);
                    //  this.unlock_page = (Ress.assetmgr.getAssetByName("unlock_page.prefab.json") as m4m.framework.prefab);
                    //对外回调
                    if (this.seconedLcallBack) {
                        this.seconedLcallBack();
                    }
                };
                //最后的加载 
                Ress.finalLoading = function () {
                    // loadMgr.Instance.load(`${GameMgr.atlasPath}shop/shop.assetbundle.json`, null);
                    // loadMgr.Instance.load(`${GameMgr.atlasPath}newyear/newyear.assetbundle.json`, null);
                    // loadMgr.Instance.load(`${GameMgr.atlasPath}rank/rank.assetbundle.json`, null);
                    // //字体
                    // loadMgr.Instance.load(`${GameMgr.fontPath}defFont/defFont.assetbundle.json`,null);
                    //特效
                    loadMgr_2.loadMgr.Instance.load("".concat(GameMgr_5.GameMgr.fxPath, "fx_die_qiu/fx_die_qiu.assetbundle.json"), null);
                    loadMgr_2.loadMgr.Instance.load("".concat(GameMgr_5.GameMgr.fxPath, "fx_wd/fx_wd.assetbundle.json"), null);
                    loadMgr_2.loadMgr.Instance.load("".concat(GameMgr_5.GameMgr.fxPath, "fx_js/fx_js.assetbundle.json"), null);
                    loadMgr_2.loadMgr.Instance.load("".concat(GameMgr_5.GameMgr.fxPath, "fx_gx/fx_gx.assetbundle.json"), null);
                    loadMgr_2.loadMgr.Instance.load("".concat(GameMgr_5.GameMgr.fxPath, "fx_sl/fx_sl.assetbundle.json"), null);
                };
                Ress.coustomMeshCg = function (tran) {
                    if (!tran)
                        return;
                    //mesh cg add a
                    var arr = [0, 2, 4, 6, 8, 10, 12, 13, 16, 17, 18, 19];
                    var mf = tran.gameObject.getComponent("meshFilter");
                    var cs = mf.mesh.data.color;
                    arr.forEach(function (idx) {
                        cs[idx].a = 0;
                    });
                    // let vf = mf.mesh.data.originVF;
                    var vf = mf.mesh.glMesh.vertexFormat;
                    var v32 = mf.mesh.data.genVertexDataArray(vf);
                    mf.mesh.glMesh.uploadVertexData(GameMgr_5.GameMgr.app.webgl, v32);
                };
                Ress.lReslist = [];
                Ress.isInit = true;
                Ress.dis_num = 0;
                return Ress;
            }()));
        }
    };
});
System.register("Data/Dictionary", [], function (exports_10, context_10) {
    "use strict";
    var Dictionary;
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [],
        execute: function () {
            Dictionary = /** @class */ (function () {
                function Dictionary(init) {
                    if (init === void 0) { init = null; }
                    this._keys = new Array();
                    this._values = new Array();
                    if (init) {
                        for (var x = 0; x < init.length; x++) {
                            //this[init[x].key] = init[x].value;
                            this._keys.push(init[x].key);
                            this._values.push(init[x].value);
                        }
                    }
                }
                Dictionary.prototype.Add = function (key, value) {
                    //this[key] = value;
                    var index = this._keys.indexOf(key); //indexOf 查找会丢失精度  比如存入一个Number.MAX_VALUE 再用indexOf查找 (Number.MAX_VALUE-1)是否存在数组中  会返回存在  index不为-1
                    if (index != -1) {
                        this._values[index] = value;
                    }
                    else {
                        this._keys.push(key);
                        this._values.push(value);
                    }
                };
                Dictionary.prototype.Remove = function (key) {
                    var index = this._keys.indexOf(key);
                    if (index != -1) {
                        this._keys.splice(index, 1);
                        this._values.splice(index, 1);
                        //delete this[key];
                    }
                    else {
                        console.error(key + " The Key not in Dictionary");
                    }
                };
                Dictionary.prototype.GetValue = function (key) {
                    var index = this._keys.indexOf(key);
                    if (index != -1) {
                        return this._values[index];
                    }
                    else {
                        console.error("Get:" + key + " The Key not in Dictionary");
                    }
                    return null;
                };
                Dictionary.prototype.GetKey = function (value) {
                    var index = this._values.indexOf(value);
                    if (index != -1) {
                        return this._keys[index];
                    }
                    else {
                        console.error("Get:" + value + " The value not in Dictionary");
                    }
                    return null;
                };
                Object.defineProperty(Dictionary.prototype, "keys", {
                    get: function () {
                        return this._keys;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Dictionary.prototype, "values", {
                    get: function () {
                        return this._values;
                    },
                    enumerable: false,
                    configurable: true
                });
                Dictionary.prototype.ContainsKey = function (key) {
                    //if(typeof this[key] === "undefined") {
                    if (this._keys.indexOf(key) == -1) {
                        return false;
                    }
                    return true;
                };
                Object.defineProperty(Dictionary.prototype, "count", {
                    get: function () {
                        return this._keys.length;
                    },
                    enumerable: false,
                    configurable: true
                });
                Dictionary.prototype.Clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                };
                return Dictionary;
            }());
            exports_10("Dictionary", Dictionary);
        }
    };
});
System.register("Tool/commTool", ["Data/Dictionary"], function (exports_11, context_11) {
    "use strict";
    var Dictionary_1, commTool;
    var __moduleName = context_11 && context_11.id;
    return {
        setters: [
            function (Dictionary_1_1) {
                Dictionary_1 = Dictionary_1_1;
            }
        ],
        execute: function () {
            exports_11("commTool", commTool = /** @class */ (function () {
                /** 通用 Tool */
                function commTool() {
                }
                commTool.ImgByLoad = function (url, backFun) {
                    var _this = this;
                    m4m.io.loadImg(url, function (_tex, err) {
                        if (err) {
                            console.error(err);
                        }
                        else {
                            _this.cc++;
                            //构建 img
                            var _texture = new m4m.framework.texture("_loadTex_".concat(_this.cc));
                            var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                            var t2d = new m4m.render.glTexture2D(m4m.framework.sceneMgr.app.webgl, _textureFormat);
                            t2d.uploadImage(_tex, false, true, false, false, false); //非2次幂 图 不能显示设置repeat
                            _texture.glTexture = t2d;
                            _texture.use();
                            if (backFun)
                                backFun(_texture);
                        }
                    });
                };
                // promise version ImgByLoad
                commTool.getTexture = function (path) {
                    return new Promise(function (rev, rej) {
                        commTool.ImgByLoad(path, function (texture) {
                            rev(texture);
                        });
                    });
                };
                /** 缓动方法 IN => Out
                 * p : 过程进度
                 * MaxVal : 过程的最大值
                 * mathIn : in 过程的 tween方法
                 * mathOut : out 过程的 tween方法
                */
                commTool.tweenInOut = function (p, MaxVal, methodIn, methodOut) {
                    var mth, tp;
                    if (p <= 0.5) {
                        mth = methodIn;
                        tp = p * 2;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * MaxVal / 2;
                    }
                    else {
                        mth = methodOut;
                        tp = p * 2 - 1;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * MaxVal / 2 + MaxVal / 2;
                    }
                };
                //16进制颜色转10进制
                commTool.color16To10 = function (str, out) {
                    if (!out)
                        return;
                    if (out instanceof m4m.math.color) {
                        out.r = parseInt(str.substring(0, 2), 16) / 255;
                        out.g = parseInt(str.substring(2, 4), 16) / 255;
                        out.b = parseInt(str.substring(4, 6), 16) / 255;
                        out.a = 1;
                    }
                    else {
                        out.x = parseInt(str.substring(0, 2), 16) / 255;
                        out.y = parseInt(str.substring(2, 4), 16) / 255;
                        out.z = parseInt(str.substring(4, 6), 16) / 255;
                        out.w = 1;
                    }
                };
                commTool.cc = 0;
                /** 加载 的贴图缓存容器 */
                commTool.loadedTexsDic = new Dictionary_1.Dictionary();
                return commTool;
            }()));
        }
    };
});
System.register("skinMgr", ["GameMgr", "Ress", "Tool/commTool"], function (exports_12, context_12) {
    "use strict";
    var GameMgr_6, Ress_1, commTool_1, skinMgr, skinChunk;
    var __moduleName = context_12 && context_12.id;
    return {
        setters: [
            function (GameMgr_6_1) {
                GameMgr_6 = GameMgr_6_1;
            },
            function (Ress_1_1) {
                Ress_1 = Ress_1_1;
            },
            function (commTool_1_1) {
                commTool_1 = commTool_1_1;
            }
        ],
        execute: function () {
            exports_12("skinMgr", skinMgr = /** @class */ (function () {
                function skinMgr() {
                }
                skinMgr.init = function () {
                    var skins = Ress_1.Ress.skinConfig;
                    this.skinPath = GameMgr_6.GameMgr.skinTexPath;
                    this.iconPath = GameMgr_6.GameMgr.skinIconPath;
                    for (var key in skins) {
                        var element = skins[key];
                        this.skins.push(new skinChunk(element));
                    }
                    this.skins.forEach(function (skin) {
                        skinMgr.skins_map.set(skin.id, skin);
                    });
                };
                /** 获取皮肤 info 通过 id */
                skinMgr.getSkinInfo = function (id) {
                    return this.skins_map.get(id);
                    ;
                };
                /** 获取皮肤贴图 */
                skinMgr.getPBRTexture = function (id) {
                    return __awaiter(this, void 0, void 0, function () {
                        var skin, basecolorImage, normalImage, _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    skin = this.skins_map.get(id);
                                    console.log(skin);
                                    console.log("获取皮肤贴图");
                                    if (!(skin.basecolor == null || skin.normal == null)) return [3 /*break*/, 3];
                                    basecolorImage = skin.basecolorImage, normalImage = skin.normalImage;
                                    _a = skin;
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath).concat(basecolorImage))];
                                case 1:
                                    _a.basecolor = _c.sent();
                                    _b = skin;
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath).concat(normalImage))];
                                case 2:
                                    _b.normal = _c.sent();
                                    _c.label = 3;
                                case 3: return [2 /*return*/, [skin.basecolor, skin.normal]];
                            }
                        });
                    });
                };
                skinMgr.getSkinTexture = function (id) {
                    return __awaiter(this, void 0, void 0, function () {
                        var skin, skinSticker, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    skin = this.skins_map.get(id);
                                    if (!!skin.skinTexture) return [3 /*break*/, 2];
                                    skinSticker = skin.skinSticker;
                                    _a = skin;
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath).concat(skinSticker))];
                                case 1:
                                    _a.skinTexture = _b.sent();
                                    _b.label = 2;
                                case 2: return [2 /*return*/, skin.skinTexture];
                            }
                        });
                    });
                };
                skinMgr.getCubetex = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var negx, negy, negz, posx, posy, posz;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!(this.cubeTexture == null)) return [3 /*break*/, 7];
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath, "env/negx.jpg"))];
                                case 1:
                                    negx = _a.sent();
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath, "env/negy.jpg"))];
                                case 2:
                                    negy = _a.sent();
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath, "env/negz.jpg"))];
                                case 3:
                                    negz = _a.sent();
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath, "env/posx.jpg"))];
                                case 4:
                                    posx = _a.sent();
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath, "env/posy.jpg"))];
                                case 5:
                                    posy = _a.sent();
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath, "env/posz.jpg"))];
                                case 6:
                                    posz = _a.sent();
                                    this.cubeTexture = new m4m.framework.texture('box');
                                    this.cubeTexture.glTexture = new m4m.render.glTextureCube(GameMgr_6.GameMgr.app.webgl);
                                    this.cubeTexture.use();
                                    this.cubeTexture.glTexture.uploadImages(negx, negy, negz, posx, posy, posz);
                                    _a.label = 7;
                                case 7: return [2 /*return*/, this.cubeTexture];
                            }
                        });
                    });
                };
                /** 获取皮肤icon */
                skinMgr.getSkinIcon = function (id) {
                    return __awaiter(this, void 0, void 0, function () {
                        var skin, headPortrait, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    skin = this.skins_map.get(id);
                                    if (!!skin.skinIcon) return [3 /*break*/, 2];
                                    headPortrait = skin.headPortrait;
                                    _a = skin;
                                    return [4 /*yield*/, commTool_1.commTool.getTexture("".concat(this.skinPath).concat(headPortrait))];
                                case 1:
                                    _a.skinIcon = _b.sent();
                                    _b.label = 2;
                                case 2: return [2 /*return*/, skin.skinIcon];
                            }
                        });
                    });
                };
                skinMgr.skins = [];
                skinMgr.skins_map = new Map();
                skinMgr.shareSkins = [];
                skinMgr.cubeTexture = null;
                return skinMgr;
            }()));
            skinChunk = /** @class */ (function () {
                function skinChunk(_a) {
                    var id = _a.id, skinName = _a.skinName, headPortrait = _a.headPortrait, skinSticker = _a.skinSticker, deblocking = _a.deblocking, color = _a.color, basecolor = _a.basecolor, normal = _a.normal, renderType = _a.renderType;
                    this.deblocking = []; // unlock 条件
                    this.skinTexture = null; // texture cache
                    this.skinIcon = null; // icon cache
                    this.basecolor = null;
                    this.normal = null;
                    this.renderType = false;
                    this.isPBR = false;
                    this.id = id;
                    this.name = skinName;
                    this.headPortrait = headPortrait;
                    this.skinSticker = skinSticker;
                    this.color = color;
                    // deblocking
                    // let locks = (deblocking as string).split(":");
                    for (var key in deblocking) {
                        var element = deblocking[key];
                        this.deblocking.push(element);
                    }
                    // if (this.deblocking[0] == 2) {
                    //     skinMgr.shareSkins.push(this);
                    // } else if (this.deblocking[0] == 3) {
                    //     skinMgr.newYearSkin = this;
                    // }
                    this.renderType = renderType;
                    if (renderType == 1) {
                        this.basecolorImage = basecolor;
                        this.normalImage = normal;
                        this.isPBR = true;
                    }
                }
                return skinChunk;
            }());
            exports_12("skinChunk", skinChunk);
        }
    };
});
System.register("themeMgr", ["GameMgr", "MatMgr", "Ress", "Tool/commTool"], function (exports_13, context_13) {
    "use strict";
    var GameMgr_7, MatMgr_1, Ress_2, commTool_2, themeMgr, themeChunk;
    var __moduleName = context_13 && context_13.id;
    return {
        setters: [
            function (GameMgr_7_1) {
                GameMgr_7 = GameMgr_7_1;
            },
            function (MatMgr_1_1) {
                MatMgr_1 = MatMgr_1_1;
            },
            function (Ress_2_1) {
                Ress_2 = Ress_2_1;
            },
            function (commTool_2_1) {
                commTool_2 = commTool_2_1;
            }
        ],
        execute: function () {
            exports_13("themeMgr", themeMgr = /** @class */ (function () {
                function themeMgr() {
                }
                themeMgr.init = function () {
                    var _this = this;
                    var themes = Ress_2.Ress.themeConfig;
                    // this.themes = themes.map(info => new themeChunk(info));
                    for (var key in themes) {
                        var element = themes[key];
                        this.themes.push(new themeChunk(element));
                    }
                    this.resoucesPath = GameMgr_7.GameMgr.themeTexPath;
                    //this.changeTheme(0);
                    this.themes.forEach(function (theme) {
                        _this.themes_map.set(Number(theme.id), theme);
                    });
                };
                themeMgr.getThemeTexture = function (id) {
                    return __awaiter(this, void 0, void 0, function () {
                        var theme, image1, image2, tex, _a;
                        var _this = this;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    console.log("获取皮肤贴图", id);
                                    theme = this.themes_map.get(id);
                                    if (!(theme.textures.length == 0)) return [3 /*break*/, 4];
                                    image1 = theme.image1, image2 = theme.image2;
                                    if (!(image1 == image2)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, commTool_2.commTool.getTexture("".concat(this.resoucesPath).concat(image1))];
                                case 1:
                                    tex = _b.sent();
                                    theme.textures = [tex, tex];
                                    return [3 /*break*/, 4];
                                case 2:
                                    // 加载两张贴图
                                    _a = theme;
                                    return [4 /*yield*/, Promise.all([image1, image2].map(function (img) { return commTool_2.commTool.getTexture("".concat(_this.resoucesPath).concat(img)); }))];
                                case 3:
                                    // 加载两张贴图
                                    _a.textures = _b.sent();
                                    _b.label = 4;
                                case 4: return [2 /*return*/, theme.textures];
                            }
                        });
                    });
                };
                themeMgr.getCubeTexture = function (id) {
                    return __awaiter(this, void 0, void 0, function () {
                        var theme, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    theme = this.themes_map.get(id);
                                    if (!(theme.cubeTexture == null)) return [3 /*break*/, 2];
                                    _a = theme;
                                    return [4 /*yield*/, commTool_2.commTool.getTexture("".concat(this.resoucesPath).concat(theme.cubeImage))];
                                case 1:
                                    _a.cubeTexture = _b.sent();
                                    _b.label = 2;
                                case 2: return [2 /*return*/, theme.cubeTexture];
                            }
                        });
                    });
                };
                /** 切换主题 */
                themeMgr.changeTheme = function (id) {
                    if (id === void 0) { id = 1; }
                    return __awaiter(this, void 0, void 0, function () {
                        var tex1, tex2, cube, theme, isDynamicColor, hRange, sFactor, vFactor, isDynamic;
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    this.lastCgSkinId = id;
                                    return [4 /*yield*/, this.getThemeTexture(id)];
                                case 1:
                                    tex1 = (_a = _b.sent(), _a[0]), tex2 = _a[1];
                                    return [4 /*yield*/, this.getCubeTexture(id)];
                                case 2:
                                    cube = _b.sent();
                                    if (id != this.lastCgSkinId)
                                        return [2 /*return*/];
                                    this.currentTheme = id;
                                    MatMgr_1.MatMgr.Floor_mat_0.setTexture('_MainTex', tex1);
                                    MatMgr_1.MatMgr.Floor_mat_1.setTexture('_MainTex', tex2);
                                    MatMgr_1.MatMgr.box_mat.setTexture('_MainTex', cube);
                                    theme = this.themes_map.get(id);
                                    isDynamicColor = theme.isDynamicColor, hRange = theme.hRange, sFactor = theme.sFactor, vFactor = theme.vFactor;
                                    //设置 是否自动变色
                                    MatMgr_1.MatMgr.setDynamicColorAll(isDynamicColor);
                                    // Set up HSV limit
                                    MatMgr_1.MatMgr.setHrange(hRange[0], hRange[1]);
                                    MatMgr_1.MatMgr._s = sFactor / 100;
                                    MatMgr_1.MatMgr._v = vFactor / 100;
                                    isDynamic = theme.color == null;
                                    MatMgr_1.MatMgr.setRampColor(isDynamic, theme.color);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                themeMgr.themes = [];
                themeMgr.currentTheme = 0;
                themeMgr.themes_map = new Map();
                themeMgr.lastCgSkinId = 0; //最后一次 请求换皮肤的id( 避免贴图加载 异步问题 导致显示错误)
                return themeMgr;
            }()));
            themeChunk = /** @class */ (function () {
                function themeChunk(_a) {
                    var id = _a.id, sceneName = _a.sceneName, image1 = _a.image1, image2 = _a.image2, deblocking = _a.deblocking, color = _a.color, cubeImage = _a.cubeImage, icon = _a.icon, _b = _a.isDynamicColor, isDynamicColor = _b === void 0 ? true : _b, hRange = _a.hRange, sFactor = _a.sFactor, vFactor = _a.vFactor;
                    this.deblocking = []; // unlock 条件
                    this.textures = []; // texture cache
                    this.hRange = [0, 1];
                    this.sFactor = 1;
                    this.vFactor = 1;
                    this.id = id;
                    this.name = sceneName;
                    this.image1 = image1;
                    this.image2 = image2;
                    this.cubeImage = cubeImage;
                    this.icon = icon;
                    this.isDynamicColor = isDynamicColor;
                    this.hRange = hRange.map(function (h) { return h / 360; });
                    this.sFactor = sFactor;
                    this.vFactor = vFactor;
                    // this.color = color;
                    if (color && color != "") {
                        this.color = new m4m.math.vector4();
                        commTool_2.commTool.color16To10(color, this.color);
                    }
                    // let locks = (deblocking as string).split(":");
                    // locks.forEach(sub => {
                    //     let num = Number(sub);
                    //     num = isNaN(num) ? 0 : num;
                    //     this.deblocking.push(num);
                    // });
                    // if (this.deblocking[0] == 3) {
                    //     console.log(this)
                    //     themeMgr.newYearThemes = this;
                    // }
                }
                return themeChunk;
            }());
            exports_13("themeChunk", themeChunk);
        }
    };
});
System.register("levelMgr", ["Ress"], function (exports_14, context_14) {
    "use strict";
    var Ress_3, levelMgr, level;
    var __moduleName = context_14 && context_14.id;
    return {
        setters: [
            function (Ress_3_1) {
                Ress_3 = Ress_3_1;
            }
        ],
        execute: function () {
            exports_14("levelMgr", levelMgr = /** @class */ (function () {
                function levelMgr() {
                }
                levelMgr.init = function () {
                    //let { levels } = JSON.parse(Ress.levelConfig);
                    var objArr = Ress_3.Ress.levelConfig;
                    for (var key in objArr) {
                        var element = objArr[key];
                        this.levels.push(new level(element));
                    }
                    // this.levels = objArr.map(info => new level(info));
                };
                levelMgr.levels = [];
                return levelMgr;
            }()));
            level = /** @class */ (function () {
                function level(_a) {
                    var id = _a.id, amount = _a.amount, stageName = _a.stageName, runwayLength = _a.runwayLength, runwayWeight = _a.runwayWeight, cubeSpMin = _a.cubeSpMin, cubeSpMax = _a.cubeSpMax, beyondRate = _a.beyondRate, bootsWght = _a.bootsWght, reviveCount = _a.reviveCount;
                    this.id = id;
                    this.amount = amount;
                    this.stageName = stageName;
                    this.length = runwayLength;
                    this.weight = runwayWeight;
                    this.cubeSpeedRange = [cubeSpMin, cubeSpMax];
                    // 机器人逻辑
                    this.beyondRate = beyondRate;
                    var boostSum = bootsWght[0] + bootsWght[1] + bootsWght[2];
                    this.bootsRates = bootsWght.map(function (weight) { return weight / boostSum; });
                    this.reviveCount = reviveCount;
                }
                return level;
            }());
            exports_14("level", level);
        }
    };
});
System.register("inviteMgr", ["Ress"], function (exports_15, context_15) {
    "use strict";
    var Ress_4, inviteMgr;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [
            function (Ress_4_1) {
                Ress_4 = Ress_4_1;
            }
        ],
        execute: function () {
            exports_15("inviteMgr", inviteMgr = /** @class */ (function () {
                function inviteMgr() {
                }
                inviteMgr.init = function () {
                    var l = JSON.parse(Ress_4.Ress.inviteConfig);
                    this.gold = l.gold;
                    this.prize = l.prize;
                };
                inviteMgr.prize = [];
                return inviteMgr;
            }()));
        }
    };
});
System.register("configMgr", ["skinMgr", "themeMgr", "levelMgr", "inviteMgr", "Ress"], function (exports_16, context_16) {
    "use strict";
    var skinMgr_1, themeMgr_1, levelMgr_1, inviteMgr_1, Ress_5, configMgr;
    var __moduleName = context_16 && context_16.id;
    return {
        setters: [
            function (skinMgr_1_1) {
                skinMgr_1 = skinMgr_1_1;
            },
            function (themeMgr_1_1) {
                themeMgr_1 = themeMgr_1_1;
            },
            function (levelMgr_1_1) {
                levelMgr_1 = levelMgr_1_1;
            },
            function (inviteMgr_1_1) {
                inviteMgr_1 = inviteMgr_1_1;
            },
            function (Ress_5_1) {
                Ress_5 = Ress_5_1;
            }
        ],
        execute: function () {
            configMgr = /** @class */ (function () {
                function configMgr() {
                }
                configMgr.PreInit = function () {
                    var conf = Ress_5.Ress.mainConfig;
                    // let obj = JSON.parse(conf);
                    this.setConf(conf["1"]);
                    themeMgr_1.themeMgr.init();
                    inviteMgr_1.inviteMgr.init();
                };
                /** 其他配置初始化 */
                configMgr.init = function () {
                    skinMgr_1.skinMgr.init();
                    levelMgr_1.levelMgr.init();
                };
                configMgr.setConf = function (obj) {
                    for (var k in obj) {
                        configMgr[k] = obj[k];
                    }
                };
                configMgr.print = function () {
                    var c = {};
                    for (var k in configMgr) {
                        c[k] = configMgr[k];
                    }
                    console.error("".concat(JSON.stringify(c)));
                };
                return configMgr;
            }());
            exports_16("configMgr", configMgr);
        }
    };
});
System.register("MatMgr", ["Ress", "GameMgr", "role/playerMgr", "configMgr", "themeMgr", "Tools/FrameMgr"], function (exports_17, context_17) {
    "use strict";
    var Ress_6, GameMgr_8, playerMgr_1, configMgr_1, themeMgr_2, FrameMgr_2, MatMgr;
    var __moduleName = context_17 && context_17.id;
    return {
        setters: [
            function (Ress_6_1) {
                Ress_6 = Ress_6_1;
            },
            function (GameMgr_8_1) {
                GameMgr_8 = GameMgr_8_1;
            },
            function (playerMgr_1_1) {
                playerMgr_1 = playerMgr_1_1;
            },
            function (configMgr_1_1) {
                configMgr_1 = configMgr_1_1;
            },
            function (themeMgr_2_1) {
                themeMgr_2 = themeMgr_2_1;
            },
            function (FrameMgr_2_1) {
                FrameMgr_2 = FrameMgr_2_1;
            }
        ],
        execute: function () {
            exports_17("MatMgr", MatMgr = /** @class */ (function () {
                //材质 对象管理器
                function MatMgr() {
                }
                MatMgr.preInit = function () {
                    this.colorSp = configMgr_1.configMgr.colorSpeed;
                    this.distorSpeed = configMgr_1.configMgr.DistorSpeed;
                    this.disRange_x = configMgr_1.configMgr.DistorHrange;
                    this.disRange_y = configMgr_1.configMgr.DistorVrange;
                    this.colorPGap = configMgr_1.configMgr.sceneColorHGap / 360 / 2;
                    this.firstP = configMgr_1.configMgr.firstColorH / 360 / 2; //开始界面配置取固定颜色
                    this._s = configMgr_1.configMgr.firstColorS / 100;
                    this._v = configMgr_1.configMgr.firstColorV / 100;
                    this.preInitMats();
                    //Distortion
                    this.initState();
                    FrameMgr_2.FrameMgr.Add(this.update, this);
                };
                MatMgr.init = function () {
                    //mat
                    this.initMats();
                    // //Distortion
                    // this.initState();
                    // FrameMgr.Add(this.update, this);
                };
                MatMgr.initState = function () {
                    var _this = this;
                    this.firstP = Math.random(); //开始界面随机颜色
                    this._colorP = this.firstP;
                    this._colorP_0 = this.firstP;
                    this.mats.forEach(function (mat) {
                        mat.setVector4("OFFSET", _this.cacheDistortion);
                    });
                    this.setDistortion(0, 0);
                    this.targetDisC = new m4m.math.vector4();
                    this.distortionP = 1;
                    this.reBsaeSet();
                    this.stepOnec = true;
                };
                MatMgr.relive = function () {
                    this.reBsaeSet();
                };
                MatMgr.reBsaeSet = function () {
                    this.greyP = 1;
                    this.initColor();
                    this.toGreying = false;
                    var t = themeMgr_2.themeMgr.themes_map.get(themeMgr_2.themeMgr.currentTheme);
                    if (t) {
                        this.setDynamicColorAll(t.isDynamicColor);
                        var isDynamic = t.color == null;
                        this.setRampColor(isDynamic, t.color);
                    }
                };
                MatMgr.initColor = function () {
                    if (this.redArrow_mat)
                        this.redArrow_mat.setVector4("_MainColor", new m4m.math.vector4(1, 0.2, 0.2, 1));
                    this.boost_mat_0.setVector4("_MainColor", new m4m.math.vector4(1, 1, 0, 1));
                    this.coin_mat.setVector4("_MainColor", new m4m.math.vector4(1, 1, 1, 1));
                    this.Trail_mat.setVector4("_MainColor", new m4m.math.vector4(1, 1, 1, 1));
                    this.wind_mat.setVector4("_MainColor", new m4m.math.vector4(1, 1, 1, 1));
                    this.Role_mat.setVector4("_MainColor", new m4m.math.vector4(1, 1, 1, 1));
                    this.Role_PBRmat.setVector4("_MainColor", new m4m.math.vector4(1, 1, 1, 1));
                    this.shadow_mat.setVector4("_MainColor", new m4m.math.vector4(1, 1, 1, 1));
                    for (var i = 0; i < this.Robot_mats.length; i++) {
                        this.Robot_mats[i].setVector4("_MainColor", new m4m.math.vector4(Math.random(), Math.random(), Math.random(), 1));
                    }
                };
                //预初始化材质
                MatMgr.preInitMats = function () {
                    var _this = this;
                    this.scene = GameMgr_8.GameMgr.app.getScene();
                    this.scene.mainCamera.backgroundColor = new m4m.math.color(1, 1, 1, 1);
                    // this.FullModels();
                    this.Floor_mat_0 = this.getAMat();
                    this.Floor_mat_1 = this.getAMat(); //this.cgrayTex
                    this.finishLine = this.getAMat(); //this.cgrayTex
                    this.finishLine[this.tag_unColorCg] = true;
                    this.Comm_mat_0 = this.getAMat();
                    this.ramp_mat_0 = this.getAMat();
                    this.box_mat = this.getAMat();
                    this.coin_mat = this.getAMat(null, Ress_6.Ress.ballShader); //钻石的贴图
                    this.coin_mat[this.tag_onlyGrey] = true;
                    this.boost_mat_0 = this.getAMat();
                    this.boost_mat_0[this.tag_onlyGrey] = true;
                    this.Role_mat = this.getAMat();
                    this.Role_mat.setShader(Ress_6.Ress.ballShader);
                    this.Role_mat[this.tag_onlyGrey] = true;
                    this.Role_PBRmat = this.getAMat();
                    this.Role_PBRmat.setShader(Ress_6.Ress.ballPBRShader);
                    this.Role_PBRmat[this.tag_onlyGrey] = true;
                    var count = 20; //固定20个 敌人的球材质
                    for (var i = 0; i < count; i++) {
                        var rmat = this.getAMat();
                        rmat[this.tag_onlyGrey] = true;
                        rmat.setShader(Ress_6.Ress.ballShader);
                        this.Robot_mats.push(rmat);
                    }
                    this.Trail_mat = this.getAMat(null, Ress_6.Ress.trailShader);
                    this.Trail_mat[this.tag_onlyGrey] = true;
                    this.shadow_mat = this.getAMat(Ress_6.Ress.shadowTex, Ress_6.Ress.trailShader);
                    this.shadow_mat[this.tag_onlyGrey] = true;
                    this.wind_mat = this.getAMat(null, Ress_6.Ress.trailShader);
                    this.wind_mat[this.tag_onlyGrey] = true;
                    //-----------------------------------汇总----------------------------------------------
                    var list = [this.box_mat, this.finishLine, this.Comm_mat_0, this.ramp_mat_0, this.boost_mat_0, this.coin_mat, this.Floor_mat_0, this.Floor_mat_1,
                        this.Role_mat, this.Trail_mat, this.shadow_mat, this.Role_PBRmat, this.wind_mat];
                    this.mats = this.mats.concat(list);
                    // this.mats = this.mats.concat(fx_mats);
                    this.mats = this.mats.concat(this.Robot_mats);
                    if (this.redArrow_mat)
                        this.mats.push(this.redArrow_mat);
                    //筛选出 变色的mat
                    this.mats.forEach(function (mat) {
                        if (!mat[_this.tag_unColorCg]) {
                            _this.CgColorMats.push(mat);
                            mat.setVector4("_MainColor", _this.cacheColor);
                        }
                        if (mat[_this.tag_onlyGrey]) {
                            _this.onlyGreyMats.push(mat);
                        }
                    });
                };
                //初始化材质
                MatMgr.initMats = function () {
                    // this.Floor_mat_1.setTexture("_MainTex", Ress.cgrayTex);
                    this.finishLine.setTexture("_MainTex", Ress_6.Ress.finishLine);
                    if (Ress_6.Ress.lego2.children && Ress_6.Ress.lego2.children.length > 0) {
                        var temp = Ress_6.Ress.lego2.children[0];
                        var mr = temp.gameObject.getComponent("meshRenderer");
                        if (mr) {
                            this.redArrow_mat = mr.materials[0];
                            this.redArrow_mat[this.tag_onlyGrey] = true;
                            this.redArrow_mat.setShader(Ress_6.Ress.disShaderUnlight);
                            this.redArrow_mat.setTexture("_MainTex", Ress_6.Ress.arrowTex);
                            this.redArrow_mat.setVector4("OFFSET", this.cacheDistortion);
                            this.onlyGreyMats.push(this.redArrow_mat);
                            this.mats.push(this.redArrow_mat);
                        }
                    }
                    this.coin_mat.setTexture("_MainTex", this.getTextName("jinbi.png", "jinbi.assetbundle.json"));
                    this.Trail_mat.setTexture("_MainTex", this.getTextName("t.png", "trail.assetbundle.json"));
                    // this.shadow_mat.setTexture("_MainTex", this.getTextName("shadow.png"));
                };
                /** 设置特效的材质 */
                MatMgr.setFxMat = function (fxTrans) {
                    if (!fxTrans)
                        return;
                    var f14s = fxTrans.gameObject.getComponent("f14EffectSystem");
                    var len = f14s.f14eff.data.layers.length;
                    for (var i = 0; i < len; i++) {
                        var lay = f14s.f14eff.data.layers[i];
                        var mat = lay.elementdata["material"];
                        if (mat) {
                            mat[this.tag_unColorCg] = true;
                            this.mats.push(mat);
                            mat.setVector4("OFFSET", this.cacheDistortion);
                        }
                    }
                };
                MatMgr.dynamicColor = function (mat, isEnable) {
                    if (isEnable === void 0) { isEnable = true; }
                    if (isEnable) {
                        mat.setVector4("_MainColor", this.cacheColor);
                        mat.setShader(Ress_6.Ress.disShader);
                    }
                    else {
                        mat.setVector4("_MainColor", this.defaultColor);
                        mat.setShader(Ress_6.Ress.disShaderUnlight);
                    }
                };
                /** 材质切换成 动态变色 */
                MatMgr.setDynamicColorAll = function (isEnable) {
                    if (this.lastDynamicColor == isEnable)
                        return;
                    this.lastDynamicColor = isEnable;
                    this.dynamicColor(this.Floor_mat_0, isEnable);
                    this.dynamicColor(this.Floor_mat_1, isEnable);
                    this.dynamicColor(this.box_mat, isEnable);
                };
                /** 设置坡道的 颜色 和 模式 */
                MatMgr.setRampColor = function (isDynamic, fixedColor) {
                    if (fixedColor === void 0) { fixedColor = null; }
                    var color = this.cacheColor;
                    if (!isDynamic) {
                        if (!fixedColor)
                            return;
                        m4m.math.vec4Clone(fixedColor, this.rampColor);
                        color = this.rampColor;
                    }
                    this.ramp_mat_0.setVector4("_MainColor", color);
                };
                //检查 hud 材质的替换
                MatMgr.ckHudLabMatCg = function () {
                    var _this = this;
                    if (this.waitLabList.length < 1)
                        return;
                    var flab = this.waitLabList[0];
                    var len = this.waitLabList.length;
                    var removelist = [];
                    for (var i = 0; i < len; i++) {
                        var lab = this.waitLabList[i];
                        if (!lab.font || !lab.font.texture)
                            continue;
                        // if(!lab.font){
                        //     let resName = lab["_fontName"];
                        //     let temp = GameMgr.assetMgr.mapNamed[resName];
                        //     if(temp == undefined){
                        //         resName = `${resName}.font.json`
                        //         temp = GameMgr.assetMgr.mapNamed[resName];
                        //     }
                        //     if(temp){
                        //         let ref = GameMgr.assetMgr.mapRes[temp[0]];
                        //         let tfont = ref.asset as m4m.framework.font;
                        //         lab.font = tfont;
                        //         lab["needRefreshFont"] = true;
                        //     }
                        // }
                        this.setHudMat(lab);
                        removelist.push(i);
                    }
                    removelist.forEach(function (idx) {
                        _this.waitLabList.splice(idx, 1);
                    });
                };
                //设置 小球 头顶字符的材质
                MatMgr.setHudMat = function (lab) {
                    if (!lab)
                        return;
                    lab.setShaderByName("distortionFont.shader.json");
                    if (!lab.font || !lab.font.texture) {
                        this.waitLabList.push(lab);
                        return;
                    }
                    lab.transform.canvas.assetmgr = GameMgr_8.GameMgr.assetMgr;
                    if (!this.hud_mat) {
                        //get mat
                        var mat = lab["uimat"];
                        mat.setShader(Ress_6.Ress.fontShader);
                        mat[this.tag_unColorCg] = true;
                        mat.setVector4("OFFSET", this.cacheDistortion);
                        this.hud_mat = mat;
                        this.mats.push(mat);
                    }
                    else {
                        lab["_uimat"] = this.hud_mat;
                    }
                };
                //取消设置 小球 头顶字符的材质
                MatMgr.unSetHudMat = function (lab) {
                    if (!lab)
                        return;
                    var idx = this.waitLabList.indexOf(lab);
                    if (idx != -1) {
                        this.waitLabList.splice(idx, 1);
                    }
                };
                //获取一个 指定 shader & 贴图的材质
                MatMgr.getAMat = function (tex, shader) {
                    if (tex === void 0) { tex = null; }
                    if (shader === void 0) { shader = null; }
                    var mat = new m4m.framework.material("disMat_".concat(this.count));
                    if (shader)
                        mat.setShader(shader);
                    else
                        mat.setShader(Ress_6.Ress.disShader);
                    if (tex) {
                        mat.setTexture("_MainTex", tex);
                    }
                    this.count++;
                    return mat;
                };
                //通过texName 获取tex
                MatMgr.getTextName = function (texName, assetbundleName) {
                    if (assetbundleName === void 0) { assetbundleName = null; }
                    if (texName == null || texName == "")
                        return;
                    var tex = Ress_6.Ress.assetmgr.getDefaultTexture(texName);
                    if (tex == null) {
                        tex = Ress_6.Ress.assetmgr.getAssetByName(texName, assetbundleName);
                    }
                    return tex;
                };
                //设置物体渐变的颜色
                MatMgr.setColor = function (r, g, b, isall) {
                    var _this = this;
                    if (isall === void 0) { isall = false; }
                    this.cacheColor.x = r;
                    this.cacheColor.y = g;
                    this.cacheColor.z = b;
                    if (isall) {
                        this.onlyGreyMats.forEach(function (mat) {
                            mat.setVector4("_MainColor", _this.cacheColor);
                        });
                    }
                };
                //雾效颜色
                MatMgr.setFogColor = function (r, g, b) {
                    if (!this.scene.fog)
                        return;
                    var c = this.scene.fog._Color;
                    c.x = r;
                    c.y = g;
                    c.z = b;
                };
                //设置物体扭曲的参数
                MatMgr.setDistortion = function (x, y) {
                    this.cacheDistortion.x = x;
                    this.cacheDistortion.y = y;
                    // this.mats.forEach(mat=>{
                    //     mat.setVector4("OFFSET",this.cacheDistortion);
                    // });
                };
                MatMgr.update = function (dt) {
                    if (this.stepOnec) {
                        this.gradualColor2(0.001);
                        this.initColor();
                        this.stepOnec = false;
                        this.isGaped = false;
                        return;
                    }
                    if (GameMgr_8.GameMgr.raceStage == 1)
                        this.gradualColor2(dt);
                    else if (GameMgr_8.GameMgr.raceStage == -1 && !playerMgr_1.playerMgr.reached) {
                        if (!this.toGreying) {
                            this.ontoGrey();
                            this.toGreying = true;
                        }
                        this.toGrey(dt);
                    }
                    this.gradualDistortion(dt);
                    //labMatChageCk
                    this.ckHudLabMatCg();
                };
                MatMgr.ontoGrey = function () {
                    //变灰设置
                    this.setDynamicColorAll(true);
                    this.setRampColor(true);
                };
                //扭曲渐变 更新
                MatMgr.gradualDistortion = function (delta) {
                    if (GameMgr_8.GameMgr.raceStage != 1)
                        return;
                    var roleRate = playerMgr_1.playerMgr.RoleSpeed * 0.02;
                    this.distortionP += delta * this.distorSpeed * roleRate;
                    if (this.distortionP >= 1) {
                        m4m.math.vec4Clone(this.targetDisC, this.lastDisC);
                        this.nextDis(this.targetDisC);
                        this.distortionP = 0;
                    }
                    m4m.math.vec4SLerp(this.lastDisC, this.targetDisC, this.distortionP, this.cacheDistortion);
                    this.setDistortion(this.cacheDistortion.x, this.cacheDistortion.y);
                };
                MatMgr.nextDis = function (disto) {
                    var num_x = Math.random() * this.disRange_x * (Math.random() > 0.5 ? -1 : 1);
                    var num_y = Math.random() * this.disRange_y;
                    disto.x = num_x;
                    disto.y = num_y;
                };
                //颜色渐变更新
                MatMgr.gradualColor2 = function (delta) {
                    var realNum = delta * this.colorSp;
                    this._colorP += realNum;
                    this._colorP = this._colorP % 1;
                    this._colorP_0 += realNum;
                    this._colorP_0 = this._colorP_0 % 1;
                    // let _s = 0.5;
                    this.SwingHSV(this._colorP, this._s, this._v);
                    this.setFogColor(this.cacheHSV.r, this.cacheHSV.g, this.cacheHSV.b);
                    if (!this.isGaped) {
                        if (this._colorP >= (this.firstP + this.colorPGap)) {
                            this.isGaped = true;
                        }
                        this._colorP_0 = this.firstP;
                    }
                    this.SwingHSV(this._colorP_0, this._s, this._v);
                    if (this._colorP_0 >= 0)
                        this.setColor(this.cacheHSV.r * this.crate, this.cacheHSV.g * this.crate, this.cacheHSV.b * this.crate);
                    else
                        this.setColor(1, 0.6, 0.6);
                };
                //渐变成灰色
                MatMgr.toGrey = function (delta) {
                    if (this.greyP <= 0) {
                        return;
                    }
                    this.greyP -= delta / this.cGreyTime;
                    this.greyP = Math.min(this.greyP, this._s);
                    this.greyP = this.greyP < 0 ? 0 : this.greyP;
                    //物体色
                    this.SwingHSV(this._colorP_0, this.greyP, this._v);
                    this.setColor(this.cacheHSV.r * this.crate, this.cacheHSV.g * this.crate, this.cacheHSV.b * this.crate, true);
                    //雾色
                    this.SwingHSV(this._colorP, this.greyP, this._v);
                    this.setFogColor(this.cacheHSV.r, this.cacheHSV.g, this.cacheHSV.b);
                };
                MatMgr.HSVtoRGB = function (h, s, v) {
                    var r, g, b, i, f, p, q, t;
                    if (arguments.length === 1) {
                        s = h.s, v = h.v, h = h.h;
                    }
                    i = Math.floor(h * 6);
                    f = h * 6 - i;
                    p = v * (1 - s);
                    q = v * (1 - f * s);
                    t = v * (1 - (1 - f) * s);
                    switch (i % 6) {
                        case 0:
                            r = v, g = t, b = p;
                            break;
                        case 1:
                            r = q, g = v, b = p;
                            break;
                        case 2:
                            r = p, g = v, b = t;
                            break;
                        case 3:
                            r = p, g = q, b = v;
                            break;
                        case 4:
                            r = t, g = p, b = v;
                            break;
                        case 5:
                            r = v, g = p, b = q;
                            break;
                    }
                    this.cacheHSV.r = r;
                    this.cacheHSV.g = g;
                    this.cacheHSV.b = b;
                };
                MatMgr.SwingHSV = function (p, s, v) {
                    var min = this.hRange.x;
                    var _p = p < 0.5 ? p * 2 : 1 - (p - 0.5) * 2;
                    var h = _p * this.hRlen + min;
                    //this.HSVtoRGB(m4m.math.numberLerp(this.hRange[0], this.hRange[1], p),s,v);
                    this.HSVtoRGB(h, s, v);
                };
                /** 设置H 范围 */
                MatMgr.setHrange = function (left, right) {
                    this.hRange.x = left;
                    this.hRange.y = right;
                    this.hRlen = Math.abs(this.hRange.y - this.hRange.x);
                    // this._colorP = this._colorP_0 = this.hRange.x;
                    this.stepOnec = true;
                };
                MatMgr.cacheColor = new m4m.math.vector4(1, 1, 1, 1);
                MatMgr.defaultColor = new m4m.math.vector4(1, 1, 1, 1);
                MatMgr.rampColor = new m4m.math.vector4(1, 1, 1, 1);
                MatMgr.cacheDistortion = new m4m.math.vector4(1, 1, 1, 1);
                MatMgr.colorMs = [];
                //材质
                MatMgr.tag_onlyGrey = "tag_onlyGrey"; //只变灰色
                MatMgr.tag_unColorCg = "tag_unColorCg"; //不变色
                MatMgr.mats = [];
                MatMgr.CgColorMats = []; //变色队列
                MatMgr.onlyGreyMats = []; //只变灰色队列
                MatMgr.Robot_mats = [];
                MatMgr.isGaped = false;
                MatMgr.lastDynamicColor = true;
                MatMgr.waitLabList = [];
                MatMgr.count = 0;
                MatMgr.stepOnec = true; //刷一次颜色
                MatMgr.toGreying = false;
                MatMgr.lastDisC = new m4m.math.vector4();
                MatMgr.targetDisC = new m4m.math.vector4();
                MatMgr.distortionP = 1;
                MatMgr.crate = 0.5;
                MatMgr.greyP = 1;
                MatMgr.cGreyTime = 1.2;
                /* accepts parameters
                * h  Object = {h:x, s:y, v:z}
                * OR
                * h, s, v
                */
                MatMgr.cacheHSV = { r: 0, g: 0, b: 0 };
                MatMgr.hRange = new m4m.math.vector2(0, 1);
                MatMgr.hRlen = 1;
                MatMgr.sFactor = 1;
                MatMgr.vFactor = 1;
                return MatMgr;
            }()));
        }
    };
});
System.register("Scripts/HMoveHandle", [], function (exports_18, context_18) {
    "use strict";
    var HMoveHandle;
    var __moduleName = context_18 && context_18.id;
    return {
        setters: [],
        execute: function () {
            exports_18("HMoveHandle", HMoveHandle = /** @class */ (function (_super) {
                __extends(HMoveHandle, _super);
                function HMoveHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.currtStyle = [];
                    _this.mode = 0; //0 , 1 
                    _this.stop = true;
                    _this.startX = 0;
                    _this.endX = 0;
                    _this.canMove = false;
                    _this.excess = 0;
                    _this.time = 0;
                    _this.pos = 0;
                    _this.lastpos = 0;
                    return _this;
                }
                HMoveHandle_1 = HMoveHandle;
                HMoveHandle.prototype.onPlay = function () {
                };
                /**
                 *  初始化 ， mode : 0 ,1   | isRevert : 是否倒转
                 */
                HMoveHandle.prototype.init = function (mode, isRevert) {
                    if (isRevert === void 0) { isRevert = false; }
                    if (!this.tran)
                        this.tran = this.gameObject.transform;
                    this.mode = mode;
                    if (this.mode == 0) {
                        if (isRevert)
                            this.currtStyle = [1, 4, 0, 4];
                        else
                            this.currtStyle = [3, 0, 4, 0];
                    }
                    else if (this.mode == 1) {
                        if (isRevert)
                            this.currtStyle = [4, 0];
                        else
                            this.currtStyle = [0, 4];
                    }
                    this.lastpos = 0;
                    this.pos = 1;
                    var temp = this.currtStyle[0];
                    this.doMove(this.getXbyNum(this.currtStyle[0]), this.getXbyNum(this.currtStyle[1]));
                };
                HMoveHandle.prototype.update = function (delta) {
                    if (this.stop)
                        return;
                    this.moveing(delta);
                };
                HMoveHandle.prototype.doMove = function (start, end) {
                    this.startX = start;
                    this.endX = end;
                    this.time = this.excess;
                    this.tran.localTranslate.x = start;
                    this.tran.localTranslate = this.tran.localTranslate;
                    this.excess = 0;
                    this.canMove = true;
                };
                HMoveHandle.prototype.moveing = function (delta) {
                    if (!this.canMove)
                        return;
                    var speed = HMoveHandle_1.moveSpeed;
                    this.time += delta * speed;
                    if (this.time >= 1) {
                        this.excess = this.time - 1;
                        this.time = 1;
                    }
                    var dis = this.endX - this.startX;
                    //this.tran.localTranslate.x =  this.startX * (1-p) + this.endX * p; //larep
                    var p = m4m.math.floatClamp(this.time, 0, 1);
                    this.tran.localTranslate.x = this.tween(p, dis) + this.startX;
                    this.tran.localTranslate = this.tran.localTranslate;
                    if (this.time >= 1) {
                        this.canMove = false;
                        this.moveEnd();
                    }
                };
                HMoveHandle.prototype.tween = function (p, dis) {
                    var mth, tp;
                    if (p <= 0.5) {
                        mth = m4m.framework.tweenMethod.QuadEaseIn;
                        tp = p * 2;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2;
                    }
                    else {
                        mth = m4m.framework.tweenMethod.QuadEaseOut;
                        tp = p * 2 - 1;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2 + dis / 2;
                    }
                };
                HMoveHandle.prototype.moveEnd = function () {
                    this.lastpos = this.pos;
                    this.pos++;
                    this.pos = this.pos % this.currtStyle.length;
                    var temp = this.currtStyle[this.pos];
                    this.doMove(this.getXbyNum(this.currtStyle[this.lastpos]), this.getXbyNum(this.currtStyle[this.pos]));
                };
                //0 - 4 Num ， left to right
                HMoveHandle.prototype.getXbyNum = function (num) {
                    num = num < 0 ? 0 : num > 4 ? 4 : num; //limit
                    return num * 2 - 4;
                };
                HMoveHandle.prototype.remove = function () {
                };
                var HMoveHandle_1;
                /** 移动块的 速度 */
                HMoveHandle.moveSpeed = 0;
                HMoveHandle = HMoveHandle_1 = __decorate([
                    m4m.reflect.nodeComponent
                ], HMoveHandle);
                return HMoveHandle;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("Tool/mixMesh", ["GameMgr"], function (exports_19, context_19) {
    "use strict";
    var GameMgr_9, GMesh, mixMesh;
    var __moduleName = context_19 && context_19.id;
    return {
        setters: [
            function (GameMgr_9_1) {
                GameMgr_9 = GameMgr_9_1;
            }
        ],
        execute: function () {
            GMesh = /** @class */ (function () {
                function GMesh(mat, vCount, vf, webgl) {
                    this.currentVerteCount = 0;
                    this.realVboLen = 0;
                    this.realEboLen = 0;
                    this.temptPos = new m4m.math.vector3();
                    this.mat = mat;
                    var total = m4m.render.meshData.calcByteSize(vf) / 4;
                    var gmesh = new m4m.framework.mesh();
                    var maxSize = 2048;
                    this.vbodata = new Float32Array(total * maxSize);
                    this.ebodata = new Uint16Array(maxSize);
                    this.vf = vf;
                    this.maxVerteCount = vCount;
                    this.maxVboLen = this.vbodata.length;
                    this.maxEboLen = this.ebodata.length;
                    gmesh.glMesh = new m4m.render.glMesh();
                    // gmesh.glMesh.eboType=webgl.UNSIGNED_INT;
                    gmesh.glMesh.initBuffer(webgl, vf, vCount, m4m.render.MeshTypeEnum.Dynamic);
                    // gmesh.glMesh.uploadVertexData(webgl, vboArr);
                    gmesh.glMesh.addIndex(webgl, this.ebodata.length);
                    // gmesh.glMesh.uploadIndexData(webgl, 0, eboArr);
                    gmesh.submesh = [];
                    {
                        var sm = new m4m.framework.subMeshInfo();
                        sm.matIndex = 0;
                        sm.useVertexIndex = 0;
                        sm.start = 0;
                        sm.size = this.ebodata.length;
                        sm.line = false;
                        gmesh.submesh.push(sm);
                    }
                    this.mesh = gmesh;
                    this.vertexByteSize = gmesh.glMesh.vertexByteSize;
                }
                GMesh.prototype.reset = function () {
                    this.currentVerteCount = 0;
                    this.realVboLen = 0;
                    this.realEboLen = 0;
                };
                GMesh.prototype.uploadMeshData = function (mat, mesh, webgl) {
                    var data = mesh.data;
                    this.checkMeshCapacity(data.pos.length, data.trisindex.length, webgl);
                    var vertexcount = data.pos.length;
                    var size = this.vertexByteSize / 4;
                    var vbodata = this.vbodata;
                    for (var i = 0; i < vertexcount; i++) {
                        var seek = 0;
                        m4m.math.matrixTransformVector3(data.pos[i], mat, this.temptPos);
                        vbodata[this.realVboLen + i * size] = this.temptPos.x;
                        vbodata[this.realVboLen + i * size + 1] = this.temptPos.y;
                        vbodata[this.realVboLen + i * size + 2] = this.temptPos.z;
                        seek += 3;
                        if (this.vf & m4m.render.VertexFormatMask.Normal) {
                            vbodata[this.realVboLen + i * size + seek] = data.normal[i].x;
                            vbodata[this.realVboLen + i * size + seek + 1] = data.normal[i].y;
                            vbodata[this.realVboLen + i * size + seek + 2] = data.normal[i].z;
                            seek += 3;
                        }
                        if (this.vf & m4m.render.VertexFormatMask.Tangent) {
                            vbodata[this.realVboLen + i * size + seek] = data.tangent[i].x;
                            vbodata[this.realVboLen + i * size + seek + 1] = data.tangent[i].y;
                            vbodata[this.realVboLen + i * size + seek + 2] = data.tangent[i].z;
                            seek += 3;
                        }
                        if (this.vf & m4m.render.VertexFormatMask.Color) {
                            if (data.color != null) {
                                vbodata[this.realVboLen + i * size + seek] = data.color[i].r;
                                vbodata[this.realVboLen + i * size + seek + 1] = data.color[i].g;
                                vbodata[this.realVboLen + i * size + seek + 2] = data.color[i].b;
                                vbodata[this.realVboLen + i * size + seek + 3] = data.color[i].a;
                            }
                            else {
                                vbodata[this.realVboLen + i * size + seek] = 1;
                                vbodata[this.realVboLen + i * size + seek + 1] = 1;
                                vbodata[this.realVboLen + i * size + seek + 2] = 1;
                                vbodata[this.realVboLen + i * size + seek + 3] = 1;
                            }
                            seek += 4;
                        }
                        if (this.vf & m4m.render.VertexFormatMask.UV0) {
                            vbodata[this.realVboLen + i * size + seek] = data.uv[i].x;
                            vbodata[this.realVboLen + i * size + seek + 1] = data.uv[i].y;
                            seek += 2;
                        }
                    }
                    var ebodata = this.ebodata;
                    var len = data.trisindex.length;
                    for (var i = 0; i < len; i++) {
                        ebodata[this.realEboLen + i] = data.trisindex[i] + this.currentVerteCount;
                    }
                    this.realVboLen += size * vertexcount;
                    this.realEboLen += len;
                    this.currentVerteCount += vertexcount;
                    this.mesh.submesh[0].size = this.realEboLen;
                };
                GMesh.prototype.mixToGLmesh = function (webgl) {
                    this.mesh.glMesh.uploadVertexData(webgl, this.vbodata);
                    this.mesh.glMesh.uploadIndexData(webgl, 0, this.ebodata);
                    this.mesh.glMesh.initVAO();
                };
                GMesh.prototype.checkMeshCapacity = function (vertexcount, eboLen, webgl) {
                    if (this.currentVerteCount + vertexcount > this.maxVerteCount) {
                        var needCount = this.currentVerteCount + vertexcount;
                        var needMaxVertexcount = this.maxVerteCount;
                        while (needCount > needMaxVertexcount) {
                            needMaxVertexcount *= 2;
                        }
                        if (needMaxVertexcount != this.maxVerteCount) {
                            this.maxVerteCount = needMaxVertexcount;
                            var newVbo = new Float32Array(this.maxVerteCount * this.vertexByteSize);
                            this.maxVboLen = newVbo.length;
                            newVbo.set(this.vbodata);
                            this.mesh.glMesh.resetVboSize(webgl, this.maxVerteCount);
                            this.vbodata = newVbo;
                        }
                    }
                    if (this.realEboLen + eboLen > this.maxEboLen) {
                        var needEbolen = this.realEboLen + eboLen;
                        var curMaxlen = this.maxEboLen;
                        while (needEbolen > curMaxlen) {
                            curMaxlen *= 2;
                        }
                        if (curMaxlen != this.maxEboLen) {
                            this.maxEboLen = curMaxlen;
                            var newebo = new Uint16Array(this.maxEboLen);
                            newebo.set(this.ebodata);
                            this.mesh.glMesh.resetEboSize(webgl, 0, this.maxEboLen);
                            this.ebodata = newebo;
                        }
                    }
                };
                return GMesh;
            }());
            exports_19("GMesh", GMesh);
            mixMesh = /** @class */ (function () {
                function mixMesh(gl) {
                    if (gl === void 0) { gl = GameMgr_9.GameMgr.app.webgl; }
                    this.matDic = {};
                    this.matinstance = {};
                    this.mixmeshDic = {};
                    this.gl = gl;
                }
                mixMesh.prototype.resetDic = function () {
                    for (var k in this.mixmeshDic) {
                        this.mixmeshDic[k].reset();
                    }
                };
                mixMesh.prototype.mixMesh = function (targets, vf) {
                    if (vf === void 0) { vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.UV0 | m4m.render.VertexFormatMask.Normal | m4m.render.VertexFormatMask.Color; }
                    var nobatchArr = [];
                    var batchArr = [];
                    var mixmeshid = [];
                    this.matDic = {};
                    for (var i = 0; i < targets.length; i++) {
                        var meshr = targets[i].gameObject.getComponent("meshRenderer");
                        if (meshr.materials.length > 1) {
                            nobatchArr.push(targets[i]);
                        }
                        else {
                            var id = meshr.materials[0].getGUID();
                            if (!this.matDic[id])
                                this.matDic[id] = [];
                            this.matDic[id].push(targets[i]);
                            this.matinstance[id] = meshr.materials[0];
                        }
                    }
                    for (var key in this.matDic) {
                        var transArr = this.matDic[key];
                        if (transArr.length >= 2) {
                            for (var i = 0; i < transArr.length; i++) {
                                var meshf = transArr[i].gameObject.getComponent("meshFilter");
                                if (this.mixmeshDic[key] == null) {
                                    this.mixmeshDic[key] = new GMesh(this.matinstance[key], 2048, vf, this.gl);
                                    // mixmeshid.push(Number(key));
                                }
                                if (mixmeshid.indexOf(Number(key)) < 0) {
                                    mixmeshid.push(Number(key));
                                }
                                this.mixmeshDic[key].uploadMeshData(transArr[i].getWorldMatrix(), meshf.mesh, this.gl);
                                batchArr.push(transArr[i]);
                            }
                        }
                        else {
                            if (transArr[0] != null) {
                                nobatchArr.push(transArr[0]);
                            }
                        }
                    }
                    for (var key in this.mixmeshDic) {
                        this.mixmeshDic[key].mixToGLmesh(this.gl);
                    }
                    return { batch: batchArr, nobatch: nobatchArr, mixMeshId: mixmeshid };
                };
                return mixMesh;
            }());
            exports_19("mixMesh", mixMesh);
        }
    };
});
System.register("obsCreateMgr", ["Ress", "MatMgr", "GameMgr", "Scripts/HMoveHandle", "Tool/mixMesh"], function (exports_20, context_20) {
    "use strict";
    var Ress_7, MatMgr_2, GameMgr_10, HMoveHandle_2, mixMesh_1, obsStyle, obsCreateMgr;
    var __moduleName = context_20 && context_20.id;
    return {
        setters: [
            function (Ress_7_1) {
                Ress_7 = Ress_7_1;
            },
            function (MatMgr_2_1) {
                MatMgr_2 = MatMgr_2_1;
            },
            function (GameMgr_10_1) {
                GameMgr_10 = GameMgr_10_1;
            },
            function (HMoveHandle_2_1) {
                HMoveHandle_2 = HMoveHandle_2_1;
            },
            function (mixMesh_1_1) {
                mixMesh_1 = mixMesh_1_1;
            }
        ],
        execute: function () {
            (function (obsStyle) {
                obsStyle[obsStyle["singe"] = 0] = "singe";
                obsStyle[obsStyle["ramp_0"] = 1] = "ramp_0";
                obsStyle[obsStyle["ramp_1"] = 2] = "ramp_1";
                obsStyle[obsStyle["ramp_2"] = 3] = "ramp_2";
                obsStyle[obsStyle["ramp_3"] = 4] = "ramp_3";
                obsStyle[obsStyle["ramp_4"] = 5] = "ramp_4";
                obsStyle[obsStyle["ramp_5"] = 6] = "ramp_5";
                obsStyle[obsStyle["gate_0"] = 7] = "gate_0";
                obsStyle[obsStyle["gate_1"] = 8] = "gate_1";
                obsStyle[obsStyle["gate_2"] = 9] = "gate_2";
                obsStyle[obsStyle["gateH_0"] = 10] = "gateH_0";
                obsStyle[obsStyle["gateH_1"] = 11] = "gateH_1";
                obsStyle[obsStyle["gateH_2"] = 12] = "gateH_2";
                obsStyle[obsStyle["L_0"] = 13] = "L_0";
                obsStyle[obsStyle["L_1"] = 14] = "L_1";
                obsStyle[obsStyle["L_2"] = 15] = "L_2";
                obsStyle[obsStyle["T_0"] = 16] = "T_0";
                obsStyle[obsStyle["T_1"] = 17] = "T_1";
                obsStyle[obsStyle["T_2"] = 18] = "T_2";
                obsStyle[obsStyle["T_3"] = 19] = "T_3";
                obsStyle[obsStyle["Y_0"] = 20] = "Y_0";
                obsStyle[obsStyle["Y_1"] = 21] = "Y_1";
                obsStyle[obsStyle["Y_2"] = 22] = "Y_2";
                obsStyle[obsStyle["Y_3"] = 23] = "Y_3";
                obsStyle[obsStyle["Y_4"] = 24] = "Y_4";
                obsStyle[obsStyle["maxLen"] = 25] = "maxLen"; //全长
            })(obsStyle || (obsStyle = {}));
            exports_20("obsStyle", obsStyle);
            exports_20("obsCreateMgr", obsCreateMgr = /** @class */ (function () {
                function obsCreateMgr() {
                }
                obsCreateMgr.init = function (ramp, cube2) {
                    if (ramp === void 0) { ramp = null; }
                    if (cube2 === void 0) { cube2 = null; }
                    if (!ramp && !cube2) {
                        var temp_0 = Ress_7.Ress.lego1.clone();
                        var mr = temp_0.gameObject.getComponentsInChildren("meshRenderer")[0];
                        var temp_1 = Ress_7.Ress.lego2.clone();
                        var mr_ = temp_1.gameObject.getComponentsInChildren("meshRenderer")[0];
                        mr.materials[0] = MatMgr_2.MatMgr.box_mat;
                        mr_.materials[0] = MatMgr_2.MatMgr.ramp_mat_0;
                        this.origin = [temp_0, temp_1];
                    }
                    else {
                        // let empty = new m4m.framework.transform();
                        this.origin = [cube2, ramp];
                    }
                    if (this.mixedMeshes == null) {
                        this.mixObsMesh();
                    }
                    //预创建 所有模板
                    var len = obsStyle.maxLen;
                    for (var i = 0; i < len; i++) {
                        var temp = this.genObs(i);
                        this.ModleMap[i] = temp;
                    }
                };
                obsCreateMgr.clone = function (pos, model) {
                    if (model === void 0) { model = 0; }
                    if (!this.origin)
                        return null;
                    var temp = this.origin[model].clone();
                    temp.localTranslate.x = this.posBlock[pos][0];
                    temp.localTranslate.y = this.posBlock[pos][1];
                    temp.localTranslate.z = 0;
                    //set collider
                    var cs = temp.gameObject.getComponentsInChildren("boxcollider");
                    var isLowGate = false;
                    cs.forEach(function (c) {
                        if (pos > 4)
                            c.gameObject.removeComponent(c); //顶部方块不需要 碰撞盒
                        else {
                            c.center = new m4m.math.vector3(0, 1, 0);
                            c.size = new m4m.math.vector3(1.8, 1.8, 1.8);
                        }
                    });
                    return temp;
                };
                obsCreateMgr.mixObsMesh = function () {
                    var _this = this;
                    var scene = GameMgr_10.GameMgr.app.getScene();
                    // this.meshCompressor.resetDic();
                    this.mixedMeshes = this.obsChunk.map(function (obs, style) {
                        var _a, _b;
                        var isLowGate = false;
                        _this.meshCompressor = new mixMesh_1.mixMesh();
                        var obsRoot = new m4m.framework.transform();
                        var obsCollect = new m4m.framework.transform();
                        // obsRoot.localTranslate.z = 20 +style * 5;
                        // obsRoot.localTranslate.y = style * 5;
                        var hasRamp = false;
                        for (var _i = 0, obs_1 = obs; _i < obs_1.length; _i++) { // 障碍物的每一个方块
                            var cube = obs_1[_i];
                            var temp = _this.clone(cube[0], cube[1]);
                            switch (style) {
                                case obsStyle.singe:
                                    obsRoot.gameObject.addComponent(HMoveHandle_2.HMoveHandle.name);
                                    break;
                                case obsStyle.ramp_0:
                                case obsStyle.ramp_1:
                                case obsStyle.ramp_2:
                                case obsStyle.ramp_3:
                                case obsStyle.ramp_4:
                                case obsStyle.ramp_5:
                                    if (temp.gameObject.tag == _this.Tag_ramp) {
                                        temp.gameObject.tag = GameMgr_10.GameMgr.RampTag;
                                        hasRamp = true;
                                    }
                                    break;
                            }
                            // if(cube[1] == 0)
                            //     temp.gameObject.visible = true;
                            // else
                            temp.gameObject.visible = false;
                            obsCollect.addChild(temp);
                            if (!isLowGate && (cube[0] == 7 || cube[0] == 12)) {
                                isLowGate = true;
                            }
                        }
                        obsRoot.addChild(obsCollect);
                        if (isLowGate)
                            obsRoot.gameObject.tag = _this.Tag_lowGate;
                        var meshRenders = obsCollect.gameObject.getComponentsInChildren("meshRenderer");
                        var picker = meshRenders.filter(function (mr) { return mr.gameObject.transform.name != "boxcollider"; }).map(function (mr) { return mr.gameObject.transform; });
                        if (picker.length > 1 && !hasRamp) {
                            var mixed = new m4m.framework.transform();
                            obsRoot.addChild(mixed);
                            // obsCollect.localTranslate.y = 5;
                            // obsCollect.gameObject.visible = false;
                            // mixed.localTranslate.z = 20 +style * 5;
                            // mixed.localTranslate.y = style * 5;
                            // mixed.localTranslate.z = 50;
                            scene.addChild(obsRoot); // 添加到场景里计算世界坐标
                            _this.meshCompressor.resetDic();
                            scene.update(0);
                            var nobatch = (_a = _this.meshCompressor.mixMesh(picker), _a.nobatch), batch = _a.batch, mixMeshId = _a.mixMeshId;
                            // // Built
                            for (var _c = 0, mixMeshId_1 = mixMeshId; _c < mixMeshId_1.length; _c++) {
                                var id = mixMeshId_1[_c];
                                var mesh = (_b = _this.meshCompressor.mixmeshDic[id], _b.mesh), mat = _b.mat;
                                var trans = new m4m.framework.transform();
                                var mf = trans.gameObject.addComponent("meshFilter");
                                mf.mesh = mesh;
                                var meshRender = trans.gameObject.addComponent("meshRenderer");
                                meshRender.materials = [mat];
                                mixed.addChild(trans);
                            }
                            scene.getRoot().removeChild(obsRoot);
                            for (var _d = 0, picker_1 = picker; _d < picker_1.length; _d++) {
                                var p = picker_1[_d];
                                if (p.name != 'arrow') {
                                    p.gameObject.removeComponentByTypeName("meshRenderer");
                                    p.gameObject.removeComponentByTypeName("meshFilter");
                                }
                                p.gameObject.visible = true;
                            }
                        }
                        else {
                            // fix
                            for (var _e = 0, _f = obsCollect.children; _e < _f.length; _e++) {
                                var single = _f[_e];
                                single.gameObject.visible = true;
                            }
                        }
                        return obsRoot;
                        // return mixed;
                        // return mixed.clone();
                    });
                };
                obsCreateMgr.genObs = function (style) {
                    // if(this.mixedMeshes == null) {
                    //     this.mixObsMesh();
                    // }
                    // let empty = new m4m.framework.transform();
                    // let isLowGate = false;
                    // for(let p of this.obsChunk[style]) {
                    //     let temp = this.clone(p[0], p[1]);
                    //     switch(style){
                    //         case obsStyle.singe:
                    //             empty.gameObject.addComponent(HMoveHandle.name);
                    //         break;
                    //         case obsStyle.ramp_0:
                    //         case obsStyle.ramp_1:
                    //         case obsStyle.ramp_2:
                    //         case obsStyle.ramp_3:
                    //         case obsStyle.ramp_4:
                    //         case obsStyle.ramp_5:
                    //             if(temp.gameObject.tag == this.Tag_ramp){
                    //                 temp.gameObject.tag = GameMgr.RampTag;
                    //             }
                    //         break;
                    //     }
                    //     empty.addChild(temp);
                    //     if(!isLowGate && ( p[0] == 7 || p[0] == 12 )){
                    //         isLowGate = true;
                    //     }
                    // }
                    // if(isLowGate)   empty.gameObject.tag = this.Tag_lowGate;
                    // return empty; 
                    return this.mixedMeshes[style];
                };
                obsCreateMgr.getObs = function (style) {
                    if (this.ModleMap[style]) {
                        return this.ModleMap[style].clone();
                    }
                };
                obsCreateMgr.Tag_ramp = "ramp";
                obsCreateMgr.Tag_lowGate = "Tag_lowGate";
                obsCreateMgr.posBlock = [
                    [0, 0], [2, 0], [4, 0], [6, 0], [8, 0],
                    [0, 2], [2, 2], [4, 2], [6, 2], [8, 2],
                    [0, 4], [2, 4], [4, 4], [6, 4], [8, 4],
                    [0, 6], [2, 6], [4, 6], [6, 6], [8, 6],
                ];
                // static safetyLUT = [
                //     [-4.5, 4.5],
                //     [-0.5, 0.5],    //1 中间的一个格子
                //     [-0.5, 2.5],    //2 两个格子
                //     [-2.5, 2.5],    //3 中间三个格子
                //     [1.5, 4.5],     //4 右边边缘两个格子
                //     // 反向翻转
                //     [-2.5, 0.5],    //5 靠左两个格子
                //     [-4.5, -1.5],   //6 左边边缘两个格子
                // ];
                obsCreateMgr.safetyLUT = [
                    [-4.5, 4.5],
                    [-0.4, 0.4],
                    [0, 2],
                    [-2, 2],
                    [2, 4.5],
                    // 反向翻转
                    [-2, 0],
                    [-4.5, -2], //6 左边边缘两个格子
                ];
                obsCreateMgr.obsSafety = [
                    0,
                    0,
                    3,
                    4,
                    2,
                    5,
                    6,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    1,
                    3,
                    3,
                    1,
                    3,
                    3,
                    3,
                    1,
                    3,
                    3,
                    3
                ];
                obsCreateMgr.obsChunk = [
                    [[0]],
                    // ramp
                    [[0, 1], [1, 1], [2, 0], [3, 1], [4, 1]],
                    [[0, 0], [1, 1], [2, 1], [3, 1], [4, 0]],
                    [[0, 0], [1, 0], [2, 0], [3, 1], [4, 1]],
                    [[0, 0], [1, 0], [2, 1], [3, 1], [4, 0]],
                    [[0, 0], [1, 1], [2, 1], [3, 0], [4, 0]],
                    [[0, 1], [1, 1], [2, 0], [3, 0], [4, 0]],
                    //tetris
                    [[0], [5], [6], [7], [8], [9], [4]],
                    [[0], [5], [10], [11], [12], [13], [14], [9], [4]],
                    [[0], [5], [10], [15], [16], [17], [18], [19], [14], [9], [4]],
                    //gate
                    [[0], [5], [10], [15], [16], [17], [18], [19]],
                    [[0], [5], [10], [11], [12], [13], [14]],
                    [[0], [5], [6], [7], [8], [9]],
                    //gate half
                    [[0], [5]],
                    [[0], [5], [1]],
                    [[0], [5], [6]],
                    //
                    [[0], [5], [10]],
                    [[0], [5], [10], [1]],
                    [[0], [5], [10], [6]],
                    [[0], [5], [10], [11]],
                    //
                    [[0], [5], [10], [15]],
                    [[0], [5], [10], [15], [1]],
                    [[0], [5], [10], [15], [6]],
                    [[0], [5], [10], [15], [11]],
                    [[0], [5], [10], [15], [16]],
                ];
                obsCreateMgr.ModleMap = {};
                obsCreateMgr.origin = null;
                obsCreateMgr.mixedMeshes = null;
                return obsCreateMgr;
            }()));
        }
    };
});
System.register("role/roleData", [], function (exports_21, context_21) {
    "use strict";
    var roleData;
    var __moduleName = context_21 && context_21.id;
    return {
        setters: [],
        execute: function () {
            exports_21("roleData", roleData = /** @class */ (function () {
                //角色 数据
                function roleData() {
                    this.name = "_name";
                    this.iconUrl = "";
                    this.ranking = 0;
                    this.scoreNum = 0;
                }
                Object.defineProperty(roleData, "list", {
                    get: function () { return this._list; },
                    enumerable: false,
                    configurable: true
                });
                roleData._list = [];
                return roleData;
            }()));
        }
    };
});
System.register("role/robotMgr", ["MatMgr", "role/role", "PoolMgr", "configMgr", "stageMgr", "role/roleData"], function (exports_22, context_22) {
    "use strict";
    var MatMgr_3, role_1, PoolMgr_1, configMgr_2, stageMgr_1, roleData_1, robotMgr;
    var __moduleName = context_22 && context_22.id;
    return {
        setters: [
            function (MatMgr_3_1) {
                MatMgr_3 = MatMgr_3_1;
            },
            function (role_1_1) {
                role_1 = role_1_1;
            },
            function (PoolMgr_1_1) {
                PoolMgr_1 = PoolMgr_1_1;
            },
            function (configMgr_2_1) {
                configMgr_2 = configMgr_2_1;
            },
            function (stageMgr_1_1) {
                stageMgr_1 = stageMgr_1_1;
            },
            function (roleData_1_1) {
                roleData_1 = roleData_1_1;
            }
        ],
        execute: function () {
            exports_22("robotMgr", robotMgr = /** @class */ (function () {
                function robotMgr() {
                }
                Object.defineProperty(robotMgr, "RoleSpeed", {
                    //玩家速度
                    get: function () {
                        if (!this._role)
                            return 0;
                        return this._role.root.raelSpeed;
                    },
                    enumerable: false,
                    configurable: true
                });
                robotMgr.getRole = function (id) { return this.robotPool[id]; };
                ;
                robotMgr.createInstance = function () {
                    var randomMatIndex = Math.floor(Math.random() * MatMgr_3.MatMgr.Robot_mats.length);
                    //let _role = new role(MatMgr.Robot_mats[randomMatIndex], roleData.list[this.robotPool.length]);
                    var _role = new role_1.role(MatMgr_3.MatMgr.Robot_mats[randomMatIndex], new roleData_1.roleData());
                    // _role.root.currSpeed = this.robotSpeed;
                    // let gm = _role.root.ball.gameObject;
                    // gm.transform.localTranslate.z = offset;
                    // gm.transform.markDirty();
                    // let mr = gm.getComponent("meshRenderer") as m4m.framework.meshRenderer;
                    // MatMgr.Role_mat.setVector4("_MainColor",new m4m.math.vector4(Math.random(),Math.random(),Math.random(),1));
                    // MatMgr.Role_mat.setVector4("_MainColor",new m4m.math.vector4(0.9,0.9,0.9,1));
                    // mr.materials[0] = MatMgr.Robot_mats[randomMatIndex];
                    //水平move
                    // Inputer.onHorizTouch = this.onHorizTouch.bind(this);
                    return _role;
                };
                /** 场景添加机器人 */
                robotMgr.addRobot = function (offset) {
                    if (offset === void 0) { offset = 0; }
                    var _role = PoolMgr_1.PoolMgr.new_robot();
                    this.robotPool.push(_role);
                    this.setRobotStage(offset);
                    _role.root.currSpeed = configMgr_2.configMgr.robotBSpeed;
                    // this.toRace();
                };
                /**删除机器人 */
                robotMgr.removeRobot = function (id) {
                    PoolMgr_1.PoolMgr.delete_robot(this.robotPool[id]);
                    // this.robotPool.splice(id, 1)
                    this.robotPool[id] = null;
                };
                //
                robotMgr.setRobotStage = function (offset, id) {
                    if (id === void 0) { id = robotMgr.robotPool.length - 1; }
                    //this.getRole(id).roleD = roleData.list[this.robotPool.length]; // FIX: roleData
                    var gm = this.robotPool[id].root.gameObject;
                    gm.transform.localTranslate.z = offset;
                    gm.transform.localTranslate.x = Math.random() * 10 - 5;
                    gm.transform.localTranslate = gm.transform.localTranslate;
                };
                //水平move
                // private static onHorizTouch(delta:number){
                //     if(!this._role) return;
                //     let ball = this._role.ball;
                //     ball.horizMove(delta * this.sacle);
                // }
                // static regStepBC(callBack:(step:number)=>any){
                //     if(!this._role)return;
                //     this._role.ball.onStepCg = callBack;
                // }
                //死亡
                robotMgr.toDie = function (id, isSpec) {
                    // if(isSpec == false && this.getRole(id).roleD != null)
                    if (isSpec === void 0) { isSpec = false; }
                    // else
                    // runingPage.Instance.tipMessage(`玩家${this.getRole(id).roleD.name}非正常死亡`);
                    // GameMgr.raceStage = -1;
                    //this.getRole(id).toStop();
                    this.getRole(id).die();
                    this.removeRobot(id);
                    this.remain--;
                    // uiMgr.showRootUI();
                    // console.error(" you die ,game over ");
                    // 如果当前机器人是最后一个
                    // if(this.remain == 1 && isSpec == false) {
                    //     stageMgr.gameOverConsole();
                    // }        
                };
                //跳起
                robotMgr.toJump = function (id) {
                    this.getRole(id).root.jump();
                };
                //加速
                robotMgr.toBoost = function (id) {
                    this.getRole(id).root.boost();
                };
                robotMgr.toRace = function (id) {
                    if (id === void 0) { id = robotMgr.robotPool.length - 1; }
                    // this.getRole(id).root.currSpeed = 50;
                    var role = this.getRole(id);
                    role.root.stop = false;
                    role.taril.play();
                };
                // static placeRobots() {
                //             // 添加 机器人
                //     // debugger;
                //     // this.addRobot(-15);
                //     // this.addRobot(-10);
                //     // this.addRobot(-5);
                //     for(let i = 0; i < 30; i++) {
                //         this.addRobot(i*50);            
                //     }
                // }
                robotMgr.deleteAll = function () {
                    var _this = this;
                    this.allAct(function (id) {
                        _this.toDie(id, true);
                    });
                    this.robotPool = [];
                };
                /** 全员停止 */
                robotMgr.stopAll = function () {
                    var _this = this;
                    this.allAct(function (id) {
                        _this.getRole(id).root.stop = true;
                    });
                };
                /** 取消全员停止 */
                robotMgr.unStopAll = function () {
                    var _this = this;
                    this.allAct(function (id) {
                        _this.getRole(id).root.stop = false;
                    });
                };
                /** 取消全员减速*/
                robotMgr.toSlowdownAll = function () {
                    var _this = this;
                    this.allAct(function (id) {
                        _this.getRole(id).toSlowdown();
                    });
                };
                /** 取消全员恢复到正常速度 */
                robotMgr.SlowReNormalAll = function () {
                    var _this = this;
                    this.allAct(function (id) {
                        _this.getRole(id).slowReNormal();
                    });
                };
                robotMgr.allAct = function (eachFun) {
                    var amount = this.robotPool.length;
                    for (var id = 0; id < amount; id++) {
                        if (this.getRole(id) != null) {
                            eachFun(id);
                        }
                    }
                };
                // static destroyRate: number;
                /** 场景中初始安放机器人 */
                robotMgr.placeRobots = function () {
                    this.deleteAll(); // 删除所有存活的机器人
                    // 通过当前关卡配置计算机器人生成位置
                    this.AITotalAmount = stageMgr_1.stageMgr.currentLevel.amount - 1;
                    var offset = 1;
                    var totalLength = stageMgr_1.stageMgr.currentLevel.length - offset;
                    var robotEnd = totalLength - totalLength / configMgr_2.configMgr.roleBspeed * configMgr_2.configMgr.robotBSpeed;
                    this.AIdistance = robotEnd / this.AITotalAmount;
                    // this.AIdistance = configMgr.RobotsGenDistance/2 *3;
                    this.visibleRange = 19 * 5;
                    //this.AITotalAmount = 100 - 1;
                    this.playerOffset = 0;
                    // this.nextCP = this.config_CheckpointDistance = configMgr.robotsCPDistance;
                    // this.destroyRate = configMgr.robotsDieRate;
                    this.remain = this.AITotalAmount + 1;
                    // let alreadyExistAmount = this.visibleRange / this.AIdistance;
                    var minGap = 5 * configMgr_2.configMgr.obsBaseGap;
                    // this.AIdistance = this.AIdistance < minGap ? minGap : this.AIdistance;
                    this.AIdistance = minGap;
                    for (var i = 0; i < this.AITotalAmount; i++) { // 创建所有robot
                        this.addRobot((i + 1) * this.AIdistance);
                    }
                    this.stopAll();
                };
                //动态添加到场景
                // static dynamicAddRobot(dist, currentStep) {
                //     this.playerOffset += dist;
                //     let passedAI = Math.floor(this.playerOffset / this.AIdistance);        
                //     // if(dist != 0) {
                //     //     let existAI = this.robotPool.length;
                //     //     if(passedAI > existAI && existAI < this.AITotalAmount) {
                //     //         this.addRobot(currentStep * 5 + this.visibleRange);
                //     //         // this.addRobot(passedAI * this.AIdistance);
                //     //         this.toRace();
                //     //         // console.error("=== Add robot " + passedAI);
                //     //     }
                //     // }
                //     // Kill Robot
                //     for(let i = 0; i < passedAI; i++) {
                //         let agent = this.robotPool[i];
                //         if(agent && agent.root.isDropout) {
                //             agent.root.timeToLive -= 0.01;
                //             if(agent.root.timeToLive < 0) {
                //                 this.toDie(i);
                //                 // console.error('Drop out id: ' + i);
                //             }
                //         }
                //     }
                //     let currentDistance = playerMgr.getRole().root.gameObject.transform.localTranslate.z;
                //     // let currentDistance = currentStep * 5;
                //     if((currentDistance - this.nextCP) > 0) {
                //         this.nextCP += this.config_CheckpointDistance;            
                //         if(Math.random() < this.destroyRate) {
                //             if(this.robotPool.length < this.AITotalAmount) {
                //                 let id = robotMgr.robotPool.length;
                //                 this.addRobot(0);
                //                 this.toRace(id);
                //                 this.toDie(id);
                //             } else {
                //                 for(let i = 0, l = this.robotPool.length; i < l; i++) {
                //                     let cur = this.getRole(i) as role;
                //                     if(cur !== null && (cur.root.gameObject.transform.localTranslate.z - currentDistance) > this.visibleRange) {
                //                         this.toDie(i);
                //                         return;
                //                     }
                //                 }
                //             }
                //         } 
                //     }
                // }
                /** 开始游戏 */
                robotMgr.startGame = function () {
                    var amount = this.robotPool.length;
                    var count = 0;
                    for (var id = 0; id < amount; id++) {
                        if (this.getRole(id) != null) {
                            count++;
                            this.toRace(id);
                        }
                    }
                };
                robotMgr.robotPool = [];
                // static initState(){
                //     this._role.ball.initstate();
                // }
                robotMgr.sacle = 0.03;
                return robotMgr;
            }()));
        }
    };
});
System.register("PoolMgr", ["Ress", "MatMgr", "GameMgr", "obsCreateMgr", "role/robotMgr", "WayMgr", "Tool/mixMesh"], function (exports_23, context_23) {
    "use strict";
    var Ress_8, MatMgr_4, GameMgr_11, obsCreateMgr_1, robotMgr_1, WayMgr_1, mixMesh_2, v3Zero, v3One, oneRota, PoolMgr;
    var __moduleName = context_23 && context_23.id;
    return {
        setters: [
            function (Ress_8_1) {
                Ress_8 = Ress_8_1;
            },
            function (MatMgr_4_1) {
                MatMgr_4 = MatMgr_4_1;
            },
            function (GameMgr_11_1) {
                GameMgr_11 = GameMgr_11_1;
            },
            function (obsCreateMgr_1_1) {
                obsCreateMgr_1 = obsCreateMgr_1_1;
            },
            function (robotMgr_1_1) {
                robotMgr_1 = robotMgr_1_1;
            },
            function (WayMgr_1_1) {
                WayMgr_1 = WayMgr_1_1;
            },
            function (mixMesh_2_1) {
                mixMesh_2 = mixMesh_2_1;
            }
        ],
        execute: function () {
            v3Zero = new m4m.math.vector3();
            v3One = new m4m.math.vector3(1, 1, 1);
            oneRota = new m4m.math.quaternion(0, 0, 0, 1);
            exports_23("PoolMgr", PoolMgr = /** @class */ (function () {
                function PoolMgr() {
                }
                PoolMgr.init = function () {
                    //各对象的初始化
                    for (var i = 0; i < obsCreateMgr_1.obsStyle.maxLen; i++)
                        this.obsMap[i] = [];
                    this.initCombineRoad();
                };
                PoolMgr.initCombineRoad = function () {
                    var _a, _b;
                    var bunchCollect = new m4m.framework.transform();
                    var isGray = true;
                    for (var i = 0; i < GameMgr_11.GameMgr.WayBunchLength; i++) {
                        var temp = this.createSingleRoad(isGray = !isGray);
                        temp.localTranslate.y = 0;
                        temp.localTranslate.x = 0;
                        temp.localTranslate.z = i * 5;
                        bunchCollect.addChild(temp);
                    }
                    // Combine
                    var meshCompressor = new mixMesh_2.mixMesh();
                    var meshRenders = bunchCollect.gameObject.getComponentsInChildren("meshRenderer");
                    var picker = meshRenders.map(function (mr) { return mr.gameObject.transform; });
                    if (picker.length > 1) {
                        meshCompressor.resetDic();
                        GameMgr_11.GameMgr.app.getScene().update(0);
                        var combinedRoot = new m4m.framework.transform();
                        var nobatch = (_a = meshCompressor.mixMesh(picker), _a.nobatch), batch = _a.batch, mixMeshId = _a.mixMeshId;
                        for (var _i = 0, mixMeshId_2 = mixMeshId; _i < mixMeshId_2.length; _i++) {
                            var id = mixMeshId_2[_i];
                            var mesh = (_b = meshCompressor.mixmeshDic[id], _b.mesh), mat = _b.mat;
                            var trans = new m4m.framework.transform();
                            var mf = trans.gameObject.addComponent("meshFilter");
                            mf.mesh = mesh;
                            var meshRender = trans.gameObject.addComponent("meshRenderer");
                            meshRender.materials = [mat];
                            combinedRoot.addChild(trans);
                        }
                        return this.combinedRoadTemp = combinedRoot;
                    }
                    return this.combinedRoadTemp = bunchCollect;
                };
                PoolMgr.createSingleRoad = function (isGray) {
                    var temp = Ress_8.Ress.floor.clone();
                    var mat;
                    if (isGray) { // 切换黑白
                        temp[this.isgreyTag] = true;
                        mat = MatMgr_4.MatMgr.Floor_mat_1;
                    }
                    else
                        mat = MatMgr_4.MatMgr.Floor_mat_0;
                    var mr = temp.gameObject.getComponent("meshRenderer");
                    mr.materials[0] = mat;
                    return temp;
                };
                PoolMgr.new_floor = function () {
                    // let arr = isgrey? this.floorMap[1] : this.floorMap[0];
                    var arr = this.floorMap[0];
                    // if(this.wayAdditionCounter++ == GameMgr.WayBunchLength) {
                    // this.wayAdditionCounter = 1;
                    if (arr.length < 1) {
                        return this.combinedRoadTemp.clone();
                    }
                    else {
                        var temp = arr.pop();
                        temp.gameObject.visible = true;
                        return temp;
                    }
                    // } else {
                    //     return null;
                    // }
                };
                PoolMgr.delete_floo = function (floor) {
                    if (!floor)
                        return;
                    this.floorMap[0].push(floor);
                    // let isgrey = floor[this.isgreyTag]? true: false;
                    //  if(isgrey)
                    //     this.floorMap[1].push(floor);
                    // else
                    //     this.floorMap[0].push(floor);
                };
                PoolMgr.new_obs = function (style) {
                    var arr = this.obsMap[style];
                    if (arr.length < 1) {
                        var temp = obsCreateMgr_1.obsCreateMgr.getObs(style).clone();
                        temp[this.styleTag] = style;
                        m4m.math.quatFromEulerAngles(0, 0, 0, temp.localRotate);
                        return temp;
                    }
                    else {
                        var temp = arr.pop();
                        temp.gameObject.visible = true;
                        return temp;
                    }
                };
                PoolMgr.delete_obs = function (obs) {
                    if (!obs)
                        return;
                    var style = obs[this.styleTag];
                    m4m.math.vec3Clone(m4m.math.pool.vector3_zero, obs.localTranslate);
                    var r = obs.localRotate;
                    r.x = r.y = r.z = 0;
                    r.w = 1;
                    this.obsMap[style].push(obs);
                };
                PoolMgr.new_Boost = function () {
                    var arr = this.boosts;
                    if (arr.length < 1) {
                        if (!this.cacheBoost) {
                            var temp = Ress_8.Ress.boost.clone();
                            temp.gameObject.tag = GameMgr_11.GameMgr.BoostTag;
                            var mr = temp.gameObject.getComponent("meshRenderer");
                            mr.materials[0] = MatMgr_4.MatMgr.boost_mat_0;
                            var bc = temp.gameObject.getComponent("boxcollider");
                            bc.size = new m4m.math.vector3(1, 1, 2);
                            bc.center = new m4m.math.vector3(0, 1, 0);
                            // bc.colliderVisible = true;
                            this.cacheBoost = temp;
                        }
                        return this.cacheBoost.clone();
                    }
                    else {
                        var temp = this.boosts.pop();
                        temp.gameObject.visible = true;
                        return temp;
                    }
                };
                PoolMgr.delete_Boost = function (boost) {
                    if (!boost)
                        return;
                    this.boosts.push(boost);
                };
                PoolMgr.new_building = function () {
                    var arr = this.buildings;
                    if (arr.length < 1) {
                        if (!this.cacheBuilding) {
                            var temp = Ress_8.Ress.decoraion1.clone();
                            var mat = MatMgr_4.MatMgr.Comm_mat_0;
                            var mr = temp.gameObject.getComponent("meshRenderer");
                            mr.materials[0] = mat;
                            this.cacheBuilding = temp;
                        }
                        return this.cacheBuilding.clone();
                    }
                    else {
                        var temp = arr.pop();
                        temp.gameObject.visible = true;
                        return temp;
                    }
                };
                PoolMgr.delete_building = function (building) {
                    if (!building)
                        return;
                    building.gameObject.visible = false;
                    this.buildings.push(building);
                };
                PoolMgr.new_buildingSlice = function () {
                    var arr = this.buildingslices;
                    if (arr.length < 1) {
                        return WayMgr_1.WayMgr.buildingslice.clone();
                    }
                    else {
                        var temp = arr.pop();
                        temp.gameObject.visible = true;
                        return temp;
                    }
                };
                PoolMgr.delete_buildingslice = function (building) {
                    if (!building)
                        return;
                    building.gameObject.visible = false;
                    this.buildingslices.push(building);
                };
                PoolMgr.new_robot = function () {
                    var arr = this.robots;
                    if (arr.length < 1) {
                        var instance = robotMgr_1.robotMgr.createInstance();
                        return instance;
                    }
                    else {
                        var temp = arr.pop();
                        temp.root.gameObject.visible = true;
                        temp.ball.gameObject.visible = true;
                        temp.ball.localTranslate.y = 0;
                        temp.ball.localTranslate = temp.ball.localTranslate;
                        temp.initState();
                        return temp;
                    }
                };
                PoolMgr.delete_robot = function (soul) {
                    if (!soul)
                        return;
                    soul.ball.gameObject.visible = false;
                    this.robots.push(soul);
                };
                PoolMgr.new_Coin = function () {
                    var arr = this.coins;
                    if (arr.length < 1) {
                        if (!this.cacheCoins) {
                            var ptran = Ress_8.Ress.jinbi.clone();
                            ptran.gameObject.tag = GameMgr_11.GameMgr.CoinTag;
                            var temp = ptran.children[0];
                            var mr = temp.gameObject.getComponent("meshRenderer");
                            mr.materials[0] = MatMgr_4.MatMgr.coin_mat;
                            // let bc = temp.gameObject.getComponent( "boxcollider") as m4m.framework.boxcollider;
                            // bc.size = new m4m.math.vector3(1,1,1);
                            // bc.center = new m4m.math.vector3(0,1,0);
                            //bc.colliderVisible = true;
                            this.cacheCoins = ptran;
                        }
                        return this.cacheCoins.clone();
                    }
                    else {
                        var temp = this.coins.pop();
                        temp.gameObject.visible = true;
                        temp.children[0].gameObject.visible = true;
                        return temp;
                    }
                };
                PoolMgr.delete_Coin = function (diamond) {
                    if (!diamond)
                        return;
                    this.coins.push(diamond);
                };
                PoolMgr.new_transform = function () {
                    var arr = this.transforms;
                    if (arr.length < 1) {
                        return new m4m.framework.transform();
                    }
                    else {
                        var temp = arr.pop();
                        temp.gameObject.visible = true;
                        return temp;
                    }
                };
                PoolMgr.delete_transform = function (tras) {
                    if (!tras)
                        return;
                    m4m.math.vec3Clone(v3Zero, tras.localTranslate);
                    m4m.math.vec3Clone(v3One, tras.localScale);
                    m4m.math.quatClone(oneRota, tras.localRotate);
                    this.transforms.push(tras);
                };
                PoolMgr.styleTag = "style";
                //地面
                // static wayAdditionCounter = GameMgr.WayBunchLength;
                PoolMgr.isgreyTag = "isgreyTag";
                PoolMgr.floorMap = { 0: [], 1: [] };
                //障碍
                PoolMgr.obsMap = {};
                //加速带
                PoolMgr.boosts = [];
                //建筑
                PoolMgr.buildings = [];
                //建筑
                PoolMgr.buildingslices = [];
                //机器人
                PoolMgr.robots = [];
                //金币
                PoolMgr.coins = [];
                //空 transform 
                PoolMgr.transforms = [];
                return PoolMgr;
            }()));
        }
    };
});
System.register("RoadGroupMgr", ["obsCreateMgr", "PoolMgr", "Scripts/HMoveHandle", "configMgr"], function (exports_24, context_24) {
    "use strict";
    var obsCreateMgr_2, PoolMgr_2, HMoveHandle_3, configMgr_3, RoadType, RoadGroupMgr;
    var __moduleName = context_24 && context_24.id;
    return {
        setters: [
            function (obsCreateMgr_2_1) {
                obsCreateMgr_2 = obsCreateMgr_2_1;
            },
            function (PoolMgr_2_1) {
                PoolMgr_2 = PoolMgr_2_1;
            },
            function (HMoveHandle_3_1) {
                HMoveHandle_3 = HMoveHandle_3_1;
            },
            function (configMgr_3_1) {
                configMgr_3 = configMgr_3_1;
            }
        ],
        execute: function () {
            (function (RoadType) {
                /** 空 */
                RoadType[RoadType["T_Null"] = 0] = "T_Null";
                /** 坡道 */
                RoadType[RoadType["T_Ramp"] = 1] = "T_Ramp";
                /** 单方块组合类型 （不会动） */
                RoadType[RoadType["T_singe"] = 2] = "T_singe";
                /** 单方块组合类型 (会动) */
                RoadType[RoadType["T_singe_move"] = 3] = "T_singe_move";
                /** 拱门组合类型 */
                RoadType[RoadType["T_gate"] = 4] = "T_gate";
                /** 道路两边组合类型 */
                RoadType[RoadType["T_Border"] = 5] = "T_Border";
                /** 随机单方块 （是否运动、摆放位置 随机）*/
                RoadType[RoadType["T_cellCube"] = 6] = "T_cellCube";
                RoadType[RoadType["maxLen"] = 7] = "maxLen";
            })(RoadType || (RoadType = {}));
            exports_24("RoadGroupMgr", RoadGroupMgr = /** @class */ (function () {
                function RoadGroupMgr() {
                }
                RoadGroupMgr.init = function () {
                    this.baseGenRate[RoadType.T_Null] = 1;
                    this.baseGenRate[RoadType.T_Ramp] = 0;
                    this.baseGenRate[RoadType.T_singe] = 0;
                    this.baseGenRate[RoadType.T_singe_move] = 0;
                    this.baseGenRate[RoadType.T_gate] = 0;
                    this.baseGenRate[RoadType.T_Border] = 0;
                    this.baseGenRate[RoadType.T_cellCube] = 0;
                    for (var i = 0; i < RoadType.maxLen; i++) {
                        this.groupsMap[i] = [];
                        this.cupRMap[i] = 0;
                    }
                    this.fullGroups();
                    this.initState();
                };
                RoadGroupMgr.initState = function () {
                    this.totalKcount = 0;
                    this.currStyle = this.lastStyle = -1;
                    this.cacheList.length = 0;
                    this.cacheList = this.cacheList.concat(this.groupsMap[RoadType.T_Null][0]);
                };
                RoadGroupMgr.fullGroups = function () {
                    //funs
                    for (var i = 0; i < obsCreateMgr_2.obsStyle.maxLen; i++) {
                        this.funlist[i] = this.fun_comm.bind(this);
                    }
                    //funRgs
                    this.funsFull();
                    //障碍 段落 模式配置设置
                    //[obsStyle,参数...]
                    var os = obsCreateMgr_2.obsStyle;
                    var k = -1; //空数据
                    var ramp = 1; //斜坡 
                    //null
                    this.groupsMap[RoadType.T_Null].push([[k], [k], [k], [k], [k], [k]]);
                    //坡道
                    this.groupsMap[RoadType.T_Ramp].push([[k], [k], [ramp], [k], [k]]);
                    //活动块
                    this.groupsMap[RoadType.T_singe_move].push([[k], [os.singe, 1, 0], [k], [os.singe, 1, 1], [k], [os.singe, 1, 0], [k]]);
                    this.groupsMap[RoadType.T_singe_move].push([[k], [os.singe, 1, 0], [k], [os.singe, 0, 0], [k], [os.singe, 1, 1], [k], [os.singe, 3], [k]]);
                    this.groupsMap[RoadType.T_singe_move].push([[k], [os.singe, 1, 0], [k], [os.singe, 0, 0], [k], [os.singe, 2], [k], [os.singe, 1, 1], [k]]);
                    this.groupsMap[RoadType.T_singe_move].push([[k], [os.singe, 0, 1], [k], [os.singe, 3], [k], [os.singe, 0], [k]]);
                    this.groupsMap[RoadType.T_singe_move].push([[k], [os.singe, 1], [k], [os.singe, 0, 1], [k], [os.gateH_0, 3], [k]]);
                    this.groupsMap[RoadType.T_singe_move].push([[k], [os.singe, 2], [k], [os.singe, 0, 0], [k], [os.singe, 0], [k]]);
                    //不动块
                    this.groupsMap[RoadType.T_singe].push([[k], [os.singe, 2], [k], [os.singe, 3], [k], [os.singe, 0], [k]]);
                    this.groupsMap[RoadType.T_singe].push([[k], [os.singe, 3], [k], [os.singe, 1], [k], [os.singe, 5], [k]]);
                    this.groupsMap[RoadType.T_singe].push([[k], [os.singe, 5], [k], [os.singe, 2], [k]]);
                    this.groupsMap[RoadType.T_singe].push([[k], [os.singe, 2], [k], [os.singe, 0], [k]]);
                    //边缘块组
                    this.groupsMap[RoadType.T_Border].push([[k], [os.L_0, 0], [k], [os.T_2, 1], [k], [os.L_1, 0], [k], [k]]);
                    this.groupsMap[RoadType.T_Border].push([[k], [os.L_0, 1], [k], [os.L_2, 0], [k], [os.T_1, 1], [k], [k]]);
                    this.groupsMap[RoadType.T_Border].push([[k], [os.Y_0, 0], [k], [os.Y_2, 1], [k], [os.L_1, 0], [k], [os.Y_4, 1], [k]]);
                    this.groupsMap[RoadType.T_Border].push([[k], [os.T_0, 1], [k], [os.L_0, 0], [k], [os.Y_1, 1], [k], [os.T_3, 1], [k]]);
                    this.groupsMap[RoadType.T_Border].push([[k], [os.T_1, 0], [k], [os.T_0, 1], [k], [os.Y_1, 0], [k], [os.T_2, 1], [k]]);
                    this.groupsMap[RoadType.T_Border].push([[k], [os.Y_0, 1], [k], [os.Y_1, 0], [k], [os.T_0, 1], [k], [os.T_3, 0], [k]]);
                    //门 (1)
                    this.groupsMap[RoadType.T_gate].push([[k], [os.gate_0], [k], [os.gate_1], [k], [os.gate_2], [k], [os.L_2, 0], [k]]);
                    this.groupsMap[RoadType.T_gate].push([[k], [os.gate_2], [k], [os.gateH_2, 1], [k], [os.gateH_1, 1], [k], [os.gateH_2, 0], [k]]);
                    this.groupsMap[RoadType.T_gate].push([[k], [os.gateH_1, 0], [k], [os.gate_1], [k], [os.gateH_2, 0], [k], [os.gate_2], [k]]);
                    this.groupsMap[RoadType.T_gate].push([[k], [os.Y_1, 0], [k], [os.gateH_0], [k], [os.gateH_2, 1], [k], [os.Y_4, 0], [k]]);
                    this.groupsMap[RoadType.T_gate].push([[k], [os.Y_0, 0], [k], [os.gate_0], [k], [os.gateH_2, 1], [k], [os.Y_4, 0], [k]]);
                };
                RoadGroupMgr.funsFull = function () {
                    this.funlist[obsCreateMgr_2.obsStyle.singe] = this.fun_singe.bind(this); //
                    this.funlist[obsCreateMgr_2.obsStyle.ramp_0] = this.fun_ramp.bind(this); //
                };
                //斜坡 随机
                RoadGroupMgr.fun_ramp = function (data) {
                    var style = data[0];
                    if (style == -1)
                        return null;
                    var pos = 0; //默认靠左
                    style = Math.floor(Math.random() * 6);
                    style = style >= 6 ? 5 : style;
                    style = style + obsCreateMgr_2.obsStyle.ramp_0;
                    //let temp = obsCreateMgr.getObs(style).clone();
                    var temp = PoolMgr_2.PoolMgr.new_obs(style);
                    temp.localTranslate.x = this.getXbyNum(pos);
                    return temp;
                };
                //通用
                RoadGroupMgr.fun_comm = function (data) {
                    var style = data[0];
                    var pos = 0; //默认靠左
                    //let temp = obsCreateMgr.getObs(style).clone();
                    var temp = PoolMgr_2.PoolMgr.new_obs(style);
                    if (data[1]) {
                        pos = 4; //右边
                        m4m.math.quatFromEulerAngles(0, 180, 0, temp.localRotate);
                    }
                    temp.localTranslate.x = this.getXbyNum(pos);
                    return temp;
                };
                //单个方块 （带移动）
                RoadGroupMgr.fun_singe = function (data) {
                    var style = data[0];
                    //let temp = obsCreateMgr.getObs(style).clone();
                    var temp = PoolMgr_2.PoolMgr.new_obs(style);
                    var hm = temp.gameObject.getComponent(HMoveHandle_3.HMoveHandle.name);
                    if (data.length == 2) {
                        var pos = data[1];
                        temp.localTranslate.x = this.getXbyNum(pos);
                        hm.stop = true;
                    }
                    else {
                        var mode = data[1];
                        var isrevert = data[2] ? true : false;
                        hm.init(mode, isrevert);
                        hm.stop = false;
                    }
                    return temp;
                };
                //随机 创建一个钻石(金币)
                RoadGroupMgr.tryRGenOneCoin = function (rate) {
                    this.gDCount++;
                    // if(this.lastStyle == RoadType.T_Ramp ) return;
                    if (this.lastStyle == RoadType.T_Ramp && rate < 0.6)
                        return; // 避免被坡道挡住 捡不到
                    if (rate < 0.2)
                        return; //避免太靠近墙，易撞死
                    if (this.gDCount < configMgr_3.configMgr.DiamonGenSpeed / configMgr_3.configMgr.obsBaseGap)
                        return;
                    this.gDCount = 0;
                    var pos = Math.floor(Math.random() * 5);
                    pos = pos >= 5 ? 4 : pos;
                    var temp = PoolMgr_2.PoolMgr.new_Coin();
                    temp.localTranslate.x = this.getXbyNum(pos);
                    return temp;
                };
                //private static readonly genLen = configMgr.obsBaseGap;
                //生成加速带
                RoadGroupMgr.rGenBoost = function () {
                    this.gbCount++;
                    if (this.gbCount < configMgr_3.configMgr.BoostGenSpeed / configMgr_3.configMgr.obsBaseGap)
                        return;
                    this.gbCount = 0;
                    var pos = Math.floor(Math.random() * 5);
                    pos = pos >= 5 ? 4 : pos;
                    var temp = PoolMgr_2.PoolMgr.new_Boost();
                    temp.localTranslate.x = this.getXbyNum(pos);
                    console.error(" \u751F\u6210\u52A0\u901F\u5E26");
                    return temp;
                };
                /** 获取一个障碍物体 */
                RoadGroupMgr.getOne = function () {
                    this.ckAdd();
                    if (this.isK) {
                        this.totalKcount++;
                        this.Kcount++;
                        if (this.totalKcount < 5) { //前xx 段不创建 金币 & 加速带
                            return null;
                        }
                        var tNum = configMgr_3.configMgr.obsBaseGap - 1;
                        if (this.Kcount >= tNum) {
                            this.Kcount = 0;
                            this.isK = false;
                        }
                        if (this.Kcount == Math.floor(configMgr_3.configMgr.obsBaseGap / 2)) {
                            return this.rGenBoost(); //尝试 创建一个加速带
                        }
                        //避免 放置金币太靠近障碍 
                        return this.tryRGenOneCoin(this.Kcount / tNum); //尝试 创建一个钻石(金币)
                    }
                    var data = this.cacheList.shift();
                    var style = data[0];
                    this.lastStyle = this.currStyle;
                    this.currStyle = style;
                    if (style == -1) {
                        this.isK = true;
                        return null;
                    }
                    var fun = this.funlist[style];
                    if (fun) {
                        return fun(data);
                    }
                };
                /** 检查补充道路队列 数据 */
                RoadGroupMgr.ckAdd = function () {
                    if (this.cacheList.length < 2) {
                        var rtype = this.getRTypeOne(); //获取一个大类型
                        var arr = this.getSubModes(rtype);
                        this.cacheList = this.cacheList.concat(arr);
                    }
                };
                //随机一个小类型
                RoadGroupMgr.getSubModes = function (rtype) {
                    var r = Math.random();
                    var arr = [];
                    if (rtype == RoadType.T_cellCube) {
                        arr = this.cellCubeMode();
                    }
                    else {
                        var temp = this.groupsMap[rtype]; //随机取小类型
                        var mode = Math.floor(r * temp.length);
                        mode = mode >= temp.length ? temp.length - 1 : mode;
                        arr = temp[mode];
                    }
                    return arr;
                };
                //单方块的随机创建mode
                RoadGroupMgr.cellCubeMode = function () {
                    var k = -1;
                    var arr = [];
                    var len = Math.ceil(Math.random() * 2);
                    while (len >= 0) {
                        arr.push([k]);
                        if (Math.random() < 0.5) { //是否运动 概率50%
                            var pos = Math.floor(Math.random() * 5);
                            arr.push([obsCreateMgr_2.obsStyle.singe, pos]);
                        }
                        else {
                            var ctype = Math.round(Math.random());
                            var mode = Math.round(Math.random());
                            arr.push([obsCreateMgr_2.obsStyle.singe, ctype, mode]);
                        }
                        len--;
                    }
                    return arr;
                };
                /**按照权重  获取一种 RoadType 类型 */
                RoadGroupMgr.getRTypeOne = function () {
                    return this.rTypeOne();
                    // return this.rTypeOneLimit();
                };
                //禁止连续出现 不再 
                RoadGroupMgr.rTypeOneLimit = function () {
                    var len = RoadType.maxLen;
                    var all = 0;
                    for (var i = 0; i < len; i++) {
                        all += this.cupRMap[i];
                    }
                    var rtype = 0;
                    var r = Math.random() * all;
                    if (all != 0) {
                        var count = 0;
                        for (var i = 0; i < len; i++) {
                            count += this.cupRMap[i];
                            if (r < count) { //fined it
                                rtype = i;
                                break;
                            }
                        }
                    }
                    for (var i = 0; i < len; i++) {
                        if (i == rtype) {
                            //每次出现后 动态权重值置为0
                            this.cupRMap[i] = 0;
                        }
                        else {
                            //每次倍所有权重
                            if (isNaN(this.baseGenRate[i])) {
                                debugger;
                            }
                            this.cupRMap[i] += this.baseGenRate[i];
                        }
                    }
                    return rtype;
                };
                //正常随机一个类型
                RoadGroupMgr.rTypeOne = function () {
                    var len = RoadType.maxLen;
                    var all = 0;
                    for (var i = 0; i < len; i++) {
                        all += this.baseGenRate[i];
                    }
                    var rtype = 0;
                    var r = Math.random() * all;
                    if (all != 0) {
                        var count = 0;
                        for (var i = 0; i < len; i++) {
                            count += this.baseGenRate[i];
                            if (r < count) { //fined it
                                rtype = i;
                                break;
                            }
                        }
                    }
                    return rtype;
                };
                RoadGroupMgr.getXbyNum = function (num) {
                    num = num < 0 ? 0 : num > 4 ? 4 : num; //limit
                    return num * 2 - 4;
                };
                RoadGroupMgr.cacheList = [];
                RoadGroupMgr.groupsMap = {};
                RoadGroupMgr.baseGenRate = {};
                RoadGroupMgr.funlist = [];
                RoadGroupMgr.os = obsCreateMgr_2.obsStyle;
                RoadGroupMgr.gDCount = 0;
                RoadGroupMgr.gbCount = 0;
                RoadGroupMgr.Kcount = 0;
                RoadGroupMgr.isK = false; //是否为空地板
                RoadGroupMgr.cupRMap = {};
                return RoadGroupMgr;
            }()));
        }
    };
});
System.register("WayMgr", ["GameMgr", "PoolMgr", "MatMgr", "RoadGroupMgr", "role/roleHandle", "stageMgr", "Tool/mixMesh", "Tools/LateUpdateMgr"], function (exports_25, context_25) {
    "use strict";
    var GameMgr_12, PoolMgr_3, MatMgr_5, RoadGroupMgr_1, roleHandle_1, stageMgr_2, mixMesh_3, LateUpdateMgr_1, WayMgr;
    var __moduleName = context_25 && context_25.id;
    return {
        setters: [
            function (GameMgr_12_1) {
                GameMgr_12 = GameMgr_12_1;
            },
            function (PoolMgr_3_1) {
                PoolMgr_3 = PoolMgr_3_1;
            },
            function (MatMgr_5_1) {
                MatMgr_5 = MatMgr_5_1;
            },
            function (RoadGroupMgr_1_1) {
                RoadGroupMgr_1 = RoadGroupMgr_1_1;
            },
            function (roleHandle_1_1) {
                roleHandle_1 = roleHandle_1_1;
            },
            function (stageMgr_2_1) {
                stageMgr_2 = stageMgr_2_1;
            },
            function (mixMesh_3_1) {
                mixMesh_3 = mixMesh_3_1;
            },
            function (LateUpdateMgr_1_1) {
                LateUpdateMgr_1 = LateUpdateMgr_1_1;
            }
        ],
        execute: function () {
            exports_25("WayMgr", WayMgr = /** @class */ (function () {
                //道路 管理器
                function WayMgr() {
                }
                WayMgr.preInit = function () {
                    this.raodRoot = new m4m.framework.transform();
                    this.buildRoot = new m4m.framework.transform();
                    this.combindedRoadRoot = new m4m.framework.transform();
                    this.buildSliceRoot = new m4m.framework.transform();
                    var sRoot = stageMgr_2.stageMgr.stageRoot;
                    sRoot.addChild(this.raodRoot);
                    sRoot.addChild(this.buildRoot);
                    sRoot.addChild(this.combindedRoadRoot);
                    sRoot.addChild(this.buildSliceRoot);
                    //this.combinedBuilding();
                    //this.createFloor();//
                    this.oneFloor();
                };
                WayMgr.init = function () {
                    this.combinedBuilding();
                    this.initState(); //
                    // 初始化终点线
                    this.finalLine = PoolMgr_3.PoolMgr.createSingleRoad(false);
                    this.finalLine[this.finalLineTag] = true;
                    var mr = this.finalLine.gameObject.getComponent('meshRenderer');
                    this.finalLineOldMat = mr.materials[0];
                    mr.materials[0] = MatMgr_5.MatMgr.finishLine;
                    //FrameMgr.Add(this.varUpdate,this); //帧监听
                    LateUpdateMgr_1.LateUpdateMgr.Add(this.varUpdate, this); //帧监听
                };
                WayMgr.initState = function () {
                    this.totalStepAmount = Math.floor(stageMgr_2.stageMgr.currentLevel.length / this.plane_h);
                    this.headSteepNum = -2;
                    this.tailSteepNum = this.roleSteepNum = this.inCount = 0;
                    this.floorCombinedHeadSteepNum = -2;
                    this.floorCombinedTailSteepNum = -2;
                    //buildingMap to pool
                    this.buildingMap = {};
                    this.obsMap = {};
                    this.floorMap = [];
                    var blen = 0;
                    if (this.buildRoot.children)
                        blen = this.buildRoot.children.length;
                    for (var i = 0; i < blen; i++) {
                        var b = this.buildRoot.children[i];
                        if (b)
                            PoolMgr_3.PoolMgr.delete_building(b);
                    }
                    for (var _i = 0, _a = this.combindedRoadRoot.children; _i < _a.length; _i++) {
                        var road = _a[_i];
                        PoolMgr_3.PoolMgr.delete_floo(road);
                    }
                    for (var _b = 0, _c = this.buildSliceRoot.children; _b < _c.length; _b++) {
                        var building = _c[_b];
                        PoolMgr_3.PoolMgr.delete_buildingslice(building);
                    }
                    //obs to pool
                    var len = 0;
                    if (this.raodRoot.children)
                        len = this.raodRoot.children.length;
                    for (var i = 0; i < len; i++) {
                        this.desFloorOne();
                    }
                    // reset 终点线
                    // if(this.finalLine) {
                    //     let mr = this.finalLine.gameObject.getComponent('meshRenderer') as m4m.framework.meshRenderer;
                    //     mr.materials[0] = this.finalLineOldMat;
                    // }
                    // PoolMgr.wayAdditionCounter = GameMgr.WayBunchLength; // 初始化计数器
                    // this.combinedBuilding();
                    //初始生成一段
                    for (var i = 0; i < this.maxNum; i++) {
                        this.genOne();
                    }
                    this.createFloor();
                };
                //get obs by stepnum
                WayMgr.getObs = function (stepNum) {
                    return this.obsMap[stepNum];
                };
                WayMgr.genOne = function () {
                    var Z = this.headSteepNum * this.plane_h;
                    // let floor = new m4m.framework.transform(); // 创建一个空物体来存放当前的障碍物
                    var floor = PoolMgr_3.PoolMgr.new_transform(); // 创建一个空物体来存放当前的障碍物
                    this.raodRoot.addChild(floor); // 把当前道路放在场景里的roadRoot
                    floor.localTranslate.y = this.floorY; // 初始化位置 NOTE: prefab的位置
                    floor.localTranslate.x = 0;
                    floor.localTranslate.z = Z; // 位置偏移
                    floor.localTranslate = floor.localTranslate;
                    //地面
                    // let floorCombined =  this.createFloor(); // 从池里创建地面
                    // if (floorCombined != null) {
                    //     this.FloorBunchsRoot = floorCombined;
                    //     this.combindedRoadRoot.addChild(floorCombined); // 保存合并mesh后的长条地面
                    //     m4m.math.vec3Clone(floor.localTranslate, floorCombined.localTranslate);
                    //     floorCombined.markDirty();
                    //     let buildingSlice = PoolMgr.new_buildingSlice();
                    //     buildingSlice.localTranslate.z = Z;
                    //     this.buildSliceRoot.addChild(buildingSlice);
                    //     // this.floorMap.push(floor);
                    // }
                    if (this.headSteepNum == this.totalStepAmount) { // 终点线 叠加在道路上
                        this.finalLine.localTranslate.y = this.floorY + 0.1;
                        this.finalLine.localTranslate.x = 0;
                        this.finalLine.localTranslate.z = Z;
                        this.finalLine.localTranslate = this.finalLine.localTranslate;
                        this.raodRoot.addChild(this.finalLine);
                    }
                    //障碍物
                    if (this.headSteepNum < this.totalStepAmount - this.safeAreaStep) { // 终点线前无障碍
                        var obs = this.createObs();
                        if (obs) {
                            this.obsMap[this.headSteepNum] = obs;
                            // obs.localTranslate.z = Z;
                            obs.markDirty();
                            floor.addChild(obs);
                        }
                    }
                    //建筑物
                    // this.createBuilding(Z);
                    roleHandle_1.roleHandle.headSteepNum = ++this.headSteepNum;
                };
                //销毁一段
                WayMgr.desOne = function () {
                    //    // delete this.obsMap[this.tailSteepNum];
                    //     let barr = this.buildingMap[this.tailSteepNum];
                    //     if(barr && barr.length > 0){  //d building
                    //         barr.forEach(sub=>{
                    //             if(sub) PoolMgr.delete_building(sub);
                    //         });
                    //     }
                    //     delete this.buildingMap[this.tailSteepNum];
                    roleHandle_1.roleHandle.tailSteepNum = ++this.tailSteepNum;
                    this.desFloorOne();
                };
                //销毁一段 地面 & 地面上的物体
                WayMgr.desFloorOne = function () {
                    var fcs = this.raodRoot.children;
                    if (!fcs || fcs.length < 1)
                        return;
                    var ftemp = fcs.shift();
                    if (ftemp[this.finalLineTag])
                        return;
                    //obs des
                    var ftempArr = ftemp.children;
                    if (ftempArr)
                        for (var i = 0; i < ftempArr.length; i++) {
                            var temp = ftempArr[i];
                            ftemp.removeChild(temp);
                            if (temp[PoolMgr_3.PoolMgr.styleTag] !== undefined) { //obs
                                PoolMgr_3.PoolMgr.delete_obs(temp);
                            }
                            if (temp.gameObject.tag == GameMgr_12.GameMgr.BoostTag) {
                                //boost
                                PoolMgr_3.PoolMgr.delete_Boost(temp);
                            }
                            else if (temp.gameObject.tag == GameMgr_12.GameMgr.CoinTag) {
                                PoolMgr_3.PoolMgr.delete_Coin(temp);
                            }
                        }
                    PoolMgr_3.PoolMgr.delete_transform(ftemp);
                };
                WayMgr.createFloor = function () {
                    this.oneFloor();
                    this.oneBuildingSlice();
                    this.floorCombinedTailSteepNum += GameMgr_12.GameMgr.WayBunchLength;
                    // let floorCombined = PoolMgr.new_floor();
                    // //let temp = new m4m.framework.transform();
                    // let Z = this.floorCombinedTailSteepNum * this.plane_h;
                    // this.floorCombinedTailSteepNum+=GameMgr.WayBunchLength;
                    // // if(this.raodRoot.children)
                    // //console.error(` num ${this.raodRoot.children.length} `);
                    // this.combindedRoadRoot.addChild(floorCombined); // 保存合并mesh后的长条地面
                    // //floorCombined.localTranslate.y = - 0.5; // 初始化位置 NOTE: prefab的位置
                    // floorCombined.localTranslate.y = this.floorY; // 初始化位置 NOTE: prefab的位置
                    // floorCombined.localTranslate.x = 0;
                    // floorCombined.localTranslate.z = Z;
                    // floorCombined.markDirty();
                    // let buildingSlice = PoolMgr.new_buildingSlice();
                    // buildingSlice.localTranslate.z = Z;
                    // this.buildSliceRoot.addChild(buildingSlice);
                };
                //一个地板。。
                WayMgr.oneFloor = function () {
                    var floorCombined = PoolMgr_3.PoolMgr.new_floor();
                    var Z = this.floorCombinedTailSteepNum * this.plane_h;
                    this.combindedRoadRoot.addChild(floorCombined); // 保存合并mesh后的长条地面
                    floorCombined.localTranslate.y = this.floorY; // 初始化位置 NOTE: prefab的位置
                    floorCombined.localTranslate.x = 0;
                    floorCombined.localTranslate.z = Z;
                    floorCombined.localTranslate = floorCombined.localTranslate;
                };
                //一个建筑。。
                WayMgr.oneBuildingSlice = function () {
                    var Z = this.floorCombinedTailSteepNum * this.plane_h;
                    var buildingSlice = PoolMgr_3.PoolMgr.new_buildingSlice();
                    buildingSlice.localTranslate.z = Z;
                    this.buildSliceRoot.addChild(buildingSlice);
                };
                WayMgr.deleteFloor = function () {
                    var slice = this.combindedRoadRoot.children.shift();
                    PoolMgr_3.PoolMgr.delete_floo(slice);
                    var building = this.buildSliceRoot.children.shift();
                    building.gameObject.visible = false;
                    PoolMgr_3.PoolMgr.delete_buildingslice(building);
                    this.floorCombinedHeadSteepNum += GameMgr_12.GameMgr.WayBunchLength;
                };
                WayMgr.createObs = function () {
                    return RoadGroupMgr_1.RoadGroupMgr.getOne();
                };
                WayMgr.createBuilding = function (z) {
                    this.inCount++;
                    if (this.inCount <= 5) {
                        return;
                    }
                    this.inCount = 0;
                    var sRate = 2;
                    var temp_0 = PoolMgr_3.PoolMgr.new_building();
                    var temp_1 = PoolMgr_3.PoolMgr.new_building();
                    temp_1.localTranslate.z = temp_0.localTranslate.z = z;
                    //y -5 - 26
                    temp_1.localTranslate.y = temp_0.localTranslate.y = -5;
                    temp_1.localScale.y = Math.random() * sRate + 0.1;
                    temp_0.localScale.y = Math.random() * sRate + 0.1;
                    //x
                    temp_1.localTranslate.x = Math.random() * -6 - 11;
                    temp_0.localTranslate.x = Math.random() * 6 + 11;
                    this.buildingMap[this.headSteepNum] = [temp_1, temp_0];
                    temp_1.localScale = temp_1.localScale;
                    temp_1.localTranslate = temp_1.localTranslate;
                    temp_0.localScale = temp_0.localScale;
                    temp_0.localTranslate = temp_0.localTranslate;
                    this.buildRoot.addChild(temp_0);
                    this.buildRoot.addChild(temp_1);
                };
                WayMgr.combinedBuilding = function () {
                    var _a, _b;
                    var blen = 0;
                    if (this.buildRoot.children)
                        blen = this.buildRoot.children.length;
                    for (var i = 0; i < blen; i++) {
                        var b = this.buildRoot.children[i];
                        if (b)
                            PoolMgr_3.PoolMgr.delete_building(b);
                    }
                    for (var i = 0; i < GameMgr_12.GameMgr.WayBunchLength; i++) {
                        this.createBuilding(i * this.plane_h);
                    }
                    var meshCompressor = new mixMesh_3.mixMesh();
                    var meshRenders = this.buildRoot.gameObject.getComponentsInChildren("meshRenderer");
                    var picker = meshRenders.map(function (mr) { return mr.gameObject.transform; });
                    GameMgr_12.GameMgr.app.getScene().update(0); //计算世界坐标
                    this.buildingslice = new m4m.framework.transform();
                    if (picker.length > 1) {
                        meshCompressor.resetDic();
                        var nobatch = (_a = meshCompressor.mixMesh(picker, m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Normal | m4m.render.VertexFormatMask.Color), _a.nobatch), batch = _a.batch, mixMeshId = _a.mixMeshId;
                        // // Built
                        for (var _i = 0, mixMeshId_3 = mixMeshId; _i < mixMeshId_3.length; _i++) {
                            var id = mixMeshId_3[_i];
                            var mesh = (_b = meshCompressor.mixmeshDic[id], _b.mesh), mat = _b.mat;
                            var trans = new m4m.framework.transform();
                            var mf = trans.gameObject.addComponent("meshFilter");
                            mf.mesh = mesh;
                            var meshRender = trans.gameObject.addComponent("meshRenderer");
                            meshRender.materials = [mat];
                            this.buildingslice.addChild(trans);
                        }
                    }
                    blen = 0;
                    if (this.buildRoot.children)
                        blen = this.buildRoot.children.length;
                    for (var i = 0; i < blen; i++) {
                        var b = this.buildRoot.children[i];
                        if (b)
                            PoolMgr_3.PoolMgr.delete_building(b);
                    }
                };
                WayMgr.varUpdate = function () {
                    if (GameMgr_12.GameMgr.raceStage != 1)
                        return;
                    if (this.roleSteepNum + this.maxNum > this.headSteepNum - 6) {
                        //let len = 2;
                        var len = (this.roleSteepNum + this.maxNum) - (this.headSteepNum - 6);
                        while (len > 0) {
                            this.genOne();
                            len--;
                        }
                    }
                    if (this.roleSteepNum > this.tailSteepNum + 10) {
                        var len = 2;
                        while (len > 0) {
                            this.desOne();
                            len--;
                        }
                    }
                    if (this.roleSteepNum > this.floorCombinedTailSteepNum - GameMgr_12.GameMgr.WayBunchLength * 0.2) {
                        this.createFloor();
                    }
                    if (this.roleSteepNum > this.floorCombinedHeadSteepNum + GameMgr_12.GameMgr.WayBunchLength * 1.2) {
                        this.deleteFloor();
                    }
                };
                //0 - 4 Num ， left to right
                WayMgr.getXbyNum = function (num) {
                    num = num < 0 ? 0 : num > 4 ? 4 : num; //limit
                    return num * 2 - 4;
                };
                WayMgr.obsMap = {};
                WayMgr.buildingMap = {};
                WayMgr.plane_h = 5;
                WayMgr.plane_w = 10;
                WayMgr.roleSteepNum = 0;
                WayMgr.floorY = -0.6;
                //角色的位置
                //预先铺设量
                WayMgr.maxNum = 23;
                WayMgr.finalLineTag = "finalLineTag";
                WayMgr.totalStepAmount = 0; // 本局总长度
                WayMgr.safeAreaStep = 10; // 终点线前的无障碍区域阶数
                WayMgr.isGrey = false;
                WayMgr.inCount = 0;
                return WayMgr;
            }()));
        }
    };
});
System.register("CameraFollowCtr", [], function (exports_26, context_26) {
    "use strict";
    var CameraFollowCtrBR;
    var __moduleName = context_26 && context_26.id;
    return {
        setters: [],
        execute: function () {
            exports_26("CameraFollowCtrBR", CameraFollowCtrBR = /** @class */ (function (_super) {
                __extends(CameraFollowCtrBR, _super);
                function CameraFollowCtrBR() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this._lookAtPoint = new m4m.math.vector3(0, 0, 0);
                    _this._targetOffset = new m4m.math.vector3(0, 0, 0);
                    _this._distance = 0;
                    _this._elevationAngle = 0;
                    _this._Yangle = 0;
                    _this._Yradian = 0;
                    _this._lookDir = new m4m.math.vector3();
                    //暂停
                    _this._pause = false;
                    //balls race need 
                    _this.yg_moved = true;
                    _this.yg_p = 0;
                    _this.target_yg = 0;
                    _this.old_yg = 0;
                    _this.YGtimeLen = 0.5; //运动时间
                    return _this;
                }
                CameraFollowCtrBR.prototype.start = function () {
                };
                CameraFollowCtrBR.prototype.setTarget = function (target) {
                    this._target = target;
                    this.calCameraPos();
                    this.DoLookAtPoint();
                };
                CameraFollowCtrBR.prototype.setTargetOffset = function (x, y, z) {
                    this._targetOffset.x = x;
                    this._targetOffset.y = y;
                    this._targetOffset.z = z;
                    this.DoLookAtPoint();
                };
                Object.defineProperty(CameraFollowCtrBR.prototype, "distance", {
                    get: function () { return this._distance; },
                    set: function (v) { this._distance = v; this.calCameraDisAndLook(); },
                    enumerable: false,
                    configurable: true
                });
                ;
                Object.defineProperty(CameraFollowCtrBR.prototype, "elevationAngle", {
                    get: function () { return this._elevationAngle; },
                    set: function (v) {
                        this._elevationAngle = v;
                        this.calCameraDisAndLook();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(CameraFollowCtrBR.prototype, "Yangle", {
                    get: function () {
                        return this._Yangle;
                    },
                    set: function (angle) {
                        this._Yangle = angle;
                        this._Yradian = angle * Math.PI / 180;
                        this.calCameraDisAndLook();
                    },
                    enumerable: false,
                    configurable: true
                });
                CameraFollowCtrBR.prototype.calCameraDisAndLook = function () {
                    this.calCamDis();
                    this.DoLookAtPoint();
                };
                CameraFollowCtrBR.prototype.calCamDis = function () {
                    var qyaw = m4m.math.pool.new_quaternion();
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this._elevationAngle, qyaw);
                    var qpitch = m4m.math.pool.new_quaternion();
                    var leftVec3 = m4m.math.pool.new_vector3();
                    leftVec3.x = 1;
                    m4m.math.quatFromAxisAngle(leftVec3, this._Yangle, qpitch);
                    m4m.math.quatMultiply(qyaw, qpitch, qyaw);
                    var forward = m4m.math.pool.new_vector3();
                    forward.z = -1;
                    m4m.math.quatTransformVector(qyaw, forward, forward);
                    m4m.math.vec3ScaleByNum(forward, this.distance, this._lookDir);
                    this.calCameraPos();
                    m4m.math.pool.delete_vector3(leftVec3);
                    m4m.math.pool.delete_vector3(forward);
                    m4m.math.pool.delete_quaternion(qyaw);
                    m4m.math.pool.delete_quaternion(qpitch);
                };
                CameraFollowCtrBR.prototype.DoLookAtPoint = function () {
                    if (!this._target)
                        return;
                    m4m.math.vec3Add(this._target.localTranslate, this._targetOffset, this._lookAtPoint);
                    this.gameObject.transform.lookatPoint(this._lookAtPoint);
                };
                CameraFollowCtrBR.prototype.pause = function (value) {
                    this._pause = value;
                };
                CameraFollowCtrBR.prototype.calCameraPos = function () {
                    if (!this._target || this._pause)
                        return;
                    var trans = this.gameObject.transform;
                    m4m.math.vec3Clone(this._target.localTranslate, trans.localTranslate);
                    m4m.math.vec3Add(this._lookDir, trans.localTranslate, trans.localTranslate);
                    trans.localTranslate = trans.localTranslate;
                    trans.localRotate.z = trans.localPosition.x * Math.abs(trans.localPosition.x) / 360;
                    // trans.localEulerAngles = trans.localEulerAngles;
                    trans.localPosition.x *= 0.6;
                    trans.localPosition = trans.localPosition;
                    trans.localRotate = trans.localRotate;
                };
                CameraFollowCtrBR.prototype.setLToYangle = function (y, callback) {
                    if (callback === void 0) { callback = null; }
                    this.yg_moved = false;
                    this.yg_p = 0;
                    this.target_yg = y;
                    this.old_yg = this._Yangle;
                    this.callback = callback;
                };
                CameraFollowCtrBR.prototype.ckYGMove = function (delta) {
                    if (this.yg_moved)
                        return;
                    this.yg_p += delta * 1 / this.YGtimeLen;
                    this.yg_p = this.yg_p > 1 ? 1 : this.yg_p;
                    // let temp = (1-this.yg_p)  * this._Yangle + this.yg_p * this.target_yg;
                    var temp = m4m.math.numberLerp(this.old_yg, this.target_yg, this.yg_p);
                    //yangle
                    this._Yangle = temp;
                    this._Yradian = temp * Math.PI / 180;
                    this.calCamDis();
                    if (this.yg_p >= 1) {
                        this.yg_moved = true;
                        if (this.callback) {
                            this.callback();
                        }
                    }
                    this.calCameraPos();
                };
                CameraFollowCtrBR.prototype.update = function (delta) {
                    //this.ckYGMove(delta);
                    //this.calCameraPos();
                };
                CameraFollowCtrBR = __decorate([
                    m4m.reflect.nodeComponent
                ], CameraFollowCtrBR);
                return CameraFollowCtrBR;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("headMgr", ["GameMgr", "Tool/wxTool"], function (exports_27, context_27) {
    "use strict";
    var GameMgr_13, wxTool_2, headMgr;
    var __moduleName = context_27 && context_27.id;
    return {
        setters: [
            function (GameMgr_13_1) {
                GameMgr_13 = GameMgr_13_1;
            },
            function (wxTool_2_1) {
                wxTool_2 = wxTool_2_1;
            }
        ],
        execute: function () {
            exports_27("headMgr", headMgr = /** @class */ (function () {
                //路人头像 管理器
                function headMgr() {
                }
                //补充一次数据
                headMgr.AddOnce = function (callBack) {
                    var _this = this;
                    if (callBack === void 0) { callBack = null; }
                    if (!wxTool_2.wxTool.wx)
                        return;
                    var token = wxTool_2.wxTool.token;
                    if (wxTool_2.wxTool.token == "" || wxTool_2.wxTool.token == undefined || wxTool_2.wxTool.token == "undefined")
                        return;
                    var url = GameMgr_13.GameMgr.DNS_AND_PORT + "/headPortrait?token=" + token;
                    wxTool_2.wxTool._loadFun(url, function (res) {
                        if (res && res.data && res.data.body && res.data.body.length != null) {
                            res.data.body.forEach(function (obj) {
                                if (obj.avatarUrl) {
                                    var url_1 = obj.avatarUrl;
                                    //过滤 重复
                                    if (_this.filterNet[url_1]) {
                                        _this.recc++;
                                        console.warn(" url \u91CD\u590D  ".concat(_this.recc));
                                    }
                                    else if (wxTool_2.wxTool.myinfo && wxTool_2.wxTool.myinfo.avatarUrl && wxTool_2.wxTool.myinfo.avatarUrl == url_1) {
                                        console.warn("\u83B7\u53D6\u5230 \u81EA\u5DF1\u7684\u5934\u50CF ");
                                    }
                                    else {
                                        _this.filterNet[url_1] = true;
                                        _this.user_imgs.push(url_1); //取头像数据
                                    }
                                }
                            });
                            if (callBack)
                                callBack();
                        }
                    }, null);
                };
                //随机筛选数据 
                headMgr.randomURLs = function (count, outArr) {
                    var _this = this;
                    outArr.length = 0;
                    this.tempArr.length = 0;
                    if (count <= 0 || !outArr || this.user_imgs.length <= 0)
                        return;
                    this.user_imgs.forEach(function (url, idx) {
                        _this.tempArr.push(idx);
                    });
                    var len = Math.min(this.user_imgs.length, count);
                    //取随机位置
                    for (var i = 0; i < len; i++) {
                        var idx = Math.floor(Math.random() * this.tempArr.length);
                        var pos = this.tempArr[idx];
                        outArr.push(this.user_imgs[pos]);
                        this.tempArr.splice(idx, 1);
                    }
                };
                //分配数据 到balls
                headMgr.setIconUrls = function (rs) {
                    if (!rs || rs.length <= 0)
                        return;
                    var len = rs.length;
                    this.randomURLs(len, this.tempUrls); //获取随机数据
                    var rate = this.tempUrls.length / len;
                    rate = rate > this.maxRate ? this.maxRate : rate; //过滤最大值
                    for (var i = 0; i < len; i++) {
                        var r = rs[i];
                        if (!r || !r.roleD)
                            continue;
                        r.roleD.iconUrl = "";
                        if (i != 0 && Math.random() > rate)
                            continue; //第一个必加
                        var url = this.tempUrls.pop();
                        if (!url)
                            continue;
                        r.roleD.iconUrl = url;
                    }
                };
                headMgr.user_imgs = [];
                headMgr.filterNet = {};
                headMgr.recc = 0;
                // private static fullRate = 0.4;
                // private static HeadCount = 20;
                // /** 尝试填充 所需要的 小球数量*/
                // static tryfull(ballNum : number){
                //     let len = this.user_imgs.length;
                //     let times = 1;
                //     if(len < ballNum * this.fullRate){
                //         let temp = ballNum * this.fullRate - len;
                //         temp = temp < 0 ? 0: temp;
                //         times = Math.ceil(temp / this.HeadCount);
                //     }
                //     for(let i = 0; i < times ;i++){
                //         this.AddOnce();
                //     }
                // }
                headMgr.tempArr = [];
                headMgr.tempUrls = [];
                headMgr.maxRate = 1 / 3; //大概 三个人 刷一次头像
                return headMgr;
            }()));
        }
    };
});
System.register("ui/inGamePageHandle", ["ui/base/uiPage"], function (exports_28, context_28) {
    "use strict";
    var uiPage_3, inGamePageHandle;
    var __moduleName = context_28 && context_28.id;
    return {
        setters: [
            function (uiPage_3_1) {
                uiPage_3 = uiPage_3_1;
            }
        ],
        execute: function () {
            exports_28("inGamePageHandle", inGamePageHandle = /** @class */ (function (_super) {
                __extends(inGamePageHandle, _super);
                function inGamePageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                inGamePageHandle.prototype.onPlay = function () {
                };
                inGamePageHandle.prototype.update = function (delta) {
                };
                inGamePageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], inGamePageHandle.prototype, "setting", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], inGamePageHandle.prototype, "home", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "progressbar")
                ], inGamePageHandle.prototype, "value", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], inGamePageHandle.prototype, "progressbarWidth", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], inGamePageHandle.prototype, "dot", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], inGamePageHandle.prototype, "diamond", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], inGamePageHandle.prototype, "progressbar", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], inGamePageHandle.prototype, "customs", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], inGamePageHandle.prototype, "banner", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], inGamePageHandle.prototype, "numlabel", void 0);
                inGamePageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], inGamePageHandle);
                return inGamePageHandle;
            }(uiPage_3.uiPage)));
        }
    };
});
System.register("ui/settingPageHandle", ["ui/base/uiPage"], function (exports_29, context_29) {
    "use strict";
    var uiPage_4, settingPageHandle;
    var __moduleName = context_29 && context_29.id;
    return {
        setters: [
            function (uiPage_4_1) {
                uiPage_4 = uiPage_4_1;
            }
        ],
        execute: function () {
            exports_29("settingPageHandle", settingPageHandle = /** @class */ (function (_super) {
                __extends(settingPageHandle, _super);
                function settingPageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                settingPageHandle.prototype.onPlay = function () {
                };
                settingPageHandle.prototype.update = function (delta) {
                };
                settingPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], settingPageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], settingPageHandle.prototype, "shake", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], settingPageHandle.prototype, "music", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "audioHandle")
                ], settingPageHandle.prototype, "sound", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], settingPageHandle.prototype, "bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], settingPageHandle.prototype, "icons", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], settingPageHandle.prototype, "shakeImg", void 0);
                settingPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], settingPageHandle);
                return settingPageHandle;
            }(uiPage_4.uiPop)));
        }
    };
});
System.register("ui/base/ubiAdvIcon", ["Tool/commTool", "Tool/wxTool"], function (exports_30, context_30) {
    "use strict";
    var commTool_3, wxTool_3, ubiAdvIcon;
    var __moduleName = context_30 && context_30.id;
    return {
        setters: [
            function (commTool_3_1) {
                commTool_3 = commTool_3_1;
            },
            function (wxTool_3_1) {
                wxTool_3 = wxTool_3_1;
            }
        ],
        execute: function () {
            exports_30("ubiAdvIcon", ubiAdvIcon = /** @class */ (function (_super) {
                __extends(ubiAdvIcon, _super);
                function ubiAdvIcon() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.intervals = 1 / 24; //24f/s
                    _this.imglist = [];
                    _this.imgTexs = []; //序列帧贴图
                    _this.jumptargetAppid = ""; //跳转的目标id
                    _this.isShake = true;
                    _this.waitCount = 0;
                    _this.shakeCount = 0;
                    _this.shakeTime = 1;
                    _this.shakeSpeed = 2; //拍动速度
                    _this.tp = 0;
                    _this.angleRange = 30 * Math.PI / 180;
                    _this.ranimCount = 0;
                    _this.playIdx = 0;
                    return _this;
                }
                /** 设置icon 通过获取 的数据
                 * res.id   跳转的appID
                 * res.frames  序列图存放CDN URL
                 * res.name  帧图 序列前缀
                 * res.count 帧数量
                 *
                 * delay 延迟执行
                 */
                ubiAdvIcon.prototype.setIcon = function (res, delay) {
                    var _this = this;
                    if (delay === void 0) { delay = 0; }
                    if (!res)
                        return;
                    setTimeout(function () {
                        _this.dosetIcon(res);
                    }, delay);
                };
                ubiAdvIcon.prototype.dosetIcon = function (res) {
                    if (!res)
                        return;
                    this.playIdx = 0;
                    this.currAnimFun = this.swFrame_shake;
                    // this.imglist = res.data.imglist;
                    this.imglist.length = 0;
                    var len = res.count;
                    for (var i = 0; i < len; i++) {
                        var idx = i <= 9 ? "0".concat(i) : "".concat(i);
                        this.imglist.push("".concat(res.frames).concat(res.name).concat(idx, ".png"));
                    }
                    this.jumptargetAppid = res.id;
                    this.loadImg();
                    //旋转复位
                    this.transform.localRotate = 0;
                };
                ubiAdvIcon.prototype.loadImg = function () {
                    var _this = this;
                    this.imgTexs.length = 0;
                    var count = 0;
                    this.imglist.forEach(function (url, idx) {
                        wxTool_3.wxTool.ImgLoad(url, function (tex) {
                            count++;
                            _this.imgTexs[idx] = tex;
                            if (count >= _this.imglist.length) {
                                _this.chageIconF();
                            }
                        });
                    });
                };
                //摇晃动画
                ubiAdvIcon.prototype.shakeAnim = function (delta) {
                    if (this.isShake) {
                        this.tp += delta * this.shakeSpeed;
                        this.tp = this.tp > 1 ? this.tp - 1 : this.tp;
                        var angle = 0;
                        var tMethod = m4m.framework.tweenMethod;
                        if (this.tp <= 0.5) {
                            angle = commTool_3.commTool.tweenInOut(this.tp * 2, this.angleRange, tMethod.QuadEaseIn, tMethod.QuadEaseOut);
                        }
                        else {
                            angle = commTool_3.commTool.tweenInOut((2 - this.tp * 2), this.angleRange, tMethod.QuadEaseIn, tMethod.QuadEaseOut);
                        }
                        var half = this.angleRange / 2;
                        var fTemp = angle <= half ? angle - half : angle - half;
                        this.shakeCount += delta;
                        if (this.shakeCount >= this.shakeTime) {
                            this.shakeCount = 0;
                            this.tp = 0;
                            this.isShake = false;
                            fTemp = 0;
                        }
                        this.transform.localRotate = fTemp;
                        this.transform.markDirty();
                    }
                    else {
                        this.waitCount += delta;
                        if (this.waitCount >= this.shakeTime) {
                            this.waitCount = 0;
                            this.isShake = true;
                        }
                    }
                };
                //序列帧切换动画
                ubiAdvIcon.prototype.swFrameAnim = function (delta) {
                    this.ranimCount += delta;
                    if (this.ranimCount >= this.intervals) {
                        this.ranimCount = 0;
                        this.chageIconF();
                    }
                };
                //序列帧切换 + 摇晃动画
                ubiAdvIcon.prototype.swFrame_shake = function (delta) {
                    this.swFrameAnim(delta);
                    this.shakeAnim(delta);
                };
                //改变icon
                ubiAdvIcon.prototype.chageIconF = function () {
                    if (this.imgTexs.length < 1 || !this.icon)
                        return;
                    var tex = this.imgTexs[this.playIdx];
                    this.icon.image = tex;
                    this.playIdx++;
                    this.playIdx = this.playIdx % this.imgTexs.length;
                };
                ubiAdvIcon.prototype.onPlay = function () {
                    var _this = this;
                    //icon init
                    var opt = m4m.framework.layoutOption;
                    var tran = new m4m.framework.transform2D();
                    this.transform.addChild(tran);
                    tran.name = "ubi_advert_Img";
                    tran.layoutState = opt.TOP | opt.BOTTOM | opt.RIGHT | opt.LEFT;
                    this.icon = tran.transform.addComponent("rawImage2D");
                    //click
                    var btn = this.transform.addComponent("button");
                    btn.addListener(m4m.event.UIEventEnum.PointerDown, function () {
                        wxTool_3.wxTool.openMiniPrograme(_this.jumptargetAppid, "");
                        if (_this.onClickIcon) {
                            _this.onClickIcon();
                        }
                    }, this);
                };
                ubiAdvIcon.prototype.update = function (delta) {
                    if (!this.transform.visible)
                        return;
                    if (this.currAnimFun) {
                        this.currAnimFun(delta);
                    }
                };
                ubiAdvIcon.prototype.remove = function () {
                };
                ubiAdvIcon.adv_W = 142; //统一尺寸
                ubiAdvIcon.adv_H = 156;
                ubiAdvIcon = __decorate([
                    m4m.reflect.node2DComponent
                ], ubiAdvIcon);
                return ubiAdvIcon;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("advMgr", ["GameMgr", "Tool/wxTool"], function (exports_31, context_31) {
    "use strict";
    var GameMgr_14, wxTool_4, advMgr;
    var __moduleName = context_31 && context_31.id;
    return {
        setters: [
            function (GameMgr_14_1) {
                GameMgr_14 = GameMgr_14_1;
            },
            function (wxTool_4_1) {
                wxTool_4 = wxTool_4_1;
            }
        ],
        execute: function () {
            exports_31("advMgr", advMgr = /** @class */ (function () {
                /** 内部广告 管理器 */
                function advMgr() {
                }
                advMgr.init = function () {
                    var _this = this;
                    if (this.inited || !wxTool_4.wxTool.wx)
                        return;
                    this.inited = true;
                    wxTool_4.wxTool.request("GET", this.advUrl, null, function (res) {
                        if (!res || !res.cross)
                            return;
                        var tarArr = res.cross["".concat(GameMgr_14.GameMgr.gameName)];
                        if (!tarArr)
                            return;
                        var len = tarArr.length;
                        var ridx = Math.floor(Math.random() * len);
                        var tarStr = tarArr[ridx];
                        var tarObj = res["".concat(tarStr)];
                        if (!tarObj)
                            return;
                        _this.sequenceAdvD = tarObj;
                        if (_this.ubiAdv)
                            _this.ubiAdv.setIcon(_this.sequenceAdvD, 5000);
                        _this.settingAdvData = [];
                        if (!res.popup)
                            return;
                        tarArr = res.popup["".concat(GameMgr_14.GameMgr.gameName)];
                        len = tarArr.length;
                        var MaxNum = 2; // 只取两个数据
                        //获取icon
                        for (var i = 0; i < len; i++) {
                            if (i >= MaxNum)
                                break;
                            var tarStr_1 = tarArr[i];
                            var tarObj_1 = res["".concat(tarStr_1)];
                            var appid_ = "".concat(tarObj_1.id);
                            var imgUrl_ = "".concat(tarObj_1.frames).concat(tarObj_1.icon);
                            _this.settingAdvData.push({ appid: appid_, imgurl: imgUrl_ });
                        }
                    });
                };
                advMgr.advUrl = "https://umc-static-content.upaidui.com/crosspromotion/cp_config.json";
                advMgr.inited = false;
                return advMgr;
            }()));
        }
    };
});
System.register("ui/iconAdvHandle", ["Tool/commTool", "Tool/wxTool"], function (exports_32, context_32) {
    "use strict";
    var commTool_4, wxTool_5, iconAdvHandle;
    var __moduleName = context_32 && context_32.id;
    return {
        setters: [
            function (commTool_4_1) {
                commTool_4 = commTool_4_1;
            },
            function (wxTool_5_1) {
                wxTool_5 = wxTool_5_1;
            }
        ],
        execute: function () {
            exports_32("iconAdvHandle", iconAdvHandle = /** @class */ (function (_super) {
                __extends(iconAdvHandle, _super);
                function iconAdvHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.appid = "";
                    _this.inited = false;
                    return _this;
                }
                iconAdvHandle.prototype.onPlay = function () {
                };
                iconAdvHandle.prototype.setIcon = function (data) {
                    if (this.inited || !data)
                        return;
                    var icon = this.transform.getComponent("rawImage2D");
                    var btn = this.transform.getComponent("button");
                    if (!icon) {
                        icon = this.transform.addComponent("rawImage2D");
                    }
                    if (!btn) {
                        btn = this.transform.addComponent("button");
                    }
                    this.appid = data.appid;
                    btn.addListener(m4m.event.UIEventEnum.PointerClick, this.onIconClick, this);
                    commTool_4.commTool.getTexture(data.imgurl).then(function (tex) {
                        icon.image = tex;
                    });
                    this.inited = true;
                };
                iconAdvHandle.prototype.onIconClick = function () {
                    wxTool_5.wxTool.openMiniPrograme(this.appid, "");
                    if (this.onClick)
                        this.onClick();
                };
                iconAdvHandle.prototype.update = function (delta) {
                };
                iconAdvHandle.prototype.remove = function () {
                };
                iconAdvHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], iconAdvHandle);
                return iconAdvHandle;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("ui/pages/setingPage", ["ui/base/uiPage", "GameMgr", "advMgr", "Tool/joinTool", "Tool/tdTool", "Tool/commTool", "Tool/wxTool", "Tool/saveTool", "audio/AudioMgr", "ui/pages/inGamePage"], function (exports_33, context_33) {
    "use strict";
    var uiPage_5, GameMgr_15, advMgr_1, joinTool_1, tdTool_2, commTool_5, wxTool_6, saveTool_2, AudioMgr_2, inGamePage_1, setingPage;
    var __moduleName = context_33 && context_33.id;
    return {
        setters: [
            function (uiPage_5_1) {
                uiPage_5 = uiPage_5_1;
            },
            function (GameMgr_15_1) {
                GameMgr_15 = GameMgr_15_1;
            },
            function (advMgr_1_1) {
                advMgr_1 = advMgr_1_1;
            },
            function (joinTool_1_1) {
                joinTool_1 = joinTool_1_1;
            },
            function (tdTool_2_1) {
                tdTool_2 = tdTool_2_1;
            },
            function (commTool_5_1) {
                commTool_5 = commTool_5_1;
            },
            function (wxTool_6_1) {
                wxTool_6 = wxTool_6_1;
            },
            function (saveTool_2_1) {
                saveTool_2 = saveTool_2_1;
            },
            function (AudioMgr_2_1) {
                AudioMgr_2 = AudioMgr_2_1;
            },
            function (inGamePage_1_1) {
                inGamePage_1 = inGamePage_1_1;
            }
        ],
        execute: function () {
            exports_33("setingPage", setingPage = /** @class */ (function () {
                //排行榜
                function setingPage() {
                    this.inited = false;
                    // onMusicClick() {
                    //     //播放按钮声音
                    //     AudioMgr.buttonMusic();
                    //     console.error("音乐");
                    // }
                    // onSoundClick() {
                    //     //播放按钮声音
                    //     AudioMgr.buttonMusic();
                    // }
                    this.isAdvInited = false;
                    this.appidTag = "appidTag";
                }
                setingPage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_5.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new setingPage();
                                    this._instance.init();
                                    uiPage_5.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                setingPage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_5.loadTool.PagePrefeb_map.get(setingPage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("settingPageHandle");
                    //事件
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.shake.addListener(m4m.event.UIEventEnum.PointerClick, this.onShakeClick, this);
                    // this.handle.music.addListener(m4m.event.UIEventEnum.PointerClick, this.onSoundClick, this);
                    this.handle.bt.addListener(m4m.event.UIEventEnum.PointerDown, function () { }, this);
                    // this.handle.sound.addListener(m4m.event.UIEventEnum.PointerClick, this.onSoundClick, this);
                    var l = this.handle.transform.getComponent("button");
                    l.addListener(m4m.event.UIEventEnum.PointerClick, function () { }, this);
                    var icons_children = this.handle.icons.children;
                    for (var i = 0; i < icons_children.length; i++) {
                        if (i >= advMgr_1.advMgr.length)
                            break;
                        var tran = icons_children[i];
                        var abv = advMgr_1.advMgr.settingAdvData[i];
                        var rwaImg = tran.getComponent("rawImage2D");
                        var button = tran.getComponent("button");
                        //appid:"wxbc7edaaf20a9f1ca",imgurl:""
                        this.setIcon(rwaImg, abv.imgurl);
                        button.addListener(m4m.event.UIEventEnum.PointerClick, function () {
                            //广告的点击事件
                        }, this);
                    }
                    this.handle.sound.onClickFun = function () {
                        var _a;
                        joinTool_1.joinTool.tdcustomEvent(tdTool_2.tdTool.ClickEvent, tdTool_2.tdTool.ClickEvent, (_a = {}, _a[tdTool_2.tdTool.SecondGameIcon] = 12, _a)); //数据埋点
                    };
                    this.refreashVibrateIcon();
                };
                setingPage.prototype.setIcon = function (icon, src) {
                    if (commTool_5.commTool.loadedTexsDic.ContainsKey(src)) {
                        icon.image = commTool_5.commTool.loadedTexsDic.GetValue(src);
                    }
                    else {
                        commTool_5.commTool.ImgByLoad(src, function (_tex) {
                            if (_tex) {
                                commTool_5.commTool.loadedTexsDic.Add(src, _tex);
                                icon.image = _tex;
                            }
                        });
                    }
                };
                setingPage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_2.AudioMgr.Play("touch.mp3");
                    console.error("关闭");
                    this.hide();
                    inGamePage_1.inGamePage.Instance().then(function (ins) {
                        ins.setShowItem(inGamePage_1.showItem.home);
                    });
                };
                setingPage.prototype.onShakeClick = function () {
                    var _a;
                    AudioMgr_2.AudioMgr.Play("touch.mp3");
                    GameMgr_15.GameMgr.swVibrate = !GameMgr_15.GameMgr.swVibrate;
                    if (GameMgr_15.GameMgr.swVibrate)
                        wxTool_6.wxTool.vibrateShort();
                    this.refreashVibrateIcon();
                    saveTool_2.saveTool.save(null, null);
                    joinTool_1.joinTool.tdcustomEvent(tdTool_2.tdTool.ClickEvent, tdTool_2.tdTool.ClickEvent, (_a = {}, _a[tdTool_2.tdTool.FirstGameIcon] = 11, _a)); //数据埋点
                };
                //刷新 震动图标显示
                setingPage.prototype.refreashVibrateIcon = function () {
                    var str;
                    if (GameMgr_15.GameMgr.swVibrate) {
                        str = "setting.atlas.json_shezhi_btn_zhendong";
                        //  str = " homeAndGame.atlas.json_main_btn_shezhi";
                    }
                    else {
                        str = "setting.atlas.json_shezhi_btn_zhendong0";
                    }
                    var img = this.handle.shakeImg;
                    img.sprite = GameMgr_15.GameMgr.assetMgr.getAssetByName(str);
                    img.transform.markDirty();
                    this.handle.transform.markDirty();
                    console.error("震动");
                };
                //设置广告 icon
                setingPage.prototype.setAdvIcons = function (datas) {
                    if (this.isAdvInited)
                        return;
                    var icons_ = this.handle.icons.getComponentsInChildren("iconAdvHandle");
                    for (var i = 0; i < datas.length; i++) {
                        var data = datas[i];
                        if (!data)
                            break;
                        icons_[i].setIcon(data);
                        icons_[i].onClick = function () {
                            var _a;
                            joinTool_1.joinTool.tdcustomEvent(tdTool_2.tdTool.ClickEvent, tdTool_2.tdTool.ClickEvent, (_a = {}, _a[tdTool_2.tdTool.Othergamelink] = 13, _a)); //数据埋点
                        };
                    }
                    this.isAdvInited = true;
                };
                setingPage.prototype.show = function () {
                    if (advMgr_1.advMgr.settingAdvData) { //
                        this.setAdvIcons(advMgr_1.advMgr.settingAdvData);
                    }
                    this.handle.show();
                };
                setingPage.prototype.hide = function () {
                    this.handle.hide();
                };
                setingPage.prefabName = "setting_page"; //依赖的 预设体 资源
                setingPage.atlasList = ["setting"]; //依赖的 图集资源
                return setingPage;
            }()));
        }
    };
});
System.register("stringMgr", [], function (exports_34, context_34) {
    "use strict";
    var stringMgr;
    var __moduleName = context_34 && context_34.id;
    return {
        setters: [],
        execute: function () {
            exports_34("stringMgr", stringMgr = /** @class */ (function () {
                function stringMgr() {
                }
                // TODO: i18n
                // gameOverPage
                //当前关卡
                stringMgr.currentLevel = "Current level:";
                //第
                stringMgr.di = "No.";
                //名
                stringMgr.ming = "";
                //球球数量
                stringMgr.ballAmount = "Number of eggs:";
                //下一关球球数量
                stringMgr.nextBallAmount = "The number of eggs in  the next stage:";
                // homePage
                // level
                stringMgr.level = "level";
                // inGamePage
                stringMgr.turnoffAvatarFollow = "头像跟随关闭";
                stringMgr.turnonAvatarFollow = "头像跟随开启";
                //最终挑战
                stringMgr.finalChallenge = "final challenge";
                // prizePage
                stringMgr.tongguandi = "通关第";
                stringMgr.guan = "关";
                //获得
                stringMgr.gain = "get";
                //本局
                stringMgr.benju = "this bureau";
                stringMgr.diamond = "金币";
                // unlockPage
                stringMgr.getSkin = "获得皮肤";
                stringMgr.getTheme = "获得主题";
                stringMgr.buy = "购买?";
                // videoPrizePage
                stringMgr.gained = "获得了";
                stringMgr.haiyou = "还有";
                stringMgr.tian = "天";
                stringMgr.shi = "时";
                stringMgr.jiezhi = "截止";
                stringMgr.fen = "分";
                return stringMgr;
            }()));
        }
    };
});
System.register("FrameTimer", ["Tools/FrameMgr"], function (exports_35, context_35) {
    "use strict";
    var FrameMgr_3, timerNode, FrameTimer;
    var __moduleName = context_35 && context_35.id;
    return {
        setters: [
            function (FrameMgr_3_1) {
                FrameMgr_3 = FrameMgr_3_1;
            }
        ],
        execute: function () {
            timerNode = /** @class */ (function () {
                function timerNode(CallFun, time, isLoop) {
                    if (isLoop === void 0) { isLoop = false; }
                    this.time = 0;
                    this.timeCount = 0;
                    this.isStop = false;
                    this.CallFun = CallFun;
                    this.time = time;
                    this.isLoop = isLoop;
                    this.id = timerNode.getId();
                }
                timerNode.getId = function () {
                    this.idCount++;
                    return this.idCount;
                };
                timerNode.idCount = 0;
                return timerNode;
            }());
            //FrameMgr 帧调用 计时器
            //方便 用FrameMgr 设置动画计时
            FrameTimer = /** @class */ (function () {
                function FrameTimer() {
                    this.nodeDic = {};
                    this.removeList = [];
                }
                Object.defineProperty(FrameTimer, "Instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new FrameTimer();
                            this.init();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                FrameTimer.init = function () {
                    FrameMgr_3.FrameMgr.Add(this._instance.update, this._instance);
                };
                FrameTimer.prototype.update = function (delat) {
                    var _this = this;
                    this.removeList.length = 0;
                    for (var key in this.nodeDic) {
                        var node = this.nodeDic[key];
                        if (node) {
                            var tick = false;
                            var isEnd = false;
                            var needCall = true;
                            node.timeCount += delat;
                            var outDelat = node.timeCount;
                            //是否强制停止
                            if (node.isStop) {
                                this.removeList.push(key);
                                isEnd = true;
                            }
                            else if (node.timeCount > node.time) { //是否到点
                                //是否loop
                                if (node.isLoop) {
                                    node.timeCount = 0;
                                    tick = true;
                                }
                                else {
                                    isEnd = true;
                                    this.removeList.push(key);
                                }
                            }
                            else {
                                needCall = false;
                            }
                            if (needCall && node.CallFun) {
                                node.CallFun(outDelat, isEnd, tick);
                            }
                        }
                    }
                    this.removeList.forEach(function (key) {
                        var node = _this.nodeDic[key];
                        if (node) {
                            delete _this.nodeDic[key];
                        }
                    });
                };
                /** 暂停计时 */
                FrameTimer.prototype.stop = function (timeId) {
                    var node = this.nodeDic[timeId];
                    if (node) {
                        node.isStop = true;
                    }
                };
                /** 计时一次
                 * time 等待时间
                 * DoFun delat 帧间隔时间 、isEnd 是否是结束 、tick 间隔滴答（loop 模式才有）
                 */
                FrameTimer.prototype.once = function (endTime, DoFun) {
                    if (endTime < 0 || !DoFun)
                        return -1;
                    var node = new timerNode(DoFun, endTime, false);
                    this.nodeDic[node.id] = node;
                    return node.id;
                };
                /** 计时一次
                 * time 循环时间间隔
                 * DoFun delat 帧间隔时间 、isEnd 是否是结束 、tick 间隔滴答（loop 模式才有）
                 */
                FrameTimer.prototype.loop = function (tickTime, DoFun) {
                    if (tickTime < 0 || !DoFun)
                        return -1;
                    var node = new timerNode(DoFun, tickTime, true);
                    this.nodeDic[node.id] = node;
                    return node.id;
                };
                return FrameTimer;
            }());
            exports_35("FrameTimer", FrameTimer);
        }
    };
});
System.register("ui/gameOverPageHandle", ["ui/base/uiPage"], function (exports_36, context_36) {
    "use strict";
    var uiPage_6, gameOverPageHandle;
    var __moduleName = context_36 && context_36.id;
    return {
        setters: [
            function (uiPage_6_1) {
                uiPage_6 = uiPage_6_1;
            }
        ],
        execute: function () {
            exports_36("gameOverPageHandle", gameOverPageHandle = /** @class */ (function (_super) {
                __extends(gameOverPageHandle, _super);
                function gameOverPageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                gameOverPageHandle.prototype.onPlay = function () {
                };
                gameOverPageHandle.prototype.update = function (delta) {
                };
                gameOverPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], gameOverPageHandle.prototype, "share", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], gameOverPageHandle.prototype, "next", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], gameOverPageHandle.prototype, "challenge", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], gameOverPageHandle.prototype, "again", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], gameOverPageHandle.prototype, "ranking", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], gameOverPageHandle.prototype, "customsNum", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], gameOverPageHandle.prototype, "ballNum", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], gameOverPageHandle.prototype, "nextBallNum", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], gameOverPageHandle.prototype, "newRecord", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], gameOverPageHandle.prototype, "video", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], gameOverPageHandle.prototype, "video_goldNun", void 0);
                gameOverPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], gameOverPageHandle);
                return gameOverPageHandle;
            }(uiPage_6.uiPage)));
        }
    };
});
System.register("ui/continuePageHandle", ["ui/base/uiPage"], function (exports_37, context_37) {
    "use strict";
    var uiPage_7, continuePageHandle;
    var __moduleName = context_37 && context_37.id;
    return {
        setters: [
            function (uiPage_7_1) {
                uiPage_7 = uiPage_7_1;
            }
        ],
        execute: function () {
            exports_37("continuePageHandle", continuePageHandle = /** @class */ (function (_super) {
                __extends(continuePageHandle, _super);
                function continuePageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                continuePageHandle.prototype.onPlay = function () {
                };
                continuePageHandle.prototype.update = function (delta) {
                };
                continuePageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], continuePageHandle.prototype, "continue_", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], continuePageHandle.prototype, "no_", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], continuePageHandle.prototype, "info", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], continuePageHandle.prototype, "head", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], continuePageHandle.prototype, "countDown", void 0);
                continuePageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], continuePageHandle);
                return continuePageHandle;
            }(uiPage_7.uiPage)));
        }
    };
});
System.register("ui/prizePageHandle", ["ui/base/uiPage"], function (exports_38, context_38) {
    "use strict";
    var uiPage_8, prizePageHandle;
    var __moduleName = context_38 && context_38.id;
    return {
        setters: [
            function (uiPage_8_1) {
                uiPage_8 = uiPage_8_1;
            }
        ],
        execute: function () {
            exports_38("prizePageHandle", prizePageHandle = /** @class */ (function (_super) {
                __extends(prizePageHandle, _super);
                function prizePageHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.aRound = (Math.PI / 180) * 360;
                    _this.angleSpeed = (Math.PI / 180) * 90;
                    return _this;
                }
                prizePageHandle.prototype.onPlay = function () {
                };
                prizePageHandle.prototype.update = function (delta) {
                    this.aureole.localRotate = this.aureole.localRotate + (this.angleSpeed * delta);
                    this.aureole.localRotate = this.aureole.localRotate % this.aRound;
                    this.aureole.markDirty();
                };
                prizePageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], prizePageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], prizePageHandle.prototype, "video", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], prizePageHandle.prototype, "customs", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], prizePageHandle.prototype, "info", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], prizePageHandle.prototype, "aureole", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], prizePageHandle.prototype, "video_x3", void 0);
                prizePageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], prizePageHandle);
                return prizePageHandle;
            }(uiPage_8.uiPage)));
        }
    };
});
System.register("ui/victoryPagehandle", ["ui/base/uiPage"], function (exports_39, context_39) {
    "use strict";
    var uiPage_9, victoryPagehandle;
    var __moduleName = context_39 && context_39.id;
    return {
        setters: [
            function (uiPage_9_1) {
                uiPage_9 = uiPage_9_1;
            }
        ],
        execute: function () {
            exports_39("victoryPagehandle", victoryPagehandle = /** @class */ (function (_super) {
                __extends(victoryPagehandle, _super);
                function victoryPagehandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.time = 2;
                    _this.ctime = 3;
                    _this.isc = false;
                    return _this;
                }
                victoryPagehandle_1 = victoryPagehandle;
                victoryPagehandle.prototype.onPlay = function () {
                };
                victoryPagehandle.prototype.update = function (delta) {
                    this.ctime += delta;
                    if (this.ctime >= this.time) {
                        if (this.isc) {
                            victoryPagehandle_1.call_back();
                            this.isc = false;
                        }
                    }
                };
                victoryPagehandle.prototype.remove = function () {
                };
                var victoryPagehandle_1;
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], victoryPagehandle.prototype, "Image", void 0);
                victoryPagehandle = victoryPagehandle_1 = __decorate([
                    m4m.reflect.node2DComponent
                ], victoryPagehandle);
                return victoryPagehandle;
            }(uiPage_9.uiPop)));
        }
    };
});
System.register("ui/pages/victoryPage", ["ui/base/uiPage"], function (exports_40, context_40) {
    "use strict";
    var uiPage_10, victoryPage;
    var __moduleName = context_40 && context_40.id;
    return {
        setters: [
            function (uiPage_10_1) {
                uiPage_10 = uiPage_10_1;
            }
        ],
        execute: function () {
            exports_40("victoryPage", victoryPage = /** @class */ (function () {
                //加载loading页面  page
                function victoryPage() {
                    this.inited = false;
                }
                victoryPage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_10.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new victoryPage();
                                    this._instance.init();
                                    uiPage_10.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                victoryPage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_10.loadTool.PagePrefeb_map.get(victoryPage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("victoryPagehandle");
                    // this.handle.call_back = this.call_back.bind(this);
                    this.animation = this.handle.Image.transform.getComponent("uiScaleAnimation");
                    this.inited = true;
                };
                /*  call_back(call: Function) {
                     if(  this.handle.isc&&this.handle.ctime>=this.handle.time){
                          call();
                     }
                  }*/
                victoryPage.prototype.show = function () {
                    this.handle.ctime = 0;
                    this.handle.isc = true;
                    this.handle.show();
                    this.playAnimation();
                };
                victoryPage.prototype.playAnimation = function () {
                    console.log(this.animation);
                    if (this.animation) {
                        this.animation.play();
                    }
                };
                victoryPage.prototype.hide = function () {
                    this.handle.hide();
                };
                victoryPage.prefabName = "victory_page"; //依赖的 预设体 资源
                victoryPage.atlasList = ["victory"]; //依赖的 图集资源
                return victoryPage;
            }()));
        }
    };
});
System.register("ui/pages/prizePage", ["ui/base/uiPage", "stageMgr", "GameMgr", "ui/pages/gameOverPage", "stringMgr", "ui/pages/victoryPage", "ui/pages/inGamePage", "Tool/joinTool", "Tool/tdTool", "audio/AudioMgr"], function (exports_41, context_41) {
    "use strict";
    var uiPage_11, stageMgr_3, GameMgr_16, gameOverPage_1, stringMgr_1, victoryPage_1, inGamePage_2, joinTool_2, tdTool_3, AudioMgr_3, prizePage;
    var __moduleName = context_41 && context_41.id;
    return {
        setters: [
            function (uiPage_11_1) {
                uiPage_11 = uiPage_11_1;
            },
            function (stageMgr_3_1) {
                stageMgr_3 = stageMgr_3_1;
            },
            function (GameMgr_16_1) {
                GameMgr_16 = GameMgr_16_1;
            },
            function (gameOverPage_1_1) {
                gameOverPage_1 = gameOverPage_1_1;
            },
            function (stringMgr_1_1) {
                stringMgr_1 = stringMgr_1_1;
            },
            function (victoryPage_1_1) {
                victoryPage_1 = victoryPage_1_1;
            },
            function (inGamePage_2_1) {
                inGamePage_2 = inGamePage_2_1;
            },
            function (joinTool_2_1) {
                joinTool_2 = joinTool_2_1;
            },
            function (tdTool_3_1) {
                tdTool_3 = tdTool_3_1;
            },
            function (AudioMgr_3_1) {
                AudioMgr_3 = AudioMgr_3_1;
            }
        ],
        execute: function () {
            exports_41("prizePage", prizePage = /** @class */ (function () {
                //通关奖励面板
                function prizePage() {
                    this.inited = false;
                    this.minDiamond = 5;
                    this.Vtrigger = false;
                }
                prizePage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_11.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new prizePage();
                                    this._instance.init();
                                    uiPage_11.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                prizePage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_11.loadTool.PagePrefeb_map.get(prizePage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("prizePageHandle");
                    //点击过滤
                    var fullBtn = this.handle.transform.getComponent("button");
                    fullBtn.addListener(m4m.event.UIEventEnum.PointerClick, function () { }, this);
                    fullBtn.addListener(m4m.event.UIEventEnum.PointerDown, function () { }, this);
                    //事件
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.video.addListener(m4m.event.UIEventEnum.PointerClick, this.onSeeVideoClick, this);
                    this.handle.video_x3.addListener(m4m.event.UIEventEnum.PointerClick, this.onX_3SeeVideoClick, this);
                    this.inited = true;
                };
                /**
                 * @param diamond 钻石
                 * @paran  victory 是否通关了
                 */
                prizePage.prototype.setInfo = function (diamond, victory) {
                    this.victory = victory;
                    if (diamond < this.minDiamond) {
                        this.end();
                    }
                    // let l = levelMgr.levels[customs];
                    //领取一次金币
                    //  this.setDiamondNum(l.reward);
                    this.setDiamondNum(diamond);
                    this.handle.video_x3.transform.visible = victory;
                    this.handle.video.transform.visible = !victory;
                    //this.prizeDiamond(this.diamond);
                    //this.handle.customs.text = stringMgr.benju+stringMgr.gain+ (customs + 1) + stringMgr.diamond;
                };
                /**
              * @param diamond 钻石
             
              */
                prizePage.prototype.setDiamondNum = function (diamond) {
                    this.diamond = diamond;
                    this.handle.info.text = stringMgr_1.stringMgr.benju + stringMgr_1.stringMgr.gain + diamond + stringMgr_1.stringMgr.diamond;
                };
                /**
                 *  2x看视频
                 */
                prizePage.prototype.onSeeVideoClick = function () {
                    var _this = this;
                    AudioMgr_3.AudioMgr.Stop("environment.mp3");
                    // AudioMgr.Stop();
                    //播放按钮声音
                    AudioMgr_3.AudioMgr.Play("touch.mp3");
                    AudioMgr_3.AudioMgr.setMute(true);
                    console.log("再来一次!");
                    this.Vtrigger = false;
                    joinTool_2.joinTool.watchVideo(function (success) {
                        var _a;
                        if (!success)
                            return;
                        if (_this.Vtrigger)
                            return;
                        _this.Vtrigger = true;
                        //看视频成功
                        //看完视频再领取一次钻石
                        //临时 处理 ，直接领取
                        _this.prizeDiamond(_this.diamond); //再领一次 == * 2
                        _this.end();
                        AudioMgr_3.AudioMgr.setMute(!GameMgr_16.GameMgr.swSound);
                        //回调成功
                        joinTool_2.joinTool.tdcustomEvent(tdTool_3.tdTool.ClickEvent, tdTool_3.tdTool.ClickEvent, (_a = {}, _a[tdTool_3.tdTool.LoseWatchAdToGetDouble] = 19, _a)); //数据埋点
                    });
                };
                /**
                *  3x看视频
                */
                prizePage.prototype.onX_3SeeVideoClick = function () {
                    var _this = this;
                    AudioMgr_3.AudioMgr.Stop("environment.mp3");
                    AudioMgr_3.AudioMgr.setMute(true);
                    //播放按钮声音
                    AudioMgr_3.AudioMgr.Play("touch.mp3");
                    AudioMgr_3.AudioMgr.stopAll();
                    console.log("再来一次!");
                    this.Vtrigger = false;
                    joinTool_2.joinTool.watchVideo(function (success) {
                        var _a;
                        if (!success)
                            return;
                        if (_this.Vtrigger)
                            return;
                        _this.Vtrigger = true;
                        //看视频成功
                        //看完视频再领取一次钻石
                        //临时 处理 ，直接领取
                        _this.prizeDiamond(_this.diamond * 2); //
                        _this.end();
                        // //回调成功
                        AudioMgr_3.AudioMgr.setMute(!GameMgr_16.GameMgr.swSound);
                        joinTool_2.joinTool.tdcustomEvent(tdTool_3.tdTool.ClickEvent, tdTool_3.tdTool.ClickEvent, (_a = {}, _a[tdTool_3.tdTool.WinWatchAdToGetTriple] = 20, _a)); //数据埋点
                    });
                };
                /**
                 * 领取金币
                 */
                prizePage.prototype.prizeDiamond = function (diamond) {
                    AudioMgr_3.AudioMgr.stopAll();
                    // inGamePage.Instance.collectCoinsAnim_save(diamond);
                    inGamePage_2.inGamePage.Instance().then(function (ins) {
                        ins.collectCoinsAnim_save(diamond);
                    });
                };
                /**
                 * 关闭
                 */
                prizePage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_3.AudioMgr.Play("touch.mp3");
                    console.log("再来一次!");
                    this.end();
                };
                prizePage.prototype.end = function () {
                    var _this = this;
                    this.hide();
                    AudioMgr_3.AudioMgr.Stop("environment.mp3");
                    victoryPage_1.victoryPage.Instance().then(function (ins) {
                        ins.hide();
                    });
                    gameOverPage_1.gameOverPage.Instance().then(function (ins) {
                        ins.show();
                        ins.isPassShow(_this.victory);
                    });
                    stageMgr_3.stageMgr.hideCPLevelFx();
                };
                prizePage.prototype.show = function () {
                    console.log("音乐停止!");
                    this.handle.video.transform.visible = true;
                    this.handle.show();
                };
                prizePage.prototype.hide = function () {
                    this.handle.hide();
                };
                prizePage.prefabName = "prize_page"; //依赖的 预设体 资源
                prizePage.atlasList = ["prize"]; //依赖的 图集资源
                return prizePage;
            }()));
        }
    };
});
System.register("ui/pages/continuePage", ["ui/base/uiPage", "GameMgr", "MatMgr", "stageMgr", "role/playerMgr", "ui/pages/prizePage", "Tool/joinTool", "Tool/tdTool", "Tools/FrameMgr", "audio/AudioMgr"], function (exports_42, context_42) {
    "use strict";
    var uiPage_12, GameMgr_17, MatMgr_6, stageMgr_4, playerMgr_2, prizePage_1, joinTool_3, tdTool_4, FrameMgr_4, AudioMgr_4, continuePage;
    var __moduleName = context_42 && context_42.id;
    return {
        setters: [
            function (uiPage_12_1) {
                uiPage_12 = uiPage_12_1;
            },
            function (GameMgr_17_1) {
                GameMgr_17 = GameMgr_17_1;
            },
            function (MatMgr_6_1) {
                MatMgr_6 = MatMgr_6_1;
            },
            function (stageMgr_4_1) {
                stageMgr_4 = stageMgr_4_1;
            },
            function (playerMgr_2_1) {
                playerMgr_2 = playerMgr_2_1;
            },
            function (prizePage_1_1) {
                prizePage_1 = prizePage_1_1;
            },
            function (joinTool_3_1) {
                joinTool_3 = joinTool_3_1;
            },
            function (tdTool_4_1) {
                tdTool_4 = tdTool_4_1;
            },
            function (FrameMgr_4_1) {
                FrameMgr_4 = FrameMgr_4_1;
            },
            function (AudioMgr_4_1) {
                AudioMgr_4 = AudioMgr_4_1;
            }
        ],
        execute: function () {
            exports_42("continuePage", continuePage = /** @class */ (function () {
                //继续
                function continuePage() {
                    this.inited = false;
                    this.Vtrigger = false;
                    this.isStop = true;
                    this.showPoint = 1.2; //出现图标的时间
                    this.waiteTime = 8 + this.showPoint; //总共等待的时长
                    this.noShowWaiteT = 0.5; //跳过按钮出现等待时间
                    this.count = 0;
                }
                continuePage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_12.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new continuePage();
                                    this._instance.init();
                                    uiPage_12.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                continuePage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_12.loadTool.PagePrefeb_map.get(continuePage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("continuePageHandle");
                    //事件
                    this.handle.continue_.addListener(m4m.event.UIEventEnum.PointerClick, this.onContinueGameClick, this);
                    this.handle.no_.addListener(m4m.event.UIEventEnum.PointerClick, this.onNoClick, this);
                    // this.handle.setting.addListener(m4m.event.UIEventEnum.PointerClick, this.onSettingClick, this);
                    this.inited = true;
                    FrameMgr_4.FrameMgr.Add(this.update, this);
                };
                continuePage.prototype.update = function (d) {
                    this.updateReLiveBtn(d);
                };
                continuePage.prototype.setInfo = function (info) {
                    this.handle.info.text = info;
                };
                //设置
                continuePage.prototype.onSettingClick = function () {
                    //  setingPage.Instance.show();
                };
                //游戏继续
                continuePage.prototype.onContinueGameClick = function () {
                    var _a;
                    var _this = this;
                    //播放按钮声音
                    AudioMgr_4.AudioMgr.Play("touch.mp3");
                    joinTool_3.joinTool.tdcustomEvent(tdTool_4.tdTool.ClickEvent, tdTool_4.tdTool.ClickEvent, (_a = {}, _a[tdTool_4.tdTool.LoseWatchAdToContinue] = 17, _a)); //数据埋点 
                    GameMgr_17.GameMgr.enginePause();
                    this.Vtrigger = false;
                    joinTool_3.joinTool.watchVideo(function (success) {
                        GameMgr_17.GameMgr.engineReplay();
                        if (!success)
                            return;
                        if (_this.Vtrigger)
                            return;
                        _this.Vtrigger = true;
                        _this.isStop = true;
                        console.log("我复活啦!");
                        // inGamePage.Instance.setShowItem(showItem.allShow);
                        // inGamePage.Instance().then((ins) => {
                        //     ins.setShowItem(showItem.allShow);
                        // });
                        joinTool_3.joinTool.hide_item_Ranks();
                        console.log("游戏继续");
                        _this.relivePlayer();
                    });
                };
                //复活按钮倒计时
                continuePage.prototype.updateReLiveBtn = function (d) {
                    if (this.isStop)
                        return;
                    this.count += d;
                    var hd = this.handle;
                    if (this.count > this.showPoint && this.count <= this.waiteTime) {
                        //跳过按钮show
                        if (!hd.no_.transform.visible && this.count > (this.showPoint + this.noShowWaiteT)) {
                            hd.no_.transform.visible = true;
                        }
                        //复活按钮show
                        if (!hd.continue_.transform.visible)
                            hd.continue_.transform.visible = true;
                        hd.countDown.fillAmmount = Math.max(1 - ((this.count - this.showPoint) / (this.waiteTime - this.showPoint)), 0);
                    }
                    else if (this.count > this.waiteTime) {
                        this.onNoClick();
                    }
                };
                continuePage.prototype.hideAllBtn = function () {
                    this.handle.continue_.transform.visible = false;
                    this.handle.no_.transform.visible = false;
                };
                //复活玩家
                continuePage.prototype.relivePlayer = function () {
                    continuePage.recoverCount++;
                    // inGamePage.Instance.show();
                    // inGamePage.Instance().then((ins) => {
                    //     ins.show();
                    // });
                    MatMgr_6.MatMgr.relive();
                    playerMgr_2.playerMgr.relive();
                    // this.show();
                    AudioMgr_4.AudioMgr.Play("environment.mp3", true);
                };
                //点击拒绝
                continuePage.prototype.onNoClick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_4.AudioMgr.Play("touch.mp3");
                    this.isStop = true;
                    var currentlevel = stageMgr_4.stageMgr.currentLevel.id + 1; // 当前关卡 (1 indexed)
                    var prole = playerMgr_2.playerMgr.getRole();
                    stageMgr_4.stageMgr.settlement(currentlevel, stageMgr_4.stageMgr.dieRanking); //第一次死亡不 复活结算
                    joinTool_3.joinTool.hide_nextSurpass();
                    // gameOverPage.Instance.show();
                    prizePage_1.prizePage.Instance().then(function (ins) {
                        ins.show();
                        ins.setInfo(stageMgr_4.stageMgr.gameDiamond, false);
                    });
                    // saveTool.d
                    joinTool_3.joinTool.tdcustomEvent(tdTool_4.tdTool.ClickEvent, tdTool_4.tdTool.ClickEvent, (_a = {}, _a[tdTool_4.tdTool.LoseNoThanks] = 16, _a)); //数据埋点
                };
                /**
                 * 显示下一个超越的对象
                 * @param score 分数
                 */
                continuePage.prototype.setMyScore_showNext = function (score) {
                    //   if (continuePage.recoverCount < ) {
                    joinTool_3.joinTool.nextSurpass(score);
                    //   }
                };
                continuePage.prototype.show = function () {
                    this.hideAllBtn();
                    this.isStop = false;
                    this.count = 0;
                    AudioMgr_4.AudioMgr.Stop("environment.mp3");
                    // inGamePage.Instance.setShowItem(showItem.continu);
                    // inGamePage.Instance().then((ins) => {
                    //     ins.setShowItem(showItem.continu);
                    // });
                    var score = stageMgr_4.stageMgr.getScore(GameMgr_17.GameMgr.currentLevel + 1, playerMgr_2.playerMgr.getRole().rankNum);
                    //   console.log(GameMgr.currentLevel + 1 + "----" + playerMgr.getRole().rankNum + "------" + score);
                    this.setMyScore_showNext(score);
                    this.handle.show();
                };
                continuePage.prototype.hide = function () {
                    this.handle.hide();
                };
                continuePage.prefabName = "continue_page"; //依赖的 预设体 资源
                continuePage.atlasList = ["continue"]; //依赖的 图集资源
                continuePage.recoverCount = 0; //复活次数
                return continuePage;
            }()));
        }
    };
});
System.register("ui/unlockPageHandle", ["ui/base/uiPage"], function (exports_43, context_43) {
    "use strict";
    var uiPage_13, unlockPageHandle;
    var __moduleName = context_43 && context_43.id;
    return {
        setters: [
            function (uiPage_13_1) {
                uiPage_13 = uiPage_13_1;
            }
        ],
        execute: function () {
            exports_43("unlockPageHandle", unlockPageHandle = /** @class */ (function (_super) {
                __extends(unlockPageHandle, _super);
                function unlockPageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                unlockPageHandle.prototype.onPlay = function () {
                };
                unlockPageHandle.prototype.update = function (delta) {
                };
                unlockPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], unlockPageHandle.prototype, "bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], unlockPageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], unlockPageHandle.prototype, "insufficient", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], unlockPageHandle.prototype, "purchase", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], unlockPageHandle.prototype, "acquisition", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], unlockPageHandle.prototype, "skin", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], unlockPageHandle.prototype, "theme", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], unlockPageHandle.prototype, "video", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "progressbar")
                ], unlockPageHandle.prototype, "video_pd", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], unlockPageHandle.prototype, "seeVideo", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], unlockPageHandle.prototype, "seeVideoNum", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], unlockPageHandle.prototype, "video_bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], unlockPageHandle.prototype, "purchase_bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], unlockPageHandle.prototype, "price", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], unlockPageHandle.prototype, "skinInfo", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], unlockPageHandle.prototype, "share_bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], unlockPageHandle.prototype, "skin_icon", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], unlockPageHandle.prototype, "theme_icon", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], unlockPageHandle.prototype, "canBuy", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], unlockPageHandle.prototype, "canBuy_bt", void 0);
                unlockPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], unlockPageHandle);
                return unlockPageHandle;
            }(uiPage_13.uiPop)));
        }
    };
});
System.register("ui/inviteFriendsPageHandle", ["ui/base/uiPage"], function (exports_44, context_44) {
    "use strict";
    var uiPage_14, inviteFriendsPageHandle;
    var __moduleName = context_44 && context_44.id;
    return {
        setters: [
            function (uiPage_14_1) {
                uiPage_14 = uiPage_14_1;
            }
        ],
        execute: function () {
            exports_44("inviteFriendsPageHandle", inviteFriendsPageHandle = /** @class */ (function (_super) {
                __extends(inviteFriendsPageHandle, _super);
                function inviteFriendsPageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                inviteFriendsPageHandle.prototype.onPlay = function () {
                };
                inviteFriendsPageHandle.prototype.update = function (delta) {
                };
                inviteFriendsPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], inviteFriendsPageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], inviteFriendsPageHandle.prototype, "invite", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], inviteFriendsPageHandle.prototype, "info", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], inviteFriendsPageHandle.prototype, "head", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], inviteFriendsPageHandle.prototype, "prize", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], inviteFriendsPageHandle.prototype, "line", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], inviteFriendsPageHandle.prototype, "num", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], inviteFriendsPageHandle.prototype, "bt", void 0);
                inviteFriendsPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], inviteFriendsPageHandle);
                return inviteFriendsPageHandle;
            }(uiPage_14.uiPop)));
        }
    };
});
System.register("ui/pages/inviteFriendsPage", ["ui/base/uiPage", "inviteMgr", "GameMgr", "skinMgr", "ui/pages/videoPrizePage", "ui/pages/homePage", "ui/skinBoxHandle", "ui/pages/unlockPage", "Tool/commTool", "Tool/joinTool", "Tool/wxTool", "audio/AudioMgr"], function (exports_45, context_45) {
    "use strict";
    var uiPage_15, inviteMgr_2, GameMgr_18, skinMgr_2, videoPrizePage_1, homePage_1, skinBoxHandle_1, unlockPage_1, commTool_6, joinTool_4, wxTool_7, AudioMgr_5, inviteFriendsPage;
    var __moduleName = context_45 && context_45.id;
    return {
        setters: [
            function (uiPage_15_1) {
                uiPage_15 = uiPage_15_1;
            },
            function (inviteMgr_2_1) {
                inviteMgr_2 = inviteMgr_2_1;
            },
            function (GameMgr_18_1) {
                GameMgr_18 = GameMgr_18_1;
            },
            function (skinMgr_2_1) {
                skinMgr_2 = skinMgr_2_1;
            },
            function (videoPrizePage_1_1) {
                videoPrizePage_1 = videoPrizePage_1_1;
            },
            function (homePage_1_1) {
                homePage_1 = homePage_1_1;
            },
            function (skinBoxHandle_1_1) {
                skinBoxHandle_1 = skinBoxHandle_1_1;
            },
            function (unlockPage_1_1) {
                unlockPage_1 = unlockPage_1_1;
            },
            function (commTool_6_1) {
                commTool_6 = commTool_6_1;
            },
            function (joinTool_4_1) {
                joinTool_4 = joinTool_4_1;
            },
            function (wxTool_7_1) {
                wxTool_7 = wxTool_7_1;
            },
            function (AudioMgr_5_1) {
                AudioMgr_5 = AudioMgr_5_1;
            }
        ],
        execute: function () {
            exports_45("inviteFriendsPage", inviteFriendsPage = /** @class */ (function () {
                //邀请
                function inviteFriendsPage() {
                    this.inited = false;
                }
                inviteFriendsPage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_15.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new inviteFriendsPage();
                                    this._instance.init();
                                    uiPage_15.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                inviteFriendsPage.prototype.init = function () {
                    var _this = this;
                    if (this.inited)
                        return;
                    var pfb = uiPage_15.loadTool.PagePrefeb_map.get(inviteFriendsPage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("inviteFriendsPageHandle");
                    //事件
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.bt.addListener(m4m.event.UIEventEnum.PointerDown, function () {
                        _this.handle.invite.addListener(m4m.event.UIEventEnum.PointerClick, _this.onInviteClick, _this);
                    }, this);
                    //
                    this.initData();
                    this.inited = true;
                    //  this.handle.info
                    homePage_1.homePage.Instance().then(function (ins) {
                        inviteFriendsPage.homeI = ins;
                    });
                    //  prize
                    /* let l = inviteMgr.prize[GameMgr.shareActivity];
                     let src = "";
                     switch (l.type) {
                         case 1:
                             src = GameMgr.skinIconPath + skinMgr.getSkinInfo(l.id).headPortrait;
                             break;
                         case 2:
                             src = GameMgr.themeIconPath + themeMgr.themes[l.id].icon;
                             break;
                     }*/
                    var l = true;
                    skinMgr_2.skinMgr.shareSkins.forEach(function (obj) {
                        if (GameMgr_18.GameMgr.unlockSkins[obj.id] != true && l != false) {
                            _this.loadRwaImg2D(_this.handle.prize, "".concat(GameMgr_18.GameMgr.skinIconPath).concat(obj.headPortrait));
                            l = false;
                        }
                    });
                    if (l) {
                        this.loadRwaImg2D(this.handle.prize, "res/art/skin/share/share_pic_coin3.png");
                    }
                };
                /**
                 * 设置已经邀请的第X个好友的信息
                 * @param index 第X个好友
                 * @param head  第X个好友好友的头像
                 */
                inviteFriendsPage.prototype.setInvite = function (index, head) {
                    if (head === void 0) { head = "https://s.gravatar.com/avatar/e67aef28a1b943b6a8955219d46763c0?s=45"; }
                    var headRwaImg = this.handle.head.children[index].getComponent("rawImage2D");
                    this.handle.line.children[index].visible = true;
                    var num = (inviteFriendsPage.maxInvite - (index + 1)) + "";
                    this.handle.num.text = num;
                    inviteFriendsPage.homeI.setCanInviteNum(num);
                    //    homePage.Instance.
                    this.loadRwaImg2D(headRwaImg, head);
                    if (inviteFriendsPage.maxInvite == index + 1) {
                        var img = this.handle.invite.transform.getComponent("image2D");
                        img.sprite = GameMgr_18.GameMgr.assetMgr.getAssetByName("invite.atlas.json_share_btn_yaoqing0");
                        img.transform.markDirty();
                    }
                };
                /**
                 * 初始化基本信息
                 */
                inviteFriendsPage.prototype.initData = function () {
                    var c = this.handle.info.children;
                    for (var i = 0; i < c.length; i++) {
                        var text = c[i].getComponent("label");
                        text.text = inviteMgr_2.inviteMgr.gold[i] + "";
                    }
                };
                /**
                 * 加载外部图片
                 *  @param rwaImg 需要加载外部图片的组件
                 *  @param  src 外部图片地址
                 */
                inviteFriendsPage.prototype.loadRwaImg2D = function (rwaImg, src) {
                    if (commTool_6.commTool.loadedTexsDic.ContainsKey(src)) {
                        rwaImg.image = commTool_6.commTool.loadedTexsDic.GetValue(src);
                    }
                    else {
                        commTool_6.commTool.ImgByLoad(src, function (_tex) {
                            if (_tex) {
                                commTool_6.commTool.loadedTexsDic.Add(src, _tex);
                                rwaImg.image = _tex;
                            }
                        });
                    }
                };
                /**
                 * 关闭界面
                 */
                inviteFriendsPage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_5.AudioMgr.Play("touch.mp3");
                    this.hide();
                };
                inviteFriendsPage.prototype.onInviteClick = function () {
                    if (inviteFriendsPage.inviteNum == inviteFriendsPage.maxInvite)
                        return;
                    //播放按钮声音
                    AudioMgr_5.AudioMgr.Play("touch.mp3");
                    joinTool_4.joinTool.invitation(wxTool_7.wxTool.token);
                };
                /**
                 * 领取奖励
                 */
                inviteFriendsPage.sharels = function () {
                    if (!inviteFriendsPage.isContinueRefresh)
                        return;
                    if (!wxTool_7.wxTool.wx || !wxTool_7.wxTool.token || wxTool_7.wxTool.token == "undefined")
                        return;
                    console.log("在请求 好友邀请数据!!!");
                    wxTool_7.wxTool._loadFun(GameMgr_18.GameMgr.DNS_AND_PORT + "/sharels?token=" + wxTool_7.wxTool.token, function (res) {
                        inviteFriendsPage.array = res.data.body;
                        console.log(inviteFriendsPage.array.length + "长度");
                        if (inviteFriendsPage.array.length > 0) {
                            inviteFriendsPage.isContinueRefresh = false;
                            inviteFriendsPage.Instance().then(function (ins) {
                                ins.ss();
                            });
                        }
                    }, function () {
                        //return;
                    });
                };
                //显示头像及领取
                inviteFriendsPage.prototype.ss = function () {
                    /* if (inviteFriendsPage.array.length == inviteFriendsPage.inviteNum && inviteFriendsPage.inviteNum != inviteFriendsPage.maxInvite) {
                         inviteFriendsPage.isContinueRefresh = true;
                     }*/
                    //是否有邀请成功的人
                    var _this = this;
                    var self = this;
                    if (inviteFriendsPage.array.length > inviteFriendsPage.inviteNum && inviteFriendsPage.inviteNum < inviteFriendsPage.maxInvite && inviteFriendsPage.homeI.handle.transform.visible == true) {
                        var item_1 = inviteFriendsPage.array[inviteFriendsPage.inviteNum];
                        this.setInvite(inviteFriendsPage.inviteNum, item_1.avataUrl);
                        // if (inviteFriendsPage.cacheInviteFriendsPage) {
                        // }
                        // else {
                        //     inviteFriendsPage.Instance().then(ins => {
                        //         ins.setInvite(inviteFriendsPage.inviteNum, item.avataUrl);
                        //         inviteFriendsPage.cacheInviteFriendsPage = ins;
                        //     });
                        // }
                        //是否未领取金币
                        if (!item_1.isAcquire) {
                            //  console.log("开始领取金币!!!");
                            if (wxTool_7.wxTool.token == "" || wxTool_7.wxTool.token == undefined || wxTool_7.wxTool.token == "undefined")
                                return;
                            console.log(GameMgr_18.GameMgr.DNS_AND_PORT + "/prize?token=".concat(wxTool_7.wxTool.token, "&time=").concat(item_1.time, "&hello=").concat(item_1.token));
                            //领取金币
                            if (wxTool_7.wxTool.token != undefined && wxTool_7.wxTool.token != "")
                                wxTool_7.wxTool._loadFun(GameMgr_18.GameMgr.DNS_AND_PORT + "/prize?token=".concat(wxTool_7.wxTool.token, "&time=").concat(item_1.time, "&hello=").concat(item_1.token), function (res) {
                                    var gold = inviteMgr_2.inviteMgr.gold[inviteFriendsPage.inviteNum];
                                    //是否是新用户
                                    if (item_1.isNewPlayer) {
                                        //新用户金币*2
                                        gold = gold + gold;
                                    }
                                    if (gold == undefined || gold <= -1 || inviteFriendsPage.inviteNum == inviteFriendsPage.array.length) {
                                        inviteFriendsPage.isContinueRefresh = true;
                                    }
                                    else {
                                        //领取金币
                                        //  GameMgr.diamond += gold;
                                        //领取终级奖励
                                        if (inviteFriendsPage.inviteNum == inviteFriendsPage.maxInvite - 1) {
                                            var l_1 = true;
                                            skinMgr_2.skinMgr.shareSkins.forEach(function (obj) {
                                                if (GameMgr_18.GameMgr.unlockSkins[obj.id] != true && l_1 != false) {
                                                    l_1 = false;
                                                    GameMgr_18.GameMgr.unlockSkins[obj.id] = true;
                                                    //领取皮肤
                                                    unlockPage_1.unlockPage.Instance().then(function (ins) {
                                                        console.log("领取皮肤");
                                                        ins.show();
                                                        if (skinBoxHandle_1.skinBoxHandle.shareSkinBoxs.ContainsKey(obj.id)) {
                                                            ins.setShareSkinfo(obj, skinBoxHandle_1.skinBoxHandle.shareSkinBoxs.GetValue(obj.id));
                                                        }
                                                        else {
                                                            ins.setShareSkinfo(obj, null);
                                                        }
                                                    });
                                                }
                                            });
                                            //已经留取完了   领取金币
                                            if (l_1 == true) {
                                                //
                                                gold = gold + inviteFriendsPage.gold;
                                                console.log("领取金币");
                                            }
                                            GameMgr_18.GameMgr.shareActivity++;
                                            var img = _this.handle.invite.transform.getComponent("image2D");
                                            img.sprite = GameMgr_18.GameMgr.assetMgr.getAssetByName("invite.atlas.json_share_btn_yaoqing0");
                                            img.transform.markDirty();
                                            // if (inviteFriendsPage.cacheInviteFriendsPage) {
                                            // }
                                            // else {
                                            //     inviteFriendsPage.Instance().then(ins => {
                                            //         let img = ins.handle.invite.transform.getComponent("image2D") as m4m.framework.image2D;
                                            //         img.sprite = GameMgr.assetMgr.getAssetByName("invite.atlas.json_share_btn_yaoqing0") as m4m.framework.sprite;
                                            //         img.transform.markDirty();
                                            //         inviteFriendsPage.cacheInviteFriendsPage = ins;
                                            //     });
                                            // }
                                        }
                                        //saveTool.save(null, null);
                                        // GameMgr.diamond += gold;
                                        videoPrizePage_1.videoPrizePage.Instance().then(function (ins) {
                                            ins.show();
                                            ins.setInfo(gold, function () {
                                                if (inviteFriendsPage.inviteNum == inviteFriendsPage.maxInvite) {
                                                    inviteFriendsPage.isContinueRefresh = false;
                                                    // console.log("最后一个了停止获取");
                                                    //  return;
                                                }
                                                else if (inviteFriendsPage.array.length == inviteFriendsPage.inviteNum) {
                                                    // console.log("继续向服务器获取");
                                                    inviteFriendsPage.isContinueRefresh = true;
                                                }
                                                else {
                                                    // console.log("还没完接着判断!");
                                                    self.ss();
                                                }
                                            });
                                        });
                                        inviteFriendsPage.inviteNum++;
                                        inviteFriendsPage.i++;
                                    }
                                    //失败
                                }, function () {
                                    // console.log("失败了!!!");
                                    inviteFriendsPage.isContinueRefresh = true;
                                });
                        }
                        else {
                            // console.log("领取过的!!!");
                            inviteFriendsPage.inviteNum++;
                            inviteFriendsPage.i++;
                            // console.log(inviteFriendsPage.i + "-已领取的--" + inviteFriendsPage.inviteNum + "----" + inviteFriendsPage.array.length);
                            if (inviteFriendsPage.array.length == inviteFriendsPage.inviteNum) {
                                // console.log("领取过的领取完了!!!");
                                //  console.log("进来了!!!!!");
                                inviteFriendsPage.isContinueRefresh = true;
                            }
                            else {
                                // console.log("领取过的---还没完接着判断!");
                                self.ss();
                            }
                        }
                    }
                    else if (inviteFriendsPage.array.length != inviteFriendsPage.maxInvite) {
                        inviteFriendsPage.isContinueRefresh = true;
                        // console.log("接着获取!");
                    }
                };
                inviteFriendsPage.prototype.show = function () {
                    this.handle.show();
                };
                inviteFriendsPage.prototype.hide = function () {
                    this.handle.hide();
                };
                inviteFriendsPage.prefabName = "invite_page"; //依赖的 预设体 资源
                inviteFriendsPage.atlasList = ["invite"]; //依赖的 图集资源
                inviteFriendsPage.Pageurl = "".concat(GameMgr_18.GameMgr.atlasPath).concat(inviteFriendsPage.atlasList[0], "/resources/").concat(inviteFriendsPage.atlasList[0], ".atlas.json");
                //没有皮肤后开始留取金币 金币的数量
                inviteFriendsPage.gold = 100;
                //每天最多邀请
                inviteFriendsPage.maxInvite = 5;
                //当天已经邀请
                inviteFriendsPage.inviteNum = 0;
                inviteFriendsPage.array = [];
                inviteFriendsPage.isContinueRefresh = true;
                inviteFriendsPage.i = 0;
                return inviteFriendsPage;
            }()));
        }
    };
});
System.register("ui/skinBoxHandle", ["skinMgr", "GameMgr", "ui/pages/homePage", "ui/pages/inviteFriendsPage", "ui/pages/unlockPage", "role/playerMgr", "Data/Dictionary", "Tool/saveTool", "Tool/commTool", "audio/AudioMgr"], function (exports_46, context_46) {
    "use strict";
    var skinMgr_3, GameMgr_19, homePage_2, inviteFriendsPage_1, unlockPage_2, playerMgr_3, Dictionary_2, saveTool_3, commTool_7, AudioMgr_6, skinBoxHandle;
    var __moduleName = context_46 && context_46.id;
    return {
        setters: [
            function (skinMgr_3_1) {
                skinMgr_3 = skinMgr_3_1;
            },
            function (GameMgr_19_1) {
                GameMgr_19 = GameMgr_19_1;
            },
            function (homePage_2_1) {
                homePage_2 = homePage_2_1;
            },
            function (inviteFriendsPage_1_1) {
                inviteFriendsPage_1 = inviteFriendsPage_1_1;
            },
            function (unlockPage_2_1) {
                unlockPage_2 = unlockPage_2_1;
            },
            function (playerMgr_3_1) {
                playerMgr_3 = playerMgr_3_1;
            },
            function (Dictionary_2_1) {
                Dictionary_2 = Dictionary_2_1;
            },
            function (saveTool_3_1) {
                saveTool_3 = saveTool_3_1;
            },
            function (commTool_7_1) {
                commTool_7 = commTool_7_1;
            },
            function (AudioMgr_6_1) {
                AudioMgr_6 = AudioMgr_6_1;
            }
        ],
        execute: function () {
            exports_46("skinBoxHandle", skinBoxHandle = /** @class */ (function (_super) {
                __extends(skinBoxHandle, _super);
                function skinBoxHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                skinBoxHandle_2 = skinBoxHandle;
                skinBoxHandle.prototype.setDate = function (skin) {
                    this.setIcon(skin.headPortrait);
                    this.skin = skin;
                    if (this.skin.deblocking[0] == 3) {
                        skinBoxHandle_2.yearSkinBox = this;
                    }
                    else if (this.skin.deblocking[0] == 2) {
                        skinBoxHandle_2.shareSkinBoxs.Add(this.skin.id, this);
                    }
                    this.refresh();
                };
                /**
                 * 解锁条件
                 * @param type_ 解锁条件
                 */
                skinBoxHandle.prototype.setType = function (type_) {
                    if (type_[0] == 1 || type_[0] == 3) { //钻石购买
                        this.price.text = type_[1] + "";
                        this.click.addListener(m4m.event.UIEventEnum.PointerClick, this.onPurchaseAndWatchCVideoClick, this);
                    }
                    else if (type_[0] == 4) { //看视频
                        this.condition.sprite = GameMgr_19.GameMgr.assetMgr.getAssetByName("shop.atlas.json_shop_btn_shipin");
                        this.click.addListener(m4m.event.UIEventEnum.PointerClick, this.onPurchaseAndWatchCVideoClick, this);
                        var num_ = saveTool_3.saveTool.videoSkin_num[this.skin.id];
                        var num = num_ == null ? 0 : num_;
                        this.price.text = num + "/" + this.skin.deblocking[1];
                    }
                    else { //分享
                        this.price.transform.visible = false;
                        this.condition.sprite = GameMgr_19.GameMgr.assetMgr.getAssetByName("shop.atlas.json_shop_btn_fenxiaohuode");
                        this.click.addListener(m4m.event.UIEventEnum.PointerClick, this.onShareClick, this);
                    }
                };
                skinBoxHandle.prototype.refresh = function () {
                    this.price.horizontalOverflow = true;
                    if (!GameMgr_19.GameMgr.unlockSkins[this.skin.id]) {
                        this.setType(this.skin.deblocking);
                    }
                    else {
                        this.click.addListener(m4m.event.UIEventEnum.PointerClick, this.onUseClick, this);
                        this.price.transform.visible = false;
                        this.condition.transform.visible = false;
                    }
                    if (this.skin.id != GameMgr_19.GameMgr.currUseSkin) {
                        this.use.visible = false;
                    }
                    else {
                        this.use.visible = true;
                        skinBoxHandle_2.useSkinBox = this;
                    }
                };
                /**
                 * 分享
                 */
                skinBoxHandle.prototype.onShareClick = function (_a) {
                    var ev = _a[0];
                    this.onClick([ev]);
                    //播放按钮声音
                    AudioMgr_6.AudioMgr.Play("touch.mp3");
                    homePage_2.homePage.Instance().then(function (ins) {
                        ins.showAndCgInGame();
                    });
                    inviteFriendsPage_1.inviteFriendsPage.Instance().then(function (ins) {
                        ins.show();
                    });
                    console.log("分享");
                };
                /**
                 * 购买或者看视频
                 */
                skinBoxHandle.prototype.onPurchaseAndWatchCVideoClick = function (_a) {
                    var _this = this;
                    var ev = _a[0];
                    this.onClick([ev]);
                    //播放按钮声音
                    AudioMgr_6.AudioMgr.Play("touch.mp3");
                    console.log("购买或者看视频!");
                    unlockPage_2.unlockPage.Instance().then(function (ins) {
                        ins.show();
                        ins.setSkinfo(_this.skin, _this);
                    });
                };
                /**
                 * 使用
                 */
                skinBoxHandle.prototype.onUseClick = function (_a) {
                    var _this = this;
                    var ev = _a[0];
                    if (ev != null)
                        this.onClick([ev]);
                    if (GameMgr_19.GameMgr.currUseSkin == this.skin.id && this.skin.id != 0) {
                        //  homePage.Instance.show();
                        unlockPage_2.unlockPage.Instance().then(function (ins) {
                            ins.show();
                            ins.setSkinfo(_this.skin, _this);
                        });
                        return;
                    }
                    //  console.log("使用");
                    this.nowUse();
                };
                skinBoxHandle.prototype.nowUse = function () {
                    GameMgr_19.GameMgr.currUseSkin = this.skin.id;
                    playerMgr_3.playerMgr.changeSkin(this.skin.id);
                    if (skinBoxHandle_2.useSkinBox != null)
                        skinBoxHandle_2.useSkinBox.refresh();
                    skinBoxHandle_2.useSkinBox = this;
                    skinBoxHandle_2.useSkinBox.refresh();
                    saveTool_3.saveTool.save(null, null);
                };
                skinBoxHandle.prototype.onClick = function (_a) {
                    var ev = _a[0];
                    var pt = GameMgr_19.GameMgr.inputMgr.point;
                    var h = 325.00;
                    if (pt.y > h) {
                    }
                    else {
                        ev.eated = false; //不吃掉事件 而是往下传递
                    }
                };
                skinBoxHandle.prototype.setIcon = function (src) {
                    var _this = this;
                    src = skinMgr_3.skinMgr.iconPath + src;
                    if (commTool_7.commTool.loadedTexsDic.ContainsKey(src)) {
                        this.icon.image = commTool_7.commTool.loadedTexsDic.GetValue(src);
                    }
                    else {
                        commTool_7.commTool.ImgByLoad(src, function (_tex) {
                            if (_tex) {
                                commTool_7.commTool.loadedTexsDic.Add(src, _tex);
                                _this.icon.image = _tex;
                            }
                        });
                    }
                };
                skinBoxHandle.prototype.remove = function () {
                };
                var skinBoxHandle_2;
                skinBoxHandle.shareSkinBoxs = new Dictionary_2.Dictionary();
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], skinBoxHandle.prototype, "use", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], skinBoxHandle.prototype, "icon", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], skinBoxHandle.prototype, "condition", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], skinBoxHandle.prototype, "price", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], skinBoxHandle.prototype, "click", void 0);
                skinBoxHandle = skinBoxHandle_2 = __decorate([
                    m4m.reflect.node2DComponent
                ], skinBoxHandle);
                return skinBoxHandle;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("ui/themeBoxHandle", ["themeMgr", "GameMgr", "ui/pages/homePage", "ui/pages/unlockPage", "Tool/saveTool", "Tool/commTool"], function (exports_47, context_47) {
    "use strict";
    var themeMgr_3, GameMgr_20, homePage_3, unlockPage_3, saveTool_4, commTool_8, themeBoxHandle;
    var __moduleName = context_47 && context_47.id;
    return {
        setters: [
            function (themeMgr_3_1) {
                themeMgr_3 = themeMgr_3_1;
            },
            function (GameMgr_20_1) {
                GameMgr_20 = GameMgr_20_1;
            },
            function (homePage_3_1) {
                homePage_3 = homePage_3_1;
            },
            function (unlockPage_3_1) {
                unlockPage_3 = unlockPage_3_1;
            },
            function (saveTool_4_1) {
                saveTool_4 = saveTool_4_1;
            },
            function (commTool_8_1) {
                commTool_8 = commTool_8_1;
            }
        ],
        execute: function () {
            exports_47("themeBoxHandle", themeBoxHandle = /** @class */ (function (_super) {
                __extends(themeBoxHandle, _super);
                function themeBoxHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                themeBoxHandle_1 = themeBoxHandle;
                themeBoxHandle.prototype.setDate = function (theme) {
                    this.setIcon(theme.icon);
                    this.theme = theme;
                    if (this.theme.deblocking[0] == 3) {
                        themeBoxHandle_1.yearThmeBox = this;
                    }
                    this.refresh();
                };
                /**
                 * 解锁条件
                 * @param type_ 解锁条件
                 */
                themeBoxHandle.prototype.setType = function (type_) {
                    this.lock.visible = true;
                    if (type_[0] == 1 || type_[0] == 3) { //钻石购买
                        this.price.text = type_[1] + "";
                        this.click.addListener(m4m.event.UIEventEnum.PointerClick, this.onPurchaseClick, this);
                    }
                    else { //分享
                        this.price.transform.visible = false;
                        this.condition.sprite = GameMgr_20.GameMgr.assetMgr.getAssetByName("shop.atlas.json_shop_btn_fenxiaohuode");
                        this.click.addListener(m4m.event.UIEventEnum.PointerClick, this.onShareClick, this);
                    }
                };
                themeBoxHandle.prototype.refresh = function () {
                    if (!GameMgr_20.GameMgr.unlockTheme[this.theme.id]) {
                        this.setType(this.theme.deblocking);
                    }
                    else {
                        this.click.addListener(m4m.event.UIEventEnum.PointerClick, this.onUseClick, this);
                        this.price.transform.visible = false;
                        this.condition.transform.visible = false;
                        this.lock.visible = false;
                    }
                    if (this.theme.id != GameMgr_20.GameMgr.currUseTheme) {
                        this.use.visible = false;
                    }
                    else {
                        this.use.visible = true;
                        themeBoxHandle_1.useThemeBox = this;
                    }
                };
                /**
                 * 分享
                 */
                themeBoxHandle.prototype.onShareClick = function (_a) {
                    var ev = _a[0];
                    this.onClick([ev]);
                    homePage_3.homePage.Instance().then(function (ins) {
                        ins.showAndCgInGame();
                    });
                    // inviteFriendsPage.Instance.show();
                    console.log("分享");
                };
                /**
                 * 购买
                 */
                themeBoxHandle.prototype.onPurchaseClick = function (_a) {
                    var _this = this;
                    var ev = _a[0];
                    this.onClick([ev]);
                    unlockPage_3.unlockPage.Instance().then(function (ins) {
                        ins.show();
                        ins.setTheme(_this.theme, _this);
                    });
                };
                /**
                 * 使用
                 */
                themeBoxHandle.prototype.onUseClick = function (_a) {
                    var _this = this;
                    var ev = _a[0];
                    if (ev != null)
                        this.onClick([ev]);
                    if (GameMgr_20.GameMgr.currUseTheme == this.theme.id && this.theme.id != 0) {
                        unlockPage_3.unlockPage.Instance().then(function (ins) {
                            ins.show();
                            ins.setTheme(_this.theme, _this);
                        });
                        return;
                    }
                    //  console.log("使用");
                    this.nowUse();
                };
                themeBoxHandle.prototype.nowUse = function () {
                    GameMgr_20.GameMgr.currUseTheme = this.theme.id;
                    themeMgr_3.themeMgr.changeTheme(this.theme.id);
                    if (themeBoxHandle_1.useThemeBox != null)
                        themeBoxHandle_1.useThemeBox.refresh();
                    themeBoxHandle_1.useThemeBox = this;
                    themeBoxHandle_1.useThemeBox.refresh();
                    saveTool_4.saveTool.save(null, null);
                };
                themeBoxHandle.prototype.onClick = function (_a) {
                    var ev = _a[0];
                    var pt = GameMgr_20.GameMgr.inputMgr.point;
                    var h = 325.00;
                    if (pt.y > h) {
                    }
                    else {
                        ev.eated = false; //不吃掉事件 而是往下传递
                    }
                };
                themeBoxHandle.prototype.setIcon = function (src) {
                    var _this = this;
                    src = GameMgr_20.GameMgr.themeIconPath + src;
                    if (commTool_8.commTool.loadedTexsDic.ContainsKey(src)) {
                        this.icon.image = commTool_8.commTool.loadedTexsDic.GetValue(src);
                    }
                    else {
                        commTool_8.commTool.ImgByLoad(src, function (_tex) {
                            if (_tex) {
                                commTool_8.commTool.loadedTexsDic.Add(src, _tex);
                                _this.icon.image = _tex;
                            }
                        });
                    }
                };
                themeBoxHandle.prototype.remove = function () {
                };
                var themeBoxHandle_1;
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], themeBoxHandle.prototype, "use", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], themeBoxHandle.prototype, "icon", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], themeBoxHandle.prototype, "condition", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], themeBoxHandle.prototype, "price", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], themeBoxHandle.prototype, "click", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], themeBoxHandle.prototype, "lock", void 0);
                themeBoxHandle = themeBoxHandle_1 = __decorate([
                    m4m.reflect.node2DComponent
                ], themeBoxHandle);
                return themeBoxHandle;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("ui/skinShopPageHandle", ["ui/base/uiPage"], function (exports_48, context_48) {
    "use strict";
    var uiPage_16, skinShopPageHandle;
    var __moduleName = context_48 && context_48.id;
    return {
        setters: [
            function (uiPage_16_1) {
                uiPage_16 = uiPage_16_1;
            }
        ],
        execute: function () {
            exports_48("skinShopPageHandle", skinShopPageHandle = /** @class */ (function (_super) {
                __extends(skinShopPageHandle, _super);
                function skinShopPageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                skinShopPageHandle.prototype.onPlay = function () {
                };
                skinShopPageHandle.prototype.update = function (delta) {
                };
                skinShopPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], skinShopPageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], skinShopPageHandle.prototype, "top", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], skinShopPageHandle.prototype, "title", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], skinShopPageHandle.prototype, "box", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], skinShopPageHandle.prototype, "skin", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], skinShopPageHandle.prototype, "theme", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], skinShopPageHandle.prototype, "themeBox", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], skinShopPageHandle.prototype, "themeButton", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], skinShopPageHandle.prototype, "skinButton", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], skinShopPageHandle.prototype, "diamond_bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], skinShopPageHandle.prototype, "dial_bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], skinShopPageHandle.prototype, "video_goldNun", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], skinShopPageHandle.prototype, "bt", void 0);
                skinShopPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], skinShopPageHandle);
                return skinShopPageHandle;
            }(uiPage_16.uiPage)));
        }
    };
});
System.register("ui/pages/skinShopPage", ["ui/base/uiPage", "ui/pages/homePage", "skinMgr", "stageMgr", "themeMgr", "GameMgr", "configMgr", "ui/pages/videoPrizePage", "Tool/wxTool", "Tool/joinTool", "Tool/tdTool", "Tool/saveTool", "Tools/FrameMgr", "audio/AudioMgr"], function (exports_49, context_49) {
    "use strict";
    var uiPage_17, homePage_4, skinMgr_4, stageMgr_5, themeMgr_4, GameMgr_21, configMgr_4, videoPrizePage_2, wxTool_8, joinTool_5, tdTool_5, saveTool_5, FrameMgr_5, AudioMgr_7, skinShopPage;
    var __moduleName = context_49 && context_49.id;
    return {
        setters: [
            function (uiPage_17_1) {
                uiPage_17 = uiPage_17_1;
            },
            function (homePage_4_1) {
                homePage_4 = homePage_4_1;
            },
            function (skinMgr_4_1) {
                skinMgr_4 = skinMgr_4_1;
            },
            function (stageMgr_5_1) {
                stageMgr_5 = stageMgr_5_1;
            },
            function (themeMgr_4_1) {
                themeMgr_4 = themeMgr_4_1;
            },
            function (GameMgr_21_1) {
                GameMgr_21 = GameMgr_21_1;
            },
            function (configMgr_4_1) {
                configMgr_4 = configMgr_4_1;
            },
            function (videoPrizePage_2_1) {
                videoPrizePage_2 = videoPrizePage_2_1;
            },
            function (wxTool_8_1) {
                wxTool_8 = wxTool_8_1;
            },
            function (joinTool_5_1) {
                joinTool_5 = joinTool_5_1;
            },
            function (tdTool_5_1) {
                tdTool_5 = tdTool_5_1;
            },
            function (saveTool_5_1) {
                saveTool_5 = saveTool_5_1;
            },
            function (FrameMgr_5_1) {
                FrameMgr_5 = FrameMgr_5_1;
            },
            function (AudioMgr_7_1) {
                AudioMgr_7 = AudioMgr_7_1;
            }
        ],
        execute: function () {
            exports_49("skinShopPage", skinShopPage = /** @class */ (function () {
                //排行榜
                function skinShopPage() {
                    this.inited = false;
                    //打开的是否是皮肤
                    this.isOpenSkin = true;
                    this.Vtrigger = false;
                    /**          皮肤的东西       */
                    //小框高度
                    this.boxHeight = 0;
                    //小框宽度
                    this.boxWidth = 0;
                    this.boxInterval = 15;
                    //每行多少框
                    this.lineNumber = 3;
                    this.createIndex = 0;
                    this.createIndexxxx = 0;
                    this.createBoxY = 80.00;
                    this.createBoxX = 0;
                    this.pageHeight = 0;
                    this.opt = m4m.framework.layoutOption;
                    this.makedAll_skin = false;
                    this.makedAll_theme = false;
                    //用于保存皮肤框
                    this.skinItems = [];
                    //用于保存主题框
                    this.themeItems = [];
                    //下面是主题的东西
                    //小框高度
                    this.themeBoxHeight = 0;
                    //小框宽度
                    this.themeBoxWidth = 0;
                    //小框间距
                    this.themeBoxInterval = 15;
                    //每行多少框
                    this.themeLineNumber = 1;
                    this.themeCreateIndex = 0;
                    this.themeCreatexxx = 0;
                    this.themeCreateBoxY = 80.00;
                    this.themeCreateBoxX = 0;
                }
                skinShopPage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_17.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new skinShopPage();
                                    this._instance.init();
                                    uiPage_17.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                skinShopPage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_17.loadTool.PagePrefeb_map.get(skinShopPage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("skinShopPageHandle");
                    this.inited = true;
                    this.boxHeight = this.handle.box.transform.height;
                    this.boxWidth = this.handle.box.transform.width;
                    this.pageHeight = this.handle.transform.height;
                    this.themeBoxWidth = this.handle.themeBox.transform.width;
                    this.themeBoxHeight = this.handle.themeBox.transform.height;
                    ;
                    //事件
                    this.handle.bt.addListener(m4m.event.UIEventEnum.PointerDown, function () { }, this);
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.skinButton.addListener(m4m.event.UIEventEnum.PointerDown, this.onClickSkin, this);
                    this.handle.themeButton.addListener(m4m.event.UIEventEnum.PointerDown, this.onClickTheme, this);
                    this.handle.diamond_bt.addListener(m4m.event.UIEventEnum.PointerClick, this.onClickDiamond, this);
                    //this.handle.dial_bt.addListener(m4m.event.UIEventEnum.PointerClick, this.onClickDiamond, this)
                    this.themeimg_bt = this.handle.themeButton.transform.getComponent("image2D");
                    this.skinimg_bt = this.handle.skinButton.transform.getComponent("image2D");
                    this.handle.video_goldNun.text = "+" + configMgr_4.configMgr.watchVideo + "";
                    FrameMgr_5.FrameMgr.Add(this.update, this);
                    this.handle.onHide = function () {
                        if (stageMgr_5.stageMgr.stageRoot)
                            stageMgr_5.stageMgr.stageRoot.gameObject.visible = true;
                    };
                    /* if (wxTool.getStatusBarHeight() >= 40) {
             
                     }*/
                    this.handle.top.setLayoutValue(m4m.framework.layoutOption.TOP, wxTool_8.wxTool.getStatusBarHeight());
                };
                /**
                 * 点击皮肤
                 */
                skinShopPage.prototype.onClickSkin = function () {
                    //播放按钮声音
                    AudioMgr_7.AudioMgr.Play("touch.mp3");
                    console.log("点击皮肤!");
                    this.isOpenSkin = true;
                    this.handle.skin.visible = true;
                    this.handle.theme.visible = false;
                    this.themeimg_bt.color.a = 0;
                    this.skinimg_bt.color.a = 1;
                    this.handle.transform.markDirty();
                };
                /**
                 * 点击主题
                 */
                skinShopPage.prototype.onClickTheme = function () {
                    //播放按钮声音
                    AudioMgr_7.AudioMgr.Play("touch.mp3");
                    console.log("点击主题!");
                    this.isOpenSkin = false;
                    this.handle.skin.visible = false;
                    this.handle.theme.visible = true;
                    this.themeimg_bt.color.a = 1;
                    this.skinimg_bt.color.a = 0;
                    this.handle.transform.markDirty();
                };
                /**
                 * 点击关闭
                 */
                skinShopPage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_7.AudioMgr.Play("touch.mp3");
                    console.log("点击关闭!");
                    // this.hide();
                    homePage_4.homePage.Instance().then(function (ins) {
                        ins.showAndCgInGame();
                    });
                };
                /**
                 * 点击转盘
                 */
                skinShopPage.prototype.onClickDial = function () {
                    //播放按钮声音
                    AudioMgr_7.AudioMgr.Play("touch.mp3");
                    console.log("点击转盘!");
                    //dialPage.Instance.show();
                };
                /**
                 * 看视频
                 */
                skinShopPage.prototype.onClickDiamond = function () {
                    var _this = this;
                    //播放按钮声音
                    AudioMgr_7.AudioMgr.Play("touch.mp3");
                    console.log("播放按钮声音!");
                    this.Vtrigger = false;
                    joinTool_5.joinTool.watchVideo(function (success) {
                        var _a;
                        if (!success)
                            return;
                        if (_this.Vtrigger)
                            return;
                        _this.Vtrigger = true;
                        //看视频获得的金币
                        //configMgr.watchVideo  
                        //开始 视频广告 
                        //看完结束后回调 
                        joinTool_5.joinTool.tdcustomEvent(tdTool_5.tdTool.ClickEvent, tdTool_5.tdTool.ClickEvent, (_a = {}, _a[tdTool_5.tdTool.WatchAdToGetFreeGems] = 23, _a)); //数据埋点
                        videoPrizePage_2.videoPrizePage.Instance().then(function (ins) {
                            ins.show();
                            ins.setInfo(configMgr_4.configMgr.watchVideo);
                        });
                    });
                };
                skinShopPage.prototype.createBox = function (isYear) {
                    if (isYear === void 0) { isYear = false; }
                    var tran = this.handle.box.clone();
                    var data = tran.getComponent("skinBoxHandle");
                    var the;
                    if (isYear) {
                        //如果没打开过就退出
                        if (this.createIndexxxx <= 0)
                            return;
                        the = skinMgr_4.skinMgr.newYearSkin;
                    }
                    else {
                        the = skinMgr_4.skinMgr.skins[this.createIndex++];
                        if (the.deblocking[0] == 3) {
                            if (!saveTool_5.saveTool.unlockSkins[the.id]) {
                                /*  if (!homePage.beforeActivitys || homePage.beforeActivitys.length == 0 || !homePage.beforeActivitys[0]) return;
                                  let tbfa = homePage.beforeActivitys[0];
                                  if (tbfa.end > Date.now())*/
                                return;
                            }
                            // if (saveTool.unlockSkins[the.id] == true) { } else
                            //     if (saveTool.unlockSkins[the.id] != true && homePage.beforeActivitys == null || homePage.beforeActivitys.length == 0) {
                            //         return;
                            //     } else
                            //         if (homePage.beforeActivitys[0]) {
                            //             let a = homePage.beforeActivitys[0];
                            //             let now = Date.now();
                            //             if (now <= a.end) {
                            //                 return;
                            //             }
                            //         }
                        }
                    }
                    data.setDate(the);
                    if (this.createBoxY < this.pageHeight)
                        tran.visible = true;
                    var parent = this.handle.box.parent;
                    parent.addChild(tran);
                    tran.setLayoutValue(this.opt.TOP, this.createBoxY);
                    tran.setLayoutValue(this.opt.LEFT, this.createBoxX);
                    this.createBoxX += this.boxWidth + this.boxInterval;
                    this.createIndexxxx++;
                    this.skinItems.push(tran);
                    //是否换行了
                    if (this.createIndexxxx % this.lineNumber == 0) {
                        this.createBoxY += this.boxHeight + this.boxInterval;
                        this.createBoxX = 0;
                        // let parent = this.handle.box.parent;
                        //parent.height = this.createBoxY;
                    }
                };
                skinShopPage.prototype.update = function (d) {
                    this.isShowItems();
                    if (this.makedAll_skin && this.makedAll_theme)
                        return;
                    //判断资源加载情况
                    var shopAtlas = GameMgr_21.GameMgr.assetMgr.getAssetByName("shop.atlas.json", "shop.assetbundle.json");
                    if (!shopAtlas)
                        return;
                    if (this.isOpenSkin) {
                        if (this.makedAll_skin || !skinMgr_4.skinMgr.skins)
                            return;
                        //创建皮肤
                        if (this.createIndex < skinMgr_4.skinMgr.skins.length)
                            this.createBox();
                        else {
                            var parent_1 = this.handle.box.parent;
                            parent_1.height = this.createBoxY + 500;
                            this.makedAll_skin = true;
                        }
                    }
                    else {
                        if (this.makedAll_theme || !themeMgr_4.themeMgr.themes)
                            return;
                        //创建主题
                        if (this.themeCreateIndex < themeMgr_4.themeMgr.themes.length)
                            this.createThemeBox();
                        else {
                            var parent_2 = this.handle.themeBox.parent;
                            parent_2.height = this.themeCreateBoxY + 500;
                            this.makedAll_theme = true;
                        }
                    }
                };
                //判断是否该显示出来
                skinShopPage.prototype.isShowItems = function () {
                    var _this = this;
                    if (this.isOpenSkin) {
                        //暂时先这样 
                        this.skinItems.forEach(function (item) {
                            _this.isOughtShow(item, _this.boxHeight);
                        });
                    }
                    else {
                        this.themeItems.forEach(function (item) {
                            _this.isOughtShow(item, _this.themeBoxHeight);
                        });
                    }
                };
                /**
                 * 是否应该显示出来
                 * @patam item 需要判断的
                 */
                skinShopPage.prototype.isOughtShow = function (item, boxHeight) {
                    if (item.getWorldTranslate().y < (325.00 - boxHeight) || item.getWorldTranslate().y > 1280) {
                        item.visible = false;
                    }
                    else {
                        item.visible = true;
                    }
                };
                //创建主题box
                skinShopPage.prototype.createThemeBox = function (isYear) {
                    if (isYear === void 0) { isYear = false; }
                    var tran = this.handle.themeBox.clone();
                    var data = tran.getComponent("themeBoxHandle");
                    var the;
                    if (isYear) {
                        //如果没打开过就退出
                        if (this.themeCreatexxx <= 0)
                            return;
                        the = themeMgr_4.themeMgr.newYearThemes;
                    }
                    else {
                        the = themeMgr_4.themeMgr.themes[this.themeCreateIndex++];
                        if (the.deblocking[0] == 3) {
                            if (!saveTool_5.saveTool.unlockTheme[the.id]) {
                                /* if (!homePage.beforeActivitys || homePage.beforeActivitys.length == 0 || !homePage.beforeActivitys[0]) return;
                                 let tbfa = homePage.beforeActivitys[0];
                                 if (tbfa.end > Date.now())*/
                                return;
                            }
                            // if (saveTool.unlockTheme[the.id] == true) { } else
                            //     if (saveTool.unlockTheme[the.id] != true && homePageHandle.beforeActivitys == null || homePageHandle.beforeActivitys.length == 0) {
                            //         return;
                            //     } else
                            //         if (homePageHandle.beforeActivitys[0]) {
                            //             let a = homePageHandle.beforeActivitys[0];
                            //             let now = Date.now();
                            //             if (now <= a.end) {
                            //                 return;
                            //             }
                            //         }
                        }
                    }
                    data.setDate(the);
                    if (this.themeCreateBoxY < this.pageHeight)
                        tran.visible = true;
                    var parent = this.handle.themeBox.parent;
                    parent.addChild(tran);
                    tran.setLayoutValue(this.opt.TOP, this.themeCreateBoxY);
                    this.themeCreatexxx++;
                    this.themeItems.push(tran);
                    //是否换行了
                    if (this.themeCreatexxx % this.themeLineNumber == 0) {
                        this.themeCreateBoxY += this.themeBoxHeight + this.themeBoxInterval;
                        //this.createBoxX = 0;
                    }
                };
                skinShopPage.prototype.show = function () {
                    // inGamePage.Instance.setShowItem(showItem.shopAndRank);
                    // inGamePage.Instance().then((ins) => {
                    //     ins.setShowItem(showItem.shop);
                    // });
                    if (stageMgr_5.stageMgr.stageRoot)
                        stageMgr_5.stageMgr.stageRoot.gameObject.visible = false;
                    this.handle.show();
                };
                skinShopPage.prototype.hide = function () {
                    this.handle.hide();
                };
                skinShopPage.prefabName = "skinShop_page"; //依赖的 预设体 资源
                skinShopPage.atlasList = ["shop"]; //依赖的 图集资源
                return skinShopPage;
            }()));
        }
    };
});
System.register("ui/pages/unlockPage", ["ui/base/uiPage", "skinMgr", "themeMgr", "stringMgr", "ui/pages/inGamePage", "ui/pages/skinShopPage", "GameMgr", "ui/pages/homePage", "ui/pages/videoPrizePage", "configMgr", "Tool/saveTool", "Tool/commTool", "Tool/joinTool", "Tool/tdTool", "audio/AudioMgr"], function (exports_50, context_50) {
    "use strict";
    var uiPage_18, skinMgr_5, themeMgr_5, stringMgr_2, inGamePage_3, skinShopPage_1, GameMgr_22, homePage_5, videoPrizePage_3, configMgr_5, saveTool_6, commTool_9, joinTool_6, tdTool_6, AudioMgr_8, unlockPage;
    var __moduleName = context_50 && context_50.id;
    return {
        setters: [
            function (uiPage_18_1) {
                uiPage_18 = uiPage_18_1;
            },
            function (skinMgr_5_1) {
                skinMgr_5 = skinMgr_5_1;
            },
            function (themeMgr_5_1) {
                themeMgr_5 = themeMgr_5_1;
            },
            function (stringMgr_2_1) {
                stringMgr_2 = stringMgr_2_1;
            },
            function (inGamePage_3_1) {
                inGamePage_3 = inGamePage_3_1;
            },
            function (skinShopPage_1_1) {
                skinShopPage_1 = skinShopPage_1_1;
            },
            function (GameMgr_22_1) {
                GameMgr_22 = GameMgr_22_1;
            },
            function (homePage_5_1) {
                homePage_5 = homePage_5_1;
            },
            function (videoPrizePage_3_1) {
                videoPrizePage_3 = videoPrizePage_3_1;
            },
            function (configMgr_5_1) {
                configMgr_5 = configMgr_5_1;
            },
            function (saveTool_6_1) {
                saveTool_6 = saveTool_6_1;
            },
            function (commTool_9_1) {
                commTool_9 = commTool_9_1;
            },
            function (joinTool_6_1) {
                joinTool_6 = joinTool_6_1;
            },
            function (tdTool_6_1) {
                tdTool_6 = tdTool_6_1;
            },
            function (AudioMgr_8_1) {
                AudioMgr_8 = AudioMgr_8_1;
            }
        ],
        execute: function () {
            exports_50("unlockPage", unlockPage = /** @class */ (function () {
                //皮肤 和 主题 解锁弹出面板
                function unlockPage() {
                    this.inited = false;
                    //是否是皮肤
                    this.isSkin = true;
                    this.Vtrigger = false;
                }
                unlockPage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_18.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new unlockPage();
                                    this._instance.init();
                                    uiPage_18.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                unlockPage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_18.loadTool.PagePrefeb_map.get(unlockPage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("unlockPageHandle");
                    //事件
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.purchase_bt.addListener(m4m.event.UIEventEnum.PointerClick, this.onPurchaseClick, this);
                    this.handle.share_bt.addListener(m4m.event.UIEventEnum.PointerClick, this.onShareClick, this);
                    this.handle.video_bt.addListener(m4m.event.UIEventEnum.PointerClick, this.onVideoClick, this);
                    this.handle.canBuy_bt.addListener(m4m.event.UIEventEnum.PointerClick, this.onToShopClick, this);
                    this.handle.bt.addListener(m4m.event.UIEventEnum.PointerDown, function () { }, this);
                    this.handle.seeVideo.addListener(m4m.event.UIEventEnum.PointerClick, this.onWatchVideoClick, this);
                    this.inited = true;
                };
                unlockPage.prototype.setSkinfo = function (skin, skinBox) {
                    this.handle.skin.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -60);
                    this.skinBox = skinBox;
                    this.handle.skin.transform.visible = true;
                    this.setIcon(this.handle.skin_icon, GameMgr_22.GameMgr.skinIconPath + skin.headPortrait);
                    //   this.handle.skin_icon
                    this.isSkin = true;
                    this.skinInfo = skin;
                    if (GameMgr_22.GameMgr.currUseSkin == skin.id) {
                        this.handle.acquisition.visible = true;
                        this.handle.skinInfo.text = this.skinInfo.name;
                    }
                    else if (skin.deblocking[0] == 4) { //看视频得皮肤
                        this.setWatchVideo();
                    }
                    else {
                        this.setPrice(skin.deblocking[1]);
                    }
                    //        
                };
                unlockPage.prototype.setTheme = function (theme, themeBox) {
                    this.handle.theme.visible = true;
                    this.setIcon(this.handle.theme_icon, GameMgr_22.GameMgr.themeIconPath + theme.icon);
                    this.isSkin = false;
                    this.themeInfo = theme;
                    this.themeBox = themeBox;
                    if (GameMgr_22.GameMgr.currUseTheme == theme.id) {
                        this.handle.acquisition.visible = true;
                        this.handle.skinInfo.text = this.themeInfo.name;
                    }
                    else {
                        this.setPrice(theme.deblocking[1]);
                    }
                };
                unlockPage.prototype.setCanBuy = function (skin) {
                    this.setIcon(this.handle.skin_icon, GameMgr_22.GameMgr.skinIconPath + skin.headPortrait);
                    this.handle.skin.setLayoutValue(m4m.framework.layoutOption.V_CENTER, 0);
                    unlockPage.isCanBuy_noCanShow = true;
                    this.handle.canBuy.visible = true;
                    this.handle.skin.visible = true;
                };
                /**
                 * 设置价格
                 * @param price 价格
                 * @param isV  是否看视频刷新价格的
                 */
                unlockPage.prototype.setPrice = function (price) {
                    //   console.log(saveTool.diamond+"???????????"+price);
                    if (saveTool_6.saveTool.diamond >= price) {
                        this.handle.purchase.visible = true;
                        this.handle.price.text = price + stringMgr_2.stringMgr.buy;
                    }
                    else {
                        this.handle.insufficient.visible = true;
                    }
                };
                unlockPage.prototype.setWatchVideo = function () {
                    this.handle.purchase.visible = false;
                    this.handle.video.visible = true;
                    //  
                    var num_ = saveTool_6.saveTool.videoSkin_num[this.skinInfo.id];
                    var num = num_ == null ? 0 : num_;
                    this.handle.seeVideoNum.text = num + "/" + this.skinInfo.deblocking[1];
                    this.handle.video_pd.value = (1 / this.skinInfo.deblocking[1]) * num;
                };
                unlockPage.prototype.setIcon = function (icon, src) {
                    if (commTool_9.commTool.loadedTexsDic.ContainsKey(src)) {
                        icon.image = commTool_9.commTool.loadedTexsDic.GetValue(src);
                    }
                    else {
                        commTool_9.commTool.ImgByLoad(src, function (_tex) {
                            if (_tex) {
                                commTool_9.commTool.loadedTexsDic.Add(src, _tex);
                                icon.image = _tex;
                            }
                        });
                    }
                };
                /**
                 * 关闭
                 */
                unlockPage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_8.AudioMgr.Play("touch.mp3");
                    this.hide();
                };
                /**
                 * 钻石不足时可以看视频
                 */
                unlockPage.prototype.onVideoClick = function () {
                    var _this = this;
                    //播放按钮声音
                    AudioMgr_8.AudioMgr.Play("touch.mp3");
                    var sef = this;
                    this.Vtrigger = false;
                    joinTool_6.joinTool.watchVideo(function (success) {
                        var _a, _b;
                        if (!success)
                            return;
                        if (_this.Vtrigger)
                            return;
                        _this.Vtrigger = true;
                        //皮肤  or  主题
                        if (_this.handle.skin.visible) {
                            joinTool_6.joinTool.tdcustomEvent(tdTool_6.tdTool.ClickEvent, tdTool_6.tdTool.ClickEvent, (_a = {}, _a[tdTool_6.tdTool.FailedToBuySkinWatchToGetGems] = 24, _a)); //数据埋点
                        }
                        else if (_this.handle.theme.visible) {
                            joinTool_6.joinTool.tdcustomEvent(tdTool_6.tdTool.ClickEvent, tdTool_6.tdTool.ClickEvent, (_b = {}, _b[tdTool_6.tdTool.FailedToBuyThemeWatchToGetGems] = 25, _b)); //数据埋点
                        }
                        videoPrizePage_3.videoPrizePage.Instance().then(function (ins) {
                            _this.handle.insufficient.visible = false;
                            _this.handle.insufficient.markDirty();
                            inGamePage_3.inGamePage.collectCoinsAnim_callfun = sef.refresh_bt.bind(sef);
                            ins.setInfo(configMgr_5.configMgr.watchVideo);
                        });
                        //开始 视频广告
                        //看完结束后回调 
                    });
                };
                unlockPage.prototype.refresh_bt = function () {
                    if (this.isSkin) {
                        this.setPrice(this.skinInfo.deblocking[1]);
                    }
                    else {
                        this.setPrice(this.themeInfo.deblocking[1]);
                    }
                };
                /**
                 * 去商场按钮
                 */
                unlockPage.prototype.onToShopClick = function () {
                    this.hide();
                    if (GameMgr_22.GameMgr.raceStage == 1)
                        return;
                    skinShopPage_1.skinShopPage.Instance().then(function (ins) {
                        ins.show();
                    });
                };
                /**
                 * 购买
                 */
                unlockPage.prototype.onPurchaseClick = function () {
                    var str;
                    if (this.isSkin) {
                        saveTool_6.saveTool.diamond -= this.skinInfo.deblocking[1];
                        saveTool_6.saveTool.unlockSkins[this.skinInfo.id] = true;
                        str = stringMgr_2.stringMgr.getSkin + this.skinInfo.name + "!";
                        this.skinBox.click.removeListener(m4m.event.UIEventEnum.PointerClick, this.skinBox.onPurchaseAndWatchCVideoClick, this.skinBox);
                        this.skinBox.nowUse();
                        this.skinBox.refresh();
                    }
                    else {
                        saveTool_6.saveTool.diamond -= this.themeInfo.deblocking[1];
                        saveTool_6.saveTool.unlockTheme[this.themeInfo.id] = true;
                        str = stringMgr_2.stringMgr.getTheme + this.themeInfo.name + "!";
                        this.themeBox.click.removeListener(m4m.event.UIEventEnum.PointerClick, this.themeBox.onPurchaseClick, this.themeBox);
                        this.themeBox.nowUse();
                        this.themeBox.refresh();
                    }
                    this.handle.purchase.visible = false;
                    this.handle.skinInfo.text = str;
                    this.handle.acquisition.visible = true;
                    this.isCanBuyNewSkin();
                    // inGamePage.Instance.updateData();
                    inGamePage_3.inGamePage.Instance().then(function (ins) {
                        ins.updateData();
                    });
                };
                /**
                 * 看视频解锁皮肤
                 */
                unlockPage.prototype.onWatchVideoClick = function () {
                    var _this = this;
                    this.Vtrigger = false;
                    joinTool_6.joinTool.watchVideo(function (success) {
                        var _a;
                        if (!success)
                            return;
                        if (_this.Vtrigger)
                            return;
                        _this.Vtrigger = true;
                        //看完结束后回调 
                        joinTool_6.joinTool.tdcustomEvent(tdTool_6.tdTool.ClickEvent, tdTool_6.tdTool.ClickEvent, (_a = {}, _a[tdTool_6.tdTool.watchAdToGetSkin] = 28, _a)); //数据埋点
                        //看视频完视频后...
                        var num_ = saveTool_6.saveTool.videoSkin_num[_this.skinInfo.id];
                        var num = num_ == null ? 0 : num_;
                        num++;
                        saveTool_6.saveTool.videoSkin_num[_this.skinInfo.id] = num;
                        console.log(saveTool_6.saveTool.videoSkin_num);
                        if (num >= _this.skinInfo.deblocking[1]) { //解锁皮肤
                            saveTool_6.saveTool.unlockSkins[_this.skinInfo.id] = true;
                            _this.handle.skinInfo.text = stringMgr_2.stringMgr.getSkin + _this.skinInfo.name + "!";
                            _this.skinBox.click.removeListener(m4m.event.UIEventEnum.PointerClick, _this.skinBox.onPurchaseAndWatchCVideoClick, _this.skinBox);
                            _this.skinBox.nowUse();
                            _this.handle.video.visible = false;
                            _this.handle.acquisition.visible = true;
                        }
                        else {
                            _this.setWatchVideo();
                        }
                        //刷新状态
                        _this.skinBox.refresh();
                        //保存信息
                        saveTool_6.saveTool.save(null, null);
                    });
                };
                //分享领取皮肤时使用
                unlockPage.prototype.setShareSkinfo = function (skin, skinBox) {
                    this.handle.skin.setLayoutValue(m4m.framework.layoutOption.V_CENTER, -60);
                    this.skinBox = skinBox;
                    this.skinInfo = skin;
                    debugger;
                    this.handle.skin.transform.visible = true;
                    this.setIcon(this.handle.skin_icon, GameMgr_22.GameMgr.skinIconPath + skin.headPortrait);
                    this.isSkin = true;
                    saveTool_6.saveTool.unlockSkins[skin.id] = true;
                    var str = stringMgr_2.stringMgr.getSkin + skin.name + "!";
                    this.handle.purchase.visible = false;
                    this.handle.skinInfo.text = str;
                    this.handle.acquisition.visible = true;
                    if (skinBox) {
                        this.skinBox.click.removeListener(m4m.event.UIEventEnum.PointerClick, this.skinBox.onPurchaseAndWatchCVideoClick, this.skinBox);
                        this.skinBox.nowUse();
                        this.skinBox.refresh();
                    }
                };
                /**
                 * 分享
                 */
                unlockPage.prototype.onShareClick = function () {
                    //播放按钮声音
                    AudioMgr_8.AudioMgr.Play("touch.mp3");
                    console.log("分享!");
                    if (this.isSkin) {
                        var info = skinMgr_5.skinMgr.skins_map.get(this.skinInfo.id);
                        var iconUrl = "".concat(GameMgr_22.GameMgr.skinIconPath).concat(info.headPortrait);
                        joinTool_6.joinTool.showBestSkin(iconUrl, this.skinInfo.id);
                    }
                    else {
                        joinTool_6.joinTool.showBestTheme(this.themeInfo.id);
                    }
                };
                unlockPage.prototype.show = function () {
                    this.handle.show();
                };
                unlockPage.prototype.hide = function () {
                    this.handle.skin.visible = false;
                    this.handle.theme.visible = false;
                    this.handle.insufficient.visible = false;
                    this.handle.purchase.visible = false;
                    this.handle.video.visible = false;
                    this.handle.acquisition.visible = false;
                    this.handle.canBuy.visible = false;
                    this.handle.hide();
                };
                /**
                 * 是否有钱买新皮肤
                 */
                unlockPage.prototype.isCanBuyNewSkin = function () {
                    skinMgr_5.skinMgr.skins.forEach(function (skin) {
                        //     skin.deblocking[0]
                        if (!GameMgr_22.GameMgr.unlockSkins[skin.id]) {
                            if (skin.deblocking[0] == 1 && skin.deblocking[1] <= GameMgr_22.GameMgr.diamond) {
                                return;
                            }
                        }
                    });
                    themeMgr_5.themeMgr.themes.forEach(function (theme) {
                        //     skin.deblocking[0]
                        if (!GameMgr_22.GameMgr.unlockTheme[theme.id]) {
                            if (theme.deblocking[0] == 1 && theme.deblocking[1] <= GameMgr_22.GameMgr.diamond) {
                                return;
                            }
                        }
                    });
                    homePage_5.homePage.Instance().then(function (ins) {
                        ins.isShowNewIcon(false);
                    });
                };
                unlockPage.prefabName = "unlock_page"; //依赖的 预设体 资源
                unlockPage.atlasList = ["unlock"]; //依赖的 图集资源
                //是否不可以显示
                unlockPage.isCanBuy_noCanShow = false;
                return unlockPage;
            }()));
        }
    };
});
System.register("ui/pages/gameOverPage", ["ui/base/uiPage", "stageMgr", "ui/pages/homePage", "ui/pages/continuePage", "stringMgr", "ui/pages/inGamePage", "levelMgr", "skinMgr", "themeMgr", "ui/pages/unlockPage", "GameMgr", "ui/pages/videoPrizePage", "configMgr", "Tool/joinTool", "Tool/tdTool", "PSDUI/UiManager", "role/playerMgr", "audio/AudioMgr"], function (exports_51, context_51) {
    "use strict";
    var uiPage_19, stageMgr_6, homePage_6, continuePage_1, stringMgr_3, inGamePage_4, levelMgr_2, skinMgr_6, themeMgr_6, unlockPage_4, GameMgr_23, videoPrizePage_4, configMgr_6, joinTool_7, tdTool_7, UiManager_1, playerMgr_4, AudioMgr_9, gameOverPage;
    var __moduleName = context_51 && context_51.id;
    return {
        setters: [
            function (uiPage_19_1) {
                uiPage_19 = uiPage_19_1;
            },
            function (stageMgr_6_1) {
                stageMgr_6 = stageMgr_6_1;
            },
            function (homePage_6_1) {
                homePage_6 = homePage_6_1;
            },
            function (continuePage_1_1) {
                continuePage_1 = continuePage_1_1;
            },
            function (stringMgr_3_1) {
                stringMgr_3 = stringMgr_3_1;
            },
            function (inGamePage_4_1) {
                inGamePage_4 = inGamePage_4_1;
            },
            function (levelMgr_2_1) {
                levelMgr_2 = levelMgr_2_1;
            },
            function (skinMgr_6_1) {
                skinMgr_6 = skinMgr_6_1;
            },
            function (themeMgr_6_1) {
                themeMgr_6 = themeMgr_6_1;
            },
            function (unlockPage_4_1) {
                unlockPage_4 = unlockPage_4_1;
            },
            function (GameMgr_23_1) {
                GameMgr_23 = GameMgr_23_1;
            },
            function (videoPrizePage_4_1) {
                videoPrizePage_4 = videoPrizePage_4_1;
            },
            function (configMgr_6_1) {
                configMgr_6 = configMgr_6_1;
            },
            function (joinTool_7_1) {
                joinTool_7 = joinTool_7_1;
            },
            function (tdTool_7_1) {
                tdTool_7 = tdTool_7_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            },
            function (playerMgr_4_1) {
                playerMgr_4 = playerMgr_4_1;
            },
            function (AudioMgr_9_1) {
                AudioMgr_9 = AudioMgr_9_1;
            }
        ],
        execute: function () {
            exports_51("gameOverPage", gameOverPage = /** @class */ (function () {
                //游戏结束
                function gameOverPage() {
                    this.inited = false;
                    this.score = 0;
                    this.Vtrigger = false;
                }
                gameOverPage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_19.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new gameOverPage();
                                    this._instance.init();
                                    uiPage_19.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                gameOverPage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_19.loadTool.PagePrefeb_map.get(gameOverPage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("gameOverPageHandle");
                    this.handle.video.transform.visible = false;
                    this.handle.share.transform.visible = false;
                    this.handle.challenge.transform.visible = false;
                    //事件
                    //  this.handle.rank.addListener(m4m.event.UIEventEnum.PointerClick, this.onRankClick, this);
                    this.handle.share.addListener(m4m.event.UIEventEnum.PointerClick, this.onShareClick, this);
                    //   this.handle.video.addListener(m4m.event.UIEventEnum.PointerClick, this.onVideoClick, this);
                    this.handle.next.addListener(m4m.event.UIEventEnum.PointerClick, this.onNextClick, this);
                    this.handle.again.addListener(m4m.event.UIEventEnum.PointerClick, this.onAgainClick, this);
                    this.handle.challenge.addListener(m4m.event.UIEventEnum.PointerClick, this.onChallengeClick, this);
                    this.handle.video.addListener(m4m.event.UIEventEnum.PointerClick, this.onVideoClick, this);
                    this.inited = true;
                    this.handle.nextBallNum.verticalType = m4m.framework.VerticalType.Top;
                    this.handle.nextBallNum.horizontalOverflow = false;
                    this.handle.nextBallNum.verticalOverflow = true;
                    this.handle.nextBallNum.linespace = 1.3;
                };
                /**
                 * @param ranking 获得的名次
                 * @param customs 当前关卡
                 * @param ballNum 当前关卡球球数量
                 * @param  nextBallNum 下一关球球数量
                 * @param isPass 是否通关
                 */
                gameOverPage.prototype.setInfo = function (ranking, customs, ballNum, nextBallNum, isPass) {
                    if (isPass === void 0) { isPass = false; }
                    if (customs < levelMgr_2.levelMgr.levels.length) {
                        this.handle.customsNum.text = stringMgr_3.stringMgr.currentLevel + customs;
                        this.handle.nextBallNum.text = stringMgr_3.stringMgr.nextBallAmount + nextBallNum;
                    }
                    else {
                        this.handle.customsNum.text = stringMgr_3.stringMgr.finalChallenge;
                        this.handle.nextBallNum.text = "";
                    }
                    this.handle.ranking.text = stringMgr_3.stringMgr.di + ranking + stringMgr_3.stringMgr.ming;
                    this.handle.ballNum.text = stringMgr_3.stringMgr.ballAmount + ballNum;
                    this.isPassShow(isPass);
                    this.score = stageMgr_6.stageMgr.getScore(customs, ranking);
                    console.log("\u8BBE\u7F6E gameoverpage ".concat(customs, " \u5173 ").concat(ranking, "\u540D"));
                };
                /**
                 * 通关就显示下一关和得分炫耀的按钮,否则显示再来一次和发起挑战按钮
                 * @param isPass 是否通关
                 */
                gameOverPage.prototype.isPassShow = function (isPass) {
                    gameOverPage.isPass = isPass;
                    // this.handle.challenge.transform.visible = !isPass;
                    this.handle.again.transform.visible = !isPass;
                    this.handle.next.transform.visible = isPass;
                    // this.handle.share.transform.visible = isPass;
                };
                /** 看视频得金币*/
                gameOverPage.prototype.onVideoClick = function () {
                    //看视频获得的金币
                    // AudioMgr.setMute(true);
                    var _this = this;
                    //configMgr.watchVideo
                    this.Vtrigger = false;
                    //开始 视频广告 
                    joinTool_7.joinTool.watchVideo(function (success) {
                        var _a;
                        if (!success)
                            return;
                        if (_this.Vtrigger)
                            return;
                        _this.Vtrigger = true;
                        //看完结束后回调 
                        joinTool_7.joinTool.tdcustomEvent(tdTool_7.tdTool.ClickEvent, tdTool_7.tdTool.ClickEvent, (_a = {}, _a[tdTool_7.tdTool.SettlementWatchAdGetFreeGems] = 27, _a)); //数据埋点
                        videoPrizePage_4.videoPrizePage.Instance().then(function (ins) {
                            ins.show();
                            ins.setInfo(configMgr_6.configMgr.watchVideo);
                            ins.IsGameOver_homePage(true);
                            // AudioMgr.setMute(!GameMgr.swSound);
                            ins.show();
                        });
                    });
                };
                /**
                 * 返回首页 点击已经移动ingame了  这里用来重置状态
                 */
                gameOverPage.onHomeClick = function () {
                    gameOverPage.endFun();
                    AudioMgr_9.AudioMgr.Stop("environment.mp3");
                };
                /**
                 * 过关炫耀
                 */
                gameOverPage.prototype.onShareClick = function () {
                    //播放按钮声音
                    AudioMgr_9.AudioMgr.Play("touch.mp3");
                    console.log("过关炫耀");
                    //得分炫耀 分享
                    joinTool_7.joinTool.showOffScore(this.score); //取得分
                };
                /**
                 * 下一关
                 */
                gameOverPage.prototype.onNextClick = function () {
                    var _a;
                    AudioMgr_9.AudioMgr.Stop("environment.mp3");
                    console.log("下一关!");
                    joinTool_7.joinTool.tdcustomEvent(tdTool_7.tdTool.ClickEvent, tdTool_7.tdTool.ClickEvent, (_a = {}, _a[tdTool_7.tdTool.WinNextlevel] = 21, _a)); //数据埋点
                    homePage_6.homePage.Instance().then(function (ins) {
                        ins.showAndCgInGame();
                        gameOverPage.endFun(true);
                    });
                };
                /**
                  * 再来一次
                  */
                gameOverPage.prototype.onAgainClick = function () {
                    var _a;
                    //播放按钮声音
                    console.log("再来一次!");
                    AudioMgr_9.AudioMgr.Stop("environment.mp3");
                    homePage_6.homePage.Instance().then(function (ins) {
                        ins.showAndCgInGame();
                        gameOverPage.endFun();
                    });
                    joinTool_7.joinTool.tdcustomEvent(tdTool_7.tdTool.ClickEvent, tdTool_7.tdTool.ClickEvent, (_a = {}, _a[tdTool_7.tdTool.LoseTryonemoretime] = 18, _a)); //数据埋点
                };
                gameOverPage.endFun = function (bool) {
                    if (bool === void 0) { bool = false; }
                    UiManager_1.UiManager.showUi("Main");
                    continuePage_1.continuePage.recoverCount = 0;
                    AudioMgr_9.AudioMgr.Play("touch.mp3");
                    AudioMgr_9.AudioMgr.stopAll();
                    stageMgr_6.stageMgr.reState();
                    gameOverPage.isCanBuyNewSkin();
                    joinTool_7.joinTool.hide_item_Ranks();
                    //是否随机场景
                    if (bool) {
                        playerMgr_4.playerMgr.changeTheme();
                    }
                };
                /**
                 * 发起挑战
                 */
                gameOverPage.prototype.onChallengeClick = function () {
                    //播放按钮声音
                    AudioMgr_9.AudioMgr.Play("touch.mp3");
                    console.log("得分炫耀 分享 发起挑战");
                    //得分炫耀 分享
                    joinTool_7.joinTool.challengeFriend(this.score); //取得分
                };
                /**
                 * 是否是新记录
                 * @param  isNwe 是否是新纪录
                 */
                gameOverPage.prototype.setIsNewRecord = function (isNwe) {
                    this.handle.newRecord.visible = isNwe;
                };
                /**
                 * 是否有钱买新皮肤
                 */
                gameOverPage.isCanBuyNewSkin = function () {
                    //这次打开游戏是否没显示过?8
                    var len = skinMgr_6.skinMgr.skins.length;
                    var _loop_1 = function (i) {
                        var skin = skinMgr_6.skinMgr.skins[i];
                        if (!skin)
                            return "continue";
                        if (!GameMgr_23.GameMgr.unlockSkins[skin.id]) {
                            if (skin.deblocking[0] == 1 && skin.deblocking[1] <= GameMgr_23.GameMgr.diamond) {
                                homePage_6.homePage.Instance().then(function (ins) {
                                    ins.isShowNewIcon(true);
                                });
                                if (!unlockPage_4.unlockPage.isCanBuy_noCanShow && gameOverPage.isPass) {
                                    unlockPage_4.unlockPage.Instance().then(function (ins) {
                                        if (GameMgr_23.GameMgr.raceStage == 1)
                                            return;
                                        ins.show();
                                        ins.setCanBuy(skin);
                                    });
                                    return { value: void 0 };
                                }
                            }
                        }
                    };
                    for (var i = 0; i < len; i++) {
                        var state_1 = _loop_1(i);
                        if (typeof state_1 === "object")
                            return state_1.value;
                    }
                    len = themeMgr_6.themeMgr.themes.length;
                    for (var i = 0; i < len; i++) {
                        var theme = themeMgr_6.themeMgr.themes[i];
                        if (!theme)
                            continue;
                        if (!GameMgr_23.GameMgr.unlockTheme[theme.id]) {
                            if (theme.deblocking[0] == 1 && theme.deblocking[1] <= GameMgr_23.GameMgr.diamond) {
                                homePage_6.homePage.Instance().then(function (ins) {
                                    ins.isShowNewIcon(true);
                                });
                                return;
                            }
                        }
                    }
                };
                gameOverPage.prototype.show = function () {
                    AudioMgr_9.AudioMgr.Stop("environment.mp3");
                    // inGamePage.Instance.setShowItem(showItem.gameOver);
                    inGamePage_4.inGamePage.Instance().then(function (ins) {
                        ins.setShowItem(inGamePage_4.showItem.gameOver);
                    });
                    joinTool_7.joinTool.show_item_Ranks();
                    this.handle.show();
                };
                gameOverPage.prototype.hide = function () {
                    this.handle.hide();
                };
                gameOverPage.prefabName = "gameOver_page"; //依赖的 预设体 资源
                gameOverPage.atlasList = ["gameover"]; //依赖的 图集资源
                return gameOverPage;
            }()));
        }
    };
});
System.register("ui/pages/inGamePage", ["ui/base/uiPage", "ui/pages/setingPage", "stringMgr", "GameMgr", "levelMgr", "FrameTimer", "advMgr", "configMgr", "ui/base/ubiAdvIcon", "ui/pages/homePage", "ui/pages/gameOverPage", "Tool/wxTool", "Tool/joinTool", "Tool/tdTool", "Tool/saveTool", "Tools/FrameMgr", "audio/AudioMgr"], function (exports_52, context_52) {
    "use strict";
    var uiPage_20, setingPage_1, stringMgr_4, GameMgr_24, levelMgr_3, FrameTimer_1, advMgr_2, configMgr_7, ubiAdvIcon_1, homePage_7, gameOverPage_2, wxTool_9, joinTool_8, tdTool_8, saveTool_7, FrameMgr_6, AudioMgr_10, inGamePage, showItem;
    var __moduleName = context_52 && context_52.id;
    return {
        setters: [
            function (uiPage_20_1) {
                uiPage_20 = uiPage_20_1;
            },
            function (setingPage_1_1) {
                setingPage_1 = setingPage_1_1;
            },
            function (stringMgr_4_1) {
                stringMgr_4 = stringMgr_4_1;
            },
            function (GameMgr_24_1) {
                GameMgr_24 = GameMgr_24_1;
            },
            function (levelMgr_3_1) {
                levelMgr_3 = levelMgr_3_1;
            },
            function (FrameTimer_1_1) {
                FrameTimer_1 = FrameTimer_1_1;
            },
            function (advMgr_2_1) {
                advMgr_2 = advMgr_2_1;
            },
            function (configMgr_7_1) {
                configMgr_7 = configMgr_7_1;
            },
            function (ubiAdvIcon_1_1) {
                ubiAdvIcon_1 = ubiAdvIcon_1_1;
            },
            function (homePage_7_1) {
                homePage_7 = homePage_7_1;
            },
            function (gameOverPage_2_1) {
                gameOverPage_2 = gameOverPage_2_1;
            },
            function (wxTool_9_1) {
                wxTool_9 = wxTool_9_1;
            },
            function (joinTool_8_1) {
                joinTool_8 = joinTool_8_1;
            },
            function (tdTool_8_1) {
                tdTool_8 = tdTool_8_1;
            },
            function (saveTool_7_1) {
                saveTool_7 = saveTool_7_1;
            },
            function (FrameMgr_6_1) {
                FrameMgr_6 = FrameMgr_6_1;
            },
            function (AudioMgr_10_1) {
                AudioMgr_10 = AudioMgr_10_1;
            }
        ],
        execute: function () {
            exports_52("inGamePage", inGamePage = /** @class */ (function () {
                //游戏中
                function inGamePage() {
                    this.inited = false;
                    this.ccAPlayEnd = true;
                    this.ccAnimTime = 0.15;
                    this.ccAcount = 0;
                    this.maxSize = 1.5;
                    this.old_ = 0;
                    this.new_ = 0;
                    this.minAddingR = 0.02; //最小动画增加率
                    this.isDoCCsAnim = false;
                    this.ccsATime = 0.6; //动画总时长
                    this.ccsACount = 0;
                    this.CCsAnimTimeId = -1;
                    this.lastScore = -1;
                    this.lastNum = -1;
                    this.currshowItem = showItem.home;
                    this.isMove = false;
                    this.minTopY = 100;
                    this.maxTopY = 230.00;
                    this.minTopY_ = 115;
                    this.maxTopY_ = 275.00;
                    this.opt = m4m.framework.layoutOption;
                    this.ySpeed = 400;
                    this.moveRankNumHeight = 65;
                    this.isBannerVisible = false;
                }
                inGamePage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_20.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new inGamePage();
                                    this._instance.init();
                                    uiPage_20.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                inGamePage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_20.loadTool.PagePrefeb_map.get(inGamePage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("inGamePageHandle");
                    this.handle.uiLayer = 1;
                    this.handle.notHideOnOtherShow = true;
                    this.handle.diamond.transform.visible = false;
                    //事件
                    this.handle.setting.addListener(m4m.event.UIEventEnum.PointerClick, this.onSettingClick, this);
                    this.handle.home.addListener(m4m.event.UIEventEnum.PointerClick, this.onHomeClick, this);
                    FrameMgr_6.FrameMgr.Add(this.update, this);
                    //右上角序列帧广告
                    var isAdv = true;
                    if (isAdv) {
                        //add adv img
                        var tran = new m4m.framework.transform2D();
                        this.advi = tran.addComponent("ubiAdvIcon");
                        advMgr_2.advMgr.ubiAdv = this.advi;
                        if (wxTool_9.wxTool.wx && !wxTool_9.wxTool.isFristLogin) {
                            var opt = m4m.framework.layoutOption;
                            var sca = 0.8;
                            tran.width = ubiAdvIcon_1.ubiAdvIcon.adv_W * sca;
                            tran.height = ubiAdvIcon_1.ubiAdvIcon.adv_H * sca;
                            tran.layoutState = opt.RIGHT | opt.V_CENTER;
                            tran.pivot.x = tran.pivot.y = 0.5;
                            tran.setLayoutValue(opt.V_CENTER, -300);
                            this.handle.transform.addChild(tran);
                            this.advi.onClickIcon = function () {
                                var _a;
                                joinTool_8.joinTool.tdcustomEvent(tdTool_8.tdTool.ClickEvent, tdTool_8.tdTool.ClickEvent, (_a = {}, _a[tdTool_8.tdTool.Othergamelink] = 5, _a)); //数据埋点
                            };
                            if (advMgr_2.advMgr.sequenceAdvD)
                                this.advi.setIcon(advMgr_2.advMgr.sequenceAdvD, 5000);
                            // if(this.currshowItem != showItem.gameOver && this.currshowItem != showItem.home){
                            //     this.advi.transform.visible = false;
                            // }
                            // //放置到 gamemgr
                            // GameMgr.iwyAdvIconObj = this.advi;
                            // this.advi.onClickIcon = ()=>{  //icon 点击
                            //     joinTool.onIwyAdvIconClick();
                            // }
                        }
                    }
                    this.inited = true;
                };
                /** 播放金币收集动画 */
                inGamePage.prototype.PlayCoinCollectAnim = function () {
                    AudioMgr_10.AudioMgr.Seek("gold.mp3", 0);
                    AudioMgr_10.AudioMgr.Play("gold.mp3");
                    wxTool_9.wxTool.vibrateShort();
                    this.ccAcount = 0;
                    this.ccAPlayEnd = false;
                };
                inGamePage.prototype.doCollectAnim = function (d) {
                    if (this.ccAPlayEnd)
                        return;
                    this.ccAcount += d;
                    var trans = this.handle.diamond.transform;
                    var _s = 1;
                    var half = this.ccAnimTime / 2;
                    if (this.ccAcount < half) { //放大
                        var rate = this.ccAcount / half;
                        _s = m4m.math.numberLerp(1, this.maxSize, rate);
                    }
                    else if (this.ccAcount < this.ccAnimTime) { //缩小            
                        var rate = (this.ccAcount - half) / half;
                        _s = m4m.math.numberLerp(this.maxSize, 1, rate);
                    }
                    else {
                        this.ccAPlayEnd = true;
                    }
                    trans.localScale.x = trans.localScale.y = _s;
                    trans.markDirty();
                };
                /** 收集大量金币 并保存 */
                inGamePage.prototype.collectCoinsAnim_save = function (addDiamond) {
                    var _old = GameMgr_24.GameMgr.diamond;
                    var _new = _old + addDiamond;
                    //金币收集动画
                    this.collectCoinsAnim(_old, _new);
                    //金币增加动画
                    GameMgr_24.GameMgr.diamond = _new;
                    if (inGamePage.collectCoinsAnim_callfun) {
                        inGamePage.collectCoinsAnim_callfun();
                        inGamePage.collectCoinsAnim_callfun = null;
                    }
                    saveTool_7.saveTool.save(null, null);
                };
                /** 收集大量金币 */
                inGamePage.prototype.collectCoinsAnim = function (old_, new_) {
                    if (this.isDoCCsAnim)
                        return;
                    this.old_ = old_;
                    this.new_ = new_;
                    var count = Math.abs(new_ - old_);
                    if (count == 0)
                        return;
                    this.isDoCCsAnim = true;
                    var addingR = this.ccsATime / count;
                    addingR = addingR < this.minAddingR ? this.minAddingR : addingR;
                    this.CCsAnimTimeId = FrameTimer_1.FrameTimer.Instance.loop(addingR, this.doCollectCoinsAnim.bind(this));
                };
                inGamePage.prototype.doCollectCoinsAnim = function (d, isend, istick) {
                    if (isend)
                        return;
                    this.ccsACount += d;
                    var rate = this.ccsACount / this.ccsATime;
                    var curr = m4m.math.numberLerp(this.old_, this.new_, rate);
                    curr = Math.floor(curr);
                    if (this.ccsACount >= this.ccsATime) {
                        FrameTimer_1.FrameTimer.Instance.stop(this.CCsAnimTimeId);
                        this.CCsAnimTimeId = -1;
                        this.isDoCCsAnim = false;
                        this.ccsACount = 0;
                        curr = this.new_;
                    }
                    if (this.lastScore != curr) {
                        this.lastScore = curr;
                        this.setDiamond(curr);
                        this.PlayCoinCollectAnim();
                    }
                };
                /**
                 * 进度条
                 * @param  value 进度
                 */
                inGamePage.prototype.setValue = function (value) {
                    this.handle.value.value = value;
                    this.handle.dot.setLayoutValue(m4m.framework.layoutOption.LEFT, this.handle.progressbarWidth.width);
                };
                /** 设置关卡 */
                inGamePage.prototype.setCustoms = function (value) {
                    if (value.id < levelMgr_3.levelMgr.levels.length) {
                        this.handle.customs.text = value.stageName;
                    }
                    else {
                        this.handle.customs.text = stringMgr_4.stringMgr.finalChallenge;
                    }
                };
                /** 排名 */
                inGamePage.prototype.setSurpassNum = function (surpassNum) {
                    if (surpassNum == this.lastNum)
                        return;
                    this.lastNum = surpassNum;
                    //this.handle.rank_num.setNum(surpassNum); //old
                    this.handle.numlabel.text = "".concat(stringMgr_4.stringMgr.di).concat(surpassNum).concat(stringMgr_4.stringMgr.ming);
                };
                /**
                 * 设置
                 */
                inGamePage.prototype.onSettingClick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_10.AudioMgr.Play("touch.mp3");
                    console.log("设置!");
                    setingPage_1.setingPage.Instance().then(function (ins) {
                        ins.show();
                    });
                    joinTool_8.joinTool.tdcustomEvent(tdTool_8.tdTool.ClickEvent, tdTool_8.tdTool.ClickEvent, (_a = {}, _a[tdTool_8.tdTool.Setting] = 7, _a));
                };
                /**
                 * 返回首页
                 */
                inGamePage.prototype.onHomeClick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_10.AudioMgr.Play("touch.mp3");
                    console.log("设置!");
                    gameOverPage_2.gameOverPage.onHomeClick();
                    homePage_7.homePage.Instance().then(function (ins) {
                        ins.showAndCgInGame();
                    });
                    joinTool_8.joinTool.tdcustomEvent(tdTool_8.tdTool.ClickEvent, tdTool_8.tdTool.ClickEvent, (_a = {}, _a[tdTool_8.tdTool.Setting] = 7, _a));
                };
                /** 设置显示状态 */
                inGamePage.prototype.setShowItem = function (item) {
                    this.updateData();
                    this.isMove = false;
                    inGamePage.isGameStart = false;
                    this.handle.setting.transform.visible = false;
                    this.handle.progressbar.transform.visible = false;
                    //this.handle.rank.transform.visible = false;
                    this.handle.numlabel.transform.visible = false;
                    this.handle.customs.transform.visible = false;
                    this.advi.transform.visible = false;
                    this.handle.home.transform.visible = false;
                    switch (item) {
                        case showItem.shop:
                            break;
                        case showItem.Rank:
                            this.handle.home.transform.visible = true;
                            break;
                        case showItem.gameOver:
                            AudioMgr_10.AudioMgr.setMute(!GameMgr_24.GameMgr.swSound);
                            this.handle.home.transform.visible = true;
                            this.advi.transform.visible = true;
                            this.isBannerVisible = true;
                            this.showBanner("adunit-118f3874747e250d");
                            if (configMgr_7.configMgr.needRefreshADBanner) {
                                joinTool_8.joinTool.reMakeBottomAds(); //重建 新广告
                            }
                            break;
                        case showItem.continu:
                            this.showBanner("adunit-118f3874747e250d");
                            console.log("继续");
                            break;
                        case showItem.home:
                            // console.log("??"+GameMgr.swSound);
                            AudioMgr_10.AudioMgr.stopAll();
                            AudioMgr_10.AudioMgr.setMute(!GameMgr_24.GameMgr.swSound);
                            joinTool_8.joinTool.hide_item_Ranks();
                            this.advi.transform.visible = true;
                            this.handle.customs.transform.setLayoutValue(this.opt.TOP, 210);
                            this.handle.customs.transform.visible = true;
                            this.setValue(0);
                            this.handle.setting.transform.visible = false;
                            this.handle.progressbar.transform.visible = true;
                            this.handle.progressbar.setLayoutValue(this.opt.TOP, this.maxTopY);
                            break;
                        case showItem.allShow:
                            console.log("游戏中");
                            this.showBanner("adunit-95c314f355907cd5");
                            this.handle.customs.fontsize = 30;
                            this.handle.customs.transform.setLayoutValue(this.opt.TOP, 90);
                            this.isMove = true;
                            inGamePage.isGameStart = true;
                            this.handle.progressbar.transform.visible = true;
                            break;
                    }
                };
                inGamePage.prototype.update = function (d) {
                    this.doProgressBarAnim(d);
                    this.doCollectAnim(d);
                };
                //顶部进度条 移动动画
                inGamePage.prototype.doProgressBarAnim = function (d) {
                    if (this.isMove) {
                        var speed = this.handle.progressbar.getLayoutValue(this.opt.TOP) - this.ySpeed * d;
                        this.handle.progressbar.setLayoutValue(this.opt.TOP, Math.max(speed, this.minTopY));
                        if (speed <= this.minTopY) {
                            // this.handle.rank.visible = true;
                            this.isMove = false;
                            this.handle.customs.transform.visible = true;
                            this.handle.customs.fontsize = 40;
                            //显示 排名
                            this.handle.numlabel.transform.visible = true;
                        }
                    }
                };
                /**
                 * 拥有的钻石
                 */
                inGamePage.prototype.setDiamond = function (diamond) {
                    this.handle.diamond.text = diamond + "";
                    this.handle.diamond.transform.markDirty();
                };
                /**
                 * 更新钻石等信息
                 */
                inGamePage.prototype.updateData = function () {
                    this.setDiamond(saveTool_7.saveTool.diamond);
                };
                inGamePage.prototype.show = function () {
                    this.handle.show();
                };
                inGamePage.prototype.hide = function () {
                    this.handle.hide();
                };
                inGamePage.prototype.showBanner = function (bannerId) {
                    if (this.isBannerVisible) {
                        joinTool_8.joinTool.showBottomAd(bannerId);
                    }
                    // this.handle.banner.transform.visible = true;
                };
                inGamePage.prefabName = "inGame_page"; //依赖的 预设体 资源
                inGamePage.atlasList = ["ingame"]; //依赖的 图集资源
                inGamePage.isGameStart = false;
                return inGamePage;
            }()));
            (function (showItem) {
                showItem[showItem["home"] = 0] = "home";
                showItem[showItem["allShow"] = 1] = "allShow";
                showItem[showItem["gameOver"] = 2] = "gameOver";
                showItem[showItem["continu"] = 3] = "continu";
                showItem[showItem["shop"] = 4] = "shop";
                showItem[showItem["Rank"] = 5] = "Rank";
            })(showItem || (showItem = {}));
            exports_52("showItem", showItem);
        }
    };
});
System.register("lab/coin", [], function (exports_53, context_53) {
    "use strict";
    var coin;
    var __moduleName = context_53 && context_53.id;
    return {
        setters: [],
        execute: function () {
            exports_53("coin", coin = /** @class */ (function (_super) {
                __extends(coin, _super);
                function coin() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.rollingSpeed = 0.6; // RPS
                    _this.rollingTheta = _this.rollingSpeed * 360;
                    _this.eular = 180;
                    _this.flyDistance = 8;
                    _this.flyTime = 0.2;
                    _this.flySpeed = _this.flyDistance / _this.flyTime;
                    _this.flyTimer = 0;
                    _this.isFlying = false;
                    return _this;
                }
                coin.prototype.onPlay = function () {
                    this.gameObject.visible = true;
                    this.trans = this.gameObject.transform;
                    this.baseHeight = this.trans.localTranslate.y;
                };
                coin.prototype.update = function (delta) {
                    this.roll(delta);
                    if (this.isFlying)
                        this.fly(delta);
                };
                coin.prototype.roll = function (delta) {
                    this.eular += this.rollingTheta * delta;
                    m4m.math.quatFromEulerAngles(-90, this.eular, 180, this.trans.localRotate);
                    this.trans.localRotate = this.trans.localRotate;
                };
                coin.prototype.fly = function (delta) {
                    if (this.flyTimer < this.flyTime) {
                        this.trans.localTranslate.y += this.flySpeed * delta;
                        this.flyTimer += delta;
                    }
                    else {
                        // reset
                        this.gameObject.visible = false;
                        this.isFlying = false;
                        this.flyTimer = 0;
                        this.trans.localTranslate.y = this.baseHeight;
                    }
                };
                coin.prototype.remove = function () {
                };
                coin = __decorate([
                    m4m.reflect.nodeComponent
                ], coin);
                return coin;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("AutoCode/Net/DataEvents/GameArchiveDataEvent", [], function (exports_54, context_54) {
    "use strict";
    var GameArchiveDataEvent;
    var __moduleName = context_54 && context_54.id;
    return {
        setters: [],
        execute: function () {
            exports_54("GameArchiveDataEvent", GameArchiveDataEvent = /** @class */ (function () {
                function GameArchiveDataEvent() {
                }
                /** 初始化全部数据*/
                GameArchiveDataEvent.All = "All";
                /** 批量加载数据*/
                GameArchiveDataEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                GameArchiveDataEvent.TipData = "TipData";
                /** ID*/
                GameArchiveDataEvent.id = "id";
                /** 角色配置数据*/
                GameArchiveDataEvent.baseData = "baseData";
                /** 关卡数据*/
                GameArchiveDataEvent.Currentlevel = "Currentlevel";
                /** 上次使用时间*/
                GameArchiveDataEvent.lastTime = "lastTime";
                /** 是否是nft*/
                GameArchiveDataEvent.ism4mnft = "ism4mnft";
                /** 使用者*/
                GameArchiveDataEvent.playerToken = "playerToken";
                return GameArchiveDataEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/LevelBaseEvent", [], function (exports_55, context_55) {
    "use strict";
    var LevelBaseEvent;
    var __moduleName = context_55 && context_55.id;
    return {
        setters: [],
        execute: function () {
            exports_55("LevelBaseEvent", LevelBaseEvent = /** @class */ (function () {
                function LevelBaseEvent() {
                }
                /** 初始化全部数据*/
                LevelBaseEvent.All = "All";
                /** 批量加载数据*/
                LevelBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                LevelBaseEvent.TipData = "TipData";
                /** ID*/
                LevelBaseEvent.id = "id";
                /** 数量*/
                LevelBaseEvent.amount = "amount";
                /** 关卡名称*/
                LevelBaseEvent.stageName = "stageName";
                /** 跑道长度*/
                LevelBaseEvent.runwayLength = "runwayLength";
                /** 跑道宽度*/
                LevelBaseEvent.runwayWeight = "runwayWeight";
                /** 最小值*/
                LevelBaseEvent.cubeSpMin = "cubeSpMin";
                /** 最大值*/
                LevelBaseEvent.cubeSpMax = "cubeSpMax";
                /** 速度*/
                LevelBaseEvent.beyondRate = "beyondRate";
                /** 重力*/
                LevelBaseEvent.bootsWght = "bootsWght";
                /** 复活计数*/
                LevelBaseEvent.reviveCount = "reviveCount";
                return LevelBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/MainBaseEvent", [], function (exports_56, context_56) {
    "use strict";
    var MainBaseEvent;
    var __moduleName = context_56 && context_56.id;
    return {
        setters: [],
        execute: function () {
            exports_56("MainBaseEvent", MainBaseEvent = /** @class */ (function () {
                function MainBaseEvent() {
                }
                /** 初始化全部数据*/
                MainBaseEvent.All = "All";
                /** 批量加载数据*/
                MainBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                MainBaseEvent.TipData = "TipData";
                /** ID*/
                MainBaseEvent.id = "id";
                /** 角色速度*/
                MainBaseEvent.roleBspeed = "roleBspeed";
                /** 角色加速度*/
                MainBaseEvent.roleStepSpeed = "roleStepSpeed";
                /** 色彩速度*/
                MainBaseEvent.colorSpeed = "colorSpeed";
                /** 分配器速度*/
                MainBaseEvent.DistorSpeed = "DistorSpeed";
                /** 距离传感器量程*/
                MainBaseEvent.DistorVrange = "DistorVrange";
                /** 距离传感器范围*/
                MainBaseEvent.DistorHrange = "DistorHrange";
                /** 间隙*/
                MainBaseEvent.obsBaseGap = "obsBaseGap";
                /** 升压发电机速度*/
                MainBaseEvent.BoostGenSpeed = "BoostGenSpeed";
                /** 单立方根速率*/
                MainBaseEvent.singleCubeGenRate = "singleCubeGenRate";
                /** 场景颜色间隙*/
                MainBaseEvent.sceneColorHGap = "sceneColorHGap";
                /** 第一种颜色H*/
                MainBaseEvent.firstColorH = "firstColorH";
                /** 第一种颜色S*/
                MainBaseEvent.firstColorS = "firstColorS";
                /** 第一种颜色V*/
                MainBaseEvent.firstColorV = "firstColorV";
                /** 速度相加距离*/
                MainBaseEvent.speedAddDistance = "speedAddDistance";
                /** 速度增加率*/
                MainBaseEvent.speedAddRate = "speedAddRate";
                /** 玩家最大速度*/
                MainBaseEvent.playerMaxSpeed = "playerMaxSpeed";
                /** 添加最大步长*/
                MainBaseEvent.addMaxStepNum = "addMaxStepNum";
                /** 步长时间长度*/
                MainBaseEvent.stepTimeLength = "stepTimeLength";
                /** 方块速度*/
                MainBaseEvent.DiamonGenSpeed = "DiamonGenSpeed";
                /** 机器人速度*/
                MainBaseEvent.robotBSpeed = "robotBSpeed";
                /** 机器人超越限制*/
                MainBaseEvent.robotReSurpassLimit = "robotReSurpassLimit";
                /** 看广告*/
                MainBaseEvent.watchVideo = "watchVideo";
                /** 需要刷新广告横幅*/
                MainBaseEvent.needRefreshADBanner = "needRefreshADBanner";
                return MainBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/SkinBaseEvent", [], function (exports_57, context_57) {
    "use strict";
    var SkinBaseEvent;
    var __moduleName = context_57 && context_57.id;
    return {
        setters: [],
        execute: function () {
            exports_57("SkinBaseEvent", SkinBaseEvent = /** @class */ (function () {
                function SkinBaseEvent() {
                }
                /** 初始化全部数据*/
                SkinBaseEvent.All = "All";
                /** 批量加载数据*/
                SkinBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                SkinBaseEvent.TipData = "TipData";
                /** ID*/
                SkinBaseEvent.id = "id";
                /** 名称*/
                SkinBaseEvent.skinName = "skinName";
                /** 头像名*/
                SkinBaseEvent.headPortrait = "headPortrait";
                /** 皮肤名*/
                SkinBaseEvent.skinSticker = "skinSticker";
                /** 解锁条件*/
                SkinBaseEvent.deblocking = "deblocking";
                /** 颜色*/
                SkinBaseEvent.color = "color";
                /** 类型*/
                SkinBaseEvent.renderType = "renderType";
                return SkinBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/ThemeBaseEvent", [], function (exports_58, context_58) {
    "use strict";
    var ThemeBaseEvent;
    var __moduleName = context_58 && context_58.id;
    return {
        setters: [],
        execute: function () {
            exports_58("ThemeBaseEvent", ThemeBaseEvent = /** @class */ (function () {
                function ThemeBaseEvent() {
                }
                /** 初始化全部数据*/
                ThemeBaseEvent.All = "All";
                /** 批量加载数据*/
                ThemeBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                ThemeBaseEvent.TipData = "TipData";
                /** ID*/
                ThemeBaseEvent.id = "id";
                /** 名称*/
                ThemeBaseEvent.sceneName = "sceneName";
                /** 图片1名称*/
                ThemeBaseEvent.image1 = "image1";
                /** 图片2名称*/
                ThemeBaseEvent.image2 = "image2";
                /** 模型图片*/
                ThemeBaseEvent.cubeImage = "cubeImage";
                /** 解锁条件*/
                ThemeBaseEvent.deblocking = "deblocking";
                /** 颜色*/
                ThemeBaseEvent.color = "color";
                /** 范围*/
                ThemeBaseEvent.hRange = "hRange";
                /** 因素1*/
                ThemeBaseEvent.sFactor = "sFactor";
                /** 因素2*/
                ThemeBaseEvent.vFactor = "vFactor";
                /** 图标名称*/
                ThemeBaseEvent.icon = "icon";
                /** 类型*/
                ThemeBaseEvent.isDynamicColor = "isDynamicColor";
                return ThemeBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/UploadIpfsDataEvent", [], function (exports_59, context_59) {
    "use strict";
    var UploadIpfsDataEvent;
    var __moduleName = context_59 && context_59.id;
    return {
        setters: [],
        execute: function () {
            exports_59("UploadIpfsDataEvent", UploadIpfsDataEvent = /** @class */ (function () {
                function UploadIpfsDataEvent() {
                }
                /** 初始化全部数据*/
                UploadIpfsDataEvent.All = "All";
                /** 批量加载数据*/
                UploadIpfsDataEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                UploadIpfsDataEvent.TipData = "TipData";
                /** ID*/
                UploadIpfsDataEvent.id = "id";
                /** 图片名称*/
                UploadIpfsDataEvent.ImageName = "ImageName";
                /** 本地图片路径*/
                UploadIpfsDataEvent.ImageUrl = "ImageUrl";
                /** 上传的ipfs上的图片唯一标识*/
                UploadIpfsDataEvent.IpfsImagehash = "IpfsImagehash";
                /** 本地资源路径*/
                UploadIpfsDataEvent.modelUrl = "modelUrl";
                /** 上传的ipfs上到资源唯一标识*/
                UploadIpfsDataEvent.Ipfsmodelhash = "Ipfsmodelhash";
                return UploadIpfsDataEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/WsDataManager", ["ArrangementData", "Data/Map", "EquipBase", "EquipDate", "EquipEffectBase", "EquipExpBase", "ErrorInfo", "Formulas", "GameArchiveData", "ItemBase", "ItemData", "LevelBase", "MainBase", "RoleBase", "RoleData", "ServerUserData", "SeverConfigBase", "SeverData", "SkinBase", "test", "ThemeBase", "TimeEvent", "UploadIpfsData", "UserDataBase", "UserVarBase", "WalletErrLog", "WalletLog"], function (exports_60, context_60) {
    "use strict";
    var ArrangementData_1, Map_1, EquipBase_1, EquipDate_1, EquipEffectBase_1, EquipExpBase_1, ErrorInfo_1, Formulas_1, GameArchiveData_1, ItemBase_1, ItemData_1, LevelBase_1, MainBase_1, RoleBase_1, RoleData_1, ServerUserData_1, SeverConfigBase_1, SeverData_1, SkinBase_1, test_1, ThemeBase_1, TimeEvent_1, UploadIpfsData_1, UserDataBase_1, UserVarBase_1, WalletErrLog_1, WalletLog_1, WsDataManager;
    var __moduleName = context_60 && context_60.id;
    return {
        setters: [
            function (ArrangementData_1_1) {
                ArrangementData_1 = ArrangementData_1_1;
            },
            function (Map_1_1) {
                Map_1 = Map_1_1;
            },
            function (EquipBase_1_1) {
                EquipBase_1 = EquipBase_1_1;
            },
            function (EquipDate_1_1) {
                EquipDate_1 = EquipDate_1_1;
            },
            function (EquipEffectBase_1_1) {
                EquipEffectBase_1 = EquipEffectBase_1_1;
            },
            function (EquipExpBase_1_1) {
                EquipExpBase_1 = EquipExpBase_1_1;
            },
            function (ErrorInfo_1_1) {
                ErrorInfo_1 = ErrorInfo_1_1;
            },
            function (Formulas_1_1) {
                Formulas_1 = Formulas_1_1;
            },
            function (GameArchiveData_1_1) {
                GameArchiveData_1 = GameArchiveData_1_1;
            },
            function (ItemBase_1_1) {
                ItemBase_1 = ItemBase_1_1;
            },
            function (ItemData_1_1) {
                ItemData_1 = ItemData_1_1;
            },
            function (LevelBase_1_1) {
                LevelBase_1 = LevelBase_1_1;
            },
            function (MainBase_1_1) {
                MainBase_1 = MainBase_1_1;
            },
            function (RoleBase_1_1) {
                RoleBase_1 = RoleBase_1_1;
            },
            function (RoleData_1_1) {
                RoleData_1 = RoleData_1_1;
            },
            function (ServerUserData_1_1) {
                ServerUserData_1 = ServerUserData_1_1;
            },
            function (SeverConfigBase_1_1) {
                SeverConfigBase_1 = SeverConfigBase_1_1;
            },
            function (SeverData_1_1) {
                SeverData_1 = SeverData_1_1;
            },
            function (SkinBase_1_1) {
                SkinBase_1 = SkinBase_1_1;
            },
            function (test_1_1) {
                test_1 = test_1_1;
            },
            function (ThemeBase_1_1) {
                ThemeBase_1 = ThemeBase_1_1;
            },
            function (TimeEvent_1_1) {
                TimeEvent_1 = TimeEvent_1_1;
            },
            function (UploadIpfsData_1_1) {
                UploadIpfsData_1 = UploadIpfsData_1_1;
            },
            function (UserDataBase_1_1) {
                UserDataBase_1 = UserDataBase_1_1;
            },
            function (UserVarBase_1_1) {
                UserVarBase_1 = UserVarBase_1_1;
            },
            function (WalletErrLog_1_1) {
                WalletErrLog_1 = WalletErrLog_1_1;
            },
            function (WalletLog_1_1) {
                WalletLog_1 = WalletLog_1_1;
            }
        ],
        execute: function () {
            exports_60("WsDataManager", WsDataManager = /** @class */ (function () {
                function WsDataManager() {
                }
                WsDataManager.setData = function (className, data) {
                    WsDataManager[className + "Data"].clone(data);
                    WsDataManager[className + "Data"].dispatchEvent("All", data);
                };
                WsDataManager.changeDataList = function (className, data) {
                    var getClass = WsDataManager[className + "DataList"];
                    if (getClass) {
                        var newMap = new Map_1.cMap();
                        for (var key in data) {
                            newMap.set(key, data[key]);
                        }
                        getClass.list = newMap;
                    }
                    WsDataManager[className + "Data"].dispatchEvent("ChangeList", data);
                };
                WsDataManager.changeData = function (className, proName, paramType, data) {
                    var param = WsDataManager[className + "Data"][proName];
                    switch (paramType) {
                        case "list":
                            if (!param) {
                                WsDataManager[className + "Data"][proName] = [];
                            }
                            for (var key = 0; key < data.length; key++) {
                                if (key >= param.length) {
                                    WsDataManager[className + "Data"][proName].push(data[key]);
                                }
                                else {
                                    WsDataManager[className + "Data"][proName][key] = data[key];
                                }
                            }
                            break;
                        case "map":
                            var oldMap = void 0;
                            if (WsDataManager[className + "Data"][proName]) {
                                oldMap = WsDataManager[className + "Data"][proName];
                            }
                            else {
                                oldMap = {};
                            }
                            for (var key in data) {
                                oldMap[key] = data[key];
                            }
                            WsDataManager[className + "Data"][proName] = oldMap;
                            break;
                        case "mapdel":
                            var oldMapDel = void 0;
                            if (WsDataManager[className + "Data"][proName]) {
                                oldMapDel = WsDataManager[className + "Data"][proName];
                            }
                            else {
                                oldMapDel = {};
                            }
                            for (var key in data) {
                                if (oldMapDel[key]) {
                                    delete oldMapDel[key];
                                }
                            }
                            WsDataManager[className + "Data"][proName] = oldMapDel;
                            break;
                        default:
                            WsDataManager[className + "Data"][proName] = data;
                    }
                    WsDataManager[className + "Data"].dispatchEvent(proName, data);
                };
                WsDataManager.dispatchTipData = function (className, data) {
                    WsDataManager[className + "Data"].dispatchEvent("TipData", data);
                };
                WsDataManager.ArrangementDataData = new ArrangementData_1.ArrangementData();
                WsDataManager.EquipBaseData = new EquipBase_1.EquipBase();
                WsDataManager.EquipDateData = new EquipDate_1.EquipDate();
                WsDataManager.EquipEffectBaseData = new EquipEffectBase_1.EquipEffectBase();
                WsDataManager.EquipExpBaseData = new EquipExpBase_1.EquipExpBase();
                WsDataManager.GameArchiveDataData = new GameArchiveData_1.GameArchiveData();
                WsDataManager.ItemBaseData = new ItemBase_1.ItemBase();
                WsDataManager.ItemDataData = new ItemData_1.ItemData();
                WsDataManager.LevelBaseData = new LevelBase_1.LevelBase();
                WsDataManager.MainBaseData = new MainBase_1.MainBase();
                WsDataManager.RoleBaseData = new RoleBase_1.RoleBase();
                WsDataManager.RoleDataData = new RoleData_1.RoleData();
                WsDataManager.SkinBaseData = new SkinBase_1.SkinBase();
                WsDataManager.testData = new test_1.test();
                WsDataManager.ThemeBaseData = new ThemeBase_1.ThemeBase();
                WsDataManager.UploadIpfsDataData = new UploadIpfsData_1.UploadIpfsData();
                WsDataManager.UserDataBaseData = new UserDataBase_1.UserDataBase();
                WsDataManager.UserVarBaseData = new UserVarBase_1.UserVarBase();
                WsDataManager.WalletErrLogData = new WalletErrLog_1.WalletErrLog();
                WsDataManager.WalletLogData = new WalletLog_1.WalletLog();
                WsDataManager.ErrorInfoData = new ErrorInfo_1.ErrorInfo();
                WsDataManager.FormulasData = new Formulas_1.Formulas();
                WsDataManager.ServerUserDataData = new ServerUserData_1.ServerUserData();
                WsDataManager.SeverConfigBaseData = new SeverConfigBase_1.SeverConfigBase();
                WsDataManager.SeverDataData = new SeverData_1.SeverData();
                WsDataManager.TimeEventData = new TimeEvent_1.TimeEvent();
                WsDataManager.ArrangementDataDataList = ArrangementData_1.ArrangementData;
                WsDataManager.EquipBaseDataList = EquipBase_1.EquipBase;
                WsDataManager.EquipDateDataList = EquipDate_1.EquipDate;
                WsDataManager.EquipEffectBaseDataList = EquipEffectBase_1.EquipEffectBase;
                WsDataManager.EquipExpBaseDataList = EquipExpBase_1.EquipExpBase;
                WsDataManager.GameArchiveDataDataList = GameArchiveData_1.GameArchiveData;
                WsDataManager.ItemBaseDataList = ItemBase_1.ItemBase;
                WsDataManager.ItemDataDataList = ItemData_1.ItemData;
                WsDataManager.LevelBaseDataList = LevelBase_1.LevelBase;
                WsDataManager.MainBaseDataList = MainBase_1.MainBase;
                WsDataManager.RoleBaseDataList = RoleBase_1.RoleBase;
                WsDataManager.RoleDataDataList = RoleData_1.RoleData;
                WsDataManager.SkinBaseDataList = SkinBase_1.SkinBase;
                WsDataManager.testDataList = test_1.test;
                WsDataManager.ThemeBaseDataList = ThemeBase_1.ThemeBase;
                WsDataManager.UploadIpfsDataDataList = UploadIpfsData_1.UploadIpfsData;
                WsDataManager.UserDataBaseDataList = UserDataBase_1.UserDataBase;
                WsDataManager.UserVarBaseDataList = UserVarBase_1.UserVarBase;
                WsDataManager.WalletErrLogDataList = WalletErrLog_1.WalletErrLog;
                WsDataManager.WalletLogDataList = WalletLog_1.WalletLog;
                WsDataManager.ErrorInfoDataList = ErrorInfo_1.ErrorInfo;
                WsDataManager.FormulasDataList = Formulas_1.Formulas;
                WsDataManager.ServerUserDataDataList = ServerUserData_1.ServerUserData;
                WsDataManager.SeverConfigBaseDataList = SeverConfigBase_1.SeverConfigBase;
                WsDataManager.SeverDataDataList = SeverData_1.SeverData;
                WsDataManager.TimeEventDataList = TimeEvent_1.TimeEvent;
                return WsDataManager;
            }()));
        }
    };
});
System.register("Net/AwaitDataManager", [], function (exports_61, context_61) {
    "use strict";
    var AwaitDataManager;
    var __moduleName = context_61 && context_61.id;
    return {
        setters: [],
        execute: function () {
            exports_61("AwaitDataManager", AwaitDataManager = /** @class */ (function () {
                function AwaitDataManager() {
                }
                //等待某条消息返回
                AwaitDataManager.awaitFor = function (name, success, error) {
                    //console.log("--awaitFor", name);
                    if (this._map.has(name)) {
                        throw new Error("awaitFor存在重复的key:" + name);
                    }
                    this._map.set(name, { success: success, error: error });
                };
                //发送消息
                AwaitDataManager.dispatchSuccess = function (name, params) {
                    var data = this._map.get(name);
                    if (data) {
                        data.success(params);
                        this._map.delete(name);
                    }
                };
                //发送异常消息
                AwaitDataManager.dispatchError = function (name, params) {
                    var data = this._map.get(name);
                    if (data) {
                        if (data.error) {
                            data.error(params);
                        }
                        else {
                            console.error("\u63A5\u5230\u4E00\u6761\u672A\u7ECF\u5904\u7406\u7684\u5F02\u5E38\u6D88\u606F, ".concat(name, ": ").concat(params[1]));
                        }
                        this._map.delete(name);
                    }
                };
                AwaitDataManager._map = new Map();
                return AwaitDataManager;
            }()));
        }
    };
});
System.register("AutoCode/Net/BufferDatas/ArrangementDataBuffer", ["Net/NetData"], function (exports_62, context_62) {
    "use strict";
    var NetData_1, ArrangementDataBuffer;
    var __moduleName = context_62 && context_62.id;
    return {
        setters: [
            function (NetData_1_1) {
                NetData_1 = NetData_1_1;
            }
        ],
        execute: function () {
            ArrangementDataBuffer = /** @class */ (function () {
                function ArrangementDataBuffer() {
                }
                Object.defineProperty(ArrangementDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ArrangementDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ArrangementDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_1.NetData.readString(br);
                    getData["token"] = NetData_1.NetData.readString(br);
                    len = br.readInt32();
                    var ArrangementDic = {};
                    for (var i = 0; i < len; i++) {
                        var len2 = br.readInt32();
                        var ArrangementList = [];
                        var ArrangementDicKey = NetData_1.NetData.readString(br);
                        for (var j = 0; j < len2; j++) {
                            ArrangementList.push(NetData_1.NetData.readString(br));
                        }
                        ArrangementDic[ArrangementDicKey] = ArrangementList;
                    }
                    getData["Arrangement"] = ArrangementDic;
                    len = br.readInt32();
                    var LimitList = [];
                    for (var i = 0; i < len; i++) {
                        LimitList.push(br.readInt32());
                    }
                    getData["Limit"] = LimitList;
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return ArrangementDataBuffer;
            }());
            exports_62("ArrangementDataBuffer", ArrangementDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/EquipBaseBuffer", ["Net/NetData"], function (exports_63, context_63) {
    "use strict";
    var NetData_2, EquipBaseBuffer;
    var __moduleName = context_63 && context_63.id;
    return {
        setters: [
            function (NetData_2_1) {
                NetData_2 = NetData_2_1;
            }
        ],
        execute: function () {
            EquipBaseBuffer = /** @class */ (function () {
                function EquipBaseBuffer() {
                }
                Object.defineProperty(EquipBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new EquipBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                EquipBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_2.NetData.readString(br);
                    getData["equipName"] = NetData_2.NetData.readString(br);
                    getData["visibl"] = NetData_2.NetData.readString(br);
                    getData["unlock"] = NetData_2.NetData.readString(br);
                    getData["buildTime"] = NetData_2.NetData.readString(br);
                    getData["PortfolioCost"] = NetData_2.NetData.readString(br);
                    getData["maxEffect"] = br.readByte();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return EquipBaseBuffer;
            }());
            exports_63("EquipBaseBuffer", EquipBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/EquipDateBuffer", ["Net/NetData", "AutoCode/Net/BufferDatas/EquipBaseBuffer"], function (exports_64, context_64) {
    "use strict";
    var NetData_3, EquipBaseBuffer_1, EquipDateBuffer;
    var __moduleName = context_64 && context_64.id;
    return {
        setters: [
            function (NetData_3_1) {
                NetData_3 = NetData_3_1;
            },
            function (EquipBaseBuffer_1_1) {
                EquipBaseBuffer_1 = EquipBaseBuffer_1_1;
            }
        ],
        execute: function () {
            EquipDateBuffer = /** @class */ (function () {
                function EquipDateBuffer() {
                }
                Object.defineProperty(EquipDateBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new EquipDateBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                EquipDateBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_3.NetData.readString(br);
                    len = br.readInt32();
                    var equipDataList = [];
                    for (var i = 0; i < len; i++) {
                        equipDataList.push(EquipBaseBuffer_1.EquipBaseBuffer.Instance.readArrayBuffer(br));
                    }
                    getData["equipData"] = equipDataList;
                    getData["equipStartTime"] = br.readULong();
                    getData["equipEndTime"] = br.readULong();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return EquipDateBuffer;
            }());
            exports_64("EquipDateBuffer", EquipDateBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/EquipEffectBaseBuffer", ["Net/NetData"], function (exports_65, context_65) {
    "use strict";
    var NetData_4, EquipEffectBaseBuffer;
    var __moduleName = context_65 && context_65.id;
    return {
        setters: [
            function (NetData_4_1) {
                NetData_4 = NetData_4_1;
            }
        ],
        execute: function () {
            EquipEffectBaseBuffer = /** @class */ (function () {
                function EquipEffectBaseBuffer() {
                }
                Object.defineProperty(EquipEffectBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new EquipEffectBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                EquipEffectBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_4.NetData.readString(br);
                    getData["equipEffectName"] = NetData_4.NetData.readString(br);
                    getData["equipEffectdesc"] = NetData_4.NetData.readString(br);
                    getData["equipEffecticon"] = NetData_4.NetData.readString(br);
                    getData["equipEffectType"] = br.readByte();
                    len = br.readInt32();
                    var statusDic = {};
                    for (var i = 0; i < len; i++) {
                        var statusDicKey = NetData_4.NetData.readString(br);
                        statusDic[statusDicKey] = br.readInt32();
                    }
                    getData["status"] = statusDic;
                    getData["equipEffect"] = NetData_4.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return EquipEffectBaseBuffer;
            }());
            exports_65("EquipEffectBaseBuffer", EquipEffectBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/EquipExpBaseBuffer", ["Net/NetData"], function (exports_66, context_66) {
    "use strict";
    var NetData_5, EquipExpBaseBuffer;
    var __moduleName = context_66 && context_66.id;
    return {
        setters: [
            function (NetData_5_1) {
                NetData_5 = NetData_5_1;
            }
        ],
        execute: function () {
            EquipExpBaseBuffer = /** @class */ (function () {
                function EquipExpBaseBuffer() {
                }
                Object.defineProperty(EquipExpBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new EquipExpBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                EquipExpBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_5.NetData.readString(br);
                    getData["lv"] = NetData_5.NetData.readString(br);
                    getData["expMax"] = NetData_5.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return EquipExpBaseBuffer;
            }());
            exports_66("EquipExpBaseBuffer", EquipExpBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/ErrorInfoBuffer", ["Net/NetData"], function (exports_67, context_67) {
    "use strict";
    var NetData_6, ErrorInfoBuffer;
    var __moduleName = context_67 && context_67.id;
    return {
        setters: [
            function (NetData_6_1) {
                NetData_6 = NetData_6_1;
            }
        ],
        execute: function () {
            ErrorInfoBuffer = /** @class */ (function () {
                function ErrorInfoBuffer() {
                }
                Object.defineProperty(ErrorInfoBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ErrorInfoBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ErrorInfoBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_6.NetData.readString(br);
                    getData["message"] = NetData_6.NetData.readString(br);
                    getData["errorType"] = NetData_6.NetData.readString(br);
                    getData["time"] = NetData_6.NetData.readString(br);
                    getData["modelType"] = NetData_6.NetData.readString(br);
                    getData["ip"] = NetData_6.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return ErrorInfoBuffer;
            }());
            exports_67("ErrorInfoBuffer", ErrorInfoBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/FormulasBuffer", ["Net/NetData"], function (exports_68, context_68) {
    "use strict";
    var NetData_7, FormulasBuffer;
    var __moduleName = context_68 && context_68.id;
    return {
        setters: [
            function (NetData_7_1) {
                NetData_7 = NetData_7_1;
            }
        ],
        execute: function () {
            FormulasBuffer = /** @class */ (function () {
                function FormulasBuffer() {
                }
                Object.defineProperty(FormulasBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new FormulasBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                FormulasBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_7.NetData.readString(br);
                    getData["depict"] = NetData_7.NetData.readString(br);
                    getData["formulas"] = NetData_7.NetData.readString(br);
                    getData["randomRange"] = br.readSingle();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return FormulasBuffer;
            }());
            exports_68("FormulasBuffer", FormulasBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/SkinBaseBuffer", ["Net/NetData"], function (exports_69, context_69) {
    "use strict";
    var NetData_8, SkinBaseBuffer;
    var __moduleName = context_69 && context_69.id;
    return {
        setters: [
            function (NetData_8_1) {
                NetData_8 = NetData_8_1;
            }
        ],
        execute: function () {
            SkinBaseBuffer = /** @class */ (function () {
                function SkinBaseBuffer() {
                }
                Object.defineProperty(SkinBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new SkinBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                SkinBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_8.NetData.readString(br);
                    getData["skinName"] = NetData_8.NetData.readString(br);
                    getData["headPortrait"] = NetData_8.NetData.readString(br);
                    getData["skinSticker"] = NetData_8.NetData.readString(br);
                    len = br.readInt32();
                    var deblockingDic = {};
                    for (var i = 0; i < len; i++) {
                        var deblockingDicKey = NetData_8.NetData.readString(br);
                        deblockingDic[deblockingDicKey] = br.readInt32();
                    }
                    getData["deblocking"] = deblockingDic;
                    getData["color"] = NetData_8.NetData.readString(br);
                    getData["renderType"] = br.readByte();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return SkinBaseBuffer;
            }());
            exports_69("SkinBaseBuffer", SkinBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/LevelBaseBuffer", ["Net/NetData"], function (exports_70, context_70) {
    "use strict";
    var NetData_9, LevelBaseBuffer;
    var __moduleName = context_70 && context_70.id;
    return {
        setters: [
            function (NetData_9_1) {
                NetData_9 = NetData_9_1;
            }
        ],
        execute: function () {
            LevelBaseBuffer = /** @class */ (function () {
                function LevelBaseBuffer() {
                }
                Object.defineProperty(LevelBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new LevelBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                LevelBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_9.NetData.readString(br);
                    getData["amount"] = br.readUInt32();
                    getData["stageName"] = NetData_9.NetData.readString(br);
                    getData["runwayLength"] = br.readUInt32();
                    len = br.readInt32();
                    var runwayWeightList = [];
                    for (var i = 0; i < len; i++) {
                        runwayWeightList.push(br.readInt32());
                    }
                    getData["runwayWeight"] = runwayWeightList;
                    getData["cubeSpMin"] = br.readSingle();
                    getData["cubeSpMax"] = br.readSingle();
                    getData["beyondRate"] = br.readSingle();
                    len = br.readInt32();
                    var bootsWghtList = [];
                    for (var i = 0; i < len; i++) {
                        bootsWghtList.push(br.readInt32());
                    }
                    getData["bootsWght"] = bootsWghtList;
                    getData["reviveCount"] = br.readByte();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return LevelBaseBuffer;
            }());
            exports_70("LevelBaseBuffer", LevelBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/GameArchiveDataBuffer", ["Net/NetData", "AutoCode/Net/BufferDatas/SkinBaseBuffer", "AutoCode/Net/BufferDatas/LevelBaseBuffer"], function (exports_71, context_71) {
    "use strict";
    var NetData_10, SkinBaseBuffer_1, LevelBaseBuffer_1, GameArchiveDataBuffer;
    var __moduleName = context_71 && context_71.id;
    return {
        setters: [
            function (NetData_10_1) {
                NetData_10 = NetData_10_1;
            },
            function (SkinBaseBuffer_1_1) {
                SkinBaseBuffer_1 = SkinBaseBuffer_1_1;
            },
            function (LevelBaseBuffer_1_1) {
                LevelBaseBuffer_1 = LevelBaseBuffer_1_1;
            }
        ],
        execute: function () {
            GameArchiveDataBuffer = /** @class */ (function () {
                function GameArchiveDataBuffer() {
                }
                Object.defineProperty(GameArchiveDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new GameArchiveDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                GameArchiveDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_10.NetData.readString(br);
                    getData["baseData"] = SkinBaseBuffer_1.SkinBaseBuffer.Instance.readArrayBuffer(br);
                    getData["Currentlevel"] = LevelBaseBuffer_1.LevelBaseBuffer.Instance.readArrayBuffer(br);
                    getData["ism4mnft"] = br.readBoolean();
                    getData["playerToken"] = NetData_10.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return GameArchiveDataBuffer;
            }());
            exports_71("GameArchiveDataBuffer", GameArchiveDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/ItemBaseBuffer", ["Net/NetData"], function (exports_72, context_72) {
    "use strict";
    var NetData_11, ItemBaseBuffer;
    var __moduleName = context_72 && context_72.id;
    return {
        setters: [
            function (NetData_11_1) {
                NetData_11 = NetData_11_1;
            }
        ],
        execute: function () {
            ItemBaseBuffer = /** @class */ (function () {
                function ItemBaseBuffer() {
                }
                Object.defineProperty(ItemBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ItemBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ItemBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_11.NetData.readString(br);
                    getData["itemName"] = NetData_11.NetData.readString(br);
                    getData["desc"] = NetData_11.NetData.readString(br);
                    getData["icon"] = NetData_11.NetData.readString(br);
                    getData["model"] = NetData_11.NetData.readString(br);
                    getData["effect"] = NetData_11.NetData.readString(br);
                    getData["tagType"] = br.readInt32();
                    getData["itemType"] = br.readInt32();
                    getData["quality"] = br.readInt32();
                    getData["maxNum"] = br.readInt32();
                    getData["useType"] = br.readInt32();
                    len = br.readInt32();
                    var useLimitList = [];
                    for (var i = 0; i < len; i++) {
                        useLimitList.push(NetData_11.NetData.readString(br));
                    }
                    getData["useLimit"] = useLimitList;
                    len = br.readInt32();
                    var useEffectList = [];
                    for (var i = 0; i < len; i++) {
                        useEffectList.push(NetData_11.NetData.readString(br));
                    }
                    getData["useEffect"] = useEffectList;
                    len = br.readInt32();
                    var jumpList = [];
                    for (var i = 0; i < len; i++) {
                        jumpList.push(NetData_11.NetData.readString(br));
                    }
                    getData["jump"] = jumpList;
                    len = br.readInt32();
                    var useList = [];
                    for (var i = 0; i < len; i++) {
                        useList.push(NetData_11.NetData.readString(br));
                    }
                    getData["use"] = useList;
                    getData["equipType"] = br.readInt32();
                    len = br.readInt32();
                    var statusDic = {};
                    for (var i = 0; i < len; i++) {
                        var statusDicKey = NetData_11.NetData.readString(br);
                        statusDic[statusDicKey] = br.readInt32();
                    }
                    getData["status"] = statusDic;
                    len = br.readInt32();
                    var statusUpDic = {};
                    for (var i = 0; i < len; i++) {
                        var statusUpDicKey = NetData_11.NetData.readString(br);
                        statusUpDic[statusUpDicKey] = br.readInt32();
                    }
                    getData["statusUp"] = statusUpDic;
                    getData["lv"] = br.readUInt32();
                    getData["rera"] = br.readInt32();
                    len = br.readInt32();
                    var saleDic = {};
                    for (var i = 0; i < len; i++) {
                        var saleDicKey = NetData_11.NetData.readString(br);
                        saleDic[saleDicKey] = br.readInt32();
                    }
                    getData["sale"] = saleDic;
                    len = br.readInt32();
                    var buyDic = {};
                    for (var i = 0; i < len; i++) {
                        var buyDicKey = NetData_11.NetData.readString(br);
                        buyDic[buyDicKey] = br.readInt32();
                    }
                    getData["buy"] = buyDic;
                    getData["imUse"] = br.readBoolean();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return ItemBaseBuffer;
            }());
            exports_72("ItemBaseBuffer", ItemBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/ItemDataBuffer", ["Net/NetData", "AutoCode/Net/BufferDatas/ItemBaseBuffer"], function (exports_73, context_73) {
    "use strict";
    var NetData_12, ItemBaseBuffer_1, ItemDataBuffer;
    var __moduleName = context_73 && context_73.id;
    return {
        setters: [
            function (NetData_12_1) {
                NetData_12 = NetData_12_1;
            },
            function (ItemBaseBuffer_1_1) {
                ItemBaseBuffer_1 = ItemBaseBuffer_1_1;
            }
        ],
        execute: function () {
            ItemDataBuffer = /** @class */ (function () {
                function ItemDataBuffer() {
                }
                Object.defineProperty(ItemDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ItemDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ItemDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_12.NetData.readString(br);
                    getData["itemName"] = NetData_12.NetData.readString(br);
                    getData["baseId"] = NetData_12.NetData.readString(br);
                    getData["baseData"] = ItemBaseBuffer_1.ItemBaseBuffer.Instance.readArrayBuffer(br);
                    getData["count"] = br.readUInt32();
                    getData["maxNum"] = br.readUInt32();
                    getData["fromWhere"] = NetData_12.NetData.readString(br);
                    len = br.readInt32();
                    var buyCurrencyDic = {};
                    for (var i = 0; i < len; i++) {
                        var buyCurrencyDicKey = NetData_12.NetData.readString(br);
                        buyCurrencyDic[buyCurrencyDicKey] = br.readInt32();
                    }
                    getData["buyCurrency"] = buyCurrencyDic;
                    len = br.readInt32();
                    var statusDic = {};
                    for (var i = 0; i < len; i++) {
                        var statusDicKey = NetData_12.NetData.readString(br);
                        statusDic[statusDicKey] = br.readInt32();
                    }
                    getData["status"] = statusDic;
                    getData["lv"] = br.readInt32();
                    getData["rera"] = br.readInt32();
                    getData["quality"] = br.readInt32();
                    getData["playerUuid"] = NetData_12.NetData.readString(br);
                    getData["getTime"] = br.readULong();
                    getData["statustype"] = br.readByte();
                    getData["ifUseLimit"] = br.readBoolean();
                    getData["forceTime"] = br.readULong();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return ItemDataBuffer;
            }());
            exports_73("ItemDataBuffer", ItemDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/MainBaseBuffer", ["Net/NetData"], function (exports_74, context_74) {
    "use strict";
    var NetData_13, MainBaseBuffer;
    var __moduleName = context_74 && context_74.id;
    return {
        setters: [
            function (NetData_13_1) {
                NetData_13 = NetData_13_1;
            }
        ],
        execute: function () {
            MainBaseBuffer = /** @class */ (function () {
                function MainBaseBuffer() {
                }
                Object.defineProperty(MainBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new MainBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                MainBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_13.NetData.readString(br);
                    getData["roleBspeed"] = br.readUInt32();
                    getData["roleStepSpeed"] = br.readUInt32();
                    getData["colorSpeed"] = br.readSingle();
                    getData["DistorSpeed"] = br.readSingle();
                    getData["DistorVrange"] = br.readUInt32();
                    getData["DistorHrange"] = br.readUInt32();
                    getData["obsBaseGap"] = br.readUInt32();
                    getData["BoostGenSpeed"] = br.readUInt32();
                    getData["singleCubeGenRate"] = br.readSingle();
                    getData["sceneColorHGap"] = br.readUInt32();
                    getData["firstColorH"] = br.readUInt32();
                    getData["firstColorS"] = br.readUInt32();
                    getData["firstColorV"] = br.readUInt32();
                    getData["speedAddDistance"] = br.readUInt32();
                    getData["speedAddRate"] = br.readUInt32();
                    getData["playerMaxSpeed"] = br.readUInt32();
                    getData["addMaxStepNum"] = br.readUInt32();
                    getData["stepTimeLength"] = br.readSingle();
                    getData["DiamonGenSpeed"] = br.readUInt32();
                    getData["robotBSpeed"] = br.readUInt32();
                    getData["robotReSurpassLimit"] = br.readUInt32();
                    getData["watchVideo"] = br.readUInt32();
                    getData["needRefreshADBanner"] = br.readBoolean();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return MainBaseBuffer;
            }());
            exports_74("MainBaseBuffer", MainBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/RoleBaseBuffer", ["Net/NetData"], function (exports_75, context_75) {
    "use strict";
    var NetData_14, RoleBaseBuffer;
    var __moduleName = context_75 && context_75.id;
    return {
        setters: [
            function (NetData_14_1) {
                NetData_14 = NetData_14_1;
            }
        ],
        execute: function () {
            RoleBaseBuffer = /** @class */ (function () {
                function RoleBaseBuffer() {
                }
                Object.defineProperty(RoleBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new RoleBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                RoleBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_14.NetData.readString(br);
                    getData["roleName"] = NetData_14.NetData.readString(br);
                    getData["jobType"] = br.readByte();
                    getData["heroId"] = br.readByte();
                    getData["icon"] = NetData_14.NetData.readString(br);
                    getData["model"] = NetData_14.NetData.readString(br);
                    getData["soldier"] = NetData_14.NetData.readString(br);
                    getData["spine"] = NetData_14.NetData.readString(br);
                    getData["backround"] = NetData_14.NetData.readString(br);
                    getData["desc"] = NetData_14.NetData.readString(br);
                    getData["lv"] = br.readInt32();
                    getData["rera"] = br.readByte();
                    getData["originQuality"] = br.readByte();
                    len = br.readInt32();
                    var attributeMaxDic = {};
                    for (var i = 0; i < len; i++) {
                        var attributeMaxDicKey = NetData_14.NetData.readString(br);
                        attributeMaxDic[attributeMaxDicKey] = br.readInt32();
                    }
                    getData["attributeMax"] = attributeMaxDic;
                    getData["growthLim"] = br.readInt32();
                    getData["growthMax"] = br.readInt32();
                    getData["growthSend"] = br.readInt32();
                    getData["change"] = NetData_14.NetData.readString(br);
                    getData["breakThroughMin"] = br.readInt32();
                    getData["breakThroughMax"] = br.readInt32();
                    getData["breakThroughChange"] = NetData_14.NetData.readString(br);
                    getData["breakThroughCount"] = br.readInt32();
                    getData["Potential"] = br.readInt32();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return RoleBaseBuffer;
            }());
            exports_75("RoleBaseBuffer", RoleBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/RoleDataBuffer", ["Net/NetData", "AutoCode/Net/BufferDatas/RoleBaseBuffer", "AutoCode/Net/BufferDatas/ItemDataBuffer"], function (exports_76, context_76) {
    "use strict";
    var NetData_15, RoleBaseBuffer_1, ItemDataBuffer_1, RoleDataBuffer;
    var __moduleName = context_76 && context_76.id;
    return {
        setters: [
            function (NetData_15_1) {
                NetData_15 = NetData_15_1;
            },
            function (RoleBaseBuffer_1_1) {
                RoleBaseBuffer_1 = RoleBaseBuffer_1_1;
            },
            function (ItemDataBuffer_1_1) {
                ItemDataBuffer_1 = ItemDataBuffer_1_1;
            }
        ],
        execute: function () {
            RoleDataBuffer = /** @class */ (function () {
                function RoleDataBuffer() {
                }
                Object.defineProperty(RoleDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new RoleDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                RoleDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_15.NetData.readString(br);
                    getData["roleName"] = NetData_15.NetData.readString(br);
                    getData["server"] = NetData_15.NetData.readString(br);
                    getData["baseData"] = RoleBaseBuffer_1.RoleBaseBuffer.Instance.readArrayBuffer(br);
                    getData["roleType"] = br.readByte();
                    getData["roleState"] = br.readByte();
                    len = br.readInt32();
                    var statusDic = {};
                    for (var i = 0; i < len; i++) {
                        var statusDicKey = NetData_15.NetData.readString(br);
                        statusDic[statusDicKey] = br.readInt32();
                    }
                    getData["status"] = statusDic;
                    getData["playerId"] = NetData_15.NetData.readString(br);
                    getData["lv"] = br.readInt32();
                    getData["exp"] = br.readInt32();
                    getData["rera"] = br.readInt32();
                    getData["quality"] = br.readInt32();
                    getData["currentGrowth"] = br.readInt32();
                    getData["breakThrough"] = br.readInt32();
                    getData["condition"] = br.readInt32();
                    len = br.readInt32();
                    var roleStatusDic = {};
                    for (var i = 0; i < len; i++) {
                        var roleStatusDicKey = NetData_15.NetData.readString(br);
                        roleStatusDic[roleStatusDicKey] = NetData_15.NetData.readString(br);
                    }
                    getData["roleStatus"] = roleStatusDic;
                    len = br.readInt32();
                    var currencyDic = {};
                    for (var i = 0; i < len; i++) {
                        var currencyDicKey = NetData_15.NetData.readString(br);
                        currencyDic[currencyDicKey] = br.readInt32();
                    }
                    getData["currency"] = currencyDic;
                    len = br.readInt32();
                    var equipDic = {};
                    for (var i = 0; i < len; i++) {
                        var equipDicKey = NetData_15.NetData.readString(br);
                        equipDic[equipDicKey] = ItemDataBuffer_1.ItemDataBuffer.Instance.readArrayBuffer(br);
                    }
                    getData["equip"] = equipDic;
                    getData["equipmMaxHold"] = br.readInt32();
                    len = br.readInt32();
                    var itemsDic = {};
                    for (var i = 0; i < len; i++) {
                        var itemsDicKey = NetData_15.NetData.readString(br);
                        itemsDic[itemsDicKey] = ItemDataBuffer_1.ItemDataBuffer.Instance.readArrayBuffer(br);
                    }
                    getData["items"] = itemsDic;
                    len = br.readInt32();
                    var mailItemDic = {};
                    for (var i = 0; i < len; i++) {
                        var mailItemDicKey = NetData_15.NetData.readString(br);
                        mailItemDic[mailItemDicKey] = ItemDataBuffer_1.ItemDataBuffer.Instance.readArrayBuffer(br);
                    }
                    getData["mailItem"] = mailItemDic;
                    len = br.readInt32();
                    var buildingDic = {};
                    for (var i = 0; i < len; i++) {
                        var buildingDicKey = NetData_15.NetData.readString(br);
                        buildingDic[buildingDicKey] = ItemDataBuffer_1.ItemDataBuffer.Instance.readArrayBuffer(br);
                    }
                    getData["building"] = buildingDic;
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return RoleDataBuffer;
            }());
            exports_76("RoleDataBuffer", RoleDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/ServerUserDataBuffer", ["Net/NetData"], function (exports_77, context_77) {
    "use strict";
    var NetData_16, ServerUserDataBuffer;
    var __moduleName = context_77 && context_77.id;
    return {
        setters: [
            function (NetData_16_1) {
                NetData_16 = NetData_16_1;
            }
        ],
        execute: function () {
            ServerUserDataBuffer = /** @class */ (function () {
                function ServerUserDataBuffer() {
                }
                Object.defineProperty(ServerUserDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ServerUserDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ServerUserDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_16.NetData.readString(br);
                    getData["playerIDCount"] = br.readInt32();
                    len = br.readInt32();
                    var userCampCountDic = {};
                    for (var i = 0; i < len; i++) {
                        var userCampCountDicKey = NetData_16.NetData.readString(br);
                        userCampCountDic[userCampCountDicKey] = br.readInt32();
                    }
                    getData["userCampCount"] = userCampCountDic;
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return ServerUserDataBuffer;
            }());
            exports_77("ServerUserDataBuffer", ServerUserDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/SeverConfigBaseBuffer", ["Net/NetData"], function (exports_78, context_78) {
    "use strict";
    var NetData_17, SeverConfigBaseBuffer;
    var __moduleName = context_78 && context_78.id;
    return {
        setters: [
            function (NetData_17_1) {
                NetData_17 = NetData_17_1;
            }
        ],
        execute: function () {
            SeverConfigBaseBuffer = /** @class */ (function () {
                function SeverConfigBaseBuffer() {
                }
                Object.defineProperty(SeverConfigBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new SeverConfigBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                SeverConfigBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_17.NetData.readString(br);
                    getData["depict"] = NetData_17.NetData.readString(br);
                    getData["ip"] = NetData_17.NetData.readString(br);
                    getData["gateWay"] = NetData_17.NetData.readString(br);
                    getData["serverID"] = NetData_17.NetData.readString(br);
                    getData["serverName"] = NetData_17.NetData.readString(br);
                    getData["serverState"] = br.readByte();
                    getData["newServer"] = br.readBoolean();
                    getData["MAC"] = NetData_17.NetData.readString(br);
                    getData["setupTime"] = br.readLong();
                    getData["status"] = br.readByte();
                    getData["playerSum"] = br.readUInt32();
                    getData["isGate"] = br.readBoolean();
                    getData["descIP"] = NetData_17.NetData.readString(br);
                    getData["mapSaveVer"] = br.readULong();
                    getData["mapShowLevel"] = br.readByte();
                    getData["mapSplit"] = br.readInt32();
                    getData["heatbeatLimit"] = br.readUInt32();
                    getData["battleTimes"] = br.readInt32();
                    getData["marchSpeed"] = br.readSingle();
                    getData["campaignMaxStamina"] = br.readInt32();
                    getData["PhysicalTime"] = br.readInt32();
                    getData["arrangeNum"] = br.readInt32();
                    getData["campaignStartId"] = br.readInt32();
                    getData["sweepModeChanged"] = NetData_17.NetData.readString(br);
                    getData["recomCampReward"] = NetData_17.NetData.readString(br);
                    getData["campJoin"] = br.readByte();
                    getData["siegeWaitTime"] = br.readInt32();
                    getData["siegeMaxTime"] = br.readInt32();
                    getData["strikeCost"] = NetData_17.NetData.readString(br);
                    getData["siegeMinCost"] = NetData_17.NetData.readString(br);
                    getData["siegeMaxCost"] = NetData_17.NetData.readString(br);
                    getData["callBack"] = NetData_17.NetData.readString(br);
                    getData["fastCallBack"] = NetData_17.NetData.readString(br);
                    getData["marchSpeedUp"] = NetData_17.NetData.readString(br);
                    getData["superMarchSpeedUp"] = NetData_17.NetData.readString(br);
                    getData["minerAttack"] = NetData_17.NetData.readString(br);
                    getData["sameCampMinerAttackLim"] = br.readInt32();
                    getData["avoidWarTime"] = br.readInt32();
                    getData["avoidWarEffect"] = NetData_17.NetData.readString(br);
                    getData["maxEquipVolume"] = br.readInt32();
                    getData["breakOutUnlock"] = NetData_17.NetData.readString(br);
                    getData["dailyEventUnlock"] = NetData_17.NetData.readString(br);
                    getData["unlockWildLevel"] = br.readInt32();
                    getData["IntelligenceUnlock"] = NetData_17.NetData.readString(br);
                    getData["equipAuutoLock"] = br.readByte();
                    getData["commonGrowthRecover"] = br.readInt32();
                    getData["commonGrowthMaxTime"] = br.readInt32();
                    getData["seniorGrowthCost"] = NetData_17.NetData.readString(br);
                    getData["battleJumpTime"] = br.readInt32();
                    getData["furiousRound"] = br.readInt32();
                    getData["furiousStrengthen"] = br.readSingle();
                    getData["furiousMaxStrengthen"] = br.readSingle();
                    getData["fortifiedAvoidWarTime"] = br.readInt32();
                    getData["applyGvernorTime"] = br.readInt32();
                    getData["fortifiedRetreatTime"] = br.readInt32();
                    getData["fortifiedAvailable"] = NetData_17.NetData.readString(br);
                    getData["resourceGetInterval"] = br.readInt32();
                    getData["resourceGetTime"] = br.readInt32();
                    getData["firstGuideReward"] = NetData_17.NetData.readString(br);
                    getData["plunderPrecent"] = br.readInt32();
                    getData["HamalplunderPrecent"] = br.readInt32();
                    getData["HamalLostPrecent"] = br.readInt32();
                    getData["campDevelopMaxTime"] = br.readInt32();
                    getData["changNameCost"] = NetData_17.NetData.readString(br);
                    getData["changNameExchange"] = NetData_17.NetData.readString(br);
                    getData["hornCost"] = NetData_17.NetData.readString(br);
                    getData["hornCostExchange"] = NetData_17.NetData.readString(br);
                    getData["chatCd"] = br.readInt32();
                    getData["Arrangement1UnlockDesc"] = NetData_17.NetData.readString(br);
                    getData["Arrangement2UnlockDesc"] = NetData_17.NetData.readString(br);
                    getData["mailShareCd"] = br.readInt32();
                    getData["mailSaveTime"] = br.readInt32();
                    getData["mailMaxKeep"] = br.readInt32();
                    getData["enchantingFreeRefreshInterval"] = br.readInt32();
                    getData["commonGrowthCost"] = NetData_17.NetData.readString(br);
                    getData["seniorEnchantingCost"] = NetData_17.NetData.readString(br);
                    getData["ultimateEnchantingCost"] = NetData_17.NetData.readString(br);
                    getData["enchantingFreeTimesLimit"] = br.readInt32();
                    getData["EnchantingBubble"] = br.readInt32();
                    getData["altarBubble"] = br.readInt32();
                    getData["activityIconAvailable"] = NetData_17.NetData.readString(br);
                    getData["welfareIconAvailable"] = NetData_17.NetData.readString(br);
                    getData["preferentialIconAvailable"] = NetData_17.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return SeverConfigBaseBuffer;
            }());
            exports_78("SeverConfigBaseBuffer", SeverConfigBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/SeverDataBuffer", ["Net/NetData"], function (exports_79, context_79) {
    "use strict";
    var NetData_18, SeverDataBuffer;
    var __moduleName = context_79 && context_79.id;
    return {
        setters: [
            function (NetData_18_1) {
                NetData_18 = NetData_18_1;
            }
        ],
        execute: function () {
            SeverDataBuffer = /** @class */ (function () {
                function SeverDataBuffer() {
                }
                Object.defineProperty(SeverDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new SeverDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                SeverDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_18.NetData.readString(br);
                    getData["serverState"] = br.readByte();
                    getData["newServer"] = br.readBoolean();
                    getData["setupTime"] = br.readLong();
                    getData["status"] = br.readByte();
                    getData["playerSum"] = br.readUInt32();
                    getData["mapSaveVer"] = br.readULong();
                    getData["openTime"] = br.readLong();
                    getData["addTime"] = br.readLong();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return SeverDataBuffer;
            }());
            exports_79("SeverDataBuffer", SeverDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/testBuffer", ["Net/NetData", "AutoCode/Net/BufferDatas/ItemBaseBuffer"], function (exports_80, context_80) {
    "use strict";
    var NetData_19, ItemBaseBuffer_2, testBuffer;
    var __moduleName = context_80 && context_80.id;
    return {
        setters: [
            function (NetData_19_1) {
                NetData_19 = NetData_19_1;
            },
            function (ItemBaseBuffer_2_1) {
                ItemBaseBuffer_2 = ItemBaseBuffer_2_1;
            }
        ],
        execute: function () {
            testBuffer = /** @class */ (function () {
                function testBuffer() {
                }
                Object.defineProperty(testBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new testBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                testBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_19.NetData.readString(br);
                    getData["itemName"] = NetData_19.NetData.readString(br);
                    getData["test1"] = ItemBaseBuffer_2.ItemBaseBuffer.Instance.readArrayBuffer(br);
                    len = br.readInt32();
                    var test2List = [];
                    for (var i = 0; i < len; i++) {
                        test2List.push(ItemBaseBuffer_2.ItemBaseBuffer.Instance.readArrayBuffer(br));
                    }
                    getData["test2"] = test2List;
                    len = br.readInt32();
                    var test3Dic = {};
                    for (var i = 0; i < len; i++) {
                        var test3DicKey = NetData_19.NetData.readString(br);
                        test3Dic[test3DicKey] = NetData_19.NetData.readString(br);
                    }
                    getData["test3"] = test3Dic;
                    len = br.readInt32();
                    var test4Dic = {};
                    for (var i = 0; i < len; i++) {
                        var len2 = br.readInt32();
                        var test4List = [];
                        var test4DicKey = NetData_19.NetData.readString(br);
                        for (var j = 0; j < len2; j++) {
                            test4List.push(NetData_19.NetData.readString(br));
                        }
                        test4Dic[test4DicKey] = test4List;
                    }
                    getData["test4"] = test4Dic;
                    len = br.readInt32();
                    var test5Dic = {};
                    for (var i = 0; i < len; i++) {
                        var test5DicKey = NetData_19.NetData.readString(br);
                        test5Dic[test5DicKey] = ItemBaseBuffer_2.ItemBaseBuffer.Instance.readArrayBuffer(br);
                    }
                    getData["test5"] = test5Dic;
                    len = br.readInt32();
                    var test6Dic = {};
                    for (var i = 0; i < len; i++) {
                        var len2 = br.readInt32();
                        var test6List = [];
                        var test6DicKey = NetData_19.NetData.readString(br);
                        for (var j = 0; j < len2; j++) {
                            test6List.push(ItemBaseBuffer_2.ItemBaseBuffer.Instance.readArrayBuffer(br));
                        }
                        test6Dic[test6DicKey] = test6List;
                    }
                    getData["test6"] = test6Dic;
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return testBuffer;
            }());
            exports_80("testBuffer", testBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/ThemeBaseBuffer", ["Net/NetData"], function (exports_81, context_81) {
    "use strict";
    var NetData_20, ThemeBaseBuffer;
    var __moduleName = context_81 && context_81.id;
    return {
        setters: [
            function (NetData_20_1) {
                NetData_20 = NetData_20_1;
            }
        ],
        execute: function () {
            ThemeBaseBuffer = /** @class */ (function () {
                function ThemeBaseBuffer() {
                }
                Object.defineProperty(ThemeBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ThemeBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ThemeBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_20.NetData.readString(br);
                    getData["sceneName"] = NetData_20.NetData.readString(br);
                    getData["image1"] = NetData_20.NetData.readString(br);
                    getData["image2"] = NetData_20.NetData.readString(br);
                    getData["cubeImage"] = NetData_20.NetData.readString(br);
                    len = br.readInt32();
                    var deblockingDic = {};
                    for (var i = 0; i < len; i++) {
                        var deblockingDicKey = NetData_20.NetData.readString(br);
                        deblockingDic[deblockingDicKey] = br.readInt32();
                    }
                    getData["deblocking"] = deblockingDic;
                    getData["color"] = NetData_20.NetData.readString(br);
                    len = br.readInt32();
                    var hRangeList = [];
                    for (var i = 0; i < len; i++) {
                        hRangeList.push(br.readInt32());
                    }
                    getData["hRange"] = hRangeList;
                    getData["sFactor"] = br.readInt32();
                    getData["vFactor"] = br.readInt32();
                    getData["icon"] = NetData_20.NetData.readString(br);
                    getData["isDynamicColor"] = br.readBoolean();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return ThemeBaseBuffer;
            }());
            exports_81("ThemeBaseBuffer", ThemeBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/TimeEventBuffer", ["Net/NetData"], function (exports_82, context_82) {
    "use strict";
    var NetData_21, TimeEventBuffer;
    var __moduleName = context_82 && context_82.id;
    return {
        setters: [
            function (NetData_21_1) {
                NetData_21 = NetData_21_1;
            }
        ],
        execute: function () {
            TimeEventBuffer = /** @class */ (function () {
                function TimeEventBuffer() {
                }
                Object.defineProperty(TimeEventBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new TimeEventBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                TimeEventBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_21.NetData.readString(br);
                    getData["eventName"] = NetData_21.NetData.readString(br);
                    getData["taskstartTime"] = br.readULong();
                    getData["taskEndTime"] = br.readULong();
                    getData["lastStartTime"] = br.readULong();
                    getData["lastEndTime"] = br.readULong();
                    getData["serverTimeZone"] = br.readInt32();
                    getData["LoopCount"] = br.readInt32();
                    getData["LoopTimers"] = br.readInt32();
                    getData["isFristNoCD"] = br.readBoolean();
                    getData["taskLoopTime"] = br.readULong();
                    getData["timeType"] = br.readByte();
                    getData["startTime"] = br.readULong();
                    getData["startLimitTime"] = br.readULong();
                    getData["predecessorTaskID"] = NetData_21.NetData.readString(br);
                    getData["taskEventString"] = NetData_21.NetData.readString(br);
                    getData["taskEventLog"] = NetData_21.NetData.readString(br);
                    getData["taskState"] = br.readInt32();
                    getData["taskPreviousState"] = br.readInt32();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return TimeEventBuffer;
            }());
            exports_82("TimeEventBuffer", TimeEventBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/UserDataBaseBuffer", ["Net/NetData", "AutoCode/Net/BufferDatas/GameArchiveDataBuffer"], function (exports_83, context_83) {
    "use strict";
    var NetData_22, GameArchiveDataBuffer_1, UserDataBaseBuffer;
    var __moduleName = context_83 && context_83.id;
    return {
        setters: [
            function (NetData_22_1) {
                NetData_22 = NetData_22_1;
            },
            function (GameArchiveDataBuffer_1_1) {
                GameArchiveDataBuffer_1 = GameArchiveDataBuffer_1_1;
            }
        ],
        execute: function () {
            UserDataBaseBuffer = /** @class */ (function () {
                function UserDataBaseBuffer() {
                }
                Object.defineProperty(UserDataBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UserDataBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                UserDataBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_22.NetData.readString(br);
                    getData["playerName"] = NetData_22.NetData.readString(br);
                    getData["token"] = NetData_22.NetData.readString(br);
                    getData["status"] = br.readByte();
                    len = br.readInt32();
                    var currencyDic = {};
                    for (var i = 0; i < len; i++) {
                        var currencyDicKey = NetData_22.NetData.readString(br);
                        currencyDic[currencyDicKey] = br.readInt32();
                    }
                    getData["currency"] = currencyDic;
                    getData["isBlock"] = br.readBoolean();
                    getData["isLogUser"] = br.readBoolean();
                    getData["loginTime"] = br.readULong();
                    getData["thirdPartyAccount"] = br.readByte();
                    getData["serverChannel"] = br.readByte();
                    getData["accountAccess"] = br.readByte();
                    getData["blacklist"] = NetData_22.NetData.readString(br);
                    getData["frinedName"] = NetData_22.NetData.readString(br);
                    getData["icon"] = NetData_22.NetData.readString(br);
                    len = br.readInt32();
                    var GameArchiveDic = {};
                    for (var i = 0; i < len; i++) {
                        var GameArchiveDicKey = NetData_22.NetData.readString(br);
                        GameArchiveDic[GameArchiveDicKey] = GameArchiveDataBuffer_1.GameArchiveDataBuffer.Instance.readArrayBuffer(br);
                    }
                    getData["GameArchive"] = GameArchiveDic;
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return UserDataBaseBuffer;
            }());
            exports_83("UserDataBaseBuffer", UserDataBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/UserVarBaseBuffer", ["Net/NetData", "AutoCode/Net/BufferDatas/RoleDataBuffer", "AutoCode/Net/BufferDatas/ArrangementDataBuffer"], function (exports_84, context_84) {
    "use strict";
    var NetData_23, RoleDataBuffer_1, ArrangementDataBuffer_1, UserVarBaseBuffer;
    var __moduleName = context_84 && context_84.id;
    return {
        setters: [
            function (NetData_23_1) {
                NetData_23 = NetData_23_1;
            },
            function (RoleDataBuffer_1_1) {
                RoleDataBuffer_1 = RoleDataBuffer_1_1;
            },
            function (ArrangementDataBuffer_1_1) {
                ArrangementDataBuffer_1 = ArrangementDataBuffer_1_1;
            }
        ],
        execute: function () {
            UserVarBaseBuffer = /** @class */ (function () {
                function UserVarBaseBuffer() {
                }
                Object.defineProperty(UserVarBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UserVarBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                UserVarBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_23.NetData.readString(br);
                    getData["inGameStatus"] = br.readByte();
                    len = br.readInt32();
                    var currencyDic = {};
                    for (var i = 0; i < len; i++) {
                        var currencyDicKey = NetData_23.NetData.readString(br);
                        currencyDic[currencyDicKey] = br.readInt32();
                    }
                    getData["currency"] = currencyDic;
                    getData["littleManIcon"] = br.readBoolean();
                    getData["PlayerAccount"] = RoleDataBuffer_1.RoleDataBuffer.Instance.readArrayBuffer(br);
                    len = br.readInt32();
                    var listOfFiguresDic = {};
                    for (var i = 0; i < len; i++) {
                        var listOfFiguresDicKey = NetData_23.NetData.readString(br);
                        listOfFiguresDic[listOfFiguresDicKey] = RoleDataBuffer_1.RoleDataBuffer.Instance.readArrayBuffer(br);
                    }
                    getData["listOfFigures"] = listOfFiguresDic;
                    getData["Arrangement"] = ArrangementDataBuffer_1.ArrangementDataBuffer.Instance.readArrayBuffer(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return UserVarBaseBuffer;
            }());
            exports_84("UserVarBaseBuffer", UserVarBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/WalletErrLogBuffer", ["Net/NetData"], function (exports_85, context_85) {
    "use strict";
    var NetData_24, WalletErrLogBuffer;
    var __moduleName = context_85 && context_85.id;
    return {
        setters: [
            function (NetData_24_1) {
                NetData_24 = NetData_24_1;
            }
        ],
        execute: function () {
            WalletErrLogBuffer = /** @class */ (function () {
                function WalletErrLogBuffer() {
                }
                Object.defineProperty(WalletErrLogBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new WalletErrLogBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                WalletErrLogBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_24.NetData.readString(br);
                    getData["className"] = NetData_24.NetData.readString(br);
                    getData["methodName"] = NetData_24.NetData.readString(br);
                    getData["userToken"] = NetData_24.NetData.readString(br);
                    getData["logMessage"] = NetData_24.NetData.readString(br);
                    getData["resultTime"] = br.readLong();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return WalletErrLogBuffer;
            }());
            exports_85("WalletErrLogBuffer", WalletErrLogBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/WalletLogBuffer", ["Net/NetData"], function (exports_86, context_86) {
    "use strict";
    var NetData_25, WalletLogBuffer;
    var __moduleName = context_86 && context_86.id;
    return {
        setters: [
            function (NetData_25_1) {
                NetData_25 = NetData_25_1;
            }
        ],
        execute: function () {
            WalletLogBuffer = /** @class */ (function () {
                function WalletLogBuffer() {
                }
                Object.defineProperty(WalletLogBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new WalletLogBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                WalletLogBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_25.NetData.readString(br);
                    getData["className"] = NetData_25.NetData.readString(br);
                    getData["methodName"] = NetData_25.NetData.readString(br);
                    getData["userToken"] = NetData_25.NetData.readString(br);
                    getData["logMessage"] = NetData_25.NetData.readString(br);
                    getData["resultTime"] = br.readLong();
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return WalletLogBuffer;
            }());
            exports_86("WalletLogBuffer", WalletLogBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/TipInfoBuffer", ["Net/NetData"], function (exports_87, context_87) {
    "use strict";
    var NetData_26, TipInfoBuffer;
    var __moduleName = context_87 && context_87.id;
    return {
        setters: [
            function (NetData_26_1) {
                NetData_26 = NetData_26_1;
            }
        ],
        execute: function () {
            TipInfoBuffer = /** @class */ (function () {
                function TipInfoBuffer() {
                }
                Object.defineProperty(TipInfoBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new TipInfoBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                TipInfoBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["title"] = NetData_26.NetData.readString(br);
                    getData["tipType"] = br.readInt32();
                    getData["context"] = NetData_26.NetData.readString(br);
                    return getData;
                };
                return TipInfoBuffer;
            }());
            exports_87("TipInfoBuffer", TipInfoBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/UploadIpfsDataBuffer", ["Net/NetData"], function (exports_88, context_88) {
    "use strict";
    var NetData_27, UploadIpfsDataBuffer;
    var __moduleName = context_88 && context_88.id;
    return {
        setters: [
            function (NetData_27_1) {
                NetData_27 = NetData_27_1;
            }
        ],
        execute: function () {
            UploadIpfsDataBuffer = /** @class */ (function () {
                function UploadIpfsDataBuffer() {
                }
                Object.defineProperty(UploadIpfsDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UploadIpfsDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                UploadIpfsDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_27.NetData.readString(br);
                    getData["ImageName"] = NetData_27.NetData.readString(br);
                    getData["ImageUrl"] = NetData_27.NetData.readString(br);
                    getData["IpfsImagehash"] = NetData_27.NetData.readString(br);
                    getData["modelUrl"] = NetData_27.NetData.readString(br);
                    getData["Ipfsmodelhash"] = NetData_27.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return UploadIpfsDataBuffer;
            }());
            exports_88("UploadIpfsDataBuffer", UploadIpfsDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/BufferDataReader", ["AutoCode/Net/BufferDatas/ArrangementDataBuffer", "AutoCode/Net/BufferDatas/EquipBaseBuffer", "AutoCode/Net/BufferDatas/EquipDateBuffer", "AutoCode/Net/BufferDatas/EquipEffectBaseBuffer", "AutoCode/Net/BufferDatas/EquipExpBaseBuffer", "AutoCode/Net/BufferDatas/ErrorInfoBuffer", "AutoCode/Net/BufferDatas/FormulasBuffer", "AutoCode/Net/BufferDatas/GameArchiveDataBuffer", "AutoCode/Net/BufferDatas/ItemBaseBuffer", "AutoCode/Net/BufferDatas/ItemDataBuffer", "AutoCode/Net/BufferDatas/LevelBaseBuffer", "AutoCode/Net/BufferDatas/MainBaseBuffer", "AutoCode/Net/BufferDatas/RoleBaseBuffer", "AutoCode/Net/BufferDatas/RoleDataBuffer", "AutoCode/Net/BufferDatas/ServerUserDataBuffer", "AutoCode/Net/BufferDatas/SeverConfigBaseBuffer", "AutoCode/Net/BufferDatas/SeverDataBuffer", "AutoCode/Net/BufferDatas/SkinBaseBuffer", "AutoCode/Net/BufferDatas/testBuffer", "AutoCode/Net/BufferDatas/ThemeBaseBuffer", "AutoCode/Net/BufferDatas/TimeEventBuffer", "AutoCode/Net/BufferDatas/UserDataBaseBuffer", "AutoCode/Net/BufferDatas/UserVarBaseBuffer", "AutoCode/Net/BufferDatas/WalletErrLogBuffer", "AutoCode/Net/BufferDatas/WalletLogBuffer", "AutoCode/Net/BufferDatas/TipInfoBuffer", "AutoCode/Net/BufferDatas/UploadIpfsDataBuffer"], function (exports_89, context_89) {
    "use strict";
    var ArrangementDataBuffer_2, EquipBaseBuffer_2, EquipDateBuffer_1, EquipEffectBaseBuffer_1, EquipExpBaseBuffer_1, ErrorInfoBuffer_1, FormulasBuffer_1, GameArchiveDataBuffer_2, ItemBaseBuffer_3, ItemDataBuffer_2, LevelBaseBuffer_2, MainBaseBuffer_1, RoleBaseBuffer_2, RoleDataBuffer_2, ServerUserDataBuffer_1, SeverConfigBaseBuffer_1, SeverDataBuffer_1, SkinBaseBuffer_2, testBuffer_1, ThemeBaseBuffer_1, TimeEventBuffer_1, UserDataBaseBuffer_1, UserVarBaseBuffer_1, WalletErrLogBuffer_1, WalletLogBuffer_1, TipInfoBuffer_1, UploadIpfsDataBuffer_1, BufferDataReader;
    var __moduleName = context_89 && context_89.id;
    return {
        setters: [
            function (ArrangementDataBuffer_2_1) {
                ArrangementDataBuffer_2 = ArrangementDataBuffer_2_1;
            },
            function (EquipBaseBuffer_2_1) {
                EquipBaseBuffer_2 = EquipBaseBuffer_2_1;
            },
            function (EquipDateBuffer_1_1) {
                EquipDateBuffer_1 = EquipDateBuffer_1_1;
            },
            function (EquipEffectBaseBuffer_1_1) {
                EquipEffectBaseBuffer_1 = EquipEffectBaseBuffer_1_1;
            },
            function (EquipExpBaseBuffer_1_1) {
                EquipExpBaseBuffer_1 = EquipExpBaseBuffer_1_1;
            },
            function (ErrorInfoBuffer_1_1) {
                ErrorInfoBuffer_1 = ErrorInfoBuffer_1_1;
            },
            function (FormulasBuffer_1_1) {
                FormulasBuffer_1 = FormulasBuffer_1_1;
            },
            function (GameArchiveDataBuffer_2_1) {
                GameArchiveDataBuffer_2 = GameArchiveDataBuffer_2_1;
            },
            function (ItemBaseBuffer_3_1) {
                ItemBaseBuffer_3 = ItemBaseBuffer_3_1;
            },
            function (ItemDataBuffer_2_1) {
                ItemDataBuffer_2 = ItemDataBuffer_2_1;
            },
            function (LevelBaseBuffer_2_1) {
                LevelBaseBuffer_2 = LevelBaseBuffer_2_1;
            },
            function (MainBaseBuffer_1_1) {
                MainBaseBuffer_1 = MainBaseBuffer_1_1;
            },
            function (RoleBaseBuffer_2_1) {
                RoleBaseBuffer_2 = RoleBaseBuffer_2_1;
            },
            function (RoleDataBuffer_2_1) {
                RoleDataBuffer_2 = RoleDataBuffer_2_1;
            },
            function (ServerUserDataBuffer_1_1) {
                ServerUserDataBuffer_1 = ServerUserDataBuffer_1_1;
            },
            function (SeverConfigBaseBuffer_1_1) {
                SeverConfigBaseBuffer_1 = SeverConfigBaseBuffer_1_1;
            },
            function (SeverDataBuffer_1_1) {
                SeverDataBuffer_1 = SeverDataBuffer_1_1;
            },
            function (SkinBaseBuffer_2_1) {
                SkinBaseBuffer_2 = SkinBaseBuffer_2_1;
            },
            function (testBuffer_1_1) {
                testBuffer_1 = testBuffer_1_1;
            },
            function (ThemeBaseBuffer_1_1) {
                ThemeBaseBuffer_1 = ThemeBaseBuffer_1_1;
            },
            function (TimeEventBuffer_1_1) {
                TimeEventBuffer_1 = TimeEventBuffer_1_1;
            },
            function (UserDataBaseBuffer_1_1) {
                UserDataBaseBuffer_1 = UserDataBaseBuffer_1_1;
            },
            function (UserVarBaseBuffer_1_1) {
                UserVarBaseBuffer_1 = UserVarBaseBuffer_1_1;
            },
            function (WalletErrLogBuffer_1_1) {
                WalletErrLogBuffer_1 = WalletErrLogBuffer_1_1;
            },
            function (WalletLogBuffer_1_1) {
                WalletLogBuffer_1 = WalletLogBuffer_1_1;
            },
            function (TipInfoBuffer_1_1) {
                TipInfoBuffer_1 = TipInfoBuffer_1_1;
            },
            function (UploadIpfsDataBuffer_1_1) {
                UploadIpfsDataBuffer_1 = UploadIpfsDataBuffer_1_1;
            }
        ],
        execute: function () {
            BufferDataReader = /** @class */ (function () {
                function BufferDataReader() {
                }
                Object.defineProperty(BufferDataReader, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new BufferDataReader();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                BufferDataReader.prototype.readArrayBuffer = function (className, br) {
                    switch (className) {
                        case "ArrangementData":
                            return ArrangementDataBuffer_2.ArrangementDataBuffer.Instance.readArrayBuffer(br);
                        case "EquipBase":
                            return EquipBaseBuffer_2.EquipBaseBuffer.Instance.readArrayBuffer(br);
                        case "EquipDate":
                            return EquipDateBuffer_1.EquipDateBuffer.Instance.readArrayBuffer(br);
                        case "EquipEffectBase":
                            return EquipEffectBaseBuffer_1.EquipEffectBaseBuffer.Instance.readArrayBuffer(br);
                        case "EquipExpBase":
                            return EquipExpBaseBuffer_1.EquipExpBaseBuffer.Instance.readArrayBuffer(br);
                        case "ErrorInfo":
                            return ErrorInfoBuffer_1.ErrorInfoBuffer.Instance.readArrayBuffer(br);
                        case "Formulas":
                            return FormulasBuffer_1.FormulasBuffer.Instance.readArrayBuffer(br);
                        case "GameArchiveData":
                            return GameArchiveDataBuffer_2.GameArchiveDataBuffer.Instance.readArrayBuffer(br);
                        case "ItemBase":
                            return ItemBaseBuffer_3.ItemBaseBuffer.Instance.readArrayBuffer(br);
                        case "ItemData":
                            return ItemDataBuffer_2.ItemDataBuffer.Instance.readArrayBuffer(br);
                        case "LevelBase":
                            return LevelBaseBuffer_2.LevelBaseBuffer.Instance.readArrayBuffer(br);
                        case "MainBase":
                            return MainBaseBuffer_1.MainBaseBuffer.Instance.readArrayBuffer(br);
                        case "RoleBase":
                            return RoleBaseBuffer_2.RoleBaseBuffer.Instance.readArrayBuffer(br);
                        case "RoleData":
                            return RoleDataBuffer_2.RoleDataBuffer.Instance.readArrayBuffer(br);
                        case "ServerUserData":
                            return ServerUserDataBuffer_1.ServerUserDataBuffer.Instance.readArrayBuffer(br);
                        case "SeverConfigBase":
                            return SeverConfigBaseBuffer_1.SeverConfigBaseBuffer.Instance.readArrayBuffer(br);
                        case "SeverData":
                            return SeverDataBuffer_1.SeverDataBuffer.Instance.readArrayBuffer(br);
                        case "SkinBase":
                            return SkinBaseBuffer_2.SkinBaseBuffer.Instance.readArrayBuffer(br);
                        case "test":
                            return testBuffer_1.testBuffer.Instance.readArrayBuffer(br);
                        case "ThemeBase":
                            return ThemeBaseBuffer_1.ThemeBaseBuffer.Instance.readArrayBuffer(br);
                        case "TimeEvent":
                            return TimeEventBuffer_1.TimeEventBuffer.Instance.readArrayBuffer(br);
                        case "UploadIpfsData":
                            return UploadIpfsDataBuffer_1.UploadIpfsDataBuffer.Instance.readArrayBuffer(br);
                        case "UserDataBase":
                            return UserDataBaseBuffer_1.UserDataBaseBuffer.Instance.readArrayBuffer(br);
                        case "UserVarBase":
                            return UserVarBaseBuffer_1.UserVarBaseBuffer.Instance.readArrayBuffer(br);
                        case "WalletErrLog":
                            return WalletErrLogBuffer_1.WalletErrLogBuffer.Instance.readArrayBuffer(br);
                        case "WalletLog":
                            return WalletLogBuffer_1.WalletLogBuffer.Instance.readArrayBuffer(br);
                        case "TipInfo":
                            return TipInfoBuffer_1.TipInfoBuffer.Instance.readArrayBuffer(br);
                    }
                    return null;
                };
                return BufferDataReader;
            }());
            exports_89("BufferDataReader", BufferDataReader);
        }
    };
});
System.register("Net/NetData", ["AutoCode/Net/BufferDatas/BufferDataReader"], function (exports_90, context_90) {
    "use strict";
    var BufferDataReader_1, NetData;
    var __moduleName = context_90 && context_90.id;
    return {
        setters: [
            function (BufferDataReader_1_1) {
                BufferDataReader_1 = BufferDataReader_1_1;
            }
        ],
        execute: function () {
            exports_90("NetData", NetData = /** @class */ (function () {
                function NetData(str) {
                    this.isBuffer = false;
                    if (typeof (str) == "string") {
                        var arr = str.match(NetData.reg);
                        if (arr != null) {
                            this.head = arr[0];
                            this.code = str.substring(this.head.length);
                        }
                        else {
                            this.head = null;
                            this.code = str;
                        }
                    }
                    else {
                        this.arrayBuffer = str;
                        if (str.className) {
                            this.obj = [];
                            this.obj.push(str);
                        }
                        this.isBuffer = true;
                        this.head = "[BUFFER]";
                    }
                }
                /**
                 * 获取json对象
                 */
                NetData.prototype.GetJson = function () {
                    if (this.obj == null) {
                        this.obj = [];
                        if (!this.isBuffer) {
                            var timer = Date.now();
                            this.obj.push(JSON.parse(this.code));
                            var timer1 = Date.now() - timer;
                            console.log("json长度  " + this.code.length + "   解析耗时  " + timer1);
                        }
                        else {
                            var bytes = new m4m.io.binTool();
                            bytes.write(new Uint8Array(this.arrayBuffer));
                            while (bytes.r_offset < bytes.length) {
                                var className = NetData.readString(bytes);
                                var functionName = NetData.readString(bytes);
                                var argsType = NetData.readString(bytes);
                                var dataClass = NetData.readString(bytes);
                                var args = [];
                                var msgId = 0;
                                if (dataClass == "Param") {
                                    while (bytes.r_offset < bytes.length - 4) {
                                        args.push(this.getParams(bytes));
                                    }
                                    msgId = bytes.readUInt32();
                                    this.obj.push({ className: className, functionName: functionName, argsType: argsType, args: args, msgId: msgId });
                                    continue;
                                }
                                if (dataClass == "null") {
                                    msgId = bytes.readUInt32();
                                    this.obj.push({ className: className, functionName: functionName, argsType: argsType, args: args, msgId: msgId });
                                    continue;
                                }
                                var dataType = NetData.readString(bytes);
                                switch (dataType) {
                                    case "DataList":
                                        var len = bytes.readInt32();
                                        var listData = [];
                                        for (var i = 0; i < len; i++) {
                                            listData.push(this.getDataByBuffer(dataClass, bytes));
                                        }
                                        args.push(listData);
                                        break;
                                    case "DataDic":
                                        var len2 = bytes.readInt32();
                                        var DicData = {};
                                        for (var i = 0; i < len2; i++) {
                                            var key = NetData.readString(bytes);
                                            DicData[key] = this.getDataByBuffer(dataClass, bytes);
                                        }
                                        args.push(DicData);
                                        break;
                                    default:
                                        args.push(this.getDataByBuffer(dataClass, bytes));
                                }
                                msgId = bytes.readUInt32();
                                this.obj.push({ className: className, functionName: functionName, argsType: argsType, args: args, msgId: msgId });
                            }
                        }
                    }
                    return this.obj;
                };
                NetData.prototype.getParams = function (bytes) {
                    var classDtype = bytes.readByte();
                    var dataClass = this.getDataClassByTypeId(bytes.readByte());
                    switch (classDtype) {
                        case 1:
                            var len = bytes.readInt32();
                            var listData = [];
                            for (var i = 0; i < len; i++) {
                                listData.push(this.getDataByBuffer(dataClass, bytes));
                            }
                            return listData;
                        case 2:
                            var len2 = bytes.readInt32();
                            var DicData = {};
                            for (var i = 0; i < len2; i++) {
                                var key2 = NetData.readString(bytes);
                                if (DicData[key2] == null) {
                                    DicData[key2] = this.getDataByBuffer(dataClass, bytes);
                                }
                            }
                            return DicData;
                        case 3:
                            var len3 = bytes.readInt32();
                            var DicListData = {};
                            for (var i = 0; i < len3; i++) {
                                var key = NetData.readString(bytes);
                                if (DicListData[key] == null) {
                                    var newlist = [];
                                    var newLen = bytes.readInt32();
                                    for (var j = 0; j < newLen; j++) {
                                        newlist.push(this.getDataByBuffer(dataClass, bytes));
                                    }
                                    DicListData[key] = newlist;
                                }
                            }
                            return DicListData;
                        default:
                            return this.getDataByBuffer(dataClass, bytes);
                    }
                };
                NetData.prototype.getDataClassByTypeId = function (id) {
                    switch (id) {
                        case 1:
                            return "byte";
                        case 2:
                            return "bool";
                        case 3:
                            return "int";
                        case 4:
                            return "uint";
                        case 5:
                            return "float";
                        case 6:
                            return "ushort";
                        case 7:
                            return "short";
                        case 8:
                            return "ulong";
                        case 9:
                            return "long";
                        default:
                            return "string";
                    }
                };
                NetData.prototype.getDataByBuffer = function (dataClass, bytes) {
                    switch (dataClass) {
                        case "int":
                            return bytes.readInt32();
                        case "uint":
                            return bytes.readUInt32();
                        case "short":
                            return bytes.readInt16();
                        case "ushort":
                            return bytes.readUInt16();
                        case "long":
                            return bytes.readLong();
                        case "ulong":
                            return bytes.readULong();
                        case "byte":
                            return bytes.readByte();
                        case "float":
                            return bytes.readSingle();
                        case "bool":
                            return bytes.readBoolean();
                        case "DateTime":
                            return bytes.readDouble();
                        case "string":
                            return NetData.readString(bytes);
                        default:
                    }
                    var obj = BufferDataReader_1.BufferDataReader.Instance.readArrayBuffer(dataClass, bytes);
                    return obj;
                };
                NetData.readString = function (bytes) {
                    var len = bytes.readUInt16();
                    return bytes.readUTFByLen(len);
                };
                NetData.reg = /^\[\w+\]/;
                return NetData;
            }()));
        }
    };
});
System.register("AutoCode/Net/WebsocketTool", ["Net/AwaitDataManager", "Net/NetWebsocket", "AutoCode/Net/WsDataManager", "PSDUI/UiDataManager"], function (exports_91, context_91) {
    "use strict";
    var AwaitDataManager_1, NetWebsocket_1, WsDataManager_1, UiDataManager_1, WebsocketTool;
    var __moduleName = context_91 && context_91.id;
    return {
        setters: [
            function (AwaitDataManager_1_1) {
                AwaitDataManager_1 = AwaitDataManager_1_1;
            },
            function (NetWebsocket_1_1) {
                NetWebsocket_1 = NetWebsocket_1_1;
            },
            function (WsDataManager_1_1) {
                WsDataManager_1 = WsDataManager_1_1;
            },
            function (UiDataManager_1_1) {
                UiDataManager_1 = UiDataManager_1_1;
            }
        ],
        execute: function () {
            WebsocketTool = /** @class */ (function () {
                function WebsocketTool() {
                }
                Object.defineProperty(WebsocketTool, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new WebsocketTool();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                WebsocketTool.prototype.onmessage = function (netData) {
                    if (netData.head == "[Data]") {
                        //服务端通知数据修改完成...
                        var obj = netData.GetJson();
                        AwaitDataManager_1.AwaitDataManager.dispatchSuccess(obj.className + "." + obj.functionName + "_#" + obj.args[0], obj.args);
                        return true;
                    }
                    else if (netData.head == "[DataError]") {
                        //发送错误消息
                        var obj = netData.GetJson();
                        AwaitDataManager_1.AwaitDataManager.dispatchError(obj.className + "." + obj.functionName + "_#" + obj.args[0], obj.args);
                        return true;
                    }
                    else if (netData.head != "[LOG]") {
                        var messObj = netData.GetJson()[0];
                        if (messObj.argsType == "code") {
                            return false;
                        }
                        if (messObj.argsType == "Event") {
                            UiDataManager_1.UiDataManager.changeFunctionData(messObj.className + "_" + messObj.functionName, messObj.args);
                            return true;
                        }
                        if (messObj.functionName == "All") {
                            WsDataManager_1.WsDataManager.setData(messObj.className, messObj.args[0]);
                        }
                        else if (messObj.functionName == "ChangeList") {
                            WsDataManager_1.WsDataManager.changeDataList(messObj.className, messObj.args[0]);
                        }
                        else if (messObj.functionName == "TipData") {
                            WsDataManager_1.WsDataManager.dispatchTipData(messObj.className, messObj.args[0]);
                        }
                        else {
                            for (var i = 0; i < messObj.args.length; i++) {
                                var element = messObj.args[i];
                                WsDataManager_1.WsDataManager.changeData(messObj.className, messObj.functionName, messObj.argsType, element);
                            }
                        }
                        return true;
                    }
                    return false;
                };
                WebsocketTool.prototype.getMsg = function (className, functionName, text) {
                    var mess = "{\"currentType\":null,\"type\":null,\"callTime\":\"0001-01-01T00:00:00\",\"callid\":0,\"timeout\":0,\"className\":\"".concat(className, "\",\"functionName\":\"").concat(functionName, "\",\"argsType\":null,\n        \"args\":[").concat(text, "],\"returnType\":null,\"returnValue\":null}");
                    return mess;
                };
                /***
                 * 获取全部test数据
                 */
                WebsocketTool.prototype.ExcelManager_testDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "testDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条test数据
                 */
                WebsocketTool.prototype.ExcelManager_testDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "testDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单test数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifytestDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifytestDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个test数据
                 */
                WebsocketTool.prototype.ExcelManager_addtestData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addtestData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加test数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addtestDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addtestDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条test
                 */
                WebsocketTool.prototype.ExcelManager_removetestData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removetestData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取UserDataBase数据
                 */
                WebsocketTool.prototype.ExcelManager_UserDataBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "UserDataBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部UserDataBase数据
                 */
                WebsocketTool.prototype.ExcelManager_UserDataBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "UserDataBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条UserDataBase数据
                 */
                WebsocketTool.prototype.ExcelManager_UserDataBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "UserDataBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单UserDataBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyUserDataBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyUserDataBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个UserDataBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addUserDataBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addUserDataBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加UserDataBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addUserDataBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addUserDataBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条UserDataBase
                 */
                WebsocketTool.prototype.ExcelManager_removeUserDataBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeUserDataBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取UserVarBase数据
                 */
                WebsocketTool.prototype.ExcelManager_UserVarBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "UserVarBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部UserVarBase数据
                 */
                WebsocketTool.prototype.ExcelManager_UserVarBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "UserVarBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条UserVarBase数据
                 */
                WebsocketTool.prototype.ExcelManager_UserVarBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "UserVarBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单UserVarBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyUserVarBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyUserVarBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个UserVarBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addUserVarBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addUserVarBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加UserVarBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addUserVarBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addUserVarBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条UserVarBase
                 */
                WebsocketTool.prototype.ExcelManager_removeUserVarBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeUserVarBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取WalletErrLog数据
                 */
                WebsocketTool.prototype.ExcelManager_WalletErrLogDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "WalletErrLogDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部WalletErrLog数据
                 */
                WebsocketTool.prototype.ExcelManager_WalletErrLogDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "WalletErrLogDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条WalletErrLog数据
                 */
                WebsocketTool.prototype.ExcelManager_WalletErrLogDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "WalletErrLogDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单WalletErrLog数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyWalletErrLogDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyWalletErrLogDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个WalletErrLog数据
                 */
                WebsocketTool.prototype.ExcelManager_addWalletErrLogData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addWalletErrLogData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加WalletErrLog数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addWalletErrLogDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addWalletErrLogDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条WalletErrLog
                 */
                WebsocketTool.prototype.ExcelManager_removeWalletErrLogData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeWalletErrLogData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取WalletLog数据
                 */
                WebsocketTool.prototype.ExcelManager_WalletLogDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "WalletLogDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部WalletLog数据
                 */
                WebsocketTool.prototype.ExcelManager_WalletLogDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "WalletLogDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条WalletLog数据
                 */
                WebsocketTool.prototype.ExcelManager_WalletLogDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "WalletLogDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单WalletLog数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyWalletLogDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyWalletLogDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个WalletLog数据
                 */
                WebsocketTool.prototype.ExcelManager_addWalletLogData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addWalletLogData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加WalletLog数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addWalletLogDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addWalletLogDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条WalletLog
                 */
                WebsocketTool.prototype.ExcelManager_removeWalletLogData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeWalletLogData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ErrorInfo数据
                 */
                WebsocketTool.prototype.ExcelManager_ErrorInfoDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "ErrorInfoDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ErrorInfo数据
                 */
                WebsocketTool.prototype.ExcelManager_ErrorInfoDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "ErrorInfoDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ErrorInfo数据
                 */
                WebsocketTool.prototype.ExcelManager_ErrorInfoDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "ErrorInfoDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ErrorInfo数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyErrorInfoDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyErrorInfoDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ErrorInfo数据
                 */
                WebsocketTool.prototype.ExcelManager_addErrorInfoData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addErrorInfoData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ErrorInfo数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addErrorInfoDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addErrorInfoDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ErrorInfo
                 */
                WebsocketTool.prototype.ExcelManager_removeErrorInfoData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeErrorInfoData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取Formulas数据
                 */
                WebsocketTool.prototype.ExcelManager_FormulasDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "FormulasDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部Formulas数据
                 */
                WebsocketTool.prototype.ExcelManager_FormulasDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "FormulasDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条Formulas数据
                 */
                WebsocketTool.prototype.ExcelManager_FormulasDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "FormulasDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单Formulas数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyFormulasDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyFormulasDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个Formulas数据
                 */
                WebsocketTool.prototype.ExcelManager_addFormulasData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addFormulasData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加Formulas数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addFormulasDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addFormulasDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条Formulas
                 */
                WebsocketTool.prototype.ExcelManager_removeFormulasData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeFormulasData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ServerUserData数据
                 */
                WebsocketTool.prototype.ExcelManager_ServerUserDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "ServerUserDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ServerUserData数据
                 */
                WebsocketTool.prototype.ExcelManager_ServerUserDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "ServerUserDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ServerUserData数据
                 */
                WebsocketTool.prototype.ExcelManager_ServerUserDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "ServerUserDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ServerUserData数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyServerUserDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyServerUserDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ServerUserData数据
                 */
                WebsocketTool.prototype.ExcelManager_addServerUserDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addServerUserDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ServerUserData数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addServerUserDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addServerUserDataDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ServerUserData
                 */
                WebsocketTool.prototype.ExcelManager_removeServerUserDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeServerUserDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取SeverConfigBase数据
                 */
                WebsocketTool.prototype.ExcelManager_SeverConfigBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "SeverConfigBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部SeverConfigBase数据
                 */
                WebsocketTool.prototype.ExcelManager_SeverConfigBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "SeverConfigBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条SeverConfigBase数据
                 */
                WebsocketTool.prototype.ExcelManager_SeverConfigBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "SeverConfigBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单SeverConfigBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifySeverConfigBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifySeverConfigBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个SeverConfigBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addSeverConfigBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addSeverConfigBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加SeverConfigBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addSeverConfigBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addSeverConfigBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条SeverConfigBase
                 */
                WebsocketTool.prototype.ExcelManager_removeSeverConfigBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeSeverConfigBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取SeverData数据
                 */
                WebsocketTool.prototype.ExcelManager_SeverDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "SeverDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部SeverData数据
                 */
                WebsocketTool.prototype.ExcelManager_SeverDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "SeverDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条SeverData数据
                 */
                WebsocketTool.prototype.ExcelManager_SeverDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "SeverDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单SeverData数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifySeverDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifySeverDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个SeverData数据
                 */
                WebsocketTool.prototype.ExcelManager_addSeverDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addSeverDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加SeverData数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addSeverDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addSeverDataDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条SeverData
                 */
                WebsocketTool.prototype.ExcelManager_removeSeverDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeSeverDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取TimeEvent数据
                 */
                WebsocketTool.prototype.ExcelManager_TimeEventDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "TimeEventDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部TimeEvent数据
                 */
                WebsocketTool.prototype.ExcelManager_TimeEventDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "TimeEventDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条TimeEvent数据
                 */
                WebsocketTool.prototype.ExcelManager_TimeEventDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "TimeEventDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单TimeEvent数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyTimeEventDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyTimeEventDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个TimeEvent数据
                 */
                WebsocketTool.prototype.ExcelManager_addTimeEventData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addTimeEventData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加TimeEvent数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addTimeEventDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addTimeEventDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条TimeEvent
                 */
                WebsocketTool.prototype.ExcelManager_removeTimeEventData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeTimeEventData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ArrangementData数据
                 */
                WebsocketTool.prototype.ExcelManager_ArrangementDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "ArrangementDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ArrangementData数据
                 */
                WebsocketTool.prototype.ExcelManager_ArrangementDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "ArrangementDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ArrangementData数据
                 */
                WebsocketTool.prototype.ExcelManager_ArrangementDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "ArrangementDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ArrangementData数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyArrangementDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyArrangementDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ArrangementData数据
                 */
                WebsocketTool.prototype.ExcelManager_addArrangementDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addArrangementDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ArrangementData数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addArrangementDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addArrangementDataDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ArrangementData
                 */
                WebsocketTool.prototype.ExcelManager_removeArrangementDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeArrangementDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "EquipBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "EquipBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "EquipBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyEquipBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyEquipBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipBase
                 */
                WebsocketTool.prototype.ExcelManager_removeEquipBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeEquipBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipDate数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipDateDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "EquipDateDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipDate数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipDateDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "EquipDateDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipDate数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipDateDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "EquipDateDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipDate数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyEquipDateDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyEquipDateDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipDate数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipDateData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipDateData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipDate数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipDateDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipDateDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipDate
                 */
                WebsocketTool.prototype.ExcelManager_removeEquipDateData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeEquipDateData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipEffectBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipEffectBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "EquipEffectBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipEffectBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipEffectBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "EquipEffectBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipEffectBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipEffectBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "EquipEffectBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipEffectBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyEquipEffectBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyEquipEffectBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipEffectBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipEffectBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipEffectBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipEffectBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipEffectBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipEffectBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipEffectBase
                 */
                WebsocketTool.prototype.ExcelManager_removeEquipEffectBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeEquipEffectBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipExpBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipExpBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "EquipExpBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipExpBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipExpBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "EquipExpBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipExpBase数据
                 */
                WebsocketTool.prototype.ExcelManager_EquipExpBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "EquipExpBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipExpBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyEquipExpBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyEquipExpBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipExpBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipExpBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipExpBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipExpBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addEquipExpBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addEquipExpBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipExpBase
                 */
                WebsocketTool.prototype.ExcelManager_removeEquipExpBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeEquipExpBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取GameArchiveData数据
                 */
                WebsocketTool.prototype.ExcelManager_GameArchiveDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "GameArchiveDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部GameArchiveData数据
                 */
                WebsocketTool.prototype.ExcelManager_GameArchiveDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "GameArchiveDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条GameArchiveData数据
                 */
                WebsocketTool.prototype.ExcelManager_GameArchiveDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "GameArchiveDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单GameArchiveData数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyGameArchiveDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyGameArchiveDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个GameArchiveData数据
                 */
                WebsocketTool.prototype.ExcelManager_addGameArchiveDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addGameArchiveDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加GameArchiveData数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addGameArchiveDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addGameArchiveDataDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条GameArchiveData
                 */
                WebsocketTool.prototype.ExcelManager_removeGameArchiveDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeGameArchiveDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ItemBase数据
                 */
                WebsocketTool.prototype.ExcelManager_ItemBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "ItemBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ItemBase数据
                 */
                WebsocketTool.prototype.ExcelManager_ItemBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "ItemBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ItemBase数据
                 */
                WebsocketTool.prototype.ExcelManager_ItemBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "ItemBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ItemBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyItemBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyItemBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ItemBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addItemBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addItemBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ItemBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addItemBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addItemBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ItemBase
                 */
                WebsocketTool.prototype.ExcelManager_removeItemBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeItemBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ItemData数据
                 */
                WebsocketTool.prototype.ExcelManager_ItemDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "ItemDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ItemData数据
                 */
                WebsocketTool.prototype.ExcelManager_ItemDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "ItemDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ItemData数据
                 */
                WebsocketTool.prototype.ExcelManager_ItemDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "ItemDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ItemData数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyItemDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyItemDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ItemData数据
                 */
                WebsocketTool.prototype.ExcelManager_addItemDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addItemDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ItemData数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addItemDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addItemDataDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ItemData
                 */
                WebsocketTool.prototype.ExcelManager_removeItemDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeItemDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取LevelBase数据
                 */
                WebsocketTool.prototype.ExcelManager_LevelBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "LevelBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部LevelBase数据
                 */
                WebsocketTool.prototype.ExcelManager_LevelBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "LevelBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条LevelBase数据
                 */
                WebsocketTool.prototype.ExcelManager_LevelBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "LevelBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单LevelBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyLevelBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyLevelBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个LevelBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addLevelBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addLevelBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加LevelBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addLevelBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addLevelBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条LevelBase
                 */
                WebsocketTool.prototype.ExcelManager_removeLevelBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeLevelBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取RoleBase数据
                 */
                WebsocketTool.prototype.ExcelManager_RoleBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "RoleBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部RoleBase数据
                 */
                WebsocketTool.prototype.ExcelManager_RoleBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "RoleBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条RoleBase数据
                 */
                WebsocketTool.prototype.ExcelManager_RoleBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "RoleBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单RoleBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyRoleBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyRoleBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个RoleBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addRoleBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addRoleBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加RoleBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addRoleBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addRoleBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条RoleBase
                 */
                WebsocketTool.prototype.ExcelManager_removeRoleBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeRoleBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取RoleData数据
                 */
                WebsocketTool.prototype.ExcelManager_RoleDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "RoleDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部RoleData数据
                 */
                WebsocketTool.prototype.ExcelManager_RoleDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "RoleDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条RoleData数据
                 */
                WebsocketTool.prototype.ExcelManager_RoleDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "RoleDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单RoleData数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifyRoleDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifyRoleDataDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个RoleData数据
                 */
                WebsocketTool.prototype.ExcelManager_addRoleDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addRoleDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加RoleData数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addRoleDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addRoleDataDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条RoleData
                 */
                WebsocketTool.prototype.ExcelManager_removeRoleDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeRoleDataData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取SkinBase数据
                 */
                WebsocketTool.prototype.ExcelManager_SkinBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "SkinBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部SkinBase数据
                 */
                WebsocketTool.prototype.ExcelManager_SkinBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ExcelManager", "SkinBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条SkinBase数据
                 */
                WebsocketTool.prototype.ExcelManager_SkinBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = this.getMsg("ExcelManager", "SkinBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单SkinBase数组的指定属性，propertyName：属性名，value：值
                 */
                WebsocketTool.prototype.ExcelManager_modifySkinBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "modifySkinBaseDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个SkinBase数据
                 */
                WebsocketTool.prototype.ExcelManager_addSkinBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addSkinBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加SkinBase数组数据
                 */
                WebsocketTool.prototype.ExcelManager_addSkinBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = this.getMsg("ExcelManager", "addSkinBaseDatas", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条SkinBase
                 */
                WebsocketTool.prototype.ExcelManager_removeSkinBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "removeSkinBaseData", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取test数据
                 */
                WebsocketTool.prototype.ExcelManager_testDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = this.getMsg("ExcelManager", "testDataById", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 记录客户端异常消息
                 */
                WebsocketTool.prototype.ErrorInfoManager_CreateErrorInfo = function (message, modelType) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(message), ",\"a1\":").concat(JSON.stringify(modelType), ",");
                    var mess = this.getMsg("ErrorInfoManager", "CreateErrorInfo", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * callService
                 */
                WebsocketTool.prototype.FrontDataManager_callService = function (className, funcName, args) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(className), ",\"a1\":").concat(JSON.stringify(funcName), ",\"a2\":").concat(JSON.stringify(args), ",");
                    var mess = this.getMsg("FrontDataManager", "callService", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * callFunc
                 */
                WebsocketTool.prototype.FrontDataManager_callFunc = function (tableName, funcName, args) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(tableName), ",\"a1\":").concat(JSON.stringify(funcName), ",\"a2\":").concat(JSON.stringify(args), ",");
                    var mess = this.getMsg("FrontDataManager", "callFunc", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取LevelBase配置数据
                 */
                WebsocketTool.prototype.GameArchiveManager_getLevelBase = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("GameArchiveManager", "getLevelBase", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取SkinBase配置数据
                 */
                WebsocketTool.prototype.GameArchiveManager_getSkinBase = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("GameArchiveManager", "getSkinBase", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 玩家登录,userId:玩家ID,passWord:密码
                 */
                WebsocketTool.prototype.LoginManager_loginWithOutWallet = function (userId, passWord) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(userId), ",\"a1\":").concat(JSON.stringify(passWord), ",");
                    var mess = this.getMsg("LoginManager", "loginWithOutWallet", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 切换账号
                 */
                WebsocketTool.prototype.LoginManager_switchLogin = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("LoginManager", "switchLogin", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改服务器时间,count：时间便宜量，单位秒
                 */
                WebsocketTool.prototype.ServerManager_timePlus = function (count) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(count), ",");
                    var mess = this.getMsg("ServerManager", "timePlus", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 心跳检测
                 */
                WebsocketTool.prototype.ServerManager_heartBeat = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ServerManager", "heartBeat", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 延迟检测
                 */
                WebsocketTool.prototype.ServerManager_ping = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ServerManager", "ping", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取服务器时间
                 */
                WebsocketTool.prototype.ServerManager_servertime = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ServerManager", "servertime", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                return WebsocketTool;
            }());
            exports_91("WebsocketTool", WebsocketTool);
        }
    };
});
System.register("AutoCode/Net/ClientRequest/LoginManagerRequest", ["Net/NetWebsocket", "AutoCode/Net/WebsocketTool"], function (exports_92, context_92) {
    "use strict";
    var NetWebsocket_2, WebsocketTool_1, LoginManagerRequest;
    var __moduleName = context_92 && context_92.id;
    return {
        setters: [
            function (NetWebsocket_2_1) {
                NetWebsocket_2 = NetWebsocket_2_1;
            },
            function (WebsocketTool_1_1) {
                WebsocketTool_1 = WebsocketTool_1_1;
            }
        ],
        execute: function () {
            LoginManagerRequest = /** @class */ (function () {
                function LoginManagerRequest() {
                }
                Object.defineProperty(LoginManagerRequest, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new LoginManagerRequest();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /***
                 * 玩家登录,userId:玩家ID,passWord:密码
                 */
                LoginManagerRequest.prototype.loginWithOutWallet = function (userId, passWord) {
                    var paramJsons = "".concat(JSON.stringify(userId), ",").concat(JSON.stringify(passWord));
                    var mess = WebsocketTool_1.WebsocketTool.Instance.getMsg("LoginManager", "loginWithOutWallet", "".concat(paramJsons));
                    NetWebsocket_2.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 切换账号
                 */
                LoginManagerRequest.prototype.switchLogin = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_1.WebsocketTool.Instance.getMsg("LoginManager", "switchLogin", "".concat(paramJsons));
                    NetWebsocket_2.NetWebscoket.Instance.sendStr(mess);
                };
                return LoginManagerRequest;
            }());
            exports_92("LoginManagerRequest", LoginManagerRequest);
        }
    };
});
System.register("AutoCode/Net/ClientRequest/ServerManagerRequest", ["Net/NetWebsocket", "AutoCode/Net/WebsocketTool"], function (exports_93, context_93) {
    "use strict";
    var NetWebsocket_3, WebsocketTool_2, ServerManagerRequest;
    var __moduleName = context_93 && context_93.id;
    return {
        setters: [
            function (NetWebsocket_3_1) {
                NetWebsocket_3 = NetWebsocket_3_1;
            },
            function (WebsocketTool_2_1) {
                WebsocketTool_2 = WebsocketTool_2_1;
            }
        ],
        execute: function () {
            ServerManagerRequest = /** @class */ (function () {
                function ServerManagerRequest() {
                }
                Object.defineProperty(ServerManagerRequest, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ServerManagerRequest();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /***
                 * 修改服务器时间,count：时间便宜量，单位秒
                 */
                ServerManagerRequest.prototype.timePlus = function (count) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(count), ",");
                    var mess = WebsocketTool_2.WebsocketTool.Instance.getMsg("ServerManager", "timePlus", "".concat(paramJsons));
                    NetWebsocket_3.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 心跳检测
                 */
                ServerManagerRequest.prototype.heartBeat = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_2.WebsocketTool.Instance.getMsg("ServerManager", "heartBeat", "".concat(paramJsons));
                    NetWebsocket_3.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 延迟检测
                 */
                ServerManagerRequest.prototype.ping = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_2.WebsocketTool.Instance.getMsg("ServerManager", "ping", "".concat(paramJsons));
                    NetWebsocket_3.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取服务器时间
                 */
                ServerManagerRequest.prototype.servertime = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_2.WebsocketTool.Instance.getMsg("ServerManager", "servertime", "".concat(paramJsons));
                    NetWebsocket_3.NetWebscoket.Instance.sendStr(mess);
                };
                return ServerManagerRequest;
            }());
            exports_93("ServerManagerRequest", ServerManagerRequest);
        }
    };
});
System.register("Inputer", ["GameMgr", "role/playerMgr"], function (exports_94, context_94) {
    "use strict";
    var GameMgr_25, playerMgr_5, Inputer;
    var __moduleName = context_94 && context_94.id;
    return {
        setters: [
            function (GameMgr_25_1) {
                GameMgr_25 = GameMgr_25_1;
            },
            function (playerMgr_5_1) {
                playerMgr_5 = playerMgr_5_1;
            }
        ],
        execute: function () {
            exports_94("Inputer", Inputer = /** @class */ (function () {
                function Inputer() {
                }
                Inputer.init = function () {
                    GameMgr_25.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this.onMove, this);
                    GameMgr_25.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointDown, this.onDown, this);
                    GameMgr_25.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointUp, this.onUp, this);
                    //GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointClick,this.click,this);
                };
                Inputer.click = function () {
                    console.error("  jump test ");
                    var role = playerMgr_5.playerMgr.getRole();
                    role.root.jump(); //跳起
                };
                Inputer.onDown = function (_a) {
                    var x = _a[0], y = _a[1];
                    this.isDonw = true;
                    this.lastPoint_x = x;
                };
                Inputer.onUp = function () {
                    this.isDonw = false;
                };
                Inputer.onMove = function (_a) {
                    var x = _a[0], y = _a[1];
                    if (!this.isDonw || !this.onHorizTouch)
                        return;
                    var len = Math.abs(this.lastPoint_x - x);
                    if (len < 0.0001)
                        return;
                    var dir = x > this.lastPoint_x ? 1 : -1;
                    this.onHorizTouch(dir * len);
                    this.lastPoint_x = x;
                };
                Inputer.lastPoint_x = -1;
                Inputer.isDonw = false;
                return Inputer;
            }()));
        }
    };
});
System.register("Loader/idleLoadMgr", ["Loader/loadMgr", "Tools/FrameMgr", "GameMgr"], function (exports_95, context_95) {
    "use strict";
    var loadMgr_3, FrameMgr_7, GameMgr_26, idleLoadMgr;
    var __moduleName = context_95 && context_95.id;
    return {
        setters: [
            function (loadMgr_3_1) {
                loadMgr_3 = loadMgr_3_1;
            },
            function (FrameMgr_7_1) {
                FrameMgr_7 = FrameMgr_7_1;
            },
            function (GameMgr_26_1) {
                GameMgr_26 = GameMgr_26_1;
            }
        ],
        execute: function () {
            exports_95("idleLoadMgr", idleLoadMgr = /** @class */ (function () {
                //空闲时加载管理器
                function idleLoadMgr() {
                }
                idleLoadMgr.init = function () {
                    this.addToList();
                    this.start();
                };
                idleLoadMgr.addToList = function () {
                    var hasNY = true;
                    //添加URL  到待加载列表中
                    // [ 复活page、结算page、过关烟花 、金币领取 、视频领取、 新春 、每日分享 、商店 、皮肤主题 领取弹出 、设置 、 排行榜 、 code ]
                    var l = this.loadList;
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "continue_page/continue_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "continue/continue.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "gameOver_page/gameOver_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "gameover/gameover.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "common/common.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "victory_page/victory_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "victory/victory.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "prize_page/prize_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "prize/prize.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "videoPrize_page/videoPrize_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "videoPrize/videoPrize.assetbundle.json"));
                    if (hasNY) { //有新春 加载新春页面资源
                        l.push("".concat(GameMgr_26.GameMgr.UIPath, "newYear_page/newYear_page.assetbundle.json"));
                        l.push("".concat(GameMgr_26.GameMgr.atlasPath, "newyear/newyear.assetbundle.json"));
                    }
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "invite_page/invite_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "invite/invite.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "skinShop_page/skinShop_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "shop/shop.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "unlock_page/unlock_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "unlock/unlock.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "setting_page/setting_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "setting/setting.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "rank_page/rank_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "rank/rank.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.UIPath, "code_page/code_page.assetbundle.json"));
                    l.push("".concat(GameMgr_26.GameMgr.atlasPath, "QRcode/QRcode.assetbundle.json"));
                };
                idleLoadMgr.start = function () {
                    //注册update
                    FrameMgr_7.FrameMgr.Add(this.loop, this);
                };
                idleLoadMgr.loop = function (d) {
                    //游戏进行的状态停止加载 
                    if (GameMgr_26.GameMgr.raceStage != 0)
                        return;
                    this.count += d;
                    if (this.count < this.gapTime)
                        return;
                    this.count = 0;
                    //检查是否已经结束
                    if (!this.loadEnd)
                        return;
                    //切换加载
                    this.loadNext();
                };
                //加载下一个
                idleLoadMgr.loadNext = function () {
                    if (this.loadList.length <= 0) {
                        FrameMgr_7.FrameMgr.Remove(this.loop, this); //队列加载结束
                        return;
                    }
                    this.loadEnd = false;
                    var url = this.loadList.shift();
                    loadMgr_3.loadMgr.Instance.load(url, this.onloaded.bind(this));
                };
                idleLoadMgr.onloaded = function () {
                    this.loadEnd = true;
                };
                idleLoadMgr.loadList = [];
                idleLoadMgr.gapTime = 0.5;
                idleLoadMgr.count = 0;
                idleLoadMgr.loadEnd = true;
                return idleLoadMgr;
            }()));
        }
    };
});
System.register("ui/launchPageHandle", ["ui/base/uiPage"], function (exports_96, context_96) {
    "use strict";
    var uiPage_21, launchPageHandle;
    var __moduleName = context_96 && context_96.id;
    return {
        setters: [
            function (uiPage_21_1) {
                uiPage_21 = uiPage_21_1;
            }
        ],
        execute: function () {
            exports_96("launchPageHandle", launchPageHandle = /** @class */ (function (_super) {
                __extends(launchPageHandle, _super);
                function launchPageHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.opt = m4m.framework.layoutOption;
                    _this.initY = 0;
                    _this.carY = 10;
                    _this.isup = false;
                    _this.disY = 0;
                    _this.speed = 20;
                    _this.FastLoadTime = 2; //xx s 加载到 80%
                    _this.loadCount = 0; //计时器
                    _this.fastRate = 0.8;
                    _this.sliderSpeed = 0.5;
                    _this.sliderRange = 50;
                    _this.tp = 0;
                    return _this;
                }
                launchPageHandle.prototype.onPlay = function () {
                    var v_ = this.s.getLayoutValue(this.opt.V_CENTER) - 12;
                    var h_ = this.s.getLayoutValue(this.opt.H_CENTER);
                    this.startPos = new m4m.math.vector2(v_, h_);
                };
                launchPageHandle.prototype.update = function (delta) {
                    if (!this.transform.visible)
                        return;
                    this.sliderAnimation(delta);
                    this.pergressAnim(delta);
                };
                //进度条动画 
                launchPageHandle.prototype.pergressAnim = function (delta) {
                    this.loadCount += delta;
                    var p = 0;
                    if (this.loadCount <= this.FastLoadTime) {
                        p = this.loadCount / this.FastLoadTime * this.fastRate;
                    }
                    else {
                        p = this.fastRate;
                    }
                    var addP = this.loadCount / (this.FastLoadTime + this.loadCount); //饱和增长
                    p = (p + addP * (1 - this.fastRate));
                    this.pergress.value = p;
                };
                //手指滑动动画
                launchPageHandle.prototype.sliderAnimation = function (delta) {
                    if (!this.s)
                        return;
                    this.tp += this.sliderSpeed * delta;
                    this.tp = this.tp > 1 ? this.tp - 1 : this.tp;
                    var len = 0;
                    if (this.tp <= 0.5) {
                        len = this.tween(this.tp * 2, this.sliderRange);
                    }
                    else {
                        len = this.tween((2 - this.tp * 2), this.sliderRange);
                    }
                    //移动
                    this.s.setLayoutValue(this.opt.V_CENTER, this.startPos.x + len);
                    this.s.setLayoutValue(this.opt.H_CENTER, this.startPos.y + len);
                    // this.s.transform.localTranslate.x = len 
                    // this.s.transform.localTranslate.y = len 
                    this.s.markDirty();
                };
                launchPageHandle.prototype.tween = function (p, dis) {
                    var mth, tp;
                    if (p <= 0.5) {
                        mth = m4m.framework.tweenMethod.QuadEaseIn;
                        tp = p * 2;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2;
                    }
                    else {
                        mth = m4m.framework.tweenMethod.QuadEaseOut;
                        tp = p * 2 - 1;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2 + dis / 2;
                    }
                };
                launchPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "progressbar")
                ], launchPageHandle.prototype, "pergress", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], launchPageHandle.prototype, "login", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], launchPageHandle.prototype, "s", void 0);
                launchPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], launchPageHandle);
                return launchPageHandle;
            }(uiPage_21.uiPage)));
        }
    };
});
System.register("ui/pages/launchPage", ["loadingUIMgr", "Tool/wxTool"], function (exports_97, context_97) {
    "use strict";
    var loadingUIMgr_1, wxTool_10, launchPage;
    var __moduleName = context_97 && context_97.id;
    return {
        setters: [
            function (loadingUIMgr_1_1) {
                loadingUIMgr_1 = loadingUIMgr_1_1;
            },
            function (wxTool_10_1) {
                wxTool_10 = wxTool_10_1;
            }
        ],
        execute: function () {
            exports_97("launchPage", launchPage = /** @class */ (function () {
                //加载loading页面  page
                function launchPage() {
                    this.inited = false;
                }
                Object.defineProperty(launchPage, "Instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new launchPage();
                            this._instance.init();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                launchPage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var tempRoot = loadingUIMgr_1.loadingUIMgr.launch_page.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("launchPageHandle");
                    //    this.animation = tempRoot.getComponent("uiScaleAnimation") as any;
                    //事件
                    this.handle.onHide = function () {
                        //joinTool.hideBottomAd();
                    };
                    //  let height = wxTool.getScreenHeightHeight() * 3;
                    ////   let l = height / this.handle.transform.height;
                    //   console.log(height / l + "??????" + window.innerHeight);
                    //  let l = GameMgr.app.width / 720;
                    //  l = l < 0 ? 1 : l;
                    // this.handle.s.setLayoutValue(m4m.framework.layoutOption.V_CENTER, (150 * window.devicePixelRatio)*l);
                    //    this.inited = true;
                };
                /** 加载完成回调 */
                launchPage.onLoadend = function () {
                    var _this = this;
                    return new m4m.threading.gdPromise(function (resolve, reject) {
                        if (launchPage.inLoadend) {
                            reject();
                            return;
                        }
                        //检查 是否登录
                        // wxTool.showUserInfoBtn(resolve);
                        // wxTool.userSetings(resolve);
                        _this.inLoadend = true;
                        _this.endCallBack = resolve;
                        // this._instance.handle.pergress.transform.visible = false;
                        _this.endFun();
                    });
                };
                //检查 加载过程是否结束
                launchPage.endFun = function () {
                    if (!this.endCallBack || !this.inLoadend || !this.wxAuthOk)
                        return;
                    this.endCallBack();
                };
                // 获取用户信息 ，授权登录
                launchPage.ckWxAuthorization = function () {
                    var _this = this;
                    wxTool_10.wxTool.userSetings(function () {
                        _this.wxAuthOk = true;
                        var img = _this._instance.handle.pergress.transform.getComponent("image2D");
                        img.updateTran();
                        // this._instance.handle.pergress.transform.updateTran(true);
                        _this._instance.handle.s.visible = false;
                        setTimeout(function () {
                            _this._instance.handle.pergress.transform.visible = true;
                            _this._instance.handle.s.transform.visible = false;
                        }, 0);
                        _this.endFun();
                    }, function (isad) {
                        _this._instance.handle.pergress.transform.visible = isad;
                        _this._instance.handle.s.transform.visible = !isad;
                    });
                };
                launchPage.prototype.show = function () {
                    this.handle.loadCount = 0;
                    this.handle.show();
                    launchPage.ckWxAuthorization();
                    //  this.playAnimation();
                };
                launchPage.prototype.hide = function () {
                    this.handle.hide();
                };
                launchPage.inLoadend = false;
                launchPage.wxAuthOk = false;
                return launchPage;
            }()));
        }
    };
});
System.register("loadingUIMgr", ["uiMgr", "GameMgr", "ui/pages/launchPage", "Loader/loadMgr"], function (exports_98, context_98) {
    "use strict";
    var uiMgr_3, GameMgr_27, launchPage_1, loadMgr_4, loadingUIMgr;
    var __moduleName = context_98 && context_98.id;
    return {
        setters: [
            function (uiMgr_3_1) {
                uiMgr_3 = uiMgr_3_1;
            },
            function (GameMgr_27_1) {
                GameMgr_27 = GameMgr_27_1;
            },
            function (launchPage_1_1) {
                launchPage_1 = launchPage_1_1;
            },
            function (loadMgr_4_1) {
                loadMgr_4 = loadMgr_4_1;
            }
        ],
        execute: function () {
            loadingUIMgr = /** @class */ (function () {
                function loadingUIMgr() {
                }
                loadingUIMgr.init = function () {
                    var _this = this;
                    var opt = m4m.framework.layoutOption;
                    var uiRoot = uiMgr_3.uiMgr.highlayer;
                    loadingUIMgr.assetmgr = GameMgr_27.GameMgr.app.getAssetMgr();
                    //显示的 loading ui
                    this.root = new m4m.framework.transform2D();
                    uiRoot.addChild(this.root);
                    this.root.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                    var atlasUrl = "".concat(GameMgr_27.GameMgr.atlasPath, "launch/launch.assetbundle.json");
                    var prefaburl = "".concat(GameMgr_27.GameMgr.UIPath, "launch_page/launch_page.assetbundle.json");
                    //
                    var ps = [];
                    ps.push(loadMgr_4.loadMgr.Instance.syncLoad(atlasUrl));
                    ps.push(loadMgr_4.loadMgr.Instance.syncLoad(prefaburl));
                    Promise.all(ps).then(function () {
                        _this.launch_page = _this.assetmgr.getAssetByName("launch_page.prefab.json", "launch_page.assetbundle.json");
                        launchPage_1.launchPage.Instance.show();
                    });
                };
                loadingUIMgr.hide = function () {
                    if (this.root)
                        this.root.visible = false;
                };
                return loadingUIMgr;
            }());
            exports_98("loadingUIMgr", loadingUIMgr);
        }
    };
});
System.register("Manager/UIOpenOrHideManager", ["PSDUI/UiManager"], function (exports_99, context_99) {
    "use strict";
    var UiManager_2, UIOpenOrHideManager;
    var __moduleName = context_99 && context_99.id;
    return {
        setters: [
            function (UiManager_2_1) {
                UiManager_2 = UiManager_2_1;
            }
        ],
        execute: function () {
            exports_99("UIOpenOrHideManager", UIOpenOrHideManager = /** @class */ (function () {
                function UIOpenOrHideManager() {
                    this._showRoomEuler = 0;
                    this.roleId = 0;
                    /**设置矿洞页面 */
                    this.cavePageNumber = 0;
                    this.uiloadingCanShow = true;
                }
                Object.defineProperty(UIOpenOrHideManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UIOpenOrHideManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                UIOpenOrHideManager.prototype.init = function () {
                    var _this = this;
                    ///隐藏 不主动释放的 UI列表
                    UiManager_2.UiManager.dontDisposeUIList = [];
                    UiManager_2.UiManager.dontDisposeUIList.push("wloading");
                    // UiManager.dontDisposeUIList.push(UiNames.Tooltip);
                    // UiManager.dontDisposeUIList.push(UiNames.Circleloading);
                    // UiManager.dontDisposeUIList.push(UiNames.Cardsone);
                    // UiManager.dontDisposeUIList.push(UiNames.Cardsten);
                    // UiManager.dontDisposeUIList.push(UiNames.Guide);
                    // UiManager.dontDisposeUIList.push(UiNames.Playgame);
                    // UiManager.InitUi(UiNames.Solidcolor);
                    //开始打开UI 回调
                    UiManager_2.UiManager.startLoadCallBack = function (uiname) {
                        if (UIOpenOrHideManager.needShowLoading && uiname != "wloading") {
                            // console.error("开始加载UI " + uiname);
                            if (_this.uiloadingCanShow) {
                                //显示UIloading界面
                                UiManager_2.UiManager.showUi("wloading");
                                _this.uiloadingCanShow = false;
                            }
                        }
                    };
                    UiManager_2.UiManager.endLoadCallBack = function (uiname) {
                        if (UIOpenOrHideManager.needShowLoading && uiname != "wloading") {
                            // console.error("UI加载完成 " + uiname);
                            //半闭UIloading界面
                            if (UiManager_2.UiManager.isUiShow("wloading") && UIOpenOrHideManager.neeshowwloaidn) {
                                UiManager_2.UiManager.hideUi("wloading");
                            }
                            _this.uiloadingCanShow = true;
                        }
                    };
                };
                // public set showRoomEuler(v) { this._showRoomEuler = v; this.refreashShowRoompaltformEuler(); }
                // public get showRoomEuler() { return this._showRoomEuler; }
                //是否可以显示loading
                UIOpenOrHideManager.needShowLoading = true;
                UIOpenOrHideManager.neeshowwloaidn = true;
                return UIOpenOrHideManager;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/UserDataBaseEvent", [], function (exports_100, context_100) {
    "use strict";
    var UserDataBaseEvent;
    var __moduleName = context_100 && context_100.id;
    return {
        setters: [],
        execute: function () {
            exports_100("UserDataBaseEvent", UserDataBaseEvent = /** @class */ (function () {
                function UserDataBaseEvent() {
                }
                /** 初始化全部数据*/
                UserDataBaseEvent.All = "All";
                /** 批量加载数据*/
                UserDataBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                UserDataBaseEvent.TipData = "TipData";
                /** 用户uid*/
                UserDataBaseEvent.id = "id";
                /** 用户名*/
                UserDataBaseEvent.playerName = "playerName";
                /** token*/
                UserDataBaseEvent.token = "token";
                /** 密码*/
                UserDataBaseEvent.passWord = "passWord";
                /** 账号状态*/
                UserDataBaseEvent.status = "status";
                /** 持有货币*/
                UserDataBaseEvent.currency = "currency";
                /** 是否屏蔽*/
                UserDataBaseEvent.isBlock = "isBlock";
                /** 是否记录*/
                UserDataBaseEvent.isLogUser = "isLogUser";
                /** 登录时间*/
                UserDataBaseEvent.loginTime = "loginTime";
                /** 第三方账号*/
                UserDataBaseEvent.thirdPartyAccount = "thirdPartyAccount";
                /** 服务器渠道*/
                UserDataBaseEvent.serverChannel = "serverChannel";
                /** 账号权限*/
                UserDataBaseEvent.accountAccess = "accountAccess";
                /** 黑名单*/
                UserDataBaseEvent.blacklist = "blacklist";
                /** 玩家姓名*/
                UserDataBaseEvent.frinedName = "frinedName";
                /** 玩家头像*/
                UserDataBaseEvent.icon = "icon";
                /** 游戏存档*/
                UserDataBaseEvent.GameArchive = "GameArchive";
                return UserDataBaseEvent;
            }()));
        }
    };
});
System.register("Manager/UserDataManager", ["Time/CDManage", "Core/StageMgr", "AutoCode/Net/WsDataManager", "AutoCode/Net/DataEvents/UserDataBaseEvent"], function (exports_101, context_101) {
    "use strict";
    var CDManage_1, StageMgr_1, WsDataManager_2, UserDataBaseEvent_1, UserDataManager;
    var __moduleName = context_101 && context_101.id;
    return {
        setters: [
            function (CDManage_1_1) {
                CDManage_1 = CDManage_1_1;
            },
            function (StageMgr_1_1) {
                StageMgr_1 = StageMgr_1_1;
            },
            function (WsDataManager_2_1) {
                WsDataManager_2 = WsDataManager_2_1;
            },
            function (UserDataBaseEvent_1_1) {
                UserDataBaseEvent_1 = UserDataBaseEvent_1_1;
            }
        ],
        execute: function () {
            //玩家账号数据
            UserDataManager = /** @class */ (function () {
                function UserDataManager() {
                }
                Object.defineProperty(UserDataManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UserDataManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //初始化
                UserDataManager.prototype.init = function () {
                    WsDataManager_2.WsDataManager.UserDataBaseData.addEventListener(UserDataBaseEvent_1.UserDataBaseEvent.All, this.userInfoFun.bind(this));
                };
                UserDataManager.prototype.userInfoFun = function (data) {
                    console.log("玩家信息：", data);
                    var serverTime = WsDataManager_2.WsDataManager.UserDataBaseData.loginTime;
                    CDManage_1.CDManage.Instance.setServerTime(serverTime);
                    StageMgr_1.StageMgr.onLoginServerSuccess();
                };
                return UserDataManager;
            }());
            exports_101("UserDataManager", UserDataManager);
        }
    };
});
System.register("Manager/GameDataEventInitManager", ["Manager/GameArchiveManager", "Manager/UIOpenOrHideManager", "Manager/UserDataManager"], function (exports_102, context_102) {
    "use strict";
    var GameArchiveManager_1, UIOpenOrHideManager_1, UserDataManager_1, GameDataEventInitManager;
    var __moduleName = context_102 && context_102.id;
    return {
        setters: [
            function (GameArchiveManager_1_1) {
                GameArchiveManager_1 = GameArchiveManager_1_1;
            },
            function (UIOpenOrHideManager_1_1) {
                UIOpenOrHideManager_1 = UIOpenOrHideManager_1_1;
            },
            function (UserDataManager_1_1) {
                UserDataManager_1 = UserDataManager_1_1;
            }
        ],
        execute: function () {
            GameDataEventInitManager = /** @class */ (function () {
                function GameDataEventInitManager() {
                }
                GameDataEventInitManager.init = function () {
                    UserDataManager_1.UserDataManager.Instance.init();
                    GameArchiveManager_1.GameArchiveManager.Instance.init();
                    UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.init();
                };
                return GameDataEventInitManager;
            }());
            exports_102("GameDataEventInitManager", GameDataEventInitManager);
        }
    };
});
System.register("Core/StageMgr", ["audio/AudioMgr", "PSDUI/UiManager", "Tools/advMgr", "Tools/fontMgr", "Tools/gameMathUtil", "Tools/PlatformUtil", "AutoCode/Net/ClientRequest/GameArchiveManagerRequest", "AutoCode/Net/ClientRequest/LoginManagerRequest", "AutoCode/Net/WsDataManager", "configMgr", "GameMgr", "Inputer", "Loader/idleLoadMgr", "loadingUIMgr", "Manager/GameDataEventInitManager", "MatMgr", "obsCreateMgr", "PoolMgr", "Ress", "stageMgr", "Tool/joinTool", "ui/pages/launchPage", "Core/blockchain/ConnectWalletManager"], function (exports_103, context_103) {
    "use strict";
    var AudioMgr_11, UiManager_3, advMgr_3, fontMgr_1, gameMathUtil_1, PlatformUtil_1, GameArchiveManagerRequest_1, LoginManagerRequest_1, WsDataManager_3, configMgr_8, GameMgr_28, Inputer_1, idleLoadMgr_1, loadingUIMgr_2, GameDataEventInitManager_1, MatMgr_7, obsCreateMgr_3, PoolMgr_4, Ress_9, stageMgr_7, joinTool_9, launchPage_2, ConnectWalletManager_1, StageMgr;
    var __moduleName = context_103 && context_103.id;
    return {
        setters: [
            function (AudioMgr_11_1) {
                AudioMgr_11 = AudioMgr_11_1;
            },
            function (UiManager_3_1) {
                UiManager_3 = UiManager_3_1;
            },
            function (advMgr_3_1) {
                advMgr_3 = advMgr_3_1;
            },
            function (fontMgr_1_1) {
                fontMgr_1 = fontMgr_1_1;
            },
            function (gameMathUtil_1_1) {
                gameMathUtil_1 = gameMathUtil_1_1;
            },
            function (PlatformUtil_1_1) {
                PlatformUtil_1 = PlatformUtil_1_1;
            },
            function (GameArchiveManagerRequest_1_1) {
                GameArchiveManagerRequest_1 = GameArchiveManagerRequest_1_1;
            },
            function (LoginManagerRequest_1_1) {
                LoginManagerRequest_1 = LoginManagerRequest_1_1;
            },
            function (WsDataManager_3_1) {
                WsDataManager_3 = WsDataManager_3_1;
            },
            function (configMgr_8_1) {
                configMgr_8 = configMgr_8_1;
            },
            function (GameMgr_28_1) {
                GameMgr_28 = GameMgr_28_1;
            },
            function (Inputer_1_1) {
                Inputer_1 = Inputer_1_1;
            },
            function (idleLoadMgr_1_1) {
                idleLoadMgr_1 = idleLoadMgr_1_1;
            },
            function (loadingUIMgr_2_1) {
                loadingUIMgr_2 = loadingUIMgr_2_1;
            },
            function (GameDataEventInitManager_1_1) {
                GameDataEventInitManager_1 = GameDataEventInitManager_1_1;
            },
            function (MatMgr_7_1) {
                MatMgr_7 = MatMgr_7_1;
            },
            function (obsCreateMgr_3_1) {
                obsCreateMgr_3 = obsCreateMgr_3_1;
            },
            function (PoolMgr_4_1) {
                PoolMgr_4 = PoolMgr_4_1;
            },
            function (Ress_9_1) {
                Ress_9 = Ress_9_1;
            },
            function (stageMgr_7_1) {
                stageMgr_7 = stageMgr_7_1;
            },
            function (joinTool_9_1) {
                joinTool_9 = joinTool_9_1;
            },
            function (launchPage_2_1) {
                launchPage_2 = launchPage_2_1;
            },
            function (ConnectWalletManager_1_1) {
                ConnectWalletManager_1 = ConnectWalletManager_1_1;
            }
        ],
        execute: function () {
            exports_103("StageMgr", StageMgr = /** @class */ (function () {
                function StageMgr() {
                }
                Object.defineProperty(StageMgr, "PlayerGUID", {
                    get: function () { return this._playerGUID; },
                    enumerable: false,
                    configurable: true
                });
                StageMgr.init = function () {
                    loadingUIMgr_2.loadingUIMgr.init();
                    GameDataEventInitManager_1.GameDataEventInitManager.init();
                    //gameMgr
                    // GameMgr.init(app);
                    // UiManager.showUi(UiNames.Black);
                    //加载 用户保存的历时数据 
                    // GameMgr.downLoadData().then();
                    //test 对接 Res 资源
                    // Ress.init().then(launchPage.onLoadend).then(GameMgr.downLoadData).resolve(lodinEnd);
                    Ress_9.Ress.seconedLcallBack = function () {
                        //材质管理
                        MatMgr_7.MatMgr.init();
                        //其他配置初始化
                        configMgr_8.configMgr.init();
                        //障碍生成器
                        obsCreateMgr_3.obsCreateMgr.init();
                        //输入管理
                        Inputer_1.Inputer.init();
                        //音频
                        AudioMgr_11.AudioMgr.init(GameMgr_28.GameMgr.audioPath);
                        //join init
                        joinTool_9.joinTool.init();
                        //stage init
                        // stageMgr.init();
                        //内部广告
                        advMgr_3.advMgr.init();
                        //空闲加载管理器
                        idleLoadMgr_1.idleLoadMgr.init();
                        launchPage_2.launchPage.Instance.hide();
                        UiManager_3.UiManager.showUi("ArchiveSelection");
                    };
                    this.resComFun();
                };
                /**已连接上服务器 */
                StageMgr.serverConnected = function () {
                    this.serverConnect = true;
                    this.enterLogin();
                };
                /**资源加载完毕 可登录 */
                StageMgr.resComFun = function () {
                    this.resCom = true;
                    this.enterLogin();
                };
                StageMgr.enterLogin = function () {
                    var _this = this;
                    if (this.serverConnect && this.resCom) {
                        launchPage_2.launchPage.onLoadend();
                        if (GameMgr_28.GameMgr.openWalletBol) {
                            ConnectWalletManager_1.ConnectWalletManager.Instance.loginAccount(function (address) { return __awaiter(_this, void 0, void 0, function () {
                                var addr;
                                return __generator(this, function (_a) {
                                    addr = address;
                                    // await ConnectWalletManager.Instance.getM4MComponents(1);
                                    LoginManagerRequest_1.LoginManagerRequest.Instance.loginWithOutWallet(addr, "123");
                                    return [2 /*return*/];
                                });
                            }); });
                        }
                        else {
                            var str = "";
                            if (this.defToken == null) {
                                //如果不走钱包登录流程 这里改成 直接随一个账号登录  后续 随机的账号应该是用钱包地址
                                //测试
                                var length_1 = gameMathUtil_1.gameMathUtil.RandRange(10, 20, true);
                                for (var i = 0; i < length_1; i++) {
                                    str += gameMathUtil_1.gameMathUtil.RandRange(0, 10, true);
                                }
                            }
                            else {
                                str = this.defToken;
                            }
                            // console.error("随机账号:", str);
                            LoginManagerRequest_1.LoginManagerRequest.Instance.loginWithOutWallet("123456", "123");
                        }
                    }
                };
                StageMgr.enterBase = function () {
                    if (this.isLevelBase && this.isSkinBase && this.isMainBase && this.isThemeBase) {
                        Ress_9.Ress.init().then(function () {
                            GameMgr_28.GameMgr.downLoadData().then(function () {
                                //配置
                                configMgr_8.configMgr.PreInit();
                                //材质管理
                                MatMgr_7.MatMgr.preInit();
                                //池管理器
                                PoolMgr_4.PoolMgr.init();
                                //font
                                var useBufferMode = PlatformUtil_1.PlatformUtil.WXGetSystemPlatformType == PlatformUtil_1.PlatformType.iPhone;
                                var isIosBol = PlatformUtil_1.PlatformUtil.WXGetSystemPlatformType == PlatformUtil_1.PlatformType.iPhone;
                                fontMgr_1.FontMgr.Instance.init(useBufferMode, isIosBol);
                                //预初始stage 
                                stageMgr_7.stageMgr.preInit();
                            });
                        });
                    }
                };
                StageMgr.onLoginServerSuccess = function () {
                    StageMgr._playerGUID = WsDataManager_3.WsDataManager.UserDataBaseData.token;
                    GameArchiveManagerRequest_1.GameArchiveManagerRequest.Instance.getSkinBase();
                    GameArchiveManagerRequest_1.GameArchiveManagerRequest.Instance.getLevelBase();
                    GameArchiveManagerRequest_1.GameArchiveManagerRequest.Instance.getMainBase();
                    GameArchiveManagerRequest_1.GameArchiveManagerRequest.Instance.getThemeBase();
                };
                StageMgr.serverConnect = false;
                StageMgr.resCom = false;
                StageMgr.isLevelBase = false;
                StageMgr.isSkinBase = false;
                StageMgr.isMainBase = false;
                StageMgr.isThemeBase = false;
                StageMgr._playerGUID = "p:001";
                return StageMgr;
            }()));
        }
    };
});
System.register("Manager/TipsManager", ["PSDUI/UiManager"], function (exports_104, context_104) {
    "use strict";
    var UiManager_4, TipsManager;
    var __moduleName = context_104 && context_104.id;
    return {
        setters: [
            function (UiManager_4_1) {
                UiManager_4 = UiManager_4_1;
            }
        ],
        execute: function () {
            TipsManager = /** @class */ (function () {
                function TipsManager() {
                }
                Object.defineProperty(TipsManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new TipsManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                TipsManager.ShowTips = function (desc, bool) {
                    if (bool === void 0) { bool = false; }
                    this.descTips = desc;
                    this.tipsbool = bool;
                    UiManager_4.UiManager.showUi("Tips");
                };
                return TipsManager;
            }());
            exports_104("TipsManager", TipsManager);
        }
    };
});
System.register("Net/PingTimeManager", ["Time/CTimer", "Time/TimeUtil"], function (exports_105, context_105) {
    "use strict";
    var CTimer_1, TimeUtil_1, NetworkQualityType, PingTimeManager;
    var __moduleName = context_105 && context_105.id;
    return {
        setters: [
            function (CTimer_1_1) {
                CTimer_1 = CTimer_1_1;
            },
            function (TimeUtil_1_1) {
                TimeUtil_1 = TimeUtil_1_1;
            }
        ],
        execute: function () {
            /**
             * 网络品质类型
             */
            (function (NetworkQualityType) {
                NetworkQualityType[NetworkQualityType["height"] = 1] = "height";
                NetworkQualityType[NetworkQualityType["middle"] = 2] = "middle";
                NetworkQualityType[NetworkQualityType["low"] = 3] = "low";
            })(NetworkQualityType || (NetworkQualityType = {}));
            exports_105("NetworkQualityType", NetworkQualityType);
            //ping 时间管理
            PingTimeManager = /** @class */ (function () {
                function PingTimeManager() {
                    this.pingtimeStart = 0;
                    //每1秒
                    CTimer_1.CTimer.Instance.loopTimeUpdate(1000, this.updateFun.bind(this));
                }
                Object.defineProperty(PingTimeManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new PingTimeManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //返回当前网络质量品质
                PingTimeManager.prototype.getNetworkQuality = function () {
                    if (this.timeQualityNum <= 100) {
                        return NetworkQualityType.height;
                    }
                    if (this.timeQualityNum <= 200 && this.timeQualityNum > 100) {
                        return NetworkQualityType.middle;
                    }
                    return NetworkQualityType.low;
                };
                //
                PingTimeManager.prototype.pingTimeFun = function () {
                    // let gameTime: number = Math.floor(TimeUtil.realtimeSinceStartup / 1000);
                    // console.error("当前游戏启动时间秒 " + gameTime);
                    this.pingtimeStart = TimeUtil_1.TimeUtil.realtimeSinceStartup;
                    // WebsocketTool.Instance.ServerManager_ping();
                };
                //收到服务器返回
                PingTimeManager.prototype.serverBackFun = function () {
                    //毫秒
                    this.timeQualityNum = TimeUtil_1.TimeUtil.realtimeSinceStartup - this.pingtimeStart; //
                    // UiDataManager.changeFunctionData(BindKeyName.Network, this.timeQualityNum);
                    // console.error("网络延迟 ", this.timeQualityNum,"毫秒");
                };
                PingTimeManager.prototype.updateFun = function () {
                    // 
                    this.pingTimeFun();
                };
                return PingTimeManager;
            }());
            exports_105("PingTimeManager", PingTimeManager);
        }
    };
});
System.register("Net/NetWebsocket", ["Time/CDManage", "AutoCode/Net/ClientRequest/LoginManagerRequest", "AutoCode/Net/WebsocketTool", "Core/StageMgr", "Manager/TipsManager", "Net/NetData", "Net/PingTimeManager"], function (exports_106, context_106) {
    "use strict";
    var CDManage_2, LoginManagerRequest_2, WebsocketTool_3, StageMgr_2, TipsManager_1, NetData_28, PingTimeManager_1, NetWebscoket;
    var __moduleName = context_106 && context_106.id;
    return {
        setters: [
            function (CDManage_2_1) {
                CDManage_2 = CDManage_2_1;
            },
            function (LoginManagerRequest_2_1) {
                LoginManagerRequest_2 = LoginManagerRequest_2_1;
            },
            function (WebsocketTool_3_1) {
                WebsocketTool_3 = WebsocketTool_3_1;
            },
            function (StageMgr_2_1) {
                StageMgr_2 = StageMgr_2_1;
            },
            function (TipsManager_1_1) {
                TipsManager_1 = TipsManager_1_1;
            },
            function (NetData_28_1) {
                NetData_28 = NetData_28_1;
            },
            function (PingTimeManager_1_1) {
                PingTimeManager_1 = PingTimeManager_1_1;
            }
        ],
        execute: function () {
            exports_106("NetWebscoket", NetWebscoket = /** @class */ (function () {
                function NetWebscoket() {
                    this.fuck = "";
                    //是否连接过服务器
                    this._connected = false;
                }
                Object.defineProperty(NetWebscoket, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new NetWebscoket();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                NetWebscoket.prototype.connect = function (url) {
                    // console.log("开始链接服务器*** " + url);
                    // this._webscoket = new WebSocket(url);//"wss://hse-dev-qq.upaidui.com"
                    if (url == null) {
                        console.error("服务器 地址出错！" + url);
                        return;
                    }
                    // url = "wss://kingzet.cn";
                    console.log("开始链接服务器 " + url);
                    this._webscoket = new WebSocket(url);
                    this._webscoket["onmessage"] = this.onmessage.bind(this);
                    this._webscoket["onopen"] = this.onopen.bind(this);
                    this._webscoket["onclose"] = this.onclose.bind(this);
                    this._webscoket["onerror"] = this.onerror.bind(this);
                };
                NetWebscoket.prototype.onmessage = function (e) {
                    var _this = this;
                    //MapManager.Instance.GetIntervalTime();
                    // console.log("来消息了：" , e.data);
                    try {
                        if (typeof (e) == "string") {
                            this.onmessageHandler(new NetData_28.NetData(e));
                        }
                        else {
                            if (!e.data) {
                                this.onmessageHandler(new NetData_28.NetData(e));
                            }
                            else if (e.data.arrayBuffer) {
                                e.data.arrayBuffer()
                                    .then(function (bf) {
                                    _this.onmessageHandler(new NetData_28.NetData(bf));
                                });
                            }
                            else {
                                this.onmessageHandler(new NetData_28.NetData(e.data));
                            }
                        }
                    }
                    catch (e) {
                        console.error("NetWebscoket.onmessage异常:\n" + e.message + "\n" + e.stack);
                    }
                };
                NetWebscoket.prototype.sendMessage = function (buff) {
                    // console.error(buff.join());
                    // this.rnetStream.Write(buff, 0, buff.length);
                    NetWebscoket.Instance.send(buff);
                };
                NetWebscoket.prototype.onopen = function (e) {
                    console.log("WebSocket连接成功! 开始链接服务器onopen");
                    this._connected = true;
                    StageMgr_2.StageMgr.serverConnected();
                    // ServerManagerRequest.Instance.servertime();
                };
                NetWebscoket.prototype.send = function (bytes) {
                    // console.error(bytes.join());
                    if (this._webscoket && this._webscoket.readyState == 1) {
                        this._webscoket.send(bytes);
                    }
                    else if (this._connected) {
                        TipsManager_1.TipsManager.ShowTips("Disconnected from server");
                        // CommonTipsManager.Instance.ShowTips("提示", "已与服务器断开连接");
                    }
                    else {
                        TipsManager_1.TipsManager.ShowTips("Not connected to server");
                        // CommonTipsManager.Instance.ShowTips("提示", "未连接到服务器");
                        console.error("谁的傻逼代码 服务器都还没连上就调发送了111！");
                    }
                };
                NetWebscoket.prototype.sendStr = function (mess) {
                    if (this._webscoket && this._webscoket.readyState == 1) {
                        this._webscoket.send(mess);
                    }
                    else if (this._connected) {
                        //
                    }
                    else {
                        TipsManager_1.TipsManager.ShowTips("Not connected to server");
                        console.error("谁的傻逼代码 服务器都还没连上就调发送了222！");
                    }
                };
                NetWebscoket.prototype.onclose = function (e) {
                    console.error("socket close  连接关闭连接关闭连接关闭。。。", e);
                };
                NetWebscoket.prototype.onerror = function (e) {
                    LoginManagerRequest_2.LoginManagerRequest.Instance.switchLogin();
                    console.error(e);
                };
                // tslint:disable-next-line: cyclomatic-complexity
                NetWebscoket.prototype.onmessageHandler = function (netData) {
                    if (WebsocketTool_3.WebsocketTool.Instance.onmessage(netData)) {
                        //console.log("json长度: " + netData.code.length + ", 整体用时" + MapManager.Instance.GetIntervalTime());
                        return;
                    }
                    // console.log("netData ********* ", netData);
                    if (netData.head != "[LOG]") {
                        var messObjList = void 0;
                        messObjList = netData.GetJson();
                        // console.log("messObj -----  ", messObj);
                        // console.log("functionName -----", messObj.functionName);
                        var len = messObjList.length;
                        for (var i = 0; i < len; i++) {
                            var messObj = messObjList[i];
                            switch (messObj.functionName) {
                                case "ping":
                                    PingTimeManager_1.PingTimeManager.Instance.serverBackFun();
                                    break;
                                case "servertime":
                                    CDManage_2.CDManage.Instance.setServerTime(messObj.args[0]);
                                    break;
                                default:
                                    if (messObj.className == "Tip" && messObj.functionName == "Message") {
                                        //
                                        var messStr = messObj.args[0];
                                        var messageObj = messStr;
                                        // let context = messageObj.context;
                                        var tipType = messageObj.tipType;
                                        TipsManager_1.TipsManager.ShowTips(messObj.context);
                                        // console.log(title);
                                        // console.log(tipType);
                                        // console.log(context);
                                        // UiDataManager.changeFunctionData(BindKeyName.redFuck, context);
                                        // if (tipType == 1) {
                                        //     UITipManager.Instance.tipPanelText = context;
                                        //     UIOpenOrHideManager.Instance.OpentipsView();
                                        //     // if (context == "注册成功") {
                                        //     //     UIOpenOrHideManager.Instance.OpensigninView();
                                        //     //     return;
                                        //     // }
                                        // } else {
                                        //     //
                                        // }
                                    }
                            }
                        }
                    }
                    //console.log("json长度: " + netData.code.length + ", 整体用时(code)" + MapManager.Instance.GetIntervalTime());
                };
                NetWebscoket.prototype.Close = function () {
                    if (this._webscoket) {
                        this._webscoket.close();
                    }
                };
                /**********是否需要请求 配置数据***********
                */
                NetWebscoket.reqconfigMes = true;
                return NetWebscoket;
            }()));
        }
    };
});
System.register("AutoCode/Net/ClientRequest/GameArchiveManagerRequest", ["Net/NetWebsocket", "AutoCode/Net/WebsocketTool"], function (exports_107, context_107) {
    "use strict";
    var NetWebsocket_4, WebsocketTool_4, GameArchiveManagerRequest;
    var __moduleName = context_107 && context_107.id;
    return {
        setters: [
            function (NetWebsocket_4_1) {
                NetWebsocket_4 = NetWebsocket_4_1;
            },
            function (WebsocketTool_4_1) {
                WebsocketTool_4 = WebsocketTool_4_1;
            }
        ],
        execute: function () {
            GameArchiveManagerRequest = /** @class */ (function () {
                function GameArchiveManagerRequest() {
                }
                Object.defineProperty(GameArchiveManagerRequest, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new GameArchiveManagerRequest();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /***
                 * 获取LevelBase配置数据
                 */
                GameArchiveManagerRequest.prototype.getLevelBase = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "getLevelBase", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取SkinBase配置数据
                 */
                GameArchiveManagerRequest.prototype.getSkinBase = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "getSkinBase", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取MainBase配置数据
                 */
                GameArchiveManagerRequest.prototype.getMainBase = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "getMainBase", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取ThemeBase配置数据
                 */
                GameArchiveManagerRequest.prototype.getThemeBase = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "getThemeBase", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 创建存档
                 */
                GameArchiveManagerRequest.prototype.CreateArchive = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "CreateArchive", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 选择存档
                 */
                GameArchiveManagerRequest.prototype.SelectArchive = function (archiveID) {
                    var paramJsons = "".concat(JSON.stringify(archiveID));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "SelectArchive", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 注册NFT
                 */
                GameArchiveManagerRequest.prototype.LogonNft = function (archiveID) {
                    var paramJsons = "".concat(JSON.stringify(archiveID));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "LogonNft", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 切换皮肤
                 */
                GameArchiveManagerRequest.prototype.SwitchSkin = function (archiveID, skinID) {
                    var paramJsons = "".concat(JSON.stringify(archiveID), ",").concat(JSON.stringify(skinID));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "SwitchSkin", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改该存档的关卡
                 */
                GameArchiveManagerRequest.prototype.updataGame = function (archiveID, levelID) {
                    var paramJsons = "".concat(JSON.stringify(archiveID), ",").concat(JSON.stringify(levelID));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "updataGame", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /**
                 * 修改存档使用者
                 */
                GameArchiveManagerRequest.prototype.M4MNftAddGame = function (skinNameDic) {
                    var paramJsons = "".concat(JSON.stringify(skinNameDic));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "M4MNftAddGame", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                GameArchiveManagerRequest.prototype.M4MNFTAddUploadIpfs = function (ipfsDic) {
                    var paramJsons = "".concat(JSON.stringify(ipfsDic));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "M4MNFTAddUploadIpfs", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加数据
                 */
                GameArchiveManagerRequest.prototype.UploadData = function (imageName, url, model, Ipfsimage, Ipfsmodel) {
                    var paramJsons = "".concat(JSON.stringify(imageName), ",").concat(JSON.stringify(url), ",").concat(JSON.stringify(model), ",").concat(JSON.stringify(Ipfsimage), ",").concat(JSON.stringify(Ipfsmodel));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "UploadData", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /**
                 *查询上传到Ipfs数据
                 */
                GameArchiveManagerRequest.prototype.selectData = function (image) {
                    var paramJsons = "".concat(JSON.stringify(image));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "selectData", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /**
                 * 修改本地路径资源数据
                 */
                GameArchiveManagerRequest.prototype.updateData = function (image, resUrl) {
                    var paramJsons = "".concat(JSON.stringify(image), ",").concat(JSON.stringify(resUrl));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "updateData", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                /**
                 * 修改上传到ipfs资源路径
                 */
                GameArchiveManagerRequest.prototype.updateIpfsData = function (image, resUrl) {
                    var paramJsons = "".concat(JSON.stringify(image), ",").concat(JSON.stringify(resUrl));
                    var mess = WebsocketTool_4.WebsocketTool.Instance.getMsg("GameArchiveManager", "updateData", "".concat(paramJsons));
                    NetWebsocket_4.NetWebscoket.Instance.sendStr(mess);
                };
                return GameArchiveManagerRequest;
            }());
            exports_107("GameArchiveManagerRequest", GameArchiveManagerRequest);
        }
    };
});
System.register("Core/blockchain/ConnectWalletManager", ["Data/Map", "PSDUI/UiManager", "AutoCode/Net/ClientRequest/GameArchiveManagerRequest", "AutoCode/Net/WsDataManager", "Manager/GameArchiveManager"], function (exports_108, context_108) {
    "use strict";
    var Map_2, UiManager_5, GameArchiveManagerRequest_2, WsDataManager_4, GameArchiveManager_2, M4M_NFT_ID, M4M_COMPONENT_ID, ZipContract, M4mNFTRegistry, VersionManager, m4mDAO, m4mNFT, m4mComponent, ConnectWalletManager, ENUM_CHAIN_NAME;
    var __moduleName = context_108 && context_108.id;
    return {
        setters: [
            function (Map_2_1) {
                Map_2 = Map_2_1;
            },
            function (UiManager_5_1) {
                UiManager_5 = UiManager_5_1;
            },
            function (GameArchiveManagerRequest_2_1) {
                GameArchiveManagerRequest_2 = GameArchiveManagerRequest_2_1;
            },
            function (WsDataManager_4_1) {
                WsDataManager_4 = WsDataManager_4_1;
            },
            function (GameArchiveManager_2_1) {
                GameArchiveManager_2 = GameArchiveManager_2_1;
            }
        ],
        execute: function () {
            exports_108("M4M_NFT_ID", M4M_NFT_ID = "m4m-nft");
            exports_108("M4M_COMPONENT_ID", M4M_COMPONENT_ID = "m4m-components");
            exports_108("ZipContract", ZipContract = "0x757464676A09b46fE522B8d2A1413371E317e089");
            exports_108("M4mNFTRegistry", M4mNFTRegistry = "0xc9d7d33f679000d7621ea381569259eb599ab1c4");
            exports_108("VersionManager", VersionManager = "0xd8b1FB6c7f7A2d3Ed5CECF87cBa516c245f3BbAf");
            exports_108("m4mDAO", m4mDAO = "0x38cd1db1b3eafee726f790470bd675d2d7850a86");
            exports_108("m4mNFT", m4mNFT = "0xfa860d48571fa0d19324cbde77e0fbdfdffb0a47");
            exports_108("m4mComponent", m4mComponent = "0xb6bb4812a8e075cbad0128e318203553c4ca463d");
            ConnectWalletManager = /** @class */ (function () {
                function ConnectWalletManager() {
                    this.M4MComponentsCmap = new Map_2.cMap();
                    this.M4M_SDK = window["M4M"];
                    this.axios = window["axios"];
                    // this.web3_wallet = web3Wallet.Instance;
                }
                Object.defineProperty(ConnectWalletManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ConnectWalletManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ConnectWalletManager.prototype.onAccountsChanged = function (accounts) {
                    console.log("onAccountsChanged callback: ", accounts);
                    console.log("Switch wallet");
                };
                ConnectWalletManager.prototype.logineg = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/];
                        });
                    });
                };
                ConnectWalletManager.prototype.onChainChanged = function (chainId) {
                    console.log("onChainChanged callback: ", chainId);
                    // if (chainId === 80001) {  }
                };
                ConnectWalletManager.prototype.onDisconnect = function (error) {
                    console.log("onDisconnect callback: ", error);
                    this.M4M_SDK.disconnect();
                };
                ConnectWalletManager.prototype.onError = function (error) {
                    console.log("onError callback: ", error);
                    console.log(error);
                };
                // 销毁钱包
                ConnectWalletManager.prototype.destroy = function () {
                    var _a, _b;
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0: return [4 /*yield*/, ((_b = (_a = this.wallet) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a))];
                                case 1:
                                    _c.sent();
                                    this.wallet = null;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //是否连上钱包
                ConnectWalletManager.prototype.IsMetaMaskLinked = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var accounts;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.wallet.getAccounts(false)];
                                case 1:
                                    accounts = _a.sent();
                                    if (accounts === null || accounts === void 0 ? void 0 : accounts[0]) {
                                        return [2 /*return*/, true];
                                    }
                                    else {
                                        return [2 /*return*/, false];
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //登录账户
                ConnectWalletManager.prototype.loginAccount = function (callBackFun) {
                    var _this = this;
                    var u = navigator.userAgent;
                    var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //android终端或者uc浏览器
                    var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
                    this.M4M_SDK.login(this.M4M_SDK.Connector_Types.Injected).then(function (res) {
                        console.log(res); // res  钱包对字符串的签名。后面可以发到后端进行验证，发放session cookie或者jwt
                        _this.M4M_SDK.connect({
                            handleAccountsChanged: _this.onAccountsChanged,
                            handleChainChanged: _this.onChainChanged,
                            handleDisconnect: _this.onDisconnect,
                            handleError: _this.onError,
                        });
                        _this.M4M_SDK.getInfo()
                            .then(function (res) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                // res.address 钱包地址
                                this.address = res.address;
                                if (callBackFun) {
                                    callBackFun(res.address);
                                }
                                if (res.chainId !== 80001) {
                                    return [2 /*return*/, this.M4M_SDK.switchNetwork().then(function () { })];
                                }
                                return [2 /*return*/];
                            });
                        }); });
                    }).catch(function (error) {
                        console.log("签名错误信息", error);
                        if (error.code == 4001) {
                            // UITipManager.Instance.tipPanelText = "Sorry, signature authorization failed";
                            // UIOpenOrHideManager.Instance.OpenTipsTCView();
                        }
                    });
                };
                ConnectWalletManager.prototype.claimLoot = function (componentids, componentNums, backendSig, fun) {
                    UiManager_5.UiManager.showUi("wloading");
                    var token = WsDataManager_4.WsDataManager.UserDataBaseData.token;
                    this.M4M_SDK.claimLoot({
                        uuid: token,
                        componentIds: componentids,
                        amounts: componentNums,
                        sig: backendSig,
                    }).then(function (claimRes) {
                        UiManager_5.UiManager.hideUi("wloading");
                        console.log(claimRes);
                        var game = GameArchiveManager_2.GameArchiveManager.Instance.GameArchiveData;
                        GameArchiveManagerRequest_2.GameArchiveManagerRequest.Instance.LogonNft(game.id);
                    }).catch(function (error) {
                        UiManager_5.UiManager.hideUi("wloading");
                        console.error(error);
                        if (fun) {
                            fun(componentids, componentNums);
                        }
                    });
                };
                /**获取M4M-Components */
                ConnectWalletManager.prototype.getM4MComponents = function (index) {
                    return __awaiter(this, void 0, void 0, function () {
                        var CmapComponents, data, _i, _a, iterator;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    CmapComponents = new Map_2.cMap();
                                    if (!!this.M4MComponentsCmap.has(index)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.fetchUserCollectionNFTs(M4M_COMPONENT_ID, index)];
                                case 1:
                                    data = _b.sent();
                                    for (_i = 0, _a = data.data; _i < _a.length; _i++) {
                                        iterator = _a[_i];
                                        CmapComponents.set(iterator.token_id, iterator);
                                    }
                                    this.M4MComponentsCmap.set(index, CmapComponents);
                                    _b.label = 2;
                                case 2:
                                    console.log(this.M4MComponentsCmap);
                                    return [2 /*return*/, this.M4MComponentsCmap];
                            }
                        });
                    });
                };
                ConnectWalletManager.prototype.fetchUserCollectionNFTs = function (collection_id, index) {
                    return __awaiter(this, void 0, void 0, function () {
                        var params, data;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    params = {
                                        collection_id: collection_id,
                                        chain_name: "mumbai",
                                        addr: this.address,
                                        page: index,
                                        gap: 50,
                                    };
                                    return [4 /*yield*/, this.getCollectionNFTs(params)];
                                case 1:
                                    data = _a.sent();
                                    return [2 /*return*/, data];
                            }
                        });
                    });
                };
                /**请求nft数组 */
                ConnectWalletManager.prototype.getCollectionNFTs = function (data) {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, method, modet, res, index, element, data_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = "https://web3api.meta4d.me/api/v1/collection/nfts";
                                    method = "GET";
                                    modet = (method === "GET" ? { params: data } : { data: data });
                                    return [4 /*yield*/, this.axios.get(url, modet)];
                                case 1:
                                    res = _a.sent();
                                    index = 0;
                                    _a.label = 2;
                                case 2:
                                    if (!(index < res.data.data.data.length)) return [3 /*break*/, 5];
                                    element = res.data.data.data[index];
                                    return [4 /*yield*/, this.axios.get(element.uri)];
                                case 3:
                                    data_1 = _a.sent();
                                    element.data = data_1.data;
                                    _a.label = 4;
                                case 4:
                                    index++;
                                    return [3 /*break*/, 2];
                                case 5: return [2 /*return*/, res.data.data];
                            }
                        });
                    });
                };
                ConnectWalletManager.prototype.judgeNFT = function (data) {
                    var gamearchive = {};
                    var gamerIPFSdic = {};
                    for (var key in this.M4MComponentsCmap["data"]) {
                        var element = this.M4MComponentsCmap["data"][key]["data"];
                        for (var key_1 in element) {
                            var res = element[key_1];
                            if (res.data && res.data.attributes && res.data.attributes.length > 0) {
                                var bool = res.data.attributes[0].value == "Sphere";
                                if (bool) {
                                    var game = WsDataManager_4.WsDataManager.UserDataBaseData.GameArchive[res.token_id];
                                    if (game) {
                                        if (!game.ism4mnft) {
                                            GameArchiveManagerRequest_2.GameArchiveManagerRequest.Instance.LogonNft(game.id);
                                        }
                                    }
                                    else {
                                        if (res.data) {
                                            gamearchive[res.token_id] = res.data.name;
                                            for (var iterator in data) {
                                                var element_1 = data[iterator];
                                                if (element_1.skinName == res.data.name) {
                                                    var Params = {
                                                        prev: res.data.prev,
                                                        url: res.data.image
                                                    };
                                                    gamerIPFSdic[element_1.headPortrait] = Params;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (Object.keys(gamearchive).length > 0) {
                        GameArchiveManagerRequest_2.GameArchiveManagerRequest.Instance.M4MNftAddGame(gamearchive);
                    }
                    if (Object.keys(gamerIPFSdic).length > 0) {
                        GameArchiveManagerRequest_2.GameArchiveManagerRequest.Instance.M4MNFTAddUploadIpfs(gamerIPFSdic);
                    }
                };
                return ConnectWalletManager;
            }());
            exports_108("ConnectWalletManager", ConnectWalletManager);
            (function (ENUM_CHAIN_NAME) {
                ENUM_CHAIN_NAME["CHAIN_NAME_MAINNET"] = "mainnet";
                ENUM_CHAIN_NAME["CHAIN_NAME_POLYGON"] = "polygon";
                ENUM_CHAIN_NAME["CHAIN_NAME_RINKEBY"] = "rinkeby";
                ENUM_CHAIN_NAME["CHAIN_NAME_MUMBAI"] = "mumbai";
            })(ENUM_CHAIN_NAME || (ENUM_CHAIN_NAME = {}));
            exports_108("ENUM_CHAIN_NAME", ENUM_CHAIN_NAME);
        }
    };
});
System.register("Data/BindKeyName", [], function (exports_109, context_109) {
    "use strict";
    var BindKeyName;
    var __moduleName = context_109 && context_109.id;
    return {
        setters: [],
        execute: function () {
            exports_109("BindKeyName", BindKeyName = /** @class */ (function () {
                function BindKeyName() {
                }
                //滑动
                BindKeyName.clickSlide = "clickSlide";
                BindKeyName.skinImage = "skinImage";
                BindKeyName.skinBtnVisible = "skinBtnVisible";
                return BindKeyName;
            }()));
        }
    };
});
System.register("Net/SDKWebsocket", ["PSDUI/UiDataManager", "AutoCode/Net/ClientRequest/GameArchiveManagerRequest", "Core/blockchain/ConnectWalletManager", "Data/BindKeyName", "Manager/GameArchiveManager", "Net/PingTimeManager"], function (exports_110, context_110) {
    "use strict";
    var UiDataManager_2, GameArchiveManagerRequest_3, ConnectWalletManager_2, BindKeyName_1, GameArchiveManager_3, PingTimeManager_2, SDKWebsocket;
    var __moduleName = context_110 && context_110.id;
    return {
        setters: [
            function (UiDataManager_2_1) {
                UiDataManager_2 = UiDataManager_2_1;
            },
            function (GameArchiveManagerRequest_3_1) {
                GameArchiveManagerRequest_3 = GameArchiveManagerRequest_3_1;
            },
            function (ConnectWalletManager_2_1) {
                ConnectWalletManager_2 = ConnectWalletManager_2_1;
            },
            function (BindKeyName_1_1) {
                BindKeyName_1 = BindKeyName_1_1;
            },
            function (GameArchiveManager_3_1) {
                GameArchiveManager_3 = GameArchiveManager_3_1;
            },
            function (PingTimeManager_2_1) {
                PingTimeManager_2 = PingTimeManager_2_1;
            }
        ],
        execute: function () {
            exports_110("SDKWebsocket", SDKWebsocket = /** @class */ (function () {
                function SDKWebsocket() {
                }
                Object.defineProperty(SDKWebsocket, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new SDKWebsocket();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                SDKWebsocket.prototype.connect = function (url) {
                    // console.log("开始链接服务器*** " + url);
                    // this._webscoket = new WebSocket(url);//"wss://hse-dev-qq.upaidui.com"
                    if (url == null) {
                        console.error("服务器 地址出错！" + url);
                        return;
                    }
                    // url = "wss://kingzet.cn";
                    console.log("开始链接服务器 " + url);
                    this._webscoket = new WebSocket(url);
                    this._webscoket["onmessage"] = this.onmessage.bind(this);
                    this._webscoket["onopen"] = this.onopen.bind(this);
                    this._webscoket["onclose"] = this.onclose.bind(this);
                    this._webscoket["onerror"] = this.onerror.bind(this);
                };
                SDKWebsocket.prototype.onmessage = function (e) {
                    return __awaiter(this, void 0, void 0, function () {
                        var buffer, messObj, className, messStr, messageObj, title, tipType, context, configName, arr, args, data, arg, key;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    console.log("来消息了：" + e.data);
                                    if (!e.data.arrayBuffer) return [3 /*break*/, 2];
                                    return [4 /*yield*/, e.data.arrayBuffer()];
                                case 1:
                                    buffer = _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    buffer = e.data;
                                    _a.label = 3;
                                case 3:
                                    if (typeof (buffer) == "string") {
                                        if (buffer.indexOf("[LOG]") == -1) {
                                            messObj = JSON.parse(buffer);
                                            // console.error(messObj);
                                            //ping Time
                                            if (messObj.functionName == "ping") {
                                                //
                                                PingTimeManager_2.PingTimeManager.Instance.serverBackFun();
                                            }
                                            else {
                                                className = messObj.className;
                                                // tslint:disable-next-line: switch-default
                                                switch (className) {
                                                    case "Tip":
                                                        if (messObj.functionName == "Message") {
                                                            messStr = messObj.args[0];
                                                            messageObj = JSON.parse(messStr);
                                                            title = messageObj.title;
                                                            tipType = messageObj.tipType;
                                                            context = messageObj.context;
                                                            console.log(title, tipType, context);
                                                            if (tipType == 0) {
                                                                // UITipManager.Instance.tipPanelText = "Login denied\nThe account has been logged in to another device\nPlease refresh the page and re-enter the game";
                                                                // UITipManager.Instance.type = TipPanelType.mistake;
                                                            }
                                                            else {
                                                                // UITipManager.Instance.tipPanelText = context;
                                                                // UITipManager.Instance.type = TipPanelType.rest;
                                                            }
                                                            // UIOpenOrHideManager.Instance.OpenTipsTCView();
                                                        }
                                                        break;
                                                    case "newUser":
                                                        // UIOpenOrHideManager.Instance.HideTloadingView();
                                                        // UIOpenOrHideManager.Instance.OpenCreateCharacterView();  // 进入创建角色
                                                        break;
                                                    case "ConfigManager": //获取服务器配置
                                                        configName = messObj.functionName;
                                                        arr = messObj.args[0];
                                                        break;
                                                    case "signWithWallet":
                                                        // let data = messObj.args[0];
                                                        ConnectWalletManager_2.ConnectWalletManager.Instance.claimLoot(messObj.args[0], messObj.args[1], messObj.args[2], function () { });
                                                        break;
                                                    case "IPFSCID":
                                                        args = messObj.args[0];
                                                        data = GameArchiveManager_3.GameArchiveManager.Instance.GameArchiveData;
                                                        GameArchiveManagerRequest_3.GameArchiveManagerRequest.Instance.UploadData(data.baseData.headPortrait, messObj.args[1], "", args, "");
                                                        UiDataManager_2.UiDataManager.changeFunctionData(BindKeyName_1.BindKeyName.skinImage, { url: args, imageurl: messObj.args[1] });
                                                        break;
                                                    case "IPFSJSON":
                                                        arg = messObj.args[0];
                                                        break;
                                                    case "axiaosData":
                                                        key = messObj.args[0];
                                                        console.log(key);
                                                        break;
                                                    default:
                                                        console.error(messObj);
                                                }
                                                // if (messObj.functionName == "Message") {
                                                //     //
                                                //     let messStr = messObj.args[0];
                                                //     let messageObj = JSON.parse(messStr);
                                                //     let title: string = messageObj.title;
                                                //     let tipType = messageObj.tipType;
                                                //     let context = messageObj.context;
                                                //     console.log(title, tipType, context);
                                                //     if (tipType == 0) {
                                                //         UITipManager.Instance.tipPanelText = "Login denied\nThe account has been logged in to another device\nPlease refresh the page and re-enter the game";
                                                //         UITipManager.Instance.type = TipPanelType.mistake;
                                                //     } else {
                                                //         UITipManager.Instance.tipPanelText = context;
                                                //         UITipManager.Instance.type = TipPanelType.rest;
                                                //     }
                                                //     UIOpenOrHideManager.Instance.OpenTipsTCView();
                                                // } else {
                                                //     console.error(messObj);
                                                // }
                                            }
                                        }
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                SDKWebsocket.prototype.sendMessage = function (buff) {
                    console.error("发送消息", buff.toString());
                    // console.error(buff.join());
                    // this.rnetStream.Write(buff, 0, buff.length);
                    SDKWebsocket.Instance.send(buff);
                };
                SDKWebsocket.prototype.onopen = function (e) {
                    console.log("WebSocket连接成功! 开始链接服务器onopen");
                    // StageMgr.serverConnected();
                };
                SDKWebsocket.prototype.send = function (bytes) {
                    // console.error("发送");
                    // console.error(bytes.join());
                    if (this._webscoket && this._webscoket.readyState == 1) {
                        this._webscoket.send(bytes);
                    }
                    else {
                        console.error("谁的傻逼代码 服务器都还没连上就调发送了111！");
                    }
                };
                SDKWebsocket.prototype.sendStr = function (mess) {
                    // console.error("发送");
                    if (this._webscoket && this._webscoket.readyState == 1) {
                        this._webscoket.send(mess);
                    }
                    else {
                        console.error("谁的傻逼代码 服务器都还没连上就调发送了222！");
                    }
                };
                SDKWebsocket.prototype.onclose = function (e) {
                    console.error("socket close  连接关闭连接关闭连接关闭。。。", e);
                    // UITipManager.Instance.tipsData = 1;
                    // UITipManager.Instance.tipPanelText = "Server disconnected\nPlease refresh the page and re-enter the game";
                    // UITipManager.Instance.type = TipPanelType.mistake;
                    // UIOpenOrHideManager.Instance.OpenTipsTCView();
                };
                SDKWebsocket.prototype.onerror = function (e) {
                    console.error(e);
                    console.log("socket error", e);
                    // if (UITipManager.Instance.tipsData != 1) {
                    //     UITipManager.Instance.tipPanelText = e;
                    //     UITipManager.Instance.type = TipPanelType.mistake;
                    //     UIOpenOrHideManager.Instance.OpenTipsTCView();
                    // }
                };
                SDKWebsocket.prototype.Close = function () {
                    if (this._webscoket) {
                        this._webscoket.close();
                    }
                };
                /**********是否需要请求 配置数据***********
                */
                SDKWebsocket.reqconfigMes = true;
                return SDKWebsocket;
            }()));
        }
    };
});
System.register("Net/SDKWebsokectTool", ["Net/SDKWebsocket"], function (exports_111, context_111) {
    "use strict";
    var SDKWebsocket_1, SDKWebsokectTool;
    var __moduleName = context_111 && context_111.id;
    return {
        setters: [
            function (SDKWebsocket_1_1) {
                SDKWebsocket_1 = SDKWebsocket_1_1;
            }
        ],
        execute: function () {
            SDKWebsokectTool = /** @class */ (function () {
                function SDKWebsokectTool() {
                }
                Object.defineProperty(SDKWebsokectTool, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new SDKWebsokectTool();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                SDKWebsokectTool.prototype.getMsg = function (className, functionName, text) {
                    var mess = "{\"currentType\":null,\"type\":null,\"callTime\":\"0001-01-01T00:00:00\",\"callid\":0,\"timeout\":0,\"className\":\"".concat(className, "\",\"functionName\":\"").concat(functionName, "\",\"argsType\":null,\n        \"args\":[").concat(text, "],\"returnType\":null,\"returnValue\":null}");
                    return mess;
                };
                /***
                 * 发送消息 type:消息类型，comp:阵营，quality,content:内容,username:名字
                 */
                SDKWebsokectTool.prototype.SDKManager_testprepareComponent = function (parma) {
                    // tslint:disable-next-line: max-line-length
                    var paramJsons = "".concat(JSON.stringify(parma));
                    var mess = this.getMsg("SDKManager", "testprepareComponent", "".concat(paramJsons));
                    SDKWebsocket_1.SDKWebsocket.Instance.sendStr(mess);
                };
                SDKWebsokectTool.prototype.IPFSManager_IPFSImageJsonData = function (fileUrl) {
                    // tslint:disable-next-line: max-line-length
                    var paramJsons = "".concat(JSON.stringify(fileUrl));
                    var mess = this.getMsg("IPFSManager", "IPFSImageJsonData", "".concat(paramJsons));
                    SDKWebsocket_1.SDKWebsocket.Instance.sendStr(mess);
                };
                SDKWebsokectTool.prototype.IPFSManager_IPFSJsondata = function (fileUrl) {
                    var paramJsons = "".concat(JSON.stringify(fileUrl));
                    var mess = this.getMsg("IPFSManager", "IPFSJsondata", "".concat(paramJsons));
                    SDKWebsocket_1.SDKWebsocket.Instance.sendStr(mess);
                };
                SDKWebsokectTool.prototype.SDKManager_axiaosData = function (parma) {
                    var paramJsons = "".concat(JSON.stringify(parma));
                    var mess = this.getMsg("SDKManager", "axiaosData", "".concat(paramJsons));
                    SDKWebsocket_1.SDKWebsocket.Instance.sendStr(mess);
                };
                SDKWebsokectTool.prototype.SDKManager_RenewComponentData = function (parma) {
                    var paramJsons = "".concat(JSON.stringify(parma));
                    var mess = this.getMsg("SDKManager", "RenewComponentData", "".concat(paramJsons));
                    SDKWebsocket_1.SDKWebsocket.Instance.sendStr(mess);
                };
                return SDKWebsokectTool;
            }());
            exports_111("SDKWebsokectTool", SDKWebsokectTool);
        }
    };
});
System.register("Manager/ViewModeChangeMgr", ["Tools/commTool", "stageMgr"], function (exports_112, context_112) {
    "use strict";
    var commTool_10, stageMgr_8, ViewModeType, ViewModeChangeMgr;
    var __moduleName = context_112 && context_112.id;
    return {
        setters: [
            function (commTool_10_1) {
                commTool_10 = commTool_10_1;
            },
            function (stageMgr_8_1) {
                stageMgr_8 = stageMgr_8_1;
            }
        ],
        execute: function () {
            (function (ViewModeType) {
                /** 普通视角 */
                ViewModeType[ViewModeType["Normal"] = 0] = "Normal";
                /** 换装视角 */
                ViewModeType[ViewModeType["PartChange"] = 1] = "PartChange";
            })(ViewModeType || (ViewModeType = {}));
            exports_112("ViewModeType", ViewModeType);
            exports_112("ViewModeChangeMgr", ViewModeChangeMgr = /** @class */ (function () {
                /** 视角模式切换 管理器 */
                function ViewModeChangeMgr() {
                }
                ViewModeChangeMgr.Init = function () {
                    //Normal
                    this.viewOptMap[ViewModeType.Normal] = { camDist: 0, camFOV: 0, camYOffset: 0 };
                    //PartChange
                    this.viewOptMap[ViewModeType.PartChange] = { camDist: 6, camFOV: 25, camYOffset: 0.4 };
                };
                /**
                 * 设置指定模式的 选项
                 * @param mode view模式
                 * @param opt 选项数据
                 */
                ViewModeChangeMgr.setViewOpt = function (mode, opt) {
                    if (!opt || mode == null) {
                        return;
                    }
                    var useOpt = this.viewOptMap[mode];
                    if (!useOpt) {
                        console.warn("\u6CA1\u6709 mode \uFF1A".concat(ViewModeType[mode], "."));
                        return;
                    }
                    for (var key in opt) {
                        useOpt[key] = opt[key];
                    }
                };
                /**
                 * 模式改变
                 * @param mode 视角模式
                 * @param vOpt 强行指定选项
                 */
                ViewModeChangeMgr.change = function (mode, vOpt) {
                    var _a, _b, _c;
                    if (mode == this.currMode) {
                        return;
                    }
                    this.currMode = mode;
                    // tslint:disable-next-line: no-parameter-reassignment
                    if (!vOpt) {
                        vOpt = {};
                    }
                    if (mode != ViewModeType.Normal) {
                        this.capNormalOpt();
                    }
                    if (mode == ViewModeType.PartChange) {
                        this.calcaFrontPAngle(mode);
                    }
                    //set opt
                    var opt = this.viewOptMap[mode];
                    var camCtr = stageMgr_8.stageMgr.camCtr;
                    var cam = m4m.framework.sceneMgr.scene.mainCamera;
                    // console.log(opt.pAngle);
                    // console.log(opt.tAngle);
                    //to set
                    camCtr.distance = (_a = vOpt.camDist) !== null && _a !== void 0 ? _a : opt.camDist;
                    cam.fov = ((_b = vOpt.camFOV) !== null && _b !== void 0 ? _b : opt.camFOV) * commTool_10.commTool.toRadian;
                    var offset = camCtr["_targetOffset"];
                    camCtr.setTargetOffset(offset.x, (_c = vOpt.camYOffset) !== null && _c !== void 0 ? _c : opt.camYOffset, offset.z);
                };
                //计算朝向角色 正前方的P角度
                ViewModeChangeMgr.calcaFrontPAngle = function (mode) {
                    // let angle = 0;
                    // // let role = RoleMgr.getRoleByGUID(StageMgr.PlayerGUID);
                    // let role = role
                    // if (role && role.roleDoll && role.roleDoll.model) {
                    //     let node = role.roleDoll.model.rawHandle as m4m.framework.transform;
                    //     let v3 = this.helpV3;
                    //     node.getForwardInWorld(v3);
                    //     angle = gameMathUtil.calcAngleByVec(v3.x, v3.z) + 90;
                    // }
                    // let opt = this.viewOptMap[mode];
                };
                //记录普通状态
                ViewModeChangeMgr.capNormalOpt = function () {
                    var camCtr = stageMgr_8.stageMgr.camCtr;
                    var cam = m4m.framework.sceneMgr.scene.mainCamera;
                    var opt = this.viewOptMap[ViewModeType.Normal];
                    opt.camDist = camCtr.distance;
                    opt.camFOV = cam.fov * commTool_10.commTool.toDeg;
                    opt.camYOffset = camCtr["_targetOffset"].y;
                };
                ViewModeChangeMgr.helpV3 = new m4m.math.vector3();
                ViewModeChangeMgr.currMode = ViewModeType.Normal;
                ViewModeChangeMgr.viewOptMap = {};
                return ViewModeChangeMgr;
            }()));
        }
    };
});
System.register("Manager/PhotoSceneManager", ["Tools/ScreenshotMgr", "Net/SDKWebsokectTool", "stageMgr", "Manager/ViewModeChangeMgr"], function (exports_113, context_113) {
    "use strict";
    var ScreenshotMgr_1, SDKWebsokectTool_1, stageMgr_9, ViewModeChangeMgr_1, PhotoSceneManager;
    var __moduleName = context_113 && context_113.id;
    return {
        setters: [
            function (ScreenshotMgr_1_1) {
                ScreenshotMgr_1 = ScreenshotMgr_1_1;
            },
            function (SDKWebsokectTool_1_1) {
                SDKWebsokectTool_1 = SDKWebsokectTool_1_1;
            },
            function (stageMgr_9_1) {
                stageMgr_9 = stageMgr_9_1;
            },
            function (ViewModeChangeMgr_1_1) {
                ViewModeChangeMgr_1 = ViewModeChangeMgr_1_1;
            }
        ],
        execute: function () {
            exports_113("PhotoSceneManager", PhotoSceneManager = /** @class */ (function () {
                function PhotoSceneManager() {
                }
                Object.defineProperty(PhotoSceneManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new PhotoSceneManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 *设置相机模式
                 * @static
                 * @memberof ShowroomUIManager
                 */
                PhotoSceneManager.PartChange = function () {
                    this.Normal();
                    var camDist = 10;
                    var camYOffset = -0.035;
                    var fOpt = { camDist: camDist, camYOffset: camYOffset };
                    setTimeout(function () {
                        ViewModeChangeMgr_1.ViewModeChangeMgr.change(ViewModeChangeMgr_1.ViewModeType.PartChange, fOpt);
                    }, 50);
                };
                /**
                 *
                 *截图
                 * @static
                 * @static
                 * @memberof PhotoSceneManager
                 */
                PhotoSceneManager.ChangeScen = function () {
                    var _this = this;
                    if (!this.PartBOOL) {
                        return;
                    }
                    setTimeout(function () {
                        _this.PartChange();
                        _this.Trans3DVisible(true);
                        _this.sceneVisible(false);
                        setTimeout(function () {
                            _this.screenshot();
                        }, 50);
                    }, 50);
                };
                /**
                 *转为普通模式
                 * @static
                 * @memberof ShowroomUIManager
                 */
                PhotoSceneManager.Normal = function () {
                    ViewModeChangeMgr_1.ViewModeChangeMgr.change(ViewModeChangeMgr_1.ViewModeType.Normal);
                };
                /**
                 *显示隐藏天空盒
                 *
                 * @static
                 * @param {boolean} v
                 * @memberof ShowroomUIManager
                 */
                PhotoSceneManager.ShowSkyBox = function (v) {
                    // PBREnvMgr.enableSkyBox = v;
                };
                /**
                 *显示隐藏场景
                 * @static
                 * @param {boolean} val
                 * @memberof ShowroomUIManager
                 */
                PhotoSceneManager.sceneVisible = function (val) {
                    // stageMgr.sceneRoot.gameObject.visible = val;
                    for (var _i = 0, _a = stageMgr_9.stageMgr.stageRoot.children; _i < _a.length; _i++) {
                        var iterator = _a[_i];
                        if (iterator.name != "role" && iterator.name != "Primitive") {
                            iterator.gameObject.visible = val;
                        }
                        else {
                            iterator.gameObject.visible = true;
                            if (iterator.name == "role") {
                                for (var _b = 0, _c = iterator.children[0].children; _b < _c.length; _b++) {
                                    var res = _c[_b];
                                    if (res.name == "shadow_plane") {
                                        res.gameObject.visible = val;
                                    }
                                }
                            }
                        }
                    }
                };
                /**
                 * 是否显示3D对象
                 * @param v 是否显示3D对象
                 */
                PhotoSceneManager.Trans3DVisible = function (v) {
                    this.Trans3D.gameObject.visible = v;
                };
                /**
                 *截图
                 * @static
                 * @memberof ShowroomUIManager
                 */
                PhotoSceneManager.screenshot = function () {
                    var _this = this;
                    ScreenshotMgr_1.ScreenshotMgr.Screenshot();
                    var needCut = this.sShotCuttingW != 0 && this.sShotCuttingH != 0;
                    if (needCut) {
                        ScreenshotMgr_1.ScreenshotMgr.Cutting(this.sShotCuttingX, this.sShotCuttingY, this.sShotCuttingW, this.sShotCuttingH);
                    }
                    this.b64Str = ScreenshotMgr_1.ScreenshotMgr.SaveToBase64();
                    this.downloadIamge();
                    setTimeout(function () {
                        // this.ShowSkyBox(true);
                        _this.sceneVisible(true);
                        _this.Trans3DVisible(false);
                        _this.Normal();
                    }, 1000);
                };
                /**
                 * 下载截图
                 * @static
                 * @memberof ShowroomUIManager
                 */
                PhotoSceneManager.downloadIamge = function () {
                    // 将图片的src属性作为URL地址
                    if (this.b64Str) {
                        var url = this.b64Str;
                        //create html element 
                        var a = document.createElement("a");
                        var event_1 = new MouseEvent("click");
                        a.download = "下载图片名称";
                        a.href = url;
                        //派发点击下载事件
                        // let buffer: ArrayBuffer = url.buffer;
                        SDKWebsokectTool_1.SDKWebsokectTool.Instance.IPFSManager_IPFSImageJsonData(url);
                        // a.dispatchEvent(event);
                        this.b64Str = null;
                    }
                };
                PhotoSceneManager.createPrimitive = function () {
                    if (!this.Trans3D) {
                        var Quad = 5;
                        var trans = m4m.framework.TransformUtil.CreatePrimitive(Quad, stageMgr_9.stageMgr.scene.app);
                        var renderer = trans.gameObject.getComponent("meshRenderer");
                        var materials = renderer.materials[0];
                        var asset = stageMgr_9.stageMgr.scene.app.getAssetMgr();
                        materials.setShader(asset.getShader("diffuse.shader.json"));
                        materials.setFloat("_AlphaCut", 1);
                        materials.setVector4("_MainColor", new m4m.math.vector4(0.25, 0.55, 0.7, 1));
                        trans.localScale = new m4m.math.vector3(14, 7, 1);
                        trans.gameObject.visible = false;
                        trans.name = "Primitive";
                        this.Trans3D = trans;
                    }
                    return this.Trans3D;
                };
                PhotoSceneManager.sShotCuttingX = 0;
                PhotoSceneManager.sShotCuttingY = 0;
                PhotoSceneManager.sShotCuttingW = 0;
                PhotoSceneManager.sShotCuttingH = 0;
                //////////////////////////////设置拍照场景//////////////////////////
                // tslint:disable-next-line: member-ordering
                PhotoSceneManager.PartBOOL = true;
                return PhotoSceneManager;
            }()));
        }
    };
});
System.register("Manager/GameArchiveManager", ["PSDUI/UiDataManager", "PSDUI/UiManager", "AutoCode/Net/DataEvents/GameArchiveDataEvent", "AutoCode/Net/DataEvents/LevelBaseEvent", "AutoCode/Net/DataEvents/MainBaseEvent", "AutoCode/Net/DataEvents/SkinBaseEvent", "AutoCode/Net/DataEvents/ThemeBaseEvent", "AutoCode/Net/DataEvents/UploadIpfsDataEvent", "AutoCode/Net/WsDataManager", "Core/blockchain/ConnectWalletManager", "Core/StageMgr", "Data/BindKeyName", "GameMgr", "Ress", "role/playerMgr", "stageMgr", "ui/pages/homePage", "ui/pages/inGamePage", "ui/pages/launchPage", "Manager/PhotoSceneManager"], function (exports_114, context_114) {
    "use strict";
    var UiDataManager_3, UiManager_6, GameArchiveDataEvent_1, LevelBaseEvent_1, MainBaseEvent_1, SkinBaseEvent_1, ThemeBaseEvent_1, UploadIpfsDataEvent_1, WsDataManager_5, ConnectWalletManager_3, StageMgr_3, BindKeyName_2, GameMgr_29, Ress_10, playerMgr_6, stageMgr_10, homePage_8, inGamePage_5, launchPage_3, PhotoSceneManager_1, GameArchiveManager;
    var __moduleName = context_114 && context_114.id;
    return {
        setters: [
            function (UiDataManager_3_1) {
                UiDataManager_3 = UiDataManager_3_1;
            },
            function (UiManager_6_1) {
                UiManager_6 = UiManager_6_1;
            },
            function (GameArchiveDataEvent_1_1) {
                GameArchiveDataEvent_1 = GameArchiveDataEvent_1_1;
            },
            function (LevelBaseEvent_1_1) {
                LevelBaseEvent_1 = LevelBaseEvent_1_1;
            },
            function (MainBaseEvent_1_1) {
                MainBaseEvent_1 = MainBaseEvent_1_1;
            },
            function (SkinBaseEvent_1_1) {
                SkinBaseEvent_1 = SkinBaseEvent_1_1;
            },
            function (ThemeBaseEvent_1_1) {
                ThemeBaseEvent_1 = ThemeBaseEvent_1_1;
            },
            function (UploadIpfsDataEvent_1_1) {
                UploadIpfsDataEvent_1 = UploadIpfsDataEvent_1_1;
            },
            function (WsDataManager_5_1) {
                WsDataManager_5 = WsDataManager_5_1;
            },
            function (ConnectWalletManager_3_1) {
                ConnectWalletManager_3 = ConnectWalletManager_3_1;
            },
            function (StageMgr_3_1) {
                StageMgr_3 = StageMgr_3_1;
            },
            function (BindKeyName_2_1) {
                BindKeyName_2 = BindKeyName_2_1;
            },
            function (GameMgr_29_1) {
                GameMgr_29 = GameMgr_29_1;
            },
            function (Ress_10_1) {
                Ress_10 = Ress_10_1;
            },
            function (playerMgr_6_1) {
                playerMgr_6 = playerMgr_6_1;
            },
            function (stageMgr_10_1) {
                stageMgr_10 = stageMgr_10_1;
            },
            function (homePage_8_1) {
                homePage_8 = homePage_8_1;
            },
            function (inGamePage_5_1) {
                inGamePage_5 = inGamePage_5_1;
            },
            function (launchPage_3_1) {
                launchPage_3 = launchPage_3_1;
            },
            function (PhotoSceneManager_1_1) {
                PhotoSceneManager_1 = PhotoSceneManager_1_1;
            }
        ],
        execute: function () {
            GameArchiveManager = /** @class */ (function () {
                function GameArchiveManager() {
                    this.isArchive = false;
                    this.isLevel = 2;
                }
                Object.defineProperty(GameArchiveManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new GameArchiveManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                GameArchiveManager.prototype.init = function () {
                    WsDataManager_5.WsDataManager.LevelBaseData.addEventListener(LevelBaseEvent_1.LevelBaseEvent.ChangeList, this.levelFunbind.bind(this));
                    WsDataManager_5.WsDataManager.SkinBaseData.addEventListener(SkinBaseEvent_1.SkinBaseEvent.ChangeList, this.skinFunbind.bind(this));
                    WsDataManager_5.WsDataManager.MainBaseData.addEventListener(MainBaseEvent_1.MainBaseEvent.ChangeList, this.mainFunbind.bind(this));
                    WsDataManager_5.WsDataManager.ThemeBaseData.addEventListener(ThemeBaseEvent_1.ThemeBaseEvent.ChangeList, this.themeFunbind.bind(this));
                    WsDataManager_5.WsDataManager.GameArchiveDataData.addEventListener(GameArchiveDataEvent_1.GameArchiveDataEvent.All, this.gameArchiveFunbind.bind(this));
                    WsDataManager_5.WsDataManager.GameArchiveDataData.addEventListener(GameArchiveDataEvent_1.GameArchiveDataEvent.baseData, this.baseDataFun.bind(this));
                    WsDataManager_5.WsDataManager.GameArchiveDataData.addEventListener(GameArchiveDataEvent_1.GameArchiveDataEvent.ism4mnft, this.ism4mNFTFun.bind(this));
                    WsDataManager_5.WsDataManager.GameArchiveDataData.addEventListener(GameArchiveDataEvent_1.GameArchiveDataEvent.Currentlevel, this.CurrentlevelFun.bind(this));
                    WsDataManager_5.WsDataManager.UploadIpfsDataData.addEventListener(UploadIpfsDataEvent_1.UploadIpfsDataEvent.All, this.UploadIpfsFun.bind(this));
                };
                GameArchiveManager.prototype.levelFunbind = function (data) {
                    // console.error("level:", data);
                    Ress_10.Ress.levelConfig = data;
                    StageMgr_3.StageMgr.isLevelBase = true;
                    StageMgr_3.StageMgr.enterBase();
                };
                GameArchiveManager.prototype.skinFunbind = function (data) {
                    // console.error("skin:", data);
                    Ress_10.Ress.skinConfig = data;
                    StageMgr_3.StageMgr.isSkinBase = true;
                    StageMgr_3.StageMgr.enterBase();
                    ConnectWalletManager_3.ConnectWalletManager.Instance.judgeNFT(data);
                };
                GameArchiveManager.prototype.mainFunbind = function (data) {
                    // console.error("main:", data);
                    Ress_10.Ress.mainConfig = data;
                    StageMgr_3.StageMgr.isMainBase = true;
                    StageMgr_3.StageMgr.enterBase();
                };
                GameArchiveManager.prototype.themeFunbind = function (data) {
                    // console.error("theme:", data);
                    Ress_10.Ress.themeConfig = data;
                    StageMgr_3.StageMgr.isThemeBase = true;
                    StageMgr_3.StageMgr.enterBase();
                };
                GameArchiveManager.prototype.gameArchiveFunbind = function (data) {
                    if (!GameArchiveManager.Instance.GameArchiveData) {
                        GameArchiveManager.Instance.GameArchiveData = data;
                        stageMgr_10.stageMgr.init();
                        UiManager_6.UiManager.showUi("Main");
                        inGamePage_5.inGamePage.Instance()
                            .then(function (ins) {
                            ins.show();
                            homePage_8.homePage.Instance()
                                .then(function (res) {
                                res.showAndCgInGame();
                                // // 初始化 分享 卡片绘制 canvas
                                // joinTool.screenshotcanvasInit();
                            });
                        });
                    }
                    else {
                        GameArchiveManager.Instance.GameArchiveData = data;
                        var game = GameArchiveManager.Instance.GameArchiveData;
                        playerMgr_6.playerMgr.changeSkin(game.baseData.id);
                        playerMgr_6.playerMgr.changeTheme();
                        GameMgr_29.GameMgr.currentLevel = Number(GameArchiveManager.Instance.GameArchiveData.Currentlevel.id) - 1;
                        GameMgr_29.GameMgr.raceStage = -1;
                        stageMgr_10.stageMgr.reState();
                        UiManager_6.UiManager.hideUi("ArchiveSelection");
                        launchPage_3.launchPage.Instance.show();
                        setTimeout(function () {
                            UiManager_6.UiManager.showUi("Main");
                            inGamePage_5.inGamePage.Instance()
                                .then(function (ins) {
                                ins.show();
                                homePage_8.homePage.Instance()
                                    .then(function (res) {
                                    res.showAndCgInGame();
                                });
                            });
                            launchPage_3.launchPage.onLoadend();
                        }, 2200);
                    }
                    // console.error("GameArchiveData", data);
                };
                GameArchiveManager.prototype.baseDataFun = function (data) {
                    // console.error("baseData", data);
                    GameArchiveManager.Instance.GameArchiveData.baseData = data;
                };
                GameArchiveManager.prototype.ism4mNFTFun = function (data) {
                    // console.error("ism4mnft", data);
                    if (GameArchiveManager.Instance.GameArchiveData) {
                        GameArchiveManager.Instance.GameArchiveData.ism4mnft = data;
                    }
                    UiDataManager_3.UiDataManager.changeFunctionData(BindKeyName_2.BindKeyName.skinBtnVisible, data);
                };
                GameArchiveManager.prototype.CurrentlevelFun = function (data) {
                    // console.error("Currentlevel", data);
                    GameArchiveManager.Instance.GameArchiveData.Currentlevel = data;
                };
                GameArchiveManager.prototype.UploadIpfsFun = function (data) {
                    if (!data.id) {
                        PhotoSceneManager_1.PhotoSceneManager.ChangeScen();
                    }
                    else {
                        UiDataManager_3.UiDataManager.changeFunctionData(BindKeyName_2.BindKeyName.skinImage, { url: data.IpfsImagehash, imageurl: data.ImageUrl });
                    }
                };
                return GameArchiveManager;
            }());
            exports_114("GameArchiveManager", GameArchiveManager);
        }
    };
});
System.register("stageMgr", ["WayMgr", "Ress", "role/playerMgr", "CameraFollowCtr", "GameMgr", "MatMgr", "uiMgr", "headMgr", "RoadGroupMgr", "PoolMgr", "inviteMgr", "obsCreateMgr", "role/robotMgr", "ui/pages/homePage", "ui/pages/inGamePage", "ui/pages/continuePage", "levelMgr", "ui/pages/gameOverPage", "ui/pages/prizePage", "ui/pages/victoryPage", "ui/pages/videoPrizePage", "ui/victoryPagehandle", "Tool/joinTool", "Tool/tdTool", "Tool/wxTool", "Tool/saveTool", "Scripts/HMoveHandle", "Tools/FrameMgr", "Tools/LateUpdateMgr", "Manager/GameArchiveManager", "AutoCode/Net/ClientRequest/GameArchiveManagerRequest", "Manager/ViewModeChangeMgr", "audio/AudioMgr"], function (exports_115, context_115) {
    "use strict";
    var WayMgr_2, Ress_11, playerMgr_7, CameraFollowCtr_1, GameMgr_30, MatMgr_8, uiMgr_4, headMgr_1, RoadGroupMgr_2, PoolMgr_5, inviteMgr_3, obsCreateMgr_4, robotMgr_2, homePage_9, inGamePage_6, continuePage_2, levelMgr_4, gameOverPage_3, prizePage_2, victoryPage_2, videoPrizePage_5, victoryPagehandle_2, joinTool_10, tdTool_9, wxTool_11, saveTool_8, HMoveHandle_4, FrameMgr_8, LateUpdateMgr_2, GameArchiveManager_4, GameArchiveManagerRequest_4, ViewModeChangeMgr_2, AudioMgr_12, stageMgr;
    var __moduleName = context_115 && context_115.id;
    return {
        setters: [
            function (WayMgr_2_1) {
                WayMgr_2 = WayMgr_2_1;
            },
            function (Ress_11_1) {
                Ress_11 = Ress_11_1;
            },
            function (playerMgr_7_1) {
                playerMgr_7 = playerMgr_7_1;
            },
            function (CameraFollowCtr_1_1) {
                CameraFollowCtr_1 = CameraFollowCtr_1_1;
            },
            function (GameMgr_30_1) {
                GameMgr_30 = GameMgr_30_1;
            },
            function (MatMgr_8_1) {
                MatMgr_8 = MatMgr_8_1;
            },
            function (uiMgr_4_1) {
                uiMgr_4 = uiMgr_4_1;
            },
            function (headMgr_1_1) {
                headMgr_1 = headMgr_1_1;
            },
            function (RoadGroupMgr_2_1) {
                RoadGroupMgr_2 = RoadGroupMgr_2_1;
            },
            function (PoolMgr_5_1) {
                PoolMgr_5 = PoolMgr_5_1;
            },
            function (inviteMgr_3_1) {
                inviteMgr_3 = inviteMgr_3_1;
            },
            function (obsCreateMgr_4_1) {
                obsCreateMgr_4 = obsCreateMgr_4_1;
            },
            function (robotMgr_2_1) {
                robotMgr_2 = robotMgr_2_1;
            },
            function (homePage_9_1) {
                homePage_9 = homePage_9_1;
            },
            function (inGamePage_6_1) {
                inGamePage_6 = inGamePage_6_1;
            },
            function (continuePage_2_1) {
                continuePage_2 = continuePage_2_1;
            },
            function (levelMgr_4_1) {
                levelMgr_4 = levelMgr_4_1;
            },
            function (gameOverPage_3_1) {
                gameOverPage_3 = gameOverPage_3_1;
            },
            function (prizePage_2_1) {
                prizePage_2 = prizePage_2_1;
            },
            function (victoryPage_2_1) {
                victoryPage_2 = victoryPage_2_1;
            },
            function (videoPrizePage_5_1) {
                videoPrizePage_5 = videoPrizePage_5_1;
            },
            function (victoryPagehandle_2_1) {
                victoryPagehandle_2 = victoryPagehandle_2_1;
            },
            function (joinTool_10_1) {
                joinTool_10 = joinTool_10_1;
            },
            function (tdTool_9_1) {
                tdTool_9 = tdTool_9_1;
            },
            function (wxTool_11_1) {
                wxTool_11 = wxTool_11_1;
            },
            function (saveTool_8_1) {
                saveTool_8 = saveTool_8_1;
            },
            function (HMoveHandle_4_1) {
                HMoveHandle_4 = HMoveHandle_4_1;
            },
            function (FrameMgr_8_1) {
                FrameMgr_8 = FrameMgr_8_1;
            },
            function (LateUpdateMgr_2_1) {
                LateUpdateMgr_2 = LateUpdateMgr_2_1;
            },
            function (GameArchiveManager_4_1) {
                GameArchiveManager_4 = GameArchiveManager_4_1;
            },
            function (GameArchiveManagerRequest_4_1) {
                GameArchiveManagerRequest_4 = GameArchiveManagerRequest_4_1;
            },
            function (ViewModeChangeMgr_2_1) {
                ViewModeChangeMgr_2 = ViewModeChangeMgr_2_1;
            },
            function (AudioMgr_12_1) {
                AudioMgr_12 = AudioMgr_12_1;
            }
        ],
        execute: function () {
            exports_115("stageMgr", stageMgr = /** @class */ (function () {
                function stageMgr() {
                }
                //超前init
                stageMgr.preInit = function () {
                    var scene = GameMgr_30.GameMgr.app.getScene();
                    this.scene = scene;
                    this.stageRoot = new m4m.framework.transform();
                    this.stageRoot.name = "stageRoot";
                    this.scene.addChild(this.stageRoot);
                    //waymgr 预初始
                    WayMgr_2.WayMgr.preInit();
                    //初始化 玩家
                    playerMgr_7.playerMgr.preInit();
                    this.pRole = playerMgr_7.playerMgr.getRole();
                    //相机
                    this.cam_Light_Init();
                    //视角模式切换 管理器
                    ViewModeChangeMgr_2.ViewModeChangeMgr.Init();
                    //雾效
                    scene.fog = new m4m.framework.Fog();
                    scene.fog._Start = 10;
                    scene.fog._End = 100;
                    scene.fog._Color = new m4m.math.vector4(1, 0, 0, 1);
                    // //UI 显示
                    // // inGamePage.Instance.show();
                    // inGamePage.Instance().then((ins) => {
                    //     ins.show();
                    //     homePage.Instance().then((ins) => {
                    //         ins.showAndCgInGame();
                    //     });
                    // });
                };
                //初始化
                stageMgr.init = function () {
                    var scene = this.scene;
                    playerMgr_7.playerMgr.init();
                    playerMgr_7.playerMgr.regStepBC(this.onPlayerStep.bind(this));
                    //障碍modeData
                    RoadGroupMgr_2.RoadGroupMgr.init();
                    GameMgr_30.GameMgr.currentLevel = Number(GameArchiveManager_4.GameArchiveManager.Instance.GameArchiveData.Currentlevel.id) - 1;
                    // 初始化当前关卡数据
                    var level = GameMgr_30.GameMgr.currentLevel;
                    //
                    this.selectLevel(level);
                    //初始化 舞台
                    WayMgr_2.WayMgr.init();
                    // //初始化 玩家
                    // playerMgr.init();
                    // playerMgr.regStepBC(this.onPlayerStep.bind(this));
                    // this.pRole = playerMgr.getRole();
                    // //相机
                    // this.cam_Light_Init();
                    //机器人
                    robotMgr_2.robotMgr.placeRobots();
                    //加载一些 路人的数据
                    //路人头像
                    headMgr_1.headMgr.AddOnce(function () {
                        headMgr_1.headMgr.setIconUrls(robotMgr_2.robotMgr.robotPool); //设置 头像url
                    });
                    this.needFristUpd = true;
                    this.ckRobotInvisibleAll();
                    // //雾效
                    // scene.fog = new m4m.framework.Fog();
                    // scene.fog._Start = 10;
                    // scene.fog._End = 100;
                    // scene.fog._Color = new m4m.math.vector4(1, 0, 0, 1);
                    //比赛 状态修改
                    FrameMgr_8.FrameMgr.Add(this.update, this);
                    // //UI 显示
                    // // inGamePage.Instance.show();
                    // inGamePage.Instance().then((ins)=>{
                    //     ins.show();
                    //     homePage.Instance.showAndCgInGame();
                    // });
                    //lateupdate
                    scene.onLateUpdate = LateUpdateMgr_2.LateUpdateMgr.onUpdate.bind(LateUpdateMgr_2.LateUpdateMgr);
                    // //robot
                    // playerMgr.onRealSpeed = robotMgr.dynamicAddRobot.bind(robotMgr);
                    // GameMgr.app.showFps();
                    // GameMgr.app.showDrawCall();
                    //胜利结束回调
                    victoryPagehandle_2.victoryPagehandle.call_back = this.playCall.bind(this);
                    this.runLevel = GameMgr_30.GameMgr.currentLevel;
                    //ScreenAsp 更新关闭 （减少计算）
                    GameMgr_30.GameMgr.app["updateScreenAsp"] = function () { };
                    //开始按钮显示
                    homePage_9.homePage.Instance().then(function (ins) {
                        ins.setShowStartBtn();
                        //加载完毕
                        if (GameMgr_30.GameMgr.isNewAuth) {
                            joinTool_10.joinTool.tdcustomEvent(tdTool_9.tdTool.Finished_model_loading, tdTool_9.tdTool.Finished_model_loading); //数据埋点
                        }
                    });
                    //UI 显示
                    // inGamePage.Instance.show();
                    //每日分享奖励 面板弹出 
                    if (videoPrizePage_5.videoPrizePage.hasShareCP) {
                        videoPrizePage_5.videoPrizePage.Instance().then(function (ins) {
                            ins.show();
                            var l = inviteMgr_3.inviteMgr.gold[0];
                            if (wxTool_11.wxTool.isNewPlayer) {
                                l = l * 2;
                            }
                            ins.setInfo(l);
                            saveTool_8.saveTool.save(null, null);
                        });
                    }
                    this.inited = true;
                };
                //相机 灯光 初始化设置
                stageMgr.cam_Light_Init = function () {
                    var scene = this.scene;
                    var role = this.pRole;
                    //相机
                    if (!scene.mainCamera.gameObject.getComponent(CameraFollowCtr_1.CameraFollowCtrBR.name)) {
                        scene.mainCamera.fov = 60 * Math.PI / 180;
                        // scene.mainCamera.far = 120;
                        scene.mainCamera.far = 10000;
                        var camCtr = scene.mainCamera.gameObject.addComponent(CameraFollowCtr_1.CameraFollowCtrBR.name);
                        camCtr.setTarget(role.root.gameObject.transform);
                        //role.ball.camCtr = camCtr;
                        //late update ( 拖尾 和 相机 )
                        //抖动问题
                        LateUpdateMgr_2.LateUpdateMgr.Add(camCtr.ckYGMove, camCtr);
                        LateUpdateMgr_2.LateUpdateMgr.Add(camCtr["calCameraPos"], camCtr);
                        camCtr.setTargetOffset(0, 1.6, 0);
                        camCtr.Yangle = this.camBaseYg;
                        //camCtr.elevationAngle = -135;
                        camCtr.distance = 10;
                        this.camCtr = camCtr;
                        this.camLpos = camCtr.gameObject.transform.localPosition;
                    }
                    // //灯光
                    // let ltran = new m4m.framework.transform();
                    // let light = ltran.gameObject.addComponent("light") as m4m.framework.light;
                    // light.type = m4m.framework.LightTypeEnum.Direction;
                    // //light.intensity = 0.3;
                    // m4m.math.quatFromEulerAngles(90, 0, 0, ltran.localRotate);
                    // ltran.localEulerAngles = ltran.localEulerAngles;
                    // scene.addChild(ltran);
                };
                //等待 xx秒 后开始比赛
                stageMgr.waitlateBeginRace = function () {
                    if (this.waitCount == 0) {
                        // runingPage.Instance.show();
                        // inGamePage.Instance().then((ins) => {
                        //     ins.show();
                        // });
                    }
                    //倒计时逻辑
                    // runingPage.Instance.setRanking(configMgr.playerCount);//排名
                    // runingPage.Instance.setDisNum(0);//排名
                    // this.waitCount += Time.DeltaTime;
                    // runingPage.Instance.setCountDown(this.waitTime - this.waitCount); //计时
                    // if (this.waitCount < this.waitTime) return;
                    // runingPage.Instance.setCountDown(0);//计时
                    FrameMgr_8.FrameMgr.Remove(this.waitlateBeginRace, this);
                    playerMgr_7.playerMgr.racePlay();
                    GameMgr_30.GameMgr.raceStage = 1;
                    this.waitCount = 0;
                    // 机器人
                    robotMgr_2.robotMgr.startGame();
                    //audio play
                    AudioMgr_12.AudioMgr.Seek("environment.mp3", 0);
                    AudioMgr_12.AudioMgr.Play("environment.mp3", true);
                    //告诉子域 ，准备跟随的好友头像
                    var instIds = [];
                    robotMgr_2.robotMgr.robotPool.forEach(function (r) {
                        if (r) {
                            instIds.unshift(r.root.gameObject.transform.insId.getInsID()); //名次排序 [1,2,3.. ]
                        }
                    });
                    joinTool_10.joinTool.placeFriendIcon(instIds, this.currentLevel.id + 1);
                    //子域画板设置成 头像模式
                    wxTool_11.wxTool.setHeadFollowMode(true);
                    // //路人头像
                    // headMgr.setIconUrls(robotMgr.robotPool); //设置 头像url
                    this.needFristUpd = false;
                    if (GameMgr_30.GameMgr.developModel) { //打印 平均速度
                        this.raceStartTime = Date.now();
                    }
                };
                stageMgr.onPlayerStep = function (step) {
                    WayMgr_2.WayMgr.roleSteepNum = step;
                };
                //重玩游戏
                stageMgr.replay = function () {
                    FrameMgr_8.FrameMgr.Add(stageMgr.waitlateBeginRace, stageMgr);
                    this.reState();
                };
                //update
                stageMgr.update = function (delta) {
                    // this.waitlateBeginRace();
                    this.playerCollision();
                    this.robotUpdate(delta);
                    this.rankingCalculate(delta);
                    this.homePageFristIcon(delta);
                };
                //选择指定关卡
                stageMgr.selectLevel = function (index) {
                    var _this = this;
                    var len_ = levelMgr_4.levelMgr.levels.length;
                    index = index >= len_ ? len_ - 1 : index;
                    // if (index >= levelMgr.levels.length)
                    //return;
                    this.currentLevel = levelMgr_4.levelMgr.levels[index];
                    //关卡移动 块的 移动速度
                    // 更新UI
                    //  homePage.Instance.setInfo(this.currentLevel.id + 1, 0);
                    // inGamePage.Instance.setCustoms(this.currentLevel.id + 1);
                    inGamePage_6.inGamePage.Instance().then(function (ins) {
                        ins.setCustoms(_this.currentLevel);
                    });
                    var len = this.currentLevel.weight.length;
                    var bgObj = RoadGroupMgr_2.RoadGroupMgr.baseGenRate;
                    var bgLen = 0;
                    for (var key in bgObj) {
                        if (typeof (bgObj[key]) == "number") {
                            bgLen++;
                        }
                    }
                    if (len != bgLen) {
                        console.error("level(".concat(index, "), levelConfig error on change \uFF1Aweightlist length wrong"));
                    }
                    for (var i = 0; i < len; i++) {
                        bgObj[i] = this.currentLevel.weight[i];
                    }
                    // console.log(bgObj);
                    // console.log(this.currentLevel.weight);
                };
                stageMgr.backTrack = function (delta) {
                    if (this.tracingTime <= 0) {
                        FrameMgr_8.FrameMgr.Remove(this.backTrack, this);
                        this.ballEntryPlay(); // Next stage
                        return;
                    }
                    var player = this.pRole.root.gameObject.transform;
                    m4m.math.vec3ScaleByNum(this.tracingVec, delta, this.backTrackMovement);
                    m4m.math.vec3Add(player.localTranslate, this.backTrackMovement, player.localTranslate);
                    this.tracingTime -= delta;
                };
                stageMgr.backTrackPlay = function () {
                    this.tracingTime = 1;
                    var player = this.pRole.root.gameObject.transform;
                    var pos = player.getWorldPosition();
                    // Set up target position
                    m4m.math.vec3Clone(pos, this.tracingVec);
                    this.tracingVec.x = 0;
                    this.tracingVec.z -= this.tracingDistance;
                    // Calculat speed vector
                    m4m.math.vec3Subtract(this.tracingVec, pos, this.tracingVec);
                    m4m.math.vec3ScaleByNum(this.tracingVec, 1 / this.tracingTime, this.tracingVec);
                    FrameMgr_8.FrameMgr.Add(stageMgr.backTrack, stageMgr);
                    this.pRole.ball.gameObject.transform.localTranslate.z = -this.ballEntryOffset;
                };
                stageMgr.ballEntry = function (delta) {
                    var ball = this.pRole.ball.gameObject.transform;
                    if (this.ballEntrytimer <= 0) {
                        this.ballEntrytimer = 0.3; // reset for next round
                        FrameMgr_8.FrameMgr.Remove(this.ballEntry, this);
                        m4m.math.vec3Reset(ball.localTranslate);
                        return;
                    }
                    ball.localTranslate.z += this.ballEntrySpeed * delta;
                    ball.localTranslate = ball.localTranslate;
                    this.ballEntrytimer -= delta;
                };
                stageMgr.ballEntryPlay = function () {
                    this.ballEntrytimer = 0.3;
                    FrameMgr_8.FrameMgr.Add(stageMgr.ballEntry, stageMgr);
                };
                //重置状态
                stageMgr.reState = function () {
                    if (GameMgr_30.GameMgr.raceStage == 0)
                        return;
                    var level = stageMgr.runLevel = GameMgr_30.GameMgr.currentLevel;
                    stageMgr.selectLevel(level);
                    GameMgr_30.GameMgr.raceStage = 0;
                    stageMgr.gameDiamond = 0;
                    stageMgr.dieRanking = -1;
                    RoadGroupMgr_2.RoadGroupMgr.initState();
                    WayMgr_2.WayMgr.initState();
                    playerMgr_7.playerMgr.initState();
                    MatMgr_8.MatMgr.initState();
                    robotMgr_2.robotMgr.placeRobots();
                    //路人头像
                    headMgr_1.headMgr.setIconUrls(robotMgr_2.robotMgr.robotPool); //设置 头像url
                    setTimeout(function () {
                        stageMgr.camCtr["calCameraPos"]();
                        stageMgr.ckRobotInvisibleAll();
                        stageMgr.rankingCalculate(0);
                    }, 0);
                    //加载一些 路人的数据
                    headMgr_1.headMgr.AddOnce();
                    this.needFristUpd = true;
                };
                stageMgr.homePageFristIcon = function (d) {
                    if (!this.needFristUpd)
                        return;
                    this.fCkCount += d;
                    if (this.fCkCount < this.ckTimeLen)
                        return;
                    this.fCkCount = 0;
                    this.tryShowFristIcon();
                };
                //在首页 展示 最近的一个路人
                stageMgr.tryShowFristIcon = function () {
                    var fRole = robotMgr_2.robotMgr.getRole(0);
                    if (fRole) {
                        fRole.lastFollowed = false;
                        fRole.ckHeadIconFollow(1);
                    }
                };
                //游戏结束 接口
                stageMgr.gameOverConsole = function () {
                    var _this = this;
                    GameMgr_30.GameMgr.raceStage = -1;
                    var prole = this.pRole;
                    prole.toStop();
                    robotMgr_2.robotMgr.toSlowdownAll();
                    var current = this.currentLevel.id; // 当前关卡 (1 indexed)
                    if (playerMgr_7.playerMgr.reached) {
                        //抵达终点 
                        this.settlement(current, prole.rankNum);
                    }
                    else if (continuePage_2.continuePage.recoverCount == this.currentLevel.reviveCount) {
                        //不可复活（第二次 、跳过复活）
                        this.settlement(current, this.dieRanking);
                    }
                    else {
                        //可复活
                        continuePage_2.continuePage.Instance().then(function (ins) {
                            ins.show();
                        });
                    }
                    if (GameMgr_30.GameMgr.developModel) { //打印平均速度
                        var time = Date.now() - this.raceStartTime;
                        time = time / 1000;
                        var sp = stageMgr.currentLevel.length / time;
                        console.warn(" \u672C\u5C40\u5E73\u5C40\u901F\u5EA6 \uFF1A ".concat(sp, " m/s  ,\u7528\u65F6 : ").concat(time, " s ,\u8DDD\u79BB:").concat(stageMgr.currentLevel.length, " m"));
                    }
                    if (playerMgr_7.playerMgr.reached) {
                        // // settlementPage.Instance.recoverCount = 2;
                        // //  gameOverPage.Instance.show();
                        // this.closeHeadFollow();
                        // prizePage.Instance.show();
                        // prizePage.Instance.setInfo(GameMgr.currentLevel);
                        // GameMgr.currentLevel++;
                        this.levelComplete();
                    }
                    var nextAmount = 0;
                    var nextLevel = levelMgr_4.levelMgr.levels[current];
                    if (nextLevel != null)
                        nextAmount = nextLevel.amount;
                    gameOverPage_3.gameOverPage.Instance().then(function (ins) {
                        ins.setInfo(prole.rankNum, current, _this.currentLevel.amount, nextAmount);
                        if (playerMgr_7.playerMgr.toRaceCount == 1 && GameMgr_30.GameMgr.isNewAuth) {
                            joinTool_10.joinTool.tdcustomEvent(tdTool_9.tdTool.finished_1st_game, tdTool_9.tdTool.finished_1st_game); //数据埋点
                        }
                    });
                    // this.selectLevel(current);
                    //  settlementPage.Instance.setRanking(robotMgr.remain);
                    // let dropOut = robotMgr.AITotalAmount + 1 - robotMgr.remain;
                    //  settlementPage.Instance.setSelfInfo(playerMgr.getRaceTime(), this.pRole.root.gameObject.transform.localTranslate.z, dropOut, robotMgr.remain);
                };
                /** 获取分数 通过 关卡和 排名 信息 */
                stageMgr.getScore = function (level, ranking) {
                    //保存 得分 (xx关xx名)
                    var score = level << 16;
                    var _rank = 65535 - ranking; //方便 排序
                    score += _rank & (Math.pow(2, 16) - 1); //后16位 排名
                    return score;
                };
                //结算
                stageMgr.settlement = function (level, ranking) {
                    var score = this.getScore(level, ranking);
                    console.log(level + "关" + ranking + "名--分");
                    //是否是-->新纪录
                    if (score > GameMgr_30.GameMgr.newRecord) {
                        GameMgr_30.GameMgr.newRecord = score;
                        gameOverPage_3.gameOverPage.Instance().then(function (ins) {
                            ins.setIsNewRecord(true);
                        });
                    }
                    else {
                        gameOverPage_3.gameOverPage.Instance().then(function (ins) {
                            ins.setIsNewRecord(false);
                        });
                    }
                    //保存数据
                    saveTool_8.saveTool.save(null, null);
                    //上传微信排行榜
                    joinTool_10.joinTool.settlement(score);
                    // 记录数据
                    this.dataTracing([
                        // PID
                        // UsrID
                        // Version
                        Date.now(),
                        this.currentLevel.id,
                        ranking,
                        playerMgr_7.playerMgr.reached ? 1 : 0,
                        this.gameDiamond,
                        GameMgr_30.GameMgr.diamond,
                        0, // 统计目标ID
                    ]);
                };
                stageMgr._rankingSort = function (a, b) {
                    return b[0].root.gameObject.transform.localTranslate.z - a[0].root.gameObject.transform.localTranslate.z;
                };
                stageMgr.rankingCalculate = function (d) {
                    var _this = this;
                    if (playerMgr_7.playerMgr.reached)
                        return; //玩家到达终点后不再排名计算
                    this.rankRefCount += d;
                    if (this.rankRefCount < this.rankRefTime)
                        return; //优化点 、 降低刷新频率
                    this.rankRefCount = 0;
                    //名次修改
                    if (this.pRole.rankNum != this.lastPRank) {
                        // inGamePage.Instance.setSurpassNum(this.pRole.rankNum);
                        if (this.cacheIngamePage) {
                            this.cacheIngamePage.setSurpassNum(this.pRole.rankNum);
                        }
                        else {
                            inGamePage_6.inGamePage.Instance().then(function (ins) {
                                _this.cacheIngamePage = ins;
                                _this.cacheIngamePage.setSurpassNum(_this.pRole.rankNum);
                            });
                        }
                        this.lastPRank = this.pRole.rankNum;
                    }
                    this.rankingCache.length = 0;
                    this.rankingCache.push([this.pRole, -1]);
                    var existAI = robotMgr_2.robotMgr.robotPool.length;
                    var frontNum = 0;
                    for (var i = 0; i < existAI; i++) {
                        var agent = robotMgr_2.robotMgr.getRole(i);
                        if (agent) {
                            if (agent[this.frontTag]) {
                                frontNum++;
                                continue;
                            }
                            this.rankingCache.push([agent, i]);
                        }
                    }
                    this.rankingCache.sort(this._rankingSort);
                    // Update UI
                    for (var i = 0; i < this.rankingCache.length; i++) {
                        var curID = this.rankingCache[i][1];
                        var num = i + 1 + frontNum;
                        this.rankingCache[i][0].setRank(num);
                        if (curID == -1) {
                            // //检查玩家 超越
                            // //超越 分数增加 、提示图标
                            // let backRole = cache[i + 1] ? cache[i + 1][0] : null;
                            // playerMgr.ckOverOpponent(num, backRole);
                        }
                    }
                };
                //机器人逻辑更新
                stageMgr.robotUpdate = function (delta) {
                    if (GameMgr_30.GameMgr.raceStage != 1)
                        return;
                    var amount = robotMgr_2.robotMgr.robotPool.length;
                    this.visibleRobotNum = 0;
                    for (var id = 0; id < amount; id++) {
                        var robot = robotMgr_2.robotMgr.getRole(id);
                        if (robot != null) {
                            robot[this.frontTag] = false;
                            var isV = this.ckRobotInvisible(robot);
                            robot.root.lowMode = !this.ckHasInActRange(robot);
                            if (!robot.root.lowMode) {
                                robot.root.gameObject.visible = true;
                                this.AI(robot);
                                this.robotCKCollision(id);
                            }
                            else if (this.ckRobotOnFront(robot)) {
                                robot[this.frontTag] = true;
                                robot.root.gameObject.visible = false; //避免 sceneupdate 消耗
                                robot.root.baseRun(delta);
                            }
                            if (isV) {
                                this.visibleRobotNum++;
                                robot.ckHeadIconFollow(delta);
                            }
                            if (robot.root.isDropout) {
                                robotMgr_2.robotMgr.toDie(id);
                            }
                        }
                    }
                };
                //机器人AI
                stageMgr.AI = function (r) {
                    if (!r)
                        return;
                    // if(GameMgr.raceStage != 1) return;
                    var ball = r.root;
                    var agent = ball.gameObject.transform;
                    //球 和 障碍的 碰撞检测
                    var btran = r.sensor.gameObject.transform;
                    // Adjust z offset of sensor
                    var zoffset = ball.raelSpeed / 10; // Realspeed / 10
                    zoffset = 15;
                    if (btran.localTranslate.z != zoffset) {
                        btran.localTranslate.z = zoffset;
                        btran.localTranslate = btran.localTranslate;
                    }
                    var observeOffset = zoffset / 5;
                    var curStep = ball.stepNum;
                    var output = ball;
                    var movingObserve = WayMgr_2.WayMgr.getObs(curStep + 3);
                    var randomFactor = 2;
                    if (movingObserve) {
                        var move = movingObserve.gameObject.getComponent(HMoveHandle_4.HMoveHandle.name);
                        if (move) {
                            var pos = movingObserve.gameObject.transform.localTranslate.x;
                            // if(Math.abs(pos) >= 2.2) {
                            //     output.horizMove(-pos-agent.localTranslate.x * (1.7 - Math.random() * 0));
                            // } else {
                            //     output.horizMove(agent.localTranslate.x * (-pos * 14 - Math.random() * 0));
                            //     // output.horizMove(agent.localTranslate.x * (10 + pos) * (1.4 - Math.random() * 0));
                            //     console.error('Attention @ ' + pos);
                            // }
                            var expect = 0;
                            if (Math.abs(pos) >= 2.2) {
                                expect = -pos;
                            }
                            else {
                                expect = pos + 5;
                            }
                            // output.horizMove(expect - agent.localTranslate.x * (1.4 - Math.random() * 0));
                            // output.horizMove((expect - agent.localTranslate.x) * (1.4 - Math.random() * 0));
                            output.setAim(expect - agent.localTranslate.x);
                            output.lastObs = -1;
                        }
                    }
                    var obs4 = WayMgr_2.WayMgr.getObs(curStep + 3);
                    if (obs4) {
                        var style = obs4['style'];
                        if (style != null) { // 已知安全区域
                            var styleName = obsCreateMgr_4.obsStyle[style];
                            var safe = obsCreateMgr_4.obsCreateMgr.safetyLUT[obsCreateMgr_4.obsCreateMgr.obsSafety[style]];
                            if (style != 0 && style != 1 && output.lastObs != style) {
                                var randomPos = safe[0] + Math.random() * (safe[1] - safe[0]);
                                output.setAim(randomPos);
                                output.lastObs = style;
                            }
                            else { // 碰撞检测
                                var obs = WayMgr_2.WayMgr.getObs(curStep + observeOffset);
                                var obs1 = WayMgr_2.WayMgr.getObs(curStep + 2);
                                var obs2 = WayMgr_2.WayMgr.getObs(curStep + 1);
                                var cs = void 0;
                                if (!obs)
                                    return;
                                cs = [];
                                if (obs)
                                    cs = cs.concat(obs.gameObject.getComponentsInChildren("boxcollider"));
                                if (obs1)
                                    cs = cs.concat(obs1.gameObject.getComponentsInChildren("boxcollider"));
                                if (obs2)
                                    cs = cs.concat(obs2.gameObject.getComponentsInChildren("boxcollider"));
                                if (!cs || cs.length < 1)
                                    return;
                                var len = cs.length;
                                for (var i = 0; i < len; i++) {
                                    var c = cs[i];
                                    if (c.intersectsTransform(btran)) {
                                        var cTag = c.gameObject.tag;
                                        if (cTag != GameMgr_30.GameMgr.BoostTag && cTag != GameMgr_30.GameMgr.RampTag && cTag != GameMgr_30.GameMgr.CoinTag) {
                                            var style_1 = obs[PoolMgr_5.PoolMgr.styleTag];
                                            if (output.lastObs == style_1)
                                                return;
                                            output.lastObs = style_1;
                                            //die
                                            if (Math.abs(agent.localTranslate.x) >= 0.8) {
                                                var factor = 0;
                                                if (style_1 == 6 || style_1 == 3) {
                                                    factor = 1;
                                                }
                                                // output.horizMove(-agent.localTranslate.x * (factor + Math.random() * 0.8));
                                                output.setAim(-agent.localTranslate.x * (factor + Math.random() * 0));
                                            }
                                            else {
                                                var flag = Math.random() - 0.5;
                                                // flag /= Math.abs(flag);
                                                flag = -Math.sign(agent.localTranslate.x);
                                                if (style_1 == 6) {
                                                    flag = -1;
                                                }
                                                else if (style_1 == 3) {
                                                    flag = 1;
                                                }
                                                // output.horizMove((10 - Math.abs(agent.localTranslate.x)) * flag * (0.5 + Math.random() * 0.9));
                                                output.setAim(8 - Math.abs(agent.localTranslate.x) * (flag));
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // // else {
                    // let obs = WayMgr.getObs(curStep + observeOffset);
                    // let obs1 = WayMgr.getObs(curStep + 2);
                    // let obs2 = WayMgr.getObs(curStep + 1);
                    // let cs: m4m.framework.boxcollider[];
                    // if (!obs) return;
                    // cs = [];
                    // if (obs)
                    //     cs = cs.concat(obs.gameObject.getComponentsInChildren("boxcollider") as m4m.framework.boxcollider[]);
                    // if (obs1)
                    //     cs = cs.concat(obs1.gameObject.getComponentsInChildren("boxcollider") as m4m.framework.boxcollider[]);
                    // if (obs2)
                    //     cs = cs.concat(obs2.gameObject.getComponentsInChildren("boxcollider") as m4m.framework.boxcollider[]);
                    // if (!cs || cs.length < 1) return;
                    // let len = cs.length;
                    // for (let i = 0; i < len; i++) {
                    //     let c = cs[i];
                    //     if (c.intersectsTransform(btran)) {
                    //         let cTag = c.gameObject.tag;
                    //         if (cTag != GameMgr.BoostTag && cTag != GameMgr.RampTag && cTag != GameMgr.CoinTag) {
                    //             let style = obs[PoolMgr.styleTag];
                    //             if (output.lastObs == style)
                    //                 return;
                    //             output.lastObs = style;
                    //             //die
                    //             if (Math.abs(agent.localTranslate.x) >= 0.8) {
                    //                 let factor = 0;
                    //                 if (style == 6 || style == 3) {
                    //                     factor = 1;
                    //                 }
                    //                 // output.horizMove(-agent.localTranslate.x * (factor + Math.random() * 0.8));
                    //                 output.setAim(-agent.localTranslate.x * (factor + Math.random()*0.5));
                    //             } else {
                    //                 let flag = Math.random() - 0.5;
                    //                 // flag /= Math.abs(flag);
                    //                 flag = - Math.sign(agent.localTranslate.x);
                    //                 if (style == 6) {
                    //                     flag = -1;
                    //                 } else if (style == 3) {
                    //                     flag = 1;
                    //                 }
                    //                 // output.horizMove((10 - Math.abs(agent.localTranslate.x)) * flag * (0.5 + Math.random() * 0.9));
                    //                 output.setAim(8 - Math.abs(agent.localTranslate.x) * (flag + Math.random()));
                    //             }
                    //             break;
                    //         }
                    //         // } else if(Math.random() < 0.1) {
                    //         //     output.horizMove(agent.localTranslate.x * (1+ Math.random() * 0.1));
                    //     }
                    // }
                };
                // //机器人AI
                // private static AI(r: role) {
                //     if (!r) return;
                //     // if(GameMgr.raceStage != 1) return;
                //     let ball = r.root;
                //     let agent = ball.gameObject.transform;
                //     //球 和 障碍的 碰撞检测
                //     let btran = r.sensor.gameObject.transform;
                //     // Adjust z offset of sensor
                //     let zoffset = ball.raelSpeed / 10; // Realspeed / 10
                //     zoffset = 15;
                //     if (btran.localTranslate.z != zoffset) {
                //         btran.localTranslate.z = zoffset;
                //         btran.markDirty();
                //     }
                //     let observeOffset = zoffset / 5;
                //     let curStep = ball.stepNum;
                //     let output = ball;
                //     let movingObserve = WayMgr.getObs(curStep + 3);
                //     const randomFactor = 2;
                //     if (movingObserve) {
                //         let move = movingObserve.gameObject.getComponent(HMoveHandle.name) as HMoveHandle;
                //         if (move) {
                //             let pos = movingObserve.gameObject.transform.localTranslate.x;
                //             // if(Math.abs(pos) >= 2.2) {
                //             //     output.horizMove(-pos-agent.localTranslate.x * (1.7 - Math.random() * 0));
                //             // } else {
                //             //     output.horizMove(agent.localTranslate.x * (-pos * 14 - Math.random() * 0));
                //             //     // output.horizMove(agent.localTranslate.x * (10 + pos) * (1.4 - Math.random() * 0));
                //             //     console.error('Attention @ ' + pos);
                //             // }
                //             let expect = 0;
                //             if (Math.abs(pos) >= 2.2) {
                //                 expect = -pos;
                //             } else {
                //                 expect = pos + 5;
                //             }
                //             // output.horizMove(expect - agent.localTranslate.x * (1.4 - Math.random() * 0));
                //             // output.horizMove((expect - agent.localTranslate.x) * (1.4 - Math.random() * 0));
                //             output.setAim(expect - agent.localTranslate.x);
                //             output.lastObs = -1;
                //         }
                //     }
                //     // else {
                //     let obs = WayMgr.getObs(curStep + observeOffset);
                //     let obs1 = WayMgr.getObs(curStep + 2);
                //     let obs2 = WayMgr.getObs(curStep + 1);
                //     let cs: m4m.framework.boxcollider[];
                //     if (!obs) return;
                //     cs = [];
                //     if (obs)
                //         cs = cs.concat(obs.gameObject.getComponentsInChildren("boxcollider") as m4m.framework.boxcollider[]);
                //     if (obs1)
                //         cs = cs.concat(obs1.gameObject.getComponentsInChildren("boxcollider") as m4m.framework.boxcollider[]);
                //     if (obs2)
                //         cs = cs.concat(obs2.gameObject.getComponentsInChildren("boxcollider") as m4m.framework.boxcollider[]);
                //     if (!cs || cs.length < 1) return;
                //     let len = cs.length;
                //     for (let i = 0; i < len; i++) {
                //         let c = cs[i];
                //         if (c.intersectsTransform(btran)) {
                //             let cTag = c.gameObject.tag;
                //             if (cTag != GameMgr.BoostTag && cTag != GameMgr.RampTag && cTag != GameMgr.CoinTag) {
                //                 let style = obs[PoolMgr.styleTag];
                //                 if (output.lastObs == style)
                //                     return;
                //                 output.lastObs = style;
                //                 //die
                //                 if (Math.abs(agent.localTranslate.x) >= 0.8) {
                //                     let factor = 0;
                //                     if (style == 6 || style == 3) {
                //                         factor = 1;
                //                     }
                //                     // output.horizMove(-agent.localTranslate.x * (factor + Math.random() * 0.8));
                //                     output.setAim(-agent.localTranslate.x * (factor + Math.random()*0.5));
                //                 } else {
                //                     let flag = Math.random() - 0.5;
                //                     // flag /= Math.abs(flag);
                //                     flag = - Math.sign(agent.localTranslate.x);
                //                     if (style == 6) {
                //                         flag = -1;
                //                     } else if (style == 3) {
                //                         flag = 1;
                //                     }
                //                     // output.horizMove((10 - Math.abs(agent.localTranslate.x)) * flag * (0.5 + Math.random() * 0.9));
                //                     output.setAim(8 - Math.abs(agent.localTranslate.x) * (flag + Math.random()));
                //                 }
                //                 break;
                //             }
                //             // } else if(Math.random() < 0.1) {
                //             //     output.horizMove(agent.localTranslate.x * (1+ Math.random() * 0.1));
                //         }
                //     }
                // }
                //机器人不可见剔除
                stageMgr.ckRobotInvisible = function (r) {
                    var far = 100;
                    var isIn = this.robotInRange(r, far);
                    r.setVisible(isIn);
                    return isIn;
                    // r.root.gameObject.transform.gameObject.visible = isIn;
                };
                //机器人不可见剔除 all
                stageMgr.ckRobotInvisibleAll = function () {
                    var amount = robotMgr_2.robotMgr.robotPool.length;
                    for (var id = 0; id < amount; id++) {
                        var robot = robotMgr_2.robotMgr.getRole(id);
                        if (robot != null) {
                            this.ckRobotInvisible(robot);
                            robot[this.frontTag] = false;
                        }
                    }
                };
                //检查是否在 全逻辑工作开放 范围内
                stageMgr.ckHasInActRange = function (r) {
                    return this.robotInRange(r, this.r_front, this.r_back);
                };
                //检查机器人是否在指定范围
                stageMgr.robotInRange = function (r, front, back) {
                    if (back === void 0) { back = 0; }
                    var pos = r.root.gameObject.transform.localPosition;
                    var cpos = this.camLpos;
                    return !(pos.z < cpos.z - back || pos.z > cpos.z + front);
                };
                //机器人是否在前方
                stageMgr.ckRobotOnFront = function (r) {
                    var pos = r.root.gameObject.transform.localPosition;
                    var cpos = this.camLpos;
                    return pos.z > cpos.z;
                };
                // 机器人碰撞检测
                stageMgr.robotCKCollision = function (id) {
                    // if(GameMgr.raceStage != 1) return;
                    //球 和 障碍的 碰撞检测
                    var role = robotMgr_2.robotMgr.getRole(id);
                    var state = this.CKRoleCollision(role);
                    if (state & 1) {
                        robotMgr_2.robotMgr.toDie(id);
                        AudioMgr_12.AudioMgr.Play("ball.mp3");
                        return;
                    }
                    if (state & 2) {
                        //jump
                        robotMgr_2.robotMgr.toJump(id);
                    }
                    if (state & 4) {
                        //boost
                        robotMgr_2.robotMgr.toBoost(id);
                    }
                    if (state & 8) {
                        //钻石
                    }
                };
                //相机下降
                stageMgr.downCam = function () {
                    if (!this.cacheFun)
                        this.cacheFun = this.reUpcam.bind(this);
                    this.camCtr.setLToYangle(4, this.cacheFun);
                };
                //相机回升
                stageMgr.reUpcam = function () {
                    this.camCtr.setLToYangle(this.camBaseYg);
                };
                /**
                 * 检查角色的碰撞
                 * 0：没碰到 、1:死亡 、2：坡道 、4：加速带 8：钻石
                 */
                stageMgr.CKRoleCollision = function (r) {
                    var reslut = 0;
                    if (GameMgr_30.GameMgr.raceStage != 1 || !r)
                        return reslut;
                    //球 和 障碍的 碰撞检测
                    var btran = r.ball.gameObject.transform;
                    var curStep = r.root.stepNum;
                    var obs = WayMgr_2.WayMgr.getObs(curStep);
                    var obs_1 = WayMgr_2.WayMgr.getObs(curStep + 1);
                    var cs;
                    if (obs || obs_1) {
                        cs = [];
                        if (obs)
                            cs = cs.concat(obs.gameObject.getComponentsInChildren("boxcollider"));
                        if (obs_1)
                            cs = cs.concat(obs_1.gameObject.getComponentsInChildren("boxcollider"));
                    }
                    else {
                        return;
                    }
                    if (!cs || cs.length < 1)
                        return;
                    var len = cs.length;
                    for (var i = 0; i < len; i++) {
                        var c = cs[i];
                        if (!c.gameObject.visible || !c.intersectsTransform(btran))
                            continue;
                        if (c.gameObject.tag == GameMgr_30.GameMgr.CoinTag) {
                            // hasDiamond = true;
                            var z = c.gameObject.transform.getWorldTranslate().z;
                            if (z != r.lastDiamond_z) {
                                reslut |= 8;
                                r.lastDiamond_z = z;
                                if (r.root.isPlayer) {
                                    //动画
                                    //let ctr = c.gameObject.getComponent('coin') as coin;
                                    var ctr = c.gameObject.transform.children[0].gameObject.getComponent('coin');
                                    ctr.isFlying = true;
                                }
                                // c.gameObject.visible = false;
                            }
                        }
                        else if (c.gameObject.tag == GameMgr_30.GameMgr.BoostTag) {
                            var z = c.gameObject.transform.getWorldTranslate().z;
                            if (z != r.lastBoost_z) {
                                // hasboost = true;
                                reslut |= 4;
                                r.lastBoost_z = z;
                            }
                        }
                        else if (c.gameObject.tag == GameMgr_30.GameMgr.RampTag) {
                            // hasjump = true;
                            reslut |= 2;
                        }
                        else {
                            //die
                            reslut |= 1;
                            break;
                        }
                    }
                    return reslut;
                };
                /** 玩家 碰撞检测*/
                stageMgr.playerCollision = function () {
                    if (GameMgr_30.GameMgr.raceStage != 1)
                        return;
                    var state = this.CKRoleCollision(this.pRole);
                    if (state & 1) {
                        playerMgr_7.playerMgr.toDie();
                        this.dieRanking = playerMgr_7.playerMgr.getRole().rankNum;
                        return;
                    }
                    if (state & 2) {
                        //jump
                        playerMgr_7.playerMgr.toJump();
                    }
                    if (state & 4) {
                        AudioMgr_12.AudioMgr.Play("boost.mp3");
                        //boost
                        playerMgr_7.playerMgr.toBoost();
                    }
                    if (state & 8) {
                        wxTool_11.wxTool.vibrateShort();
                        //金币
                        GameMgr_30.GameMgr.diamond++;
                        this.gameDiamond++;
                        // inGamePage.Instance.updateData();
                        // inGamePage.Instance.PlayCoinCollectAnim();
                        inGamePage_6.inGamePage.Instance().then(function (ins) {
                            ins.updateData();
                            ins.PlayCoinCollectAnim();
                        });
                    }
                    var obs_1 = WayMgr_2.WayMgr.getObs(WayMgr_2.WayMgr.roleSteepNum + 1);
                    if (obs_1) { //相机下降
                        var _z = obs_1.getWorldTranslate().z;
                        if (this.late_low_z != _z && obs_1.gameObject.tag == obsCreateMgr_4.obsCreateMgr.Tag_lowGate) {
                            this.late_low_z = _z;
                            this.downCam();
                        }
                    }
                };
                //关闭头像 跟随显示
                stageMgr.closeHeadFollow = function () {
                    //隐藏 sc , 清空 sc
                    joinTool_10.joinTool.closeFollowHead();
                    //other icon 头像 隐藏
                    uiMgr_4.uiMgr.otherIconImg.transform.visible = false;
                };
                /**
                 * 播放完特效后
                 */
                stageMgr.playCall = function () {
                    var _this = this;
                    //弹出 过关奖励面板
                    this.closeHeadFollow();
                    prizePage_2.prizePage.Instance().then(function (ins) {
                        ins.show();
                        ins.setInfo(_this.gameDiamond, true);
                    });
                    GameMgr_30.GameMgr.currentLevel = this.runLevel + 1;
                    var id = GameArchiveManager_4.GameArchiveManager.Instance.GameArchiveData.id;
                    GameArchiveManagerRequest_4.GameArchiveManagerRequest.Instance.updataGame(id, GameMgr_30.GameMgr.currentLevel + 1);
                    saveTool_8.saveTool.save(null, null);
                };
                //游戏过关
                stageMgr.levelComplete = function () {
                    var plevel = "".concat(tdTool_9.tdTool.Passed_level_).concat(this.runLevel + 1);
                    joinTool_10.joinTool.tdcustomEvent(plevel, plevel); //数据埋点
                    victoryPage_2.victoryPage.Instance().then(function (ins) {
                        ins.show();
                    });
                    //播放特效
                    this.playCPLevelFx();
                };
                //播放通关特效
                stageMgr.playCPLevelFx = function () {
                    // if (!Ress.fx_gx && Ress.assetmgr.getAssetByName("fx_gx.prefab.json")) {
                    //     Ress.fx_gx = (Ress.assetmgr.getAssetByName("fx_gx.prefab.json") as m4m.framework.prefab).getCloneTrans();
                    // }
                    if (!Ress_11.Ress.fx_sl && Ress_11.Ress.assetmgr.getAssetByName("fx_sl.prefab.json", "fx_sl.assetbundle.json")) {
                        Ress_11.Ress.fx_sl = Ress_11.Ress.assetmgr.getAssetByName("fx_sl.prefab.json", "fx_sl.assetbundle.json").getCloneTrans();
                    }
                    //挂载特效
                    /*  if (!this.fx_gx && Ress.fx_gx) {
                          let tran = Ress.fx_gx.clone();
                          tran.localTranslate.y = 2;
                          tran.localTranslate.z = 9.5;
                          this.fx_gx = tran.gameObject.getComponent("f14EffectSystem") as m4m.framework.f14EffectSystem;
                          this.camCtr.gameObject.transform.addChild(tran);
                          this.fx_gx.data.beloop = false;
                      }
              */
                    if (!this.fx_sl && Ress_11.Ress.fx_sl) {
                        var tran = Ress_11.Ress.fx_sl.clone();
                        tran.localTranslate.y = 8;
                        tran.localTranslate.x = -0.5;
                        tran.localTranslate.z = 23;
                        this.fx_sl = tran.gameObject.getComponent("f14EffectSystem");
                        this.camCtr.gameObject.transform.addChild(tran);
                    }
                    //播放特效
                    if (this.fx_gx) {
                        this.fx_gx.gameObject.visible = true;
                        //this.fx_gx.play(onFinish);
                    }
                    if (this.fx_sl) {
                        this.fx_sl.gameObject.visible = true;
                        this.fx_sl.play();
                    }
                    //完成回调
                };
                /** 隐藏通关特效 */
                stageMgr.hideCPLevelFx = function () {
                    if (this.fx_gx)
                        this.fx_gx.gameObject.visible = false;
                    if (this.fx_sl)
                        this.fx_sl.gameObject.visible = false;
                };
                stageMgr.dataTracing = function (chunk) {
                    if (!wxTool_11.wxTool.wx)
                        return;
                    if (chunk.length) {
                        var head = "".concat(wxTool_11.wxTool.appid, "_").concat(wxTool_11.wxTool.token, "_").concat(GameMgr_30.GameMgr.gameVersion, "_");
                        var data = head + chunk.join('_');
                        console.log(data);
                        saveTool_8.saveTool.sava_statistics(data, chunk.pop());
                    }
                };
                stageMgr.camBaseYg = 10;
                stageMgr.visibleRobotNum = 0; //可见的机器人的数量
                stageMgr.inited = false;
                stageMgr.waitTime = 3.2;
                stageMgr.waitCount = 0;
                stageMgr.raceStartTime = 0;
                // 复活动画
                stageMgr.backTrackMovement = new m4m.math.vector3();
                stageMgr.tracingDistance = 35;
                stageMgr.tracingVec = new m4m.math.vector3();
                stageMgr.ballEntryOffset = 20;
                stageMgr.ballEntrytimer = 0.3;
                stageMgr.ballEntrySpeed = stageMgr.ballEntryOffset / stageMgr.ballEntrytimer;
                stageMgr.runLevel = 0;
                stageMgr.needFristUpd = false;
                stageMgr.ckTimeLen = 0.3;
                stageMgr.fCkCount = 0;
                stageMgr.rankRefTime = 0.02; //
                stageMgr.rankRefCount = 0;
                stageMgr.lastPRank = -1;
                //计算排名信息
                stageMgr.rankingCache = [];
                stageMgr.frontTag = "frontTag";
                stageMgr.r_front = 130; //前面的位置
                stageMgr.r_back = 10; //后面的位置
                stageMgr.late_low_z = -1;
                stageMgr.dieRanking = -1; //死亡那一刻的排名数
                stageMgr.gameDiamond = 0;
                return stageMgr;
            }()));
        }
    };
});
System.register("role/roleHandle", ["configMgr", "stageMgr", "GameMgr"], function (exports_116, context_116) {
    "use strict";
    var configMgr_9, stageMgr_11, GameMgr_31, roleHandle;
    var __moduleName = context_116 && context_116.id;
    return {
        setters: [
            function (configMgr_9_1) {
                configMgr_9 = configMgr_9_1;
            },
            function (stageMgr_11_1) {
                stageMgr_11 = stageMgr_11_1;
            },
            function (GameMgr_31_1) {
                GameMgr_31 = GameMgr_31_1;
            }
        ],
        execute: function () {
            exports_116("roleHandle", roleHandle = /** @class */ (function (_super) {
                __extends(roleHandle, _super);
                function roleHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.isPlayer = false;
                    _this.raelSpeed = 0;
                    _this.edge_w = 4.5;
                    _this.edge_h = 5;
                    _this.currSpeed = configMgr_9.configMgr.roleBspeed;
                    _this.stop = true;
                    _this.lowMode = false; //低消耗模式
                    _this.lastObs = -1;
                    _this.ckCD = 1;
                    _this.ckDcount = 0;
                    _this.isCooling = false;
                    _this.lastLowMode = false;
                    /** 已经掉队 */
                    _this.isDropout = false;
                    _this.targetSpeed = 0; // 移动到目标的速度
                    _this.timeRemain = 0;
                    _this.lastRandomMission = null;
                    _this.befSlowSpeed = 0;
                    _this._isSlowing = false;
                    _this.slowS = 30;
                    //水平移动
                    _this.horizV = 0;
                    _this.eular = [0, 0, 0];
                    _this.edgeLength = Math.PI;
                    // private g = -9.8;
                    _this.isJumping = false;
                    _this.g = -4.8;
                    _this.v = 0;
                    _this.baseHeight = 0;
                    _this.jumped = true;
                    _this.riseTime = 0;
                    _this.vCost = 75; // 速度损耗
                    _this.energy = 0;
                    _this.stepSpeed = configMgr_9.configMgr.roleStepSpeed; //每阶增加的速度
                    // private readonly maxBoostNum = 3; //最高三阶速度
                    _this.boostNum = 0;
                    _this.boostSpeed = 0;
                    _this.addTime = 0;
                    return _this;
                }
                roleHandle_2 = roleHandle;
                Object.defineProperty(roleHandle.prototype, "stepNum", {
                    get: function () { return this._stepNum; },
                    enumerable: false,
                    configurable: true
                });
                ;
                roleHandle.prototype.onPlay = function () {
                    this.initstate();
                };
                //强制隐藏检查
                roleHandle.prototype.ckDropout = function (d) {
                    if (this.isPlayer)
                        return;
                    if (this.isCooling) {
                        this.ckDcount += d;
                        if (this.ckDcount < this.ckCD)
                            return;
                        this.lastLowMode = false; //保证 cd结束 可以再次 检测
                        this.ckDcount = 0;
                        this.isCooling = false;
                    }
                    //避免连续触发
                    if (!this.lastLowMode && this.lowMode && stageMgr_11.stageMgr.camCtr.gameObject.transform.localPosition.z > this.gameObject.transform.localRotate.z) {
                        var isBeyond = this.tryBeyond();
                        if (isBeyond) {
                            this.isCooling = true;
                        }
                        else {
                            this.doDropout();
                        }
                    }
                    this.lastLowMode = this.lowMode;
                    // if(roleHandle.headSteepNum == roleHandle.tailSteepNum)   return;
                    // if(this.stepNum < roleHandle.tailSteepNum ) {
                    // }
                };
                //尝试反超 加速
                roleHandle.prototype.tryBeyond = function () {
                    var result = false;
                    if (this.isPlayer || stageMgr_11.stageMgr.visibleRobotNum > configMgr_9.configMgr.robotReSurpassLimit)
                        return result;
                    var level = stageMgr_11.stageMgr.currentLevel;
                    if (Math.random() < level.beyondRate) {
                        var rand = Math.random();
                        if (rand < level.bootsRates[0]) {
                            // console.log('加速X1');
                            this.boost();
                        }
                        else if (rand < level.bootsRates[0] + level.bootsRates[1]) {
                            // console.log('加速X2');
                            this.boost();
                            this.boost();
                        }
                        else {
                            // console.log('加速X3');
                            this.boost();
                            this.boost();
                            this.boost();
                        }
                        console.warn("tryBeyond ".concat(rand, " "));
                        result = true;
                    }
                    return result;
                };
                //执行 掉队处理
                roleHandle.prototype.doDropout = function () {
                    console.warn("doDropout ".concat(this.gameObject.transform.insId.getInsID(), " "));
                    //
                    this.isDropout = true;
                };
                /** 关闭更新 */
                roleHandle.prototype.closeUpdate = function () {
                    if (!this.isPlayer)
                        this.gameObject.visible = false; //update 不再更新
                };
                roleHandle.prototype.update = function (delta) {
                    if (this.stop)
                        return;
                    this.H_MovingLimit();
                    this.ckAttenuation(delta);
                    this.run(delta);
                    this.ckSlowing(delta);
                    this.ckDropout(delta);
                    if (this.lowMode)
                        return;
                    this.ckStep();
                    this.jumping(delta);
                    if (this.isPlayer) {
                        this.rolling();
                    }
                    else {
                        this.moveToTarget(delta);
                    }
                };
                roleHandle.prototype.initstate = function () {
                    this.isJumping = this.isDropout = this.lastLowMode = this.lowMode = this._isSlowing = false;
                    this._stepNum = this.raelSpeed = this.boostNum = this.boostSpeed = this.addTime = 0;
                    // this.currSpeed = 40;
                    // this.currSpeed =  configMgr.roleBspeed;
                    var tran = this.gameObject.transform;
                    tran.gameObject.visible = true;
                    //tran.localTranslate.x = tran.localTranslate.z = 0;
                    this.v = 0;
                    this.g = 0;
                    this.horizV = 0;
                    roleHandle_2.headSteepNum = roleHandle_2.tailSteepNum = 0;
                    if (this.ball)
                        this.ball.localTranslate.y = 0;
                };
                //水平移动 缓动过滤 限制裁剪
                roleHandle.prototype.H_MovingLimit = function () {
                    if (Math.abs(this.horizV) > 0.1) {
                        this.horizV *= 0.65;
                        var x = this.gameObject.transform.localTranslate.x + this.horizV;
                        x = x < -this.edge_w ? -this.edge_w : x > this.edge_w ? this.edge_w : x; //限制裁剪
                        this.gameObject.transform.localTranslate.x = x;
                        //this.eular[2] += this.getRollingAngleFromDistance(this.horizV);
                        this.gameObject.transform.localTranslate = this.gameObject.transform.localTranslate;
                    }
                };
                roleHandle.prototype.setAim = function (pos, timeScale) {
                    if (timeScale === void 0) { timeScale = 1; }
                    pos = Math.max(-this.edge_w, Math.min(this.edge_w, pos)); // Limit
                    this.timeRemain = (0.15 - this.boostNum * 0.03) * timeScale;
                    var dis = pos - this.gameObject.transform.localTranslate.x;
                    // console.log(pos, dis, this.edge_w);
                    this.targetSpeed = dis / this.timeRemain;
                    if (this.lastRandomMission != null) {
                        clearTimeout(this.lastRandomMission);
                        this.lastRandomMission == null;
                    }
                    // this.lastRandomMission = setTimeout(() => this.randomMission(), 1000 + Math.random() * 1000);
                };
                roleHandle.prototype.moveToTarget = function (delta) {
                    if (this.timeRemain > 0) {
                        var x = Math.max(-this.edge_w, Math.min(this.edge_w, this.gameObject.transform.localTranslate.x + this.targetSpeed * delta));
                        this.gameObject.transform.localTranslate.x = x;
                        this.gameObject.transform.localTranslate = this.gameObject.transform.localTranslate;
                        this.timeRemain -= delta;
                    }
                };
                roleHandle.prototype.randomMission = function () {
                    this.setAim(this.gameObject.transform.localTranslate.x + (Math.random() * 3 - 1.5), 3);
                };
                /** 减速 到停止*/
                roleHandle.prototype.doSlowing = function () {
                    if (this._isSlowing)
                        return;
                    var round = (1 - this.eular[0] / 360 % 1) + 3; // 需要旋转的圈数
                    var dis = round * Math.PI / 0.16; // 行走的位移
                    this.boostSpeed = 0;
                    this.slowS = this.currSpeed / (dis * 2 / this.currSpeed); // 减速的加速度
                    this._isSlowing = true;
                    this.befSlowSpeed = this.currSpeed;
                };
                Object.defineProperty(roleHandle.prototype, "isSlowing", {
                    get: function () {
                        return this._isSlowing;
                    },
                    enumerable: false,
                    configurable: true
                });
                /** 减速恢复到正常 */
                roleHandle.prototype.slowReNormal = function () {
                    if (!this._isSlowing)
                        return;
                    this._isSlowing = false;
                    this.currSpeed = this.befSlowSpeed;
                };
                //减速 动作更新
                roleHandle.prototype.ckSlowing = function (delta) {
                    if (this._isSlowing) {
                        if (this.currSpeed < 0) {
                            this.stop = true;
                            // this._isSlowing = false;
                            this.slowReNormal();
                            if (this.onSlowEnd) //结束回调
                                this.onSlowEnd();
                            // this.currSpeed = configMgr.roleBspeed;
                            // stageMgr.gameOverConsole();
                            return;
                        }
                        this.currSpeed -= this.slowS * delta;
                    }
                };
                /** 检查 步阶的变化 ，一小条路面为一步 */
                roleHandle.prototype.ckStep = function () {
                    var lpos = this.gameObject.transform.localTranslate;
                    var t = (this._stepNum + 1) * this.edge_h;
                    if (lpos.z < t)
                        return;
                    this._stepNum = Math.floor(lpos.z / this.edge_h);
                    if (this.onStepCg) {
                        this.onStepCg(this._stepNum);
                    }
                    //console.error(`---- : ${this._stepNum}`);
                };
                roleHandle.prototype.horizMove = function (xLen) {
                    if (this.stop)
                        return;
                    this.horizV += xLen * 0.45;
                };
                /** 行走奔跑 */
                roleHandle.prototype.run = function (delta) {
                    var boostSp = this.boostSpeed * this.stepSpeed;
                    // let t = Math.floor(this.gameObject.transform.localTranslate.z/configMgr.speedAddDistance);
                    // let baseSp = this.currSpeed + this.currSpeed * configMgr.speedAddRate * t;  //加上每x米增益速度
                    var baseSp = this.currSpeed;
                    if (this.isPlayer) { //玩家自己的最大速度限制
                        // baseSp = baseSp > configMgr.playerMaxSpeed ? configMgr.playerMaxSpeed : baseSp ;  //增益限制
                    }
                    this.raelSpeed = baseSp + boostSp;
                    delta = delta > GameMgr_31.GameMgr.limitDtime ? GameMgr_31.GameMgr.limitDtime : delta; //限制最低 计算delta time
                    var len = this.raelSpeed * delta;
                    this.gameObject.transform.localTranslate.z += len;
                    this.eular[0] += this.getRollingAngleFromDistance(len * 0.16);
                };
                /** 基础的行走 */
                roleHandle.prototype.baseRun = function (delta) {
                    delta = delta > GameMgr_31.GameMgr.limitDtime ? GameMgr_31.GameMgr.limitDtime : delta; //限制最低 计算delta time
                    var len = this.currSpeed * delta;
                    this.gameObject.transform.localTranslate.z += len;
                };
                //滚动 更新
                roleHandle.prototype.rolling = function () {
                    m4m.math.quatFromEulerAngles(this.eular[0], this.eular[1], this.eular[2], this.realBall.localRotate);
                    this.realBall.localRotate = this.realBall.localRotate;
                };
                roleHandle.prototype.getRollingAngleFromDistance = function (dis) {
                    return dis / this.edgeLength * 360;
                };
                roleHandle.prototype.jump = function () {
                    if (!this.ball)
                        return;
                    if (this.isJumping == true)
                        return; // 防止多次触发
                    this.isJumping = true;
                    this.g = -980;
                    this.riseTime = 2.2 / this.raelSpeed;
                    this.v = this.raelSpeed;
                    this.energy = this.v * 2;
                    // console.log(`jump aa `);
                };
                //跳跃检查
                roleHandle.prototype.jumping = function (delta) {
                    if (!this.isJumping || !this.ball)
                        return;
                    // delta = delta > GameMgr.limitDtime ? GameMgr.limitDtime : delta; //限制最低 计算delta time
                    var tran = this.ball;
                    this.riseTime -= delta;
                    var height = tran.localTranslate.y += this.v * delta;
                    if (this.riseTime < 0) { // 自由落体
                        this.v += this.g * delta;
                    }
                    if (height < 0) { // 触地
                        if (this.isPlayer) {
                            roleHandle_2.funVibrateShort(); //震动
                        }
                        tran.localTranslate.y = 0;
                        // this.v = -this.v - this.vCost;
                        this.energy -= this.vCost;
                        this.v = this.energy / 2;
                        if (this.v < 0) {
                            this.v = 0;
                            this.isJumping = false;
                        }
                    }
                    // this.v += this.g * delta;
                    // //let tran = this.gameObject.transform;
                    // let cur = tran.localTranslate.y + this.v * delta;
                    // if(cur > this.baseHeight) {
                    //     tran.localTranslate.y += this.v;
                    // } else {
                    //     this.v = -this.v * 0.4;
                    //     if(this.isPlayer && roleHandle.funVibrateShort){
                    //         roleHandle.funVibrateShort();//震动
                    //     }
                    //     if(this.v < 0.1) {
                    //         this.v = 0;
                    //         this.g = 0;
                    //         // tran.localTranslate.y = 0;
                    //         // this.jumped = true;
                    //     }
                    // }
                    //     // tran.localTranslate.y = this.baseHeight;
                    tran.localTranslate = tran.localTranslate;
                };
                // private jumping(delta:number){
                //     if(this.jumped || !this.ball) return;
                //     delta = delta > GameMgr.limitDtime ? GameMgr.limitDtime : delta; //限制最低 计算delta time
                //     this.v += this.g * delta;
                //     //let tran = this.gameObject.transform;
                //     let tran = this.ball;
                //     let cur = tran.localTranslate.y + this.v * delta;
                //     if(cur > this.baseHeight) {
                //         tran.localTranslate.y += this.v;
                //     } else {
                //         this.v = -this.v * 0.4;
                //         if(this.isPlayer && roleHandle.funVibrateShort){
                //             roleHandle.funVibrateShort();//震动
                //         }
                //         if(this.v < 0.1) {
                //             this.v = 0;
                //             this.g = 0;
                //             tran.localTranslate.y = 0;
                //             this.jumped = true;
                //         }
                //         tran.localTranslate.y = this.baseHeight;
                //     }
                //     tran.markDirty();
                // }
                //died boom
                roleHandle.prototype.boom = function () {
                };
                roleHandle.prototype.boost = function () {
                    this.addTime = 0;
                    if (this.boostNum >= configMgr_9.configMgr.addMaxStepNum)
                        return;
                    this.boostNum++;
                    this.boostSpeed = this.boostNum;
                    if (this.onBoostLevelCg)
                        this.onBoostLevelCg(this.boostNum);
                };
                // private readonly attenTime = 2; // 2/s
                //加速的衰减 检查
                roleHandle.prototype.ckAttenuation = function (delta) {
                    delta = delta > GameMgr_31.GameMgr.limitDtime ? GameMgr_31.GameMgr.limitDtime : delta; //限制最低 计算delta time
                    if (this.boostSpeed > this.boostNum) {
                        this.boostSpeed -= delta;
                        this.boostSpeed = this.boostSpeed < this.boostNum ? this.boostNum : this.boostSpeed;
                    }
                    if (this.boostNum < 1)
                        return;
                    this.addTime += delta;
                    if (this.addTime >= configMgr_9.configMgr.stepTimeLength) {
                        this.boostNum--;
                        this.addTime = 0;
                        if (this.onBoostLevelCg)
                            this.onBoostLevelCg(this.boostNum);
                    }
                };
                roleHandle.prototype.remove = function () {
                };
                var roleHandle_2;
                roleHandle.headSteepNum = 0;
                roleHandle.tailSteepNum = 0;
                roleHandle = roleHandle_2 = __decorate([
                    m4m.reflect.nodeComponent
                ], roleHandle);
                return roleHandle;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/Trailer", [], function (exports_117, context_117) {
    "use strict";
    var Trailer;
    var __moduleName = context_117 && context_117.id;
    return {
        setters: [],
        execute: function () {
            exports_117("Trailer", Trailer = /** @class */ (function (_super) {
                __extends(Trailer, _super);
                function Trailer() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.texName = "t.png";
                    _this.rePlay = false;
                    _this.isOnplay = false;
                    return _this;
                }
                Trailer_1 = Trailer;
                Trailer.prototype.onPlay = function () {
                    if (!this.mat) {
                        console.error("Trailer comp init error mat is null");
                        return;
                    }
                    var trailrender = this.gameObject.addComponent("trailRender");
                    var app = m4m.framework.sceneMgr.app;
                    trailrender.setspeed(0.56);
                    trailrender.setWidth(0.3);
                    trailrender.material = this.mat;
                    trailrender.lookAtCamera = false;
                    trailrender.extenedOneSide = false;
                    trailrender.color = new m4m.math.color(1, 1, 1, 1);
                    trailrender.isAlphaGradual = true;
                    this.isOnplay = true;
                    // this.Cupdate = trailrender.update;
                    // trailrender.update = (d:number)=>{ };
                    // if(Trailer.LateUpdateMgr && this.Cupdate){
                    //     Trailer.LateUpdateMgr.Add(this.Cupdate,trailrender);
                    // }
                    this.trailrender = trailrender;
                };
                Trailer.prototype.play = function () {
                    this.rePlay = true;
                };
                Trailer.prototype.stop = function () {
                    if (this.trailrender)
                        this.trailrender.stop();
                };
                Trailer.prototype.update = function (delta) {
                    if (this.rePlay && this.isOnplay) {
                        this.trailrender.play();
                        this.rePlay = false;
                    }
                };
                Trailer.prototype.remove = function () {
                    //
                    if (Trailer_1.LateUpdateMgr && this.Cupdate) {
                        Trailer_1.LateUpdateMgr.Remove(this.Cupdate, this.trailrender);
                    }
                };
                var Trailer_1;
                Trailer = Trailer_1 = __decorate([
                    m4m.reflect.nodeComponent
                ], Trailer);
                return Trailer;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("role/role", ["role/roleHandle", "GameMgr", "Ress", "uiMgr", "MatMgr", "stageMgr", "skinMgr", "role/playerMgr", "lab/Trailer", "Tool/wxTool", "Tool/joinTool", "Tool/commTool", "Manager/PhotoSceneManager", "audio/AudioMgr"], function (exports_118, context_118) {
    "use strict";
    var roleHandle_3, GameMgr_32, Ress_12, uiMgr_5, MatMgr_9, stageMgr_12, skinMgr_7, playerMgr_8, Trailer_2, wxTool_12, joinTool_11, commTool_11, PhotoSceneManager_2, AudioMgr_13, help_v2, help_v3, help_v3_1, help_v4, help_v4_1, help_v4_2, help_mtx, role;
    var __moduleName = context_118 && context_118.id;
    return {
        setters: [
            function (roleHandle_3_1) {
                roleHandle_3 = roleHandle_3_1;
            },
            function (GameMgr_32_1) {
                GameMgr_32 = GameMgr_32_1;
            },
            function (Ress_12_1) {
                Ress_12 = Ress_12_1;
            },
            function (uiMgr_5_1) {
                uiMgr_5 = uiMgr_5_1;
            },
            function (MatMgr_9_1) {
                MatMgr_9 = MatMgr_9_1;
            },
            function (stageMgr_12_1) {
                stageMgr_12 = stageMgr_12_1;
            },
            function (skinMgr_7_1) {
                skinMgr_7 = skinMgr_7_1;
            },
            function (playerMgr_8_1) {
                playerMgr_8 = playerMgr_8_1;
            },
            function (Trailer_2_1) {
                Trailer_2 = Trailer_2_1;
            },
            function (wxTool_12_1) {
                wxTool_12 = wxTool_12_1;
            },
            function (joinTool_11_1) {
                joinTool_11 = joinTool_11_1;
            },
            function (commTool_11_1) {
                commTool_11 = commTool_11_1;
            },
            function (PhotoSceneManager_2_1) {
                PhotoSceneManager_2 = PhotoSceneManager_2_1;
            },
            function (AudioMgr_13_1) {
                AudioMgr_13 = AudioMgr_13_1;
            }
        ],
        execute: function () {
            help_v2 = new m4m.math.vector2();
            help_v3 = new m4m.math.vector3();
            help_v3_1 = new m4m.math.vector3();
            help_v4 = new m4m.math.vector4();
            help_v4_1 = new m4m.math.vector4();
            help_v4_2 = new m4m.math.vector4();
            help_mtx = new m4m.math.matrix();
            exports_118("role", role = /** @class */ (function () {
                function role(mat, data) {
                    this.godMode = false;
                    this.lastBoost_z = -1;
                    this.lastDiamond_z = -1;
                    // nameLable : m4m.framework.label;
                    this._rankNum = -1; //当前名次
                    this.lastRank = -1;
                    this.lastCgSkinId = 0; //最后一次 请求换皮肤的id( 避免贴图加载 异步问题 导致显示错误)
                    this.sensor = null;
                    this.AIisEnabled = false;
                    this.iconMap = new Map();
                    this.lastIconUrl = "";
                    this.testOnce = true;
                    this.ckLimitDis = 45; //限制前方出现头像的距离
                    this.offsetHead = 1.2; //icon 放置点 y 方向 的偏移
                    this.lastFollowed = false; //上一次是被跟踪的 
                    //计算被蜿蜒的世界坐标
                    this.DIST = 20; //常数和shader 中对应
                    this.lastSV = true; //显示状态
                    if (!roleHandle_3.roleHandle.funVibrateShort) {
                        roleHandle_3.roleHandle.funVibrateShort = this.onThouchGround.bind(this);
                    }
                    this.mat = mat;
                    // Create ball
                    var ball = new m4m.framework.transform(); // 用来放置 shadow & trailer
                    var ballInstance = Ress_12.Ress.character.clone(); // 用来被渲染以及旋转
                    // let ballInstance = new m4m.framework.transform();  // 用来被渲染以及旋转
                    // ballInstance.localScale.x = ballInstance.localScale.y = ballInstance.localScale.z = 0.5;
                    // let mf = ballInstance.gameObject.addComponent('meshFilter') as m4m.framework.meshFilter;
                    // mf.mesh = GameMgr.assetMgr.getDefaultMesh("sphere");
                    var ballMeshRenderer = ballInstance.gameObject.getComponent('meshRenderer');
                    this.mr = ballMeshRenderer;
                    ballMeshRenderer.materials[0] = this.mat;
                    var collider = ball.gameObject.addComponent('spherecollider');
                    ball.addChild(ballInstance);
                    this.instance = ballInstance;
                    this.roleD = data;
                    //root
                    var rootTran = new m4m.framework.transform();
                    this.root = rootTran.gameObject.addComponent(roleHandle_3.roleHandle.name);
                    m4m.math.vec3Clone(m4m.math.pool.vector3_zero, this.root.gameObject.transform.localTranslate);
                    //ball
                    this.ball = ball;
                    rootTran.name = "role";
                    rootTran.addChild(this.ball);
                    this.root.ball = ball;
                    this.root.realBall = ballInstance; // which will be rotate
                    //add taril
                    var tartran = Ress_12.Ress.trail.clone();
                    tartran.localTranslate.y -= 0.4;
                    this.taril = tartran.gameObject.getComponent(Trailer_2.Trailer.name);
                    this.taril.play();
                    this.taril.mat = MatMgr_9.MatMgr.Trail_mat;
                    this.ball.addChild(tartran);
                    //add shadow
                    var stran = new m4m.framework.transform();
                    stran.name = "shadow_plane";
                    stran.localTranslate.y = -0.45;
                    stran.localScale.x = stran.localScale.z = 0.13;
                    var smf = stran.gameObject.addComponent("meshFilter");
                    smf.mesh = GameMgr_32.GameMgr.assetMgr.getDefaultMesh("plane");
                    var smr = stran.gameObject.addComponent("meshRenderer");
                    smr.materials[0] = MatMgr_9.MatMgr.shadow_mat;
                    this.ball.addChild(stran);
                    this.shadow = stran;
                    //set collider
                    // let c = this.ball.gameObject.getComponent("boxcollider") as m4m.framework.boxcollider;
                    // let len = 4;
                    // c.center = new m4m.math.vector3(0, 0, len - 1);
                    // c.size = new m4m.math.vector3(1, 1, len);
                    var c = this.ball.gameObject.getComponent("spherecollider");
                    var len = 2;
                    c.center = new m4m.math.vector3(0, 0, len);
                    // c.colliderVisible = true;
                    //UI headBoardHandle
                    // this.headBoard = uiMgr.genHeadBoardOne();
                    // this.headBoard.Obj3d = this.ball;
                    //canvasRander
                    var t = new m4m.framework.transform();
                    var c2d = t.gameObject.addComponent("canvasRenderer");
                    t.localTranslate.y = 1;
                    t.localTranslate.x = 0;
                    this.ball.addChild(t);
                    var opt = m4m.framework.layoutOption;
                    //img
                    // let ttt =  new m4m.framework.transform2D();
                    // let img = ttt.addComponent( "rawImage2D") as  m4m.framework.rawImage2D;
                    // ttt.layoutState = opt.H_CENTER | opt.V_CENTER;
                    // img.image = GameMgr.assetMgr.getDefaultTexture("white");
                    // c2d.addChild(ttt);
                    // ttt.width =100;
                    // ttt.height =  100;
                    //lable
                    var t2D = new m4m.framework.transform2D();
                    t2D.layoutState = opt.H_CENTER | opt.V_CENTER;
                    t2D.setLayoutValue(opt.V_CENTER, 30);
                    // t2D.setLayoutValue(opt.V_CENTER,-80);
                    var lab = t2D.addComponent("label");
                    t2D.name = "role haed info ".concat(role.tempRoleID++);
                    //GD3DCreateTool.mountDefFont(lab, assetMgr);
                    lab.horizontalType = m4m.framework.HorizontalType.Center;
                    lab.fontsize = 150;
                    lab.text = "100th";
                    lab.horizontalOverflow = true;
                    // lab.color = new m4m.math.color(0.2, 0.2, 0.2, 1);
                    lab.color = new m4m.math.color(0, 0, 0, 1);
                    lab.color2 = new m4m.math.color(0, 0, 0, 0.5);
                    t2D.width = 400;
                    t2D.height = 30;
                    c2d.addChild(t2D);
                    this.rankingLable = lab;
                    MatMgr_9.MatMgr.setHudMat(lab);
                    //FX
                    this.initialAI();
                    var tarns = PhotoSceneManager_2.PhotoSceneManager.createPrimitive();
                    stageMgr_12.stageMgr.stageRoot.addChild(rootTran);
                    stageMgr_12.stageMgr.stageRoot.addChild(tarns);
                    // GameMgr.app.getScene().addChild(rootTran);
                }
                Object.defineProperty(role.prototype, "rankNum", {
                    /** 当前名次 */
                    get: function () { return this._rankNum; },
                    enumerable: false,
                    configurable: true
                });
                ;
                //接触地面
                role.prototype.onThouchGround = function () {
                    wxTool_12.wxTool.vibrateShort();
                    AudioMgr_13.AudioMgr.Play("touch.mp3");
                };
                /** 设置 排名名次 */
                role.prototype.setRank = function (rank) {
                    this._rankNum = rank;
                    if (!this.ball.gameObject.visible || this.lastRank == rank)
                        return;
                    this.lastRank = rank;
                    this.rankingLable.text = "".concat(rank);
                };
                role.prototype.changeSkin = function (skinId) {
                    var _this = this;
                    this.lastCgSkinId = skinId;
                    // let info = skinMgr.getSkinInfo(skinId);
                    var info = skinMgr_7.skinMgr.skins_map.get(skinId);
                    if (!info)
                        return;
                    if (!info.skinSticker || info.skinSticker == "") {
                        //没贴图的颜色
                        this.mr.materials[0] = this.mat;
                        this.mat.setTexture('_MainTex', null);
                    }
                    else {
                        //有贴图
                        if (info.isPBR) {
                            skinMgr_7.skinMgr.getPBRTexture(skinId).then(function (tex) {
                                var base = tex[0], normal = tex[1];
                                if (skinId != _this.lastCgSkinId)
                                    return;
                                _this.mr.materials[0] = MatMgr_9.MatMgr.Role_PBRmat;
                                MatMgr_9.MatMgr.Role_PBRmat.setTexture('_MainTex', base);
                                MatMgr_9.MatMgr.Role_PBRmat.setTexture('_NormalTex', normal);
                                MatMgr_9.MatMgr.Role_PBRmat.setTexture('brdfLUT', Ress_12.Ress.brdfLUT);
                                skinMgr_7.skinMgr.getCubetex().then(function (cube) {
                                    MatMgr_9.MatMgr.Role_PBRmat.setCubeTexture('envTex', cube);
                                });
                            });
                        }
                        else {
                            skinMgr_7.skinMgr.getSkinTexture(skinId).then(function (tex) {
                                if (skinId != _this.lastCgSkinId)
                                    return;
                                _this.mr.materials[0] = _this.mat;
                                _this.mat.setTexture('_MainTex', tex);
                            });
                        }
                    }
                };
                role.prototype.initState = function () {
                    this.lastFollowed = false;
                    this._rankNum = -1;
                    this.godMode = false;
                    if (this.boomFx) {
                        this.boomFx.stop();
                        this.boomFx.gameObject.visible = false;
                    }
                    this.setVisible(true);
                    this.root.initstate();
                    //角色名显示
                    // if(!this.root.isPlayer && this.roleD ){
                    //     if(this.roleD.name.length > 4){
                    //         this.nameLable.text = `${this.roleD.name.substring(0,4)}...`;
                    //     }else{
                    //         this.nameLable.text = `${this.roleD.name}`;
                    //     }
                    // }
                };
                role.prototype.die = function () {
                    if (!this.boomFx && Ress_12.Ress.fx_die_qiu) {
                        var tran = Ress_12.Ress.fx_die_qiu.getCloneTrans();
                        MatMgr_9.MatMgr.setFxMat(tran);
                        tran.localTranslate.y = -0.3;
                        var f14 = tran.gameObject.getComponent("f14EffectSystem");
                        this.boomFx = f14;
                        this.root.gameObject.transform.addChild(tran);
                        this.boomFx.gameObject.visible = false;
                    }
                    if (this.lastSV && this.boomFx) {
                        this.boomFx.gameObject.visible = true;
                        this.boomFx.play(this.root.closeUpdate.bind(this.root));
                    }
                    else {
                        this.root.closeUpdate();
                    }
                    //头像跟随 关闭
                    if (this.lastFollowed) {
                        stageMgr_12.stageMgr.closeHeadFollow();
                    }
                    this.setVisible(false);
                    this.toStop();
                };
                role.prototype.recover = function () {
                    var _this = this;
                    stageMgr_12.stageMgr.backTrackPlay();
                    this.relive();
                    setTimeout(function () {
                        _this.root.stop = false;
                    }, (stageMgr_12.stageMgr.tracingTime + stageMgr_12.stageMgr.ballEntrytimer) * 1000);
                };
                /** 复活 */
                role.prototype.relive = function () {
                    var _this = this;
                    GameMgr_32.GameMgr.raceStage = 1;
                    if (this.boomFx) {
                        this.boomFx.stop();
                        this.boomFx.gameObject.visible = false;
                    }
                    if (!this.godFx && Ress_12.Ress.fx_wd) { //复活特效 initialization
                        var tran = Ress_12.Ress.fx_wd.getCloneTrans();
                        MatMgr_9.MatMgr.setFxMat(tran);
                        var s = 0.5;
                        tran.localScale = new m4m.math.vector3(s, s, s);
                        var f14 = tran.gameObject.getComponent("f14EffectSystem");
                        this.godFx = f14;
                        this.ball.gameObject.transform.addChild(tran);
                    }
                    if (this.godFx) {
                        this.godFx.gameObject.visible = true;
                        this.godFx.play();
                    }
                    this.setVisible(true);
                    this.godMode = true;
                    // this.root.stop = false;
                    this.taril.play();
                    setTimeout(function () {
                        if (_this.godFx) {
                            _this.godFx.stop();
                            _this.godFx.gameObject.visible = false;
                        }
                        _this.godMode = false;
                    }, 4000);
                };
                /** 减速到0 */
                role.prototype.toSlowdown = function () {
                    this.root.doSlowing();
                };
                /** 减速恢复正常 */
                role.prototype.slowReNormal = function () {
                    this.root.slowReNormal();
                };
                role.prototype.toStop = function () {
                    this.root.stop = true;
                    this.taril.stop();
                };
                role.prototype.initialAI = function () {
                    this.AIisEnabled = true;
                    var trans = new m4m.framework.transform();
                    // trans.localTranslate.z = 5;
                    trans.localTranslate.z = 15;
                    // trans.localTranslate.y = -2;
                    // Create sensor instance
                    // let sensor = trans.gameObject.addComponent("boxcollider") as m4m.framework.boxcollider;
                    // sensor.center = new m4m.math.vector3(0, 0, 0);
                    // sensor.size = new m4m.math.vector3(1.2, 6, 10);
                    var sensor = trans.gameObject.addComponent("spherecollider");
                    sensor.center = new m4m.math.vector3(0, 0, 0);
                    sensor.radius = 0.6;
                    // sensor.colliderVisible = true;
                    // sensor.colliderVisible = true;
                    this.sensor = trans;
                    this.root.gameObject.transform.addChild(trans);
                };
                //好友头像调整位置
                role.prototype.adjustHeadIconPos = function (x, y) {
                    //头像跟随 icon
                    // let iTrans = uiMgr.scIconImg.transform;
                    var iTrans = uiMgr_5.uiMgr.headIcon;
                    iTrans.localTranslate.x = x;
                    iTrans.localTranslate.y = y;
                    iTrans.markDirty();
                };
                //打开 头像 跟随显示
                role.prototype.openHeadFollow = function () {
                    //刷新一次 sc （提前保证 需要的头像已加载 ，进游戏时、关卡变化 、好友排行榜数据变化 加载）
                    var insId = this.root.gameObject.transform.insId.getInsID();
                    if (GameMgr_32.GameMgr.raceStage == 1) { //游戏中才绘制子域头像 
                        joinTool_11.joinTool.openFollowHead(insId);
                    }
                    //othericon 显示
                    uiMgr_5.uiMgr.otherIconImg.transform.visible = true;
                    //加载路人头像
                    this.loadPasserbyIcon();
                };
                //加载路人头像
                role.prototype.loadPasserbyIcon = function () {
                    var _this = this;
                    this.lastIconUrl = "";
                    uiMgr_5.uiMgr.otherIconImg.image = null;
                    if (!this.roleD || !this.roleD.iconUrl || this.roleD.iconUrl == "") {
                        return;
                    }
                    var url = this.roleD.iconUrl;
                    this.lastIconUrl = url;
                    if (this.iconMap.has(url)) {
                        var img = this.iconMap.get(url);
                        uiMgr_5.uiMgr.otherIconImg.image = img;
                    }
                    else {
                        commTool_11.commTool.ImgByLoad(url, function (tex) {
                            _this.iconMap.set(url, tex);
                            if (url == _this.lastIconUrl) {
                                uiMgr_5.uiMgr.otherIconImg.image = tex;
                            }
                        });
                    }
                };
                /** 好友头像更随*/
                role.prototype.ckHeadIconFollow = function (delta) {
                    if (!role.isOpenFollow)
                        return;
                    var b = this.ckCanFollow();
                    var isOpen = false;
                    if (this.lastFollowed && !b) {
                        //执行关闭 跟随
                        stageMgr_12.stageMgr.closeHeadFollow();
                    }
                    else if (!this.lastFollowed && b) {
                        //开启
                        isOpen = true;
                    }
                    this.lastFollowed = b;
                    if (!b)
                        return;
                    var cPos = this.root.gameObject.transform.localTranslate;
                    // let pos = 
                    var pos = help_v3;
                    this.calcWPosToDistort(cPos, pos);
                    pos.y += this.offsetHead;
                    var sen = GameMgr_32.GameMgr.app.getScene();
                    //装换到屏幕坐标
                    sen.mainCamera.calcScreenPosFromWorldPos(GameMgr_32.GameMgr.app, pos, help_v2);
                    //转换到canvas 坐标
                    uiMgr_5.uiMgr.overlay.calScreenPosToCanvasPos(help_v2, help_v2);
                    if (isOpen) {
                        this.openHeadFollow();
                    }
                    this.adjustHeadIconPos(help_v2.x, help_v2.y);
                };
                /** 检查能否跟随 */
                role.prototype.ckCanFollow = function () {
                    // if (GameMgr.raceStage != 1 || this.root.isPlayer || this._rankNum == -1) return false;
                    if (this.root.isPlayer || this._rankNum == -1)
                        return false;
                    var cnum = playerMgr_8.playerMgr.getRole().rankNum - this._rankNum;
                    if (cnum != 1)
                        return false;
                    //dist test
                    var pPos = playerMgr_8.playerMgr.getRole().root.gameObject.transform.localTranslate;
                    var cPos = this.root.gameObject.transform.localTranslate;
                    if (pPos.z > cPos.z || (cPos.z - pPos.z) > this.ckLimitDis)
                        return false;
                    return true;
                };
                role.prototype.calcWPosToDistort = function (currPos, out) {
                    var sen = GameMgr_32.GameMgr.app.getScene();
                    var rct = sen.renderContext[0];
                    var mtxVP = rct.matrixViewProject;
                    var mvp_Pos = help_v4;
                    mvp_Pos.x = currPos.x;
                    mvp_Pos.y = currPos.y;
                    mvp_Pos.z = currPos.z;
                    mvp_Pos.w = 1;
                    //m to mvp 
                    m4m.math.matrixTransformVector4(mvp_Pos, mtxVP, mvp_Pos);
                    var zOff = mvp_Pos.z / this.DIST;
                    var addv4 = help_v4_1;
                    m4m.math.vec4ScaleByNum(MatMgr_9.MatMgr.cacheDistortion, zOff * zOff, addv4);
                    m4m.math.vec4Add(mvp_Pos, addv4, mvp_Pos);
                    var inv_mtxVP = help_mtx;
                    m4m.math.matrixInverse(mtxVP, inv_mtxVP);
                    // mvp to m
                    var temp = help_v4_2;
                    m4m.math.matrixTransformVector4(mvp_Pos, inv_mtxVP, temp);
                    out.x = temp.x;
                    out.y = temp.y;
                    out.z = temp.z;
                };
                /** 设置渲染显示 */
                role.prototype.setVisible = function (isVisible) {
                    if (isVisible == this.lastSV)
                        return;
                    this.lastSV = isVisible;
                    if (isVisible) {
                        this.ball.gameObject.visible = this.instance.gameObject.visible = this.rankingLable.transform.visible = this.sensor.gameObject.visible = true;
                        this.taril.play();
                    }
                    else {
                        this.ball.gameObject.visible = this.instance.gameObject.visible = this.rankingLable.transform.visible = this.sensor.gameObject.visible = false;
                        this.taril.stop();
                    }
                    if (this.root.isPlayer) {
                        this.rankingLable.transform.visible = false;
                    }
                };
                role.tempRoleID = 0;
                role.isOpenFollow = true; //头像跟随功能开关
                return role;
            }()));
        }
    };
});
System.register("Scripts/windHandle", [], function (exports_119, context_119) {
    "use strict";
    var windHandle;
    var __moduleName = context_119 && context_119.id;
    return {
        setters: [],
        execute: function () {
            exports_119("windHandle", windHandle = /** @class */ (function (_super) {
                __extends(windHandle, _super);
                function windHandle() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.runingArr = [];
                    _this.stop = true;
                    _this.boostlevel = 0;
                    _this.playlist = [];
                    _this.zLen = 100;
                    _this.tag_x = "tag_x";
                    _this.tag_y = "tag_y";
                    _this.clearList = [];
                    _this.speed = 80;
                    _this.gCount = 0;
                    _this.gSpeed = 10;
                    return _this;
                }
                windHandle_1 = windHandle;
                windHandle.prototype.onPlay = function () {
                    //windHandle.scene = this.gameObject.transform.scene;
                };
                //安排一个
                windHandle.prototype.setOne = function () {
                    var t = windHandle_1.new_one();
                    t[this.tag_x] = Math.random();
                    t[this.tag_y] = Math.random();
                    var tran = t.gameObject.transform;
                    var rtran = this.gameObject.transform;
                    tran.localTranslate.y = 3 + Math.random() * 2;
                    tran.localTranslate.z = rtran.localTranslate.z + this.zLen + Math.random() * 30;
                    var r_x = Math.random() * 8;
                    tran.localTranslate.x = Math.random() > 0.5 ? r_x : r_x * -1;
                    tran.localTranslate = tran.localTranslate;
                    this.playlist.push(t);
                    this.runingArr.push(t);
                    if (!tran.parent) {
                        windHandle_1.scene.addChild(tran);
                    }
                    windHandle_1.scene.addChild(tran);
                };
                windHandle.prototype.update = function (delta) {
                    if (this.stop)
                        return;
                    this.ckPlay();
                    this.ckGenline(delta);
                    this.moveAndDel(delta);
                };
                windHandle.prototype.moveAndDel = function (delta) {
                    var _this = this;
                    this.runingArr.forEach(function (item) {
                        //console.error(` item : ${item.gameObject.transform.localTranslate.z} `);
                        var tran = item.gameObject.transform;
                        var rtran = _this.gameObject.transform;
                        tran.localTranslate.z -= delta * _this.speed;
                        var dis = Math.abs(rtran.localTranslate.z - tran.localTranslate.z);
                        var rete = (_this.zLen - dis) / _this.zLen;
                        rete = rete * rete;
                        //y dir
                        var abs_x = Math.abs(tran.localTranslate.x);
                        tran.localTranslate.y += delta * rete * (-abs_x * 6 + 50 + item[_this.tag_y] * 10);
                        tran.localTranslate.y = m4m.math.floatClamp(tran.localTranslate.y, 2, 100);
                        tran.localTranslate = tran.localTranslate;
                        if (tran.localTranslate.z < rtran.localTranslate.z - 16) {
                            _this.clearList.push(item);
                        }
                    });
                    //delete
                    this.clearList.forEach(function (item) {
                        windHandle_1.delete_one(item);
                        //item.stop();
                        var idx = _this.runingArr.indexOf(item);
                        if (idx != -1) {
                            _this.runingArr.splice(idx, 1);
                        }
                    });
                    this.clearList.length = 0;
                };
                windHandle.prototype.ckPlay = function () {
                    this.playlist.forEach(function (item) {
                        if (item) {
                            item.play();
                        }
                    });
                    this.playlist.length = 0;
                };
                windHandle.prototype.ckGenline = function (delta) {
                    if (this.boostlevel <= 0)
                        return;
                    var s = delta * this.gSpeed;
                    this.gCount += s * this.boostlevel / 3;
                    if (this.gCount >= 1) {
                        this.gCount = 0;
                        this.setOne();
                    }
                };
                windHandle.prototype.remove = function () {
                };
                windHandle.genLineOne = function () {
                    var tran = new m4m.framework.transform();
                    var trailrender = tran.gameObject.addComponent("trailRender");
                    if (!this.scene)
                        this.scene = m4m.framework.sceneMgr.scene;
                    var app = this.scene.app;
                    // let tex = app.getAssetMgr().getAssetByName('t.png') as m4m.framework.texture;
                    // this.mat.setTexture("_Main_Tex", tex);
                    m4m.math.quatFromEulerAngles(90, 90, 0, tran.localRotate);
                    trailrender.setspeed(0.26);
                    trailrender.setWidth(0.2);
                    trailrender.material = this.mat;
                    trailrender.lookAtCamera = false;
                    trailrender.extenedOneSide = false;
                    trailrender.color = new m4m.math.color(1, 1, 1, 0.4);
                    trailrender.isAlphaGradual = true;
                    ;
                    return trailrender;
                };
                windHandle.new_one = function () {
                    if (this.poolArr.length < 1) {
                        return this.genLineOne();
                    }
                    else {
                        var temp = this.poolArr.pop();
                        return temp;
                    }
                };
                windHandle.delete_one = function (t) {
                    if (!t)
                        return;
                    if (t.gameObject.transform.parent) {
                        t.gameObject.transform.parent.removeChild(t.gameObject.transform);
                    }
                    t.stop();
                    this.poolArr.push(t);
                };
                var windHandle_1;
                windHandle.poolArr = [];
                windHandle = windHandle_1 = __decorate([
                    m4m.reflect.nodeComponent
                ], windHandle);
                return windHandle;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("role/playerMgr", ["Ress", "MatMgr", "GameMgr", "role/role", "configMgr", "role/roleData", "Inputer", "Scripts/windHandle", "ui/pages/inGamePage", "stageMgr", "themeMgr", "role/robotMgr", "ui/pages/continuePage", "ui/pages/prizePage", "lab/Trailer", "Tool/wxTool", "Scripts/HMoveHandle", "Tool/tdTool", "Tool/joinTool", "Tools/FrameMgr", "Tools/LateUpdateMgr", "Manager/GameArchiveManager", "audio/AudioMgr"], function (exports_120, context_120) {
    "use strict";
    var Ress_13, MatMgr_10, GameMgr_33, role_2, configMgr_10, roleData_2, Inputer_2, windHandle_2, inGamePage_7, stageMgr_13, themeMgr_7, robotMgr_3, continuePage_3, prizePage_3, Trailer_3, wxTool_13, HMoveHandle_5, tdTool_10, joinTool_12, FrameMgr_9, LateUpdateMgr_3, GameArchiveManager_5, AudioMgr_14, playerMgr;
    var __moduleName = context_120 && context_120.id;
    return {
        setters: [
            function (Ress_13_1) {
                Ress_13 = Ress_13_1;
            },
            function (MatMgr_10_1) {
                MatMgr_10 = MatMgr_10_1;
            },
            function (GameMgr_33_1) {
                GameMgr_33 = GameMgr_33_1;
            },
            function (role_2_1) {
                role_2 = role_2_1;
            },
            function (configMgr_10_1) {
                configMgr_10 = configMgr_10_1;
            },
            function (roleData_2_1) {
                roleData_2 = roleData_2_1;
            },
            function (Inputer_2_1) {
                Inputer_2 = Inputer_2_1;
            },
            function (windHandle_2_1) {
                windHandle_2 = windHandle_2_1;
            },
            function (inGamePage_7_1) {
                inGamePage_7 = inGamePage_7_1;
            },
            function (stageMgr_13_1) {
                stageMgr_13 = stageMgr_13_1;
            },
            function (themeMgr_7_1) {
                themeMgr_7 = themeMgr_7_1;
            },
            function (robotMgr_3_1) {
                robotMgr_3 = robotMgr_3_1;
            },
            function (continuePage_3_1) {
                continuePage_3 = continuePage_3_1;
            },
            function (prizePage_3_1) {
                prizePage_3 = prizePage_3_1;
            },
            function (Trailer_3_1) {
                Trailer_3 = Trailer_3_1;
            },
            function (wxTool_13_1) {
                wxTool_13 = wxTool_13_1;
            },
            function (HMoveHandle_5_1) {
                HMoveHandle_5 = HMoveHandle_5_1;
            },
            function (tdTool_10_1) {
                tdTool_10 = tdTool_10_1;
            },
            function (joinTool_12_1) {
                joinTool_12 = joinTool_12_1;
            },
            function (FrameMgr_9_1) {
                FrameMgr_9 = FrameMgr_9_1;
            },
            function (LateUpdateMgr_3_1) {
                LateUpdateMgr_3 = LateUpdateMgr_3_1;
            },
            function (GameArchiveManager_5_1) {
                GameArchiveManager_5 = GameArchiveManager_5_1;
            },
            function (AudioMgr_14_1) {
                AudioMgr_14 = AudioMgr_14_1;
            }
        ],
        execute: function () {
            exports_120("playerMgr", playerMgr = /** @class */ (function () {
                function playerMgr() {
                }
                Object.defineProperty(playerMgr, "RoleSpeed", {
                    //玩家速度
                    get: function () {
                        if (!this._role)
                            return 0;
                        return this._role.root.raelSpeed;
                    },
                    enumerable: false,
                    configurable: true
                });
                playerMgr.getRole = function () { return this._role; };
                ;
                playerMgr.preInit = function () {
                    var testRoleD = new roleData_2.roleData();
                    // // Create ball
                    this._role = new role_2.role(MatMgr_10.MatMgr.Role_mat, testRoleD);
                    MatMgr_10.MatMgr.unSetHudMat(this._role.rankingLable);
                    this._role.rankingLable.transform.visible = false;
                    this._role.root.isPlayer = true;
                    MatMgr_10.MatMgr.Role_mat.setVector4("_MainColor", new m4m.math.vector4(0.9, 0.9, 0.9, 1));
                };
                playerMgr.init = function () {
                    //start
                    Trailer_3.Trailer.LateUpdateMgr = LateUpdateMgr_3.LateUpdateMgr;
                    //wind
                    windHandle_2.windHandle.mat = MatMgr_10.MatMgr.wind_mat;
                    this.wind = this._role.root.gameObject.addComponent(windHandle_2.windHandle.name);
                    this.wind.stop = false;
                    //水平move
                    Inputer_2.Inputer.onHorizTouch = this.onHorizTouch.bind(this);
                    //加速监听
                    this._role.root.onBoostLevelCg = this.onBoostLevelCg.bind(this);
                    //减速 结束监听
                    this._role.root.onSlowEnd = this.onSlowend.bind(this);
                    //默认皮肤 & 默认主题
                    // this.changeSkin(0);
                    // themeMgr.changeTheme(0);
                    var game = GameArchiveManager_5.GameArchiveManager.Instance.GameArchiveData;
                    this.changeSkin(game.baseData.id);
                    playerMgr.changeTheme();
                    //切换到 历史保存 皮肤 和 主题
                    // if (GameMgr.currUseSkin != 0) {
                    //     this.changeSkin(GameMgr.currUseSkin);
                    // }
                    // if (GameMgr.currUseTheme != 0) {
                    //     themeMgr.changeTheme(GameMgr.currUseTheme);
                    // }
                };
                playerMgr.changeTheme = function () {
                    var index = this.random(themeMgr_7.themeMgr.themes);
                    themeMgr_7.themeMgr.changeTheme(index);
                };
                /** 改皮肤 */
                playerMgr.changeSkin = function (skinId) {
                    this._role.changeSkin(skinId);
                };
                playerMgr.racePlay = function () {
                    var r = this._role;
                    this.reached = false;
                    r.root.stop = false;
                    r.rankingLable.text = "30";
                    r.taril.play();
                    this.raceTime = 0;
                    FrameMgr_9.FrameMgr.Add(this.palyerInfoUpd, this);
                    // //fix playermgr ranking ui text show problen
                    // let tran = this._role.root.gameObject.transform;
                    // let parent = this._role.root.gameObject.transform.parent;
                    // parent.removeChild(tran);
                    // parent.addChild(tran);
                };
                playerMgr.getRaceTime = function () { return this.raceTime; };
                ;
                // 信息更新
                playerMgr.palyerInfoUpd = function (dt) {
                    var _this = this;
                    this.raceTime += dt;
                    var runLen = this._role.root.gameObject.transform.localTranslate.z;
                    if (!this.reached && runLen >= stageMgr_13.stageMgr.currentLevel.length) {
                        //抵达终点
                        this.reached = true;
                        wxTool_13.wxTool.setHeadFollowMode(false); //关闭 头像跟随子域画布模式
                        this.getRole().toSlowdown();
                        //其他机器人停下来
                        // robotMgr.stopAll();
                        robotMgr_3.robotMgr.toSlowdownAll();
                        // stageMgr.gameOverConsole();
                    }
                    // 进度条
                    var prate = Math.min(runLen / stageMgr_13.stageMgr.currentLevel.length, 1);
                    if (this.cacheIngamePage) {
                        this.cacheIngamePage.setValue(prate);
                    }
                    else {
                        inGamePage_7.inGamePage.Instance().then(function (ins) {
                            _this.cacheIngamePage = ins;
                            _this.cacheIngamePage.setValue(prate);
                        });
                    }
                    //移动块的速度控制
                    var l = stageMgr_13.stageMgr.currentLevel;
                    HMoveHandle_5.HMoveHandle.moveSpeed = m4m.math.numberLerp(l.cubeSpeedRange[0], l.cubeSpeedRange[1], prate);
                };
                playerMgr.initState = function () {
                    this._role.initState();
                    // this._role.rankingLable.text = "30";
                    // this._role.rankingLable.transform.markDirty()
                    this.wind.boostlevel = 0;
                    var tran = this._role.root.gameObject.transform;
                    tran.localTranslate.x = tran.localTranslate.z = 0;
                    //旋转
                    var rotate = this._role.instance.localRotate;
                    rotate.x = rotate.y = rotate.z = 0;
                    rotate.w = 1;
                    this._role.instance.localRotate = rotate;
                    this._role.instance.localPosition.y = 0;
                    this._role.instance.localPosition = this._role.instance.localPosition;
                    this.lastRank = -1;
                    this.reached = false;
                };
                //水平move
                playerMgr.onHorizTouch = function (delta) {
                    if (!this._role)
                        return;
                    var root = this._role.root;
                    root.horizMove(delta * this.sacle);
                };
                playerMgr.regStepBC = function (callBack) {
                    if (!this._role)
                        return;
                    this._role.root.onStepCg = callBack;
                };
                //死亡
                playerMgr.toDie = function () {
                    var _a;
                    if (this._role.godMode)
                        return; //无敌状态 退出
                    //子域画板设置成 全屏模式
                    wxTool_13.wxTool.setHeadFollowMode(false);
                    GameMgr_33.GameMgr.raceStage = -1;
                    stageMgr_13.stageMgr.closeHeadFollow(); //头像跟随关闭
                    AudioMgr_14.AudioMgr.Play("character.mp3");
                    wxTool_13.wxTool.vibrateLong();
                    //this.getRole().toStop();
                    this.getRole().die();
                    stageMgr_13.stageMgr.gameOverConsole();
                    this.dieCount++;
                    if (this.dieCount == 1) {
                        joinTool_12.joinTool.tdcustomEvent(tdTool_10.tdTool.FirstTimeFunnelEvent, tdTool_10.tdTool.FirstTimeFunnelEvent, (_a = {}, _a[tdTool_10.tdTool.Player_lose] = 1, _a)); //数据埋点
                    }
                    if (continuePage_3.continuePage.recoverCount >= stageMgr_13.stageMgr.currentLevel.reviveCount) { //真死
                        FrameMgr_9.FrameMgr.Remove(this.palyerInfoUpd, this);
                        prizePage_3.prizePage.Instance().then(function (ins) {
                            ins.show();
                            ins.setInfo(stageMgr_13.stageMgr.gameDiamond, false);
                        });
                    }
                    if (this.fx_js) {
                        this.fx_js.gameObject.visible = false;
                        this.fx_js.stop();
                    }
                    console.error(" you die ,game over ");
                };
                //跳起
                playerMgr.toJump = function () {
                    this._role.root.jump();
                };
                //加速
                playerMgr.toBoost = function () {
                    this._role.root.boost();
                    if (!this.fx_js && Ress_13.Ress.fx_js) { //复活特效 initialization
                        var tran = Ress_13.Ress.fx_js.getCloneTrans();
                        MatMgr_10.MatMgr.setFxMat(tran);
                        var s = 0.5;
                        tran.localScale = new m4m.math.vector3(s, s, s);
                        var f14 = tran.gameObject.getComponent("f14EffectSystem");
                        this.fx_js = f14;
                        this._role.ball.gameObject.transform.addChild(tran);
                    }
                    if (this.fx_js) {
                        this.fx_js.gameObject.visible = true;
                        this.fx_js.play();
                    }
                };
                playerMgr.onBoostLevelCg = function (level) {
                    //UI 速度线
                    //uiMgr.showSpeedLine(level== 0 ? true: false , level);
                    this.wind.boostlevel = level;
                    if (level <= 0) {
                        if (this.fx_js) {
                            this.fx_js.gameObject.visible = false;
                            this.fx_js.stop();
                        }
                    }
                };
                /** 复活 */
                playerMgr.relive = function () {
                    var _a;
                    this.toRaceCount++;
                    if (this.toRaceCount == 2) {
                        joinTool_12.joinTool.tdcustomEvent(tdTool_10.tdTool.FirstTimeFunnelEvent, tdTool_10.tdTool.FirstTimeFunnelEvent, (_a = {}, _a[tdTool_10.tdTool.Tap_to_restart] = 1, _a)); //数据埋点
                    }
                    // this._role.relive();
                    this._role.recover();
                    robotMgr_3.robotMgr.SlowReNormalAll();
                    robotMgr_3.robotMgr.unStopAll();
                    //子域画板设置成 头像模式
                    wxTool_13.wxTool.setHeadFollowMode(true);
                };
                /** 检查自己超越 其他对手*/
                playerMgr.ckOverOpponent = function (rank, opponent) {
                    if (this.lastRank == -1) {
                        this.lastRank = rank;
                        return;
                    }
                    if (this.lastRank == rank)
                        return;
                    //发生超越
                    if (this.lastRank > rank) {
                        var pos_x = 0;
                        var limit_w = 4.5;
                        if (opponent) {
                            pos_x = opponent.root.gameObject.transform.localTranslate.x;
                            pos_x += limit_w;
                            pos_x = pos_x / (limit_w * 2); //单位化
                        }
                        joinTool_12.joinTool.ckOverFriend(rank, pos_x, 300);
                        console.log("rank:".concat(rank, " : \u8D85\u8FC7\u5BF9\u624B.. "));
                    }
                    else {
                        //发生倒退
                    }
                    this.lastRank = rank;
                };
                //减速 完毕
                playerMgr.onSlowend = function () {
                    this._role.root.currSpeed = configMgr_10.configMgr.roleBspeed;
                    stageMgr_13.stageMgr.gameOverConsole();
                };
                playerMgr.random = function (_lsit) {
                    var random = function (min, max) { return Math.floor(Math.random() * (max - min + 1) + min); };
                    var ran = random(0, _lsit.length);
                    var id;
                    if (_lsit[ran]) {
                        id = Number(_lsit[ran].id);
                    }
                    if (id == 0 || id > 7) {
                        id = 1;
                    }
                    return id;
                };
                playerMgr.raceStartTime = 0;
                playerMgr.raceTime = 0;
                playerMgr.sacle = 0.03;
                playerMgr.dieCount = 0;
                playerMgr.toRaceCount = 0;
                return playerMgr;
            }()));
        }
    };
});
System.register("ui/codePageHandle", ["ui/base/uiPage"], function (exports_121, context_121) {
    "use strict";
    var uiPage_22, codePageHandle;
    var __moduleName = context_121 && context_121.id;
    return {
        setters: [
            function (uiPage_22_1) {
                uiPage_22 = uiPage_22_1;
            }
        ],
        execute: function () {
            exports_121("codePageHandle", codePageHandle = /** @class */ (function (_super) {
                __extends(codePageHandle, _super);
                function codePageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                codePageHandle.prototype.onPlay = function () {
                };
                codePageHandle.prototype.update = function (delta) {
                };
                codePageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], codePageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], codePageHandle.prototype, "img", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], codePageHandle.prototype, "save", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], codePageHandle.prototype, "bt", void 0);
                codePageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], codePageHandle);
                return codePageHandle;
            }(uiPage_22.uiPop)));
        }
    };
});
System.register("ui/pages/codePage", ["ui/base/uiPage", "Tool/commTool", "Tool/wxTool", "Tool/joinTool", "Tool/tdTool", "audio/AudioMgr"], function (exports_122, context_122) {
    "use strict";
    var uiPage_23, commTool_12, wxTool_14, joinTool_13, tdTool_11, AudioMgr_15, codePage;
    var __moduleName = context_122 && context_122.id;
    return {
        setters: [
            function (uiPage_23_1) {
                uiPage_23 = uiPage_23_1;
            },
            function (commTool_12_1) {
                commTool_12 = commTool_12_1;
            },
            function (wxTool_14_1) {
                wxTool_14 = wxTool_14_1;
            },
            function (joinTool_13_1) {
                joinTool_13 = joinTool_13_1;
            },
            function (tdTool_11_1) {
                tdTool_11 = tdTool_11_1;
            },
            function (AudioMgr_15_1) {
                AudioMgr_15 = AudioMgr_15_1;
            }
        ],
        execute: function () {
            exports_122("codePage", codePage = /** @class */ (function () {
                function codePage() {
                    this.inited = false;
                }
                codePage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_23.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new codePage();
                                    this._instance.init();
                                    uiPage_23.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                codePage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_23.loadTool.PagePrefeb_map.get(codePage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("codePageHandle");
                    //事件
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.save.addListener(m4m.event.UIEventEnum.PointerClick, this.onSavaClick, this);
                    this.handle.bt.addListener(m4m.event.UIEventEnum.PointerDown, function () { }, this);
                    this.loadRwaImg2D(this.handle.img, "res/code_/code.png");
                    this.inited = true;
                };
                /**
             * 加载外部图片
             *  @param rwaImg 需要加载外部图片的组件
             *  @param  src 外部图片地址
             */
                codePage.prototype.loadRwaImg2D = function (rwaImg, src) {
                    if (commTool_12.commTool.loadedTexsDic.ContainsKey(src)) {
                        rwaImg.image = commTool_12.commTool.loadedTexsDic.GetValue(src);
                    }
                    else {
                        commTool_12.commTool.ImgByLoad(src, function (_tex) {
                            if (_tex) {
                                commTool_12.commTool.loadedTexsDic.Add(src, _tex);
                                rwaImg.image = _tex;
                            }
                        });
                    }
                };
                /**
               * 关闭
               */
                codePage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_15.AudioMgr.Play("touch.mp3");
                    this.hide();
                };
                /**
                  * 保存
                  */
                codePage.prototype.onSavaClick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_15.AudioMgr.Play("touch.mp3");
                    console.log("保存到本地");
                    wxTool_14.wxTool.saveImageToPhotosAlbum("resource/code.png");
                    joinTool_13.joinTool.tdcustomEvent(tdTool_11.tdTool.ClickEvent, tdTool_11.tdTool.ClickEvent, (_a = {}, _a[tdTool_11.tdTool.SaveQRcode] = 22, _a));
                };
                codePage.prototype.show = function () {
                    this.handle.show();
                };
                codePage.prototype.hide = function () {
                    this.handle.hide();
                };
                codePage.prefabName = "code_page"; //依赖的 预设体 资源
                codePage.atlasList = ["QRcode"]; //依赖的 图集资源
                return codePage;
            }()));
        }
    };
});
System.register("ui/rankPageHandle", ["ui/base/uiPage"], function (exports_123, context_123) {
    "use strict";
    var uiPage_24, rankPageHandle;
    var __moduleName = context_123 && context_123.id;
    return {
        setters: [
            function (uiPage_24_1) {
                uiPage_24 = uiPage_24_1;
            }
        ],
        execute: function () {
            exports_123("rankPageHandle", rankPageHandle = /** @class */ (function (_super) {
                __extends(rankPageHandle, _super);
                function rankPageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                // @m4m.reflect.Field("reference", null, "label")
                //diamond: m4m.framework.label;
                rankPageHandle.prototype.onPlay = function () {
                };
                rankPageHandle.prototype.update = function (delta) {
                };
                rankPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], rankPageHandle.prototype, "per", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], rankPageHandle.prototype, "next", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], rankPageHandle.prototype, "share", void 0);
                rankPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], rankPageHandle);
                return rankPageHandle;
            }(uiPage_24.uiPage)));
        }
    };
});
System.register("ui/pages/rankPag", ["ui/base/uiPage", "Tool/joinTool", "audio/AudioMgr"], function (exports_124, context_124) {
    "use strict";
    var uiPage_25, joinTool_14, AudioMgr_16, rankPag;
    var __moduleName = context_124 && context_124.id;
    return {
        setters: [
            function (uiPage_25_1) {
                uiPage_25 = uiPage_25_1;
            },
            function (joinTool_14_1) {
                joinTool_14 = joinTool_14_1;
            },
            function (AudioMgr_16_1) {
                AudioMgr_16 = AudioMgr_16_1;
            }
        ],
        execute: function () {
            exports_124("rankPag", rankPag = /** @class */ (function () {
                //排行榜
                function rankPag() {
                    this.inited = false;
                }
                rankPag.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_25.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new rankPag();
                                    this._instance.init();
                                    uiPage_25.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                rankPag.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_25.loadTool.PagePrefeb_map.get(rankPag.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("rankPageHandle");
                    //事件
                    this.handle.next.addListener(m4m.event.UIEventEnum.PointerClick, this.onNextClick, this);
                    this.handle.per.addListener(m4m.event.UIEventEnum.PointerClick, this.onPerClick, this);
                    this.handle.share.addListener(m4m.event.UIEventEnum.PointerClick, this.onShareClick, this);
                    this.inited = true;
                };
                /**
                 * 分享
                 */
                rankPag.prototype.onShareClick = function () {
                    //播放按钮声音
                    AudioMgr_16.AudioMgr.Play("touch.mp3");
                    console.log("再来一次!");
                    console.log("分享");
                    joinTool_14.joinTool.shareRankBoard();
                };
                /**
                 * 下一页
                 */
                rankPag.prototype.onNextClick = function () {
                    //播放按钮声音
                    AudioMgr_16.AudioMgr.Play("touch.mp3");
                    console.log("再来一次!");
                    console.log("下一页");
                    joinTool_14.joinTool.nextPage();
                };
                /**
                 * 上一页
                 */
                rankPag.prototype.onPerClick = function () {
                    //播放按钮声音
                    AudioMgr_16.AudioMgr.Play("touch.mp3");
                    console.log("再来一次!");
                    console.log("上一页");
                    joinTool_14.joinTool.lastPage();
                };
                rankPag.prototype.hide = function () {
                    this.handle.hide();
                };
                rankPag.prototype.show = function () {
                    // inGamePage.Instance.setShowItem(showItem.shopAndRank);
                    // inGamePage.Instance().then((ins) => {
                    //     ins.setShowItem(showItem.Rank);
                    // });
                    joinTool_14.joinTool.showRanks();
                    this.handle.show();
                };
                rankPag.prefabName = "rank_page"; //依赖的 预设体 资源
                rankPag.atlasList = ["rank"]; //依赖的 图集资源
                return rankPag;
            }()));
        }
    };
});
System.register("ui/newYearPageHandle", ["ui/base/uiPage"], function (exports_125, context_125) {
    "use strict";
    var uiPage_26, newYearPageHandle;
    var __moduleName = context_125 && context_125.id;
    return {
        setters: [
            function (uiPage_26_1) {
                uiPage_26 = uiPage_26_1;
            }
        ],
        execute: function () {
            exports_125("newYearPageHandle", newYearPageHandle = /** @class */ (function (_super) {
                __extends(newYearPageHandle, _super);
                function newYearPageHandle() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                newYearPageHandle.prototype.onPlay = function () {
                };
                newYearPageHandle.prototype.update = function (delta) {
                    if (this.onUpdate)
                        this.onUpdate(delta);
                };
                newYearPageHandle.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], newYearPageHandle.prototype, "bt", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], newYearPageHandle.prototype, "close", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], newYearPageHandle.prototype, "title", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], newYearPageHandle.prototype, "title2", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], newYearPageHandle.prototype, "state", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], newYearPageHandle.prototype, "friend", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], newYearPageHandle.prototype, "skin", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "rawImage2D")
                ], newYearPageHandle.prototype, "theme", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], newYearPageHandle.prototype, "invite", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], newYearPageHandle.prototype, "againInvite", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], newYearPageHandle.prototype, "use", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "label")
                ], newYearPageHandle.prototype, "countDown", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "transform2D")
                ], newYearPageHandle.prototype, "info2", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], newYearPageHandle.prototype, "give", void 0);
                __decorate([
                    m4m.reflect.Field("reference", null, "button")
                ], newYearPageHandle.prototype, "againGive", void 0);
                newYearPageHandle = __decorate([
                    m4m.reflect.node2DComponent
                ], newYearPageHandle);
                return newYearPageHandle;
            }(uiPage_26.uiPop)));
        }
    };
});
System.register("ui/pages/newYearPage", ["ui/base/uiPage", "ui/pages/homePage", "GameMgr", "skinMgr", "themeMgr", "role/playerMgr", "ui/themeBoxHandle", "ui/skinBoxHandle", "ui/pages/skinShopPage", "Tool/joinTool", "Tool/wxTool", "Tool/tdTool", "Tool/saveTool", "Tool/commTool", "audio/AudioMgr"], function (exports_126, context_126) {
    "use strict";
    var uiPage_27, homePage_10, GameMgr_34, skinMgr_8, themeMgr_8, playerMgr_9, themeBoxHandle_2, skinBoxHandle_3, skinShopPage_2, joinTool_15, wxTool_15, tdTool_12, saveTool_9, commTool_13, AudioMgr_17, newYearPage;
    var __moduleName = context_126 && context_126.id;
    return {
        setters: [
            function (uiPage_27_1) {
                uiPage_27 = uiPage_27_1;
            },
            function (homePage_10_1) {
                homePage_10 = homePage_10_1;
            },
            function (GameMgr_34_1) {
                GameMgr_34 = GameMgr_34_1;
            },
            function (skinMgr_8_1) {
                skinMgr_8 = skinMgr_8_1;
            },
            function (themeMgr_8_1) {
                themeMgr_8 = themeMgr_8_1;
            },
            function (playerMgr_9_1) {
                playerMgr_9 = playerMgr_9_1;
            },
            function (themeBoxHandle_2_1) {
                themeBoxHandle_2 = themeBoxHandle_2_1;
            },
            function (skinBoxHandle_3_1) {
                skinBoxHandle_3 = skinBoxHandle_3_1;
            },
            function (skinShopPage_2_1) {
                skinShopPage_2 = skinShopPage_2_1;
            },
            function (joinTool_15_1) {
                joinTool_15 = joinTool_15_1;
            },
            function (wxTool_15_1) {
                wxTool_15 = wxTool_15_1;
            },
            function (tdTool_12_1) {
                tdTool_12 = tdTool_12_1;
            },
            function (saveTool_9_1) {
                saveTool_9 = saveTool_9_1;
            },
            function (commTool_13_1) {
                commTool_13 = commTool_13_1;
            },
            function (AudioMgr_17_1) {
                AudioMgr_17 = AudioMgr_17_1;
            }
        ],
        execute: function () {
            exports_126("newYearPage", newYearPage = /** @class */ (function () {
                //新年
                function newYearPage() {
                    this.inited = false;
                    this.cd = 30;
                    this.cdCount = 30;
                    this.Pageurl = "".concat(GameMgr_34.GameMgr.atlasPath).concat(newYearPage.atlasList[0], "/res/art/").concat(newYearPage.atlasList[0], ".atlas.json");
                }
                newYearPage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 3];
                                    return [4 /*yield*/, uiPage_27.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, uiPage_27.loadTool.loadAtlas(this.atlasList)];
                                case 2:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new newYearPage();
                                    this._instance.init();
                                    _a.label = 3;
                                case 3: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                newYearPage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_27.loadTool.PagePrefeb_map.get(newYearPage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("newYearPageHandle");
                    //事件
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.bt.addListener(m4m.event.UIEventEnum.PointerDown, function () { }, this);
                    this.handle.invite.addListener(m4m.event.UIEventEnum.PointerClick, this.onInviteClick, this);
                    this.handle.use.addListener(m4m.event.UIEventEnum.PointerClick, this.onUse, this);
                    this.handle.againInvite.addListener(m4m.event.UIEventEnum.PointerClick, this.onInvite, this);
                    this.handle.againGive.addListener(m4m.event.UIEventEnum.PointerClick, this.onInvite, this);
                    //   this.loadRwaImg2D(this.handle.skin, GameMgr.newYearIconPath + "jinzhu.png");
                    //  this.loadRwaImg2D(this.handle.theme, GameMgr.newYearIconPath + "xinnian_pic_saidao.png");
                    this.handle.onUpdate = this.onUpdate.bind(this);
                    this.inited = true;
                };
                newYearPage.prototype.onUpdate = function (d) {
                    this.countDown(d);
                };
                //倒计时
                newYearPage.prototype.countDown = function (d) {
                    this.cdCount += d;
                    if (this.cdCount < this.cd)
                        return;
                    this.cdCount = 0;
                    this.handle.countDown.text = homePage_10.homePage.getNewYearCDText_minute();
                };
                /**
                 * 关闭
                 */
                newYearPage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_17.AudioMgr.Play("touch.mp3");
                    console.log("关闭!");
                    this.hide();
                };
                // onShare
                /**
                 *  新年邀请
                 */
                newYearPage.prototype.onInviteClick = function () {
                    var _this = this;
                    GameMgr_34.GameMgr.newYear_invite = true;
                    this.onInvite();
                    setTimeout(function () {
                        if (GameMgr_34.GameMgr.newYear_inviteSucceed) {
                            //  this.handle.use.transform.visible = false;
                            // this.handle.give.transform.visible = true;
                            //  bu = this.handle.give;
                            _this.setShowBT(false, false, false, false, true);
                        }
                        else {
                            _this.setShowBT(false, true, false, false, false);
                            var url = "newyear.atlas.json_xinnian_pic_yaoqing2";
                            _this.handle.state.sprite = GameMgr_34.GameMgr.assetMgr.getAssetByName(url);
                        }
                    }, 1000);
                };
                newYearPage.prototype.onInvite = function () {
                    var _a;
                    joinTool_15.joinTool.newYearInvitation(wxTool_15.wxTool.token);
                    joinTool_15.joinTool.tdcustomEvent(tdTool_12.tdTool.ClickEvent, tdTool_12.tdTool.ClickEvent, (_a = {}, _a[tdTool_12.tdTool.InviteNow] = 26, _a)); //数据埋点
                };
                newYearPage.prototype.onUse = function () {
                    this.onCloseClick();
                };
                //领取
                newYearPage.prototype.prize = function (info) {
                    this.handle.title.transform.visible = false;
                    this.handle.title2.transform.visible = true;
                    //  homePage.Instance.handle.newYear.transform.visible = false;
                    // homePage.Instance.handle.newYear.transform.markDirty();
                    var parent = this.handle.friend.transform.parent;
                    parent.visible = true;
                    this.loadRwaImg2D(this.handle.friend, info.avataUrl);
                    var stateSrc;
                    var H_CENTER_value;
                    //   
                    if (info.isbeInvited) { //被邀请的
                        stateSrc = "newyear.atlas.json_xinnian_pic_huode";
                        H_CENTER_value = -10;
                    }
                    else { //主动邀请的
                        stateSrc = "newyear.atlas.json_xinnian_pic_jieshou";
                        H_CENTER_value = -72;
                    }
                    this.handle.state.sprite = GameMgr_34.GameMgr.assetMgr.getAssetByName(stateSrc);
                    parent.setLayoutValue(m4m.framework.layoutOption.H_CENTER, H_CENTER_value);
                    this.setShowBT(false, false, true, false, false);
                    skinShopPage_2.skinShopPage.Instance().then(function (ins) {
                        //领取奖品
                        saveTool_9.saveTool.unlockSkins[skinMgr_8.skinMgr.newYearSkin.id] = true;
                        saveTool_9.saveTool.unlockTheme[themeMgr_8.themeMgr.newYearThemes.id] = true;
                        GameMgr_34.GameMgr.newYear_inviteSucceed = true;
                        ins.createThemeBox(true);
                        ins.createBox(true);
                        console.log(skinBoxHandle_3.skinBoxHandle.yearSkinBox);
                        console.log(themeBoxHandle_2.themeBoxHandle.yearThmeBox);
                        if (skinBoxHandle_3.skinBoxHandle.yearSkinBox) {
                            skinBoxHandle_3.skinBoxHandle.yearSkinBox.nowUse();
                        }
                        else {
                            playerMgr_9.playerMgr.getRole().changeSkin(skinMgr_8.skinMgr.newYearSkin.id);
                            GameMgr_34.GameMgr.currUseSkin = skinMgr_8.skinMgr.newYearSkin.id;
                        }
                        if (themeBoxHandle_2.themeBoxHandle.yearThmeBox) {
                            themeBoxHandle_2.themeBoxHandle.yearThmeBox.nowUse();
                        }
                        else {
                            themeMgr_8.themeMgr.changeTheme(themeMgr_8.themeMgr.newYearThemes.id);
                            GameMgr_34.GameMgr.currUseTheme = themeMgr_8.themeMgr.newYearThemes.id;
                        }
                        parent.markDirty();
                        saveTool_9.saveTool.save(null, null);
                    });
                };
                newYearPage.prototype.setShowBT = function (invite, againInvite, use, give, againGive) {
                    this.handle.invite.transform.visible = invite;
                    this.handle.againInvite.transform.visible = againInvite;
                    this.handle.use.transform.visible = use;
                    this.handle.give.transform.visible = give;
                    this.handle.againGive.transform.visible = againGive;
                };
                /**
                  * 加载外部图片
                  *  @param rwaImg 需要加载外部图片的组件0
                  */
                newYearPage.prototype.loadRwaImg2D = function (rwaImg, src) {
                    if (commTool_13.commTool.loadedTexsDic.ContainsKey(src)) {
                        rwaImg.image = commTool_13.commTool.loadedTexsDic.GetValue(src);
                    }
                    else {
                        commTool_13.commTool.ImgByLoad(src, function (_tex) {
                            if (_tex) {
                                commTool_13.commTool.loadedTexsDic.Add(src, _tex);
                                rwaImg.image = _tex;
                            }
                        });
                    }
                };
                newYearPage.prototype.show = function () {
                    if (GameMgr_34.GameMgr.newYear_inviteSucceed) {
                        //     this.handle.state.sprite = GameMgr.assetMgr.getAssetByName("newyear.atlas.json_xinnian_pic_yaoqing2") as m4m.framework.sprite;
                        this.handle.state.transform.visible = false;
                        this.handle.info2.visible = true;
                        this.handle.title.transform.visible = true;
                        this.handle.title2.transform.visible = false;
                        this.handle.friend.transform.parent.visible = false;
                        this.setShowBT(true, false, false, true, false);
                    }
                    else
                        this.setShowBT(!GameMgr_34.GameMgr.newYear_invite, GameMgr_34.GameMgr.newYear_invite, false, false, false);
                    if (GameMgr_34.GameMgr.newYear_invite) {
                        this.handle.state.sprite = GameMgr_34.GameMgr.assetMgr.getAssetByName("newyear.atlas.json_xinnian_pic_yaoqing2");
                    }
                    this.handle.show();
                };
                newYearPage.prototype.hide = function () {
                    this.handle.hide();
                };
                //
                newYearPage.prefabName = "newYear_page"; //依赖的 预设体 资源
                newYearPage.atlasList = ["newyear"]; //依赖的 图集资源
                return newYearPage;
            }()));
        }
    };
});
System.register("ui/pages/homePage", ["ui/base/uiPage", "GameMgr", "role/playerMgr", "ui/pages/codePage", "ui/pages/skinShopPage", "ui/pages/inGamePage", "stageMgr", "inviteMgr", "ui/pages/rankPag", "ui/pages/inviteFriendsPage", "ui/pages/videoPrizePage", "stringMgr", "ui/pages/newYearPage", "Tool/joinTool", "Tool/tdTool", "Tool/wxTool", "Tool/saveTool", "PSDUI/UiManager", "audio/AudioMgr"], function (exports_127, context_127) {
    "use strict";
    var uiPage_28, GameMgr_35, playerMgr_10, codePage_1, skinShopPage_3, inGamePage_8, stageMgr_14, inviteMgr_4, rankPag_1, inviteFriendsPage_2, videoPrizePage_6, stringMgr_5, newYearPage_1, joinTool_16, tdTool_13, wxTool_16, saveTool_10, UiManager_7, AudioMgr_18, homePage;
    var __moduleName = context_127 && context_127.id;
    return {
        setters: [
            function (uiPage_28_1) {
                uiPage_28 = uiPage_28_1;
            },
            function (GameMgr_35_1) {
                GameMgr_35 = GameMgr_35_1;
            },
            function (playerMgr_10_1) {
                playerMgr_10 = playerMgr_10_1;
            },
            function (codePage_1_1) {
                codePage_1 = codePage_1_1;
            },
            function (skinShopPage_3_1) {
                skinShopPage_3 = skinShopPage_3_1;
            },
            function (inGamePage_8_1) {
                inGamePage_8 = inGamePage_8_1;
            },
            function (stageMgr_14_1) {
                stageMgr_14 = stageMgr_14_1;
            },
            function (inviteMgr_4_1) {
                inviteMgr_4 = inviteMgr_4_1;
            },
            function (rankPag_1_1) {
                rankPag_1 = rankPag_1_1;
            },
            function (inviteFriendsPage_2_1) {
                inviteFriendsPage_2 = inviteFriendsPage_2_1;
            },
            function (videoPrizePage_6_1) {
                videoPrizePage_6 = videoPrizePage_6_1;
            },
            function (stringMgr_5_1) {
                stringMgr_5 = stringMgr_5_1;
            },
            function (newYearPage_1_1) {
                newYearPage_1 = newYearPage_1_1;
            },
            function (joinTool_16_1) {
                joinTool_16 = joinTool_16_1;
            },
            function (tdTool_13_1) {
                tdTool_13 = tdTool_13_1;
            },
            function (wxTool_16_1) {
                wxTool_16 = wxTool_16_1;
            },
            function (saveTool_10_1) {
                saveTool_10 = saveTool_10_1;
            },
            function (UiManager_7_1) {
                UiManager_7 = UiManager_7_1;
            },
            function (AudioMgr_18_1) {
                AudioMgr_18 = AudioMgr_18_1;
            }
        ],
        execute: function () {
            exports_127("homePage", homePage = /** @class */ (function () {
                //首页页面  page
                function homePage() {
                    this.inited = false;
                    this.timeRefresh = 4;
                    this.c_Time_R = 0;
                    this.cd = 30;
                    this.cdCount = 0;
                    this.ckactivitsOnce = false;
                    this.needTipNY = false;
                }
                homePage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_28.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new homePage();
                                    this._instance.init();
                                    uiPage_28.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                homePage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_28.loadTool.PagePrefeb_map.get(homePage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("homePageHandle");
                    this.handle.onUpdate = this.update.bind(this);
                    this.handle.code.transform.visible = false;
                    this.handle.invite.transform.visible = false;
                    this.handle.rank.transform.visible = false;
                    this.handle.setting.transform.visible = false;
                    this.handle.music.transform.visible = false;
                    this.handle.skin.transform.visible = false;
                    //事件
                    // this.handle.setting.addListener(m4m.event.UIEventEnum.PointerClick, this.onSettingClick, this);
                    this.handle.invite.addListener(m4m.event.UIEventEnum.PointerClick, this.onInviteClick, this);
                    this.handle.rank.addListener(m4m.event.UIEventEnum.PointerClick, this.onRankClick, this);
                    this.handle.skin.addListener(m4m.event.UIEventEnum.PointerClick, this.onSkinClick, this);
                    this.handle.code.addListener(m4m.event.UIEventEnum.PointerClick, this.onCodeclick, this);
                    this.handle.newYear.addListener(m4m.event.UIEventEnum.PointerDown, this.onNerYearClick, this);
                    //this.handle.music.addListener(m4m.event.UIEventEnum.PointerClick, this.onMusiclick, this);
                    this.handle.startBtn.addListener(m4m.event.UIEventEnum.PointerDown, this.onToStart, this); //开始游戏
                    this.handle.music.onClickFun = function () {
                        var _a;
                        joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_a = {}, _a[tdTool_13.tdTool.Mute] = 12, _a)); //数据埋点
                    };
                    //初次检查
                    this.youqingcg();
                    this.activits();
                    //saveTool.headPortrait();
                    this.inited = true;
                };
                homePage.prototype.update = function (d) {
                    this.countDown(d);
                    this.inviteAwardShow(d);
                    this.ckShareLs(d);
                };
                //检查每日分享 结果
                homePage.prototype.ckShareLs = function (d) {
                    this.c_Time_R += d;
                    if (GameMgr_35.GameMgr.netMode && this.c_Time_R >= this.timeRefresh) {
                        if (homePage.hello_year) {
                            this.pigSkinAndTheme();
                        }
                        inviteFriendsPage_2.inviteFriendsPage.sharels();
                        // inviteFriendsPage.Instance().then(ins => {
                        //     ins.sharels();
                        // });
                        this.c_Time_R = 0;
                    }
                };
                ///如果新年分享就可隔段时间刷新
                homePage.prototype.pigSkinAndTheme = function () {
                    if (wxTool_16.wxTool.token == "" || wxTool_16.wxTool.token == undefined || wxTool_16.wxTool.token == "undefined")
                        return;
                    wxTool_16.wxTool._loadFun(GameMgr_35.GameMgr.DNS_AND_PORT + "/newYearSharels?token=" + wxTool_16.wxTool.token, function (res) {
                        if (!res || !res.data || !res.data.body)
                            return;
                        var newYear = res.data.body;
                        if (newYear.token && !GameMgr_35.GameMgr.newYear_inviteSucceed) {
                            homePage.Instance().then(function (ins) {
                                console.log("newYearSharels--" + ins.handle.transform.visible);
                                //如果是首页则领取!
                                if (ins.handle.transform.visible) {
                                    newYearPage_1.newYearPage.Instance().then(function (ins) {
                                        ins.show();
                                        if (!GameMgr_35.GameMgr.assetMgr.maploaded["".concat(ins.Pageurl)])
                                            return;
                                        ins.prize(newYear);
                                        homePage.hello_year = false;
                                    });
                                }
                            });
                        }
                    }, null);
                };
                //好友邀请奖励弹窗-控制
                homePage.prototype.inviteAwardShow = function (d) {
                    videoPrizePage_6.videoPrizePage.Instance().then(function (ins) {
                        if (ins.isContinue) {
                            ins.c_Time += d;
                            if (ins.c_Time >= 1) {
                                ins.isContinue = false;
                                // console.log("fun执行");
                                ins.fun();
                            }
                        }
                    });
                };
                //获取新春倒记间 xx天xx时
                homePage.getNewYearCDText = function () {
                    if (!this.newYearShare)
                        return this.CDText;
                    var end = homePage.newYearShare.end;
                    var now = Date.now();
                    var t = end - now;
                    if (t <= 0) {
                        homePage.Instance().then(function (ins) {
                            ins.handle.newYear.transform.visible = false;
                        });
                        return;
                    }
                    this.cache_d = Math.floor(t / this.day);
                    t = t - (this.cache_d * this.day);
                    this.cache_h = Math.floor(t / this.h);
                    ;
                    t = t - (this.cache_h * this.h);
                    this.cache_m = Math.floor(t / this.m);
                    //xx天xx时
                    this.CDText = (this.cache_d < 10 ? "0" + this.cache_d : this.cache_d) + stringMgr_5.stringMgr.tian + (this.cache_h < 10 ? "0" + this.cache_h : this.cache_h) + stringMgr_5.stringMgr.shi;
                    // if (homePage.cacheNewYearPage) {
                    //     homePage.cacheNewYearPage.handle.countDown.text = time_lable;
                    // } else {
                    //     newYearPage.Instance().then((ins) => {
                    //         ins.handle.countDown.text = time_lable;
                    //     });
                    // }
                    return this.CDText;
                };
                //获取新春倒记间 xx天xx时xx分 
                homePage.getNewYearCDText_minute = function () {
                    var str = this.getNewYearCDText();
                    //xx天xx时xx分 
                    str = stringMgr_5.stringMgr.haiyou + str + (this.cache_m < 10 ? "0" + this.cache_m : this.cache_m) + stringMgr_5.stringMgr.fen + stringMgr_5.stringMgr.jiezhi;
                    return str;
                };
                //春节活动分享倒计时!~!~!~!~!~!~!~!~!~!~!~!
                homePage.prototype.countDown = function (d) {
                    this.cdCount += d;
                    if (this.cdCount < this.cd)
                        return;
                    this.cdCount = 0;
                    var time_lable = homePage.getNewYearCDText();
                    this.handle.newYear_time.text = time_lable;
                };
                /**
                 * 邀请按钮click事件
                 */
                homePage.prototype.onInviteClick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_18.AudioMgr.Play("touch.mp3");
                    console.log("邀请");
                    inviteFriendsPage_2.inviteFriendsPage.Instance().then(function (ins) {
                        ins.show();
                    });
                    joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_a = {}, _a[tdTool_13.tdTool.DailyShare] = 6, _a));
                };
                /**
                 * 打开二维码按钮click事件
                 */
                homePage.prototype.onCodeclick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_18.AudioMgr.Play("touch.mp3");
                    console.log("打开二维码");
                    codePage_1.codePage.Instance().then(function (ins) {
                        ins.show();
                    });
                    joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_a = {}, _a[tdTool_13.tdTool.QRSkin] = 2, _a));
                };
                /**
                 * 排行榜按钮click事件
                 */
                homePage.prototype.onRankClick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_18.AudioMgr.Play("touch.mp3");
                    console.log("排行榜");
                    rankPag_1.rankPag.Instance().then(function (ins) {
                        ins.show();
                    });
                    joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_a = {}, _a[tdTool_13.tdTool.Leaderboard] = 1, _a));
                };
                /**
                 * 皮肤按钮click事件
                 */
                homePage.prototype.onSkinClick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_18.AudioMgr.Play("touch.mp3");
                    console.log("商店");
                    skinShopPage_3.skinShopPage.Instance().then(function (ins) {
                        ins.show();
                    });
                    joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_a = {}, _a[tdTool_13.tdTool.Store] = 3, _a));
                };
                /**
                 * 音乐按钮click事件
                 */
                homePage.prototype.onMusiclick = function () {
                    var _a;
                    //播放按钮声音
                    AudioMgr_18.AudioMgr.Play("touch.mp3");
                    console.log("音乐");
                    joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_a = {}, _a[tdTool_13.tdTool.Mute] = 4, _a));
                };
                /**
                 * 新春
                 */
                homePage.prototype.onNerYearClick = function (_a) {
                    var _b;
                    var ev = _a[0];
                    this.needTipNY = false;
                    if (homePage.cacheNewYearPage) {
                        homePage.cacheNewYearPage.show();
                    }
                    else {
                        newYearPage_1.newYearPage.Instance().then(function (ins) {
                            ins.show();
                        });
                    }
                    joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_b = {}, _b[tdTool_13.tdTool.NewYearPackage] = 10, _b)); //数据埋点
                };
                /**
                 *  剩余可以用邀请人数
                 */
                homePage.prototype.setCanInviteNum = function (num) {
                    this.handle.canInviteNum.text = num + "";
                };
                /**
                 * 是否可以解锁新皮肤
                 *
                 * @param isShowNew 是否可以解锁新皮肤
                 */
                homePage.prototype.isShowNewIcon = function (isShowNew) {
                    this.handle.newSkin.visible = isShowNew;
                };
                homePage.prototype.onToStart = function (_a) {
                    var _b, _c, _d;
                    var ev = _a[0];
                    // inGamePage.Instance.setShowItem(showItem.allShow);
                    if (!UiManager_7.UiManager.isUiShow("Tips")) {
                        UiManager_7.UiManager.hideUi("Main");
                        inGamePage_8.inGamePage.Instance().then(function (ins) {
                            ins.setShowItem(inGamePage_8.showItem.allShow);
                        });
                        stageMgr_14.stageMgr.replay();
                        this.hide();
                        console.error("onToStart");
                        // //走匹配
                        // lobbyPage.Instance.show();
                        //  不走匹配
                        // roleData.reqUserData(() => {
                        //     // runingPage.Instance.show();
                        //     inGamePage.Instance.show();
                        //     stageMgr.replay();
                        // });
                        playerMgr_10.playerMgr.toRaceCount++;
                        if (playerMgr_10.playerMgr.toRaceCount == 1) { //首次游戏
                            joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.FirstTimeFunnelEvent, tdTool_13.tdTool.FirstTimeFunnelEvent, (_b = {}, _b[tdTool_13.tdTool.Clicked_play] = 1, _b)); //数据埋点
                            if (GameMgr_35.GameMgr.isNewAuth) {
                                joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.Started_1st_game, tdTool_13.tdTool.Started_1st_game); //数据埋点
                            }
                        }
                        else if (playerMgr_10.playerMgr.toRaceCount == 2) { //再次游戏
                            joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.FirstTimeFunnelEvent, tdTool_13.tdTool.FirstTimeFunnelEvent, (_c = {}, _c[tdTool_13.tdTool.Tap_to_restart] = 1, _c)); //数据埋点
                        }
                        joinTool_16.joinTool.tdcustomEvent(tdTool_13.tdTool.ClickEvent, tdTool_13.tdTool.ClickEvent, (_d = {}, _d[tdTool_13.tdTool.GameStart] = 8, _d));
                    }
                };
                /** 显示 开始按钮 */
                homePage.prototype.setShowStartBtn = function () {
                    if (!this.handle.startBtn)
                        return;
                    this.handle.startBtn.transform.parent.visible = true;
                };
                //如果是每日分享被邀请成功....
                homePage.prototype.youqingcg = function () {
                    if (wxTool_16.wxTool.youqingcg) {
                        var gold_1 = inviteMgr_4.inviteMgr.gold[0];
                        if (wxTool_16.wxTool.isNewPlayer) {
                            gold_1 = gold_1 * 2;
                        }
                        // console.log("新?"+wxTool.isNewPlayer);
                        videoPrizePage_6.videoPrizePage.Instance().then(function (ins) {
                            ins.show();
                            ins.setInfo(gold_1);
                        });
                    }
                };
                homePage.prototype.activits = function () {
                    var _this = this;
                    if (this.ckactivitsOnce)
                        return;
                    this.ckactivitsOnce = true;
                    //请求最近的活动
                    if (!wxTool_16.wxTool.token || wxTool_16.wxTool.token == "undefined")
                        return;
                    wxTool_16.wxTool._loadFun(GameMgr_35.GameMgr.DNS_AND_PORT + "/activity?token=" + wxTool_16.wxTool.token, function (res) {
                        var body = res.data.body;
                        _this.activity = body.nowActivitys;
                        homePage.beforeActivitys = body.beforeActivitys;
                        if (_this.activity == null || _this.activity.length < 0)
                            return;
                        _this.activity.forEach(function (a) {
                            homePage.newYearShare = a;
                            var now = Date.now();
                            if (a.activityName == "newYearShare" && a.end > now && now >= a.start) {
                                homePage.Instance().then(function (ins) {
                                    ins.handle.newYear.transform.visible = true;
                                    ins.cdCount = ins.cd;
                                    ins.countDown(0);
                                });
                                var date = new Date();
                                var l = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
                                if (l != saveTool_10.saveTool.win_time) {
                                    if (!wxTool_16.wxTool.isFristLogin) {
                                        saveTool_10.saveTool.win_time = l;
                                        saveTool_10.saveTool.savaToNative(null, null);
                                    }
                                    if (homePage.newYearShare.win_start && now > homePage.newYearShare.win_start && now < homePage.newYearShare.win_end) {
                                        // newYearPage.Instance().then((ins) => {
                                        //     ins.show();
                                        // });
                                        _this.needTipNY = true; //需要显示
                                        _this.tryTipNewYear();
                                    }
                                }
                                if (!GameMgr_35.GameMgr.newYear_inviteSucceed) {
                                    //开始
                                    homePage.hello_year = true;
                                }
                            }
                        });
                    }, null);
                    //let inviteFriendsPage_i = inviteFriendsPage.Instance;
                    //inviteFriendsPage_i.sharels();
                };
                //尝试显示 新春提示
                homePage.prototype.tryTipNewYear = function () {
                    var _this = this;
                    if (wxTool_16.wxTool.isFristLogin || !this.needTipNY)
                        return;
                    newYearPage_1.newYearPage.Instance().then(function (ins) {
                        if (GameMgr_35.GameMgr.raceStage != 1) { //不在游戏中 才显示
                            _this.needTipNY = false;
                            ins.show();
                        }
                    });
                };
                homePage.prototype.show = function () {
                    this.handle.show();
                    this.tryTipNewYear();
                };
                /** 显示并且 设置 ingamePage 的状态 */
                homePage.prototype.showAndCgInGame = function () {
                    this.show();
                    // inGamePage.Instance.setShowItem(showItem.home);
                    inGamePage_8.inGamePage.Instance().then(function (ins) {
                        ins.setShowItem(inGamePage_8.showItem.home);
                    });
                };
                homePage.prototype.hide = function () {
                    this.handle.hide();
                };
                homePage.prefabName = "home_page"; //依赖的 预设体 资源
                homePage.atlasList = ["home", "common"]; //依赖的 图集资源
                homePage.cache_d = 0;
                homePage.cache_h = 0;
                homePage.cache_m = 0;
                homePage.CDText = ""; //倒计时信息
                homePage.day = 1000 * 60 * 60 * 24;
                homePage.h = 1000 * 60 * 60;
                homePage.m = 1000 * 60;
                homePage.hello_year = false;
                return homePage;
            }()));
        }
    };
});
System.register("ui/pages/videoPrizePage", ["ui/base/uiPage", "ui/pages/homePage", "stringMgr", "GameMgr", "stageMgr", "inviteMgr", "ui/pages/inGamePage", "ui/pages/gameOverPage", "Tool/saveTool", "audio/AudioMgr"], function (exports_128, context_128) {
    "use strict";
    var uiPage_29, homePage_11, stringMgr_6, GameMgr_36, stageMgr_15, inviteMgr_5, inGamePage_9, gameOverPage_4, saveTool_11, AudioMgr_19, videoPrizePage;
    var __moduleName = context_128 && context_128.id;
    return {
        setters: [
            function (uiPage_29_1) {
                uiPage_29 = uiPage_29_1;
            },
            function (homePage_11_1) {
                homePage_11 = homePage_11_1;
            },
            function (stringMgr_6_1) {
                stringMgr_6 = stringMgr_6_1;
            },
            function (GameMgr_36_1) {
                GameMgr_36 = GameMgr_36_1;
            },
            function (stageMgr_15_1) {
                stageMgr_15 = stageMgr_15_1;
            },
            function (inviteMgr_5_1) {
                inviteMgr_5 = inviteMgr_5_1;
            },
            function (inGamePage_9_1) {
                inGamePage_9 = inGamePage_9_1;
            },
            function (gameOverPage_4_1) {
                gameOverPage_4 = gameOverPage_4_1;
            },
            function (saveTool_11_1) {
                saveTool_11 = saveTool_11_1;
            },
            function (AudioMgr_19_1) {
                AudioMgr_19 = AudioMgr_19_1;
            }
        ],
        execute: function () {
            exports_128("videoPrizePage", videoPrizePage = /** @class */ (function () {
                //排行榜
                function videoPrizePage() {
                    this.inited = false;
                    this.isContinue = false;
                    this.c_Time = 0;
                }
                videoPrizePage.Instance = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this._instance) return [3 /*break*/, 2];
                                    return [4 /*yield*/, uiPage_29.loadTool.loadPrefeb(this.prefabName)];
                                case 1:
                                    _a.sent();
                                    if (this._instance)
                                        return [2 /*return*/, this._instance]; //别的流中可能已经加载完成
                                    this._instance = new videoPrizePage();
                                    this._instance.init();
                                    uiPage_29.loadTool.loadAtlas(this.atlasList);
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._instance];
                            }
                        });
                    });
                };
                videoPrizePage.prototype.init = function () {
                    if (this.inited)
                        return;
                    var pfb = uiPage_29.loadTool.PagePrefeb_map.get(videoPrizePage.prefabName);
                    var tempRoot = pfb.getCloneTrans2D();
                    this.handle = tempRoot.getComponent("videoPrizePageHandle");
                    //事件
                    this.handle.close.addListener(m4m.event.UIEventEnum.PointerClick, this.onCloseClick, this);
                    this.handle.homePage.addListener(m4m.event.UIEventEnum.PointerDown, this.onHomePageClick, this);
                    this.handle.bt.addListener(m4m.event.UIEventEnum.PointerDown, function () { }, this);
                    this.inited = true;
                };
                videoPrizePage.prototype.setInfo = function (num, fun) {
                    if (fun === void 0) { fun = null; }
                    this.fun = fun;
                    // inGamePage.Instance.collectCoinsAnim_save(num);
                    inGamePage_9.inGamePage.Instance().then(function (ins) {
                        ins.collectCoinsAnim_save(num);
                    });
                    this.handle.info.text = stringMgr_6.stringMgr.gained + num + stringMgr_6.stringMgr.diamond;
                };
                //设置回调
                videoPrizePage.prototype.setfun = function (fun) {
                    this.fun1 = fun;
                };
                /**
                 * 结算界面的返回首页
                 */
                videoPrizePage.prototype.IsGameOver_homePage = function (isGame_Over) {
                    this.isGame_Over = isGame_Over;
                };
                /**
                 *  返回首页
                 */
                videoPrizePage.prototype.onHomePageClick = function () {
                    this.hide();
                    if (GameMgr_36.GameMgr.raceStage == 1)
                        return;
                    //播放按钮声音
                    AudioMgr_19.AudioMgr.Play("touch.mp3");
                    if (this.isGame_Over) {
                        gameOverPage_4.gameOverPage.onHomeClick();
                        this.isGame_Over = false;
                    }
                    homePage_11.homePage.Instance().then(function (ins) {
                        ins.showAndCgInGame();
                    });
                };
                /**
                 * 关闭
                 */
                videoPrizePage.prototype.onCloseClick = function () {
                    //播放按钮声音
                    AudioMgr_19.AudioMgr.Play("touch.mp3");
                    this.hide();
                };
                videoPrizePage.prototype.show = function () {
                    this.handle.show();
                };
                videoPrizePage.prototype.hide = function () {
                    if (this.fun) {
                        this.c_Time = 0;
                        this.isContinue = true;
                    }
                    this.handle.hide();
                };
                //分享卡片参数 
                videoPrizePage.shareCardParams = function () {
                    this.hasShareCP = true;
                    if (!stageMgr_15.stageMgr.inited)
                        return;
                    //弹出面板
                    videoPrizePage.Instance().then(function (ins) {
                        ins.show();
                        var l = inviteMgr_5.inviteMgr.gold[0];
                        ins.setInfo(l);
                        saveTool_11.saveTool.save(null, null);
                    });
                };
                videoPrizePage.prefabName = "videoPrize_page"; //依赖的 预设体 资源
                videoPrizePage.atlasList = ["videoPrize"]; //依赖的 图集资源
                videoPrizePage.hasShareCP = false;
                return videoPrizePage;
            }()));
        }
    };
});
System.register("Tool/wxTool", ["Tool/tdTool", "Tool/joinTool", "GameMgr", "uiMgr", "ui/pages/videoPrizePage"], function (exports_129, context_129) {
    "use strict";
    var tdTool_14, joinTool_17, GameMgr_37, uiMgr_6, videoPrizePage_7, wxTool;
    var __moduleName = context_129 && context_129.id;
    return {
        setters: [
            function (tdTool_14_1) {
                tdTool_14 = tdTool_14_1;
            },
            function (joinTool_17_1) {
                joinTool_17 = joinTool_17_1;
            },
            function (GameMgr_37_1) {
                GameMgr_37 = GameMgr_37_1;
            },
            function (uiMgr_6_1) {
                uiMgr_6 = uiMgr_6_1;
            },
            function (videoPrizePage_7_1) {
                videoPrizePage_7 = videoPrizePage_7_1;
            }
        ],
        execute: function () {
            exports_129("wxTool", wxTool = /** @class */ (function () {
                function wxTool() {
                }
                wxTool.init = function () {
                    if (!this.wx) {
                        console.warn("__wx__ not find ");
                        return;
                    }
                    m4m["_loadImgFun"] = this._loadImgFun.bind(this);
                    // m4m["refSharedCanvas"] = this.refSharedCanvas.bind(this);
                    this.ckInitSCanvas();
                    this.setfullMode();
                    this.wxSystemInfo = this.wx.getSystemInfoSync();
                };
                wxTool.getStatusBarHeight = function () {
                    if (!this.wx || !this.wxSystemInfo)
                        return 0;
                    return this.wxSystemInfo.statusBarHeight;
                };
                wxTool.getScreenHeightHeight = function () {
                    if (!this.wx || !this.wxSystemInfo)
                        return 0;
                    return this.wxSystemInfo.screenHeight;
                };
                wxTool._loadImgFun = function (url, callBack) {
                    this.wx.downloadFile({
                        url: url,
                        success: function (res) {
                            // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
                            if (res.statusCode === 200) {
                                res.tempFilePath;
                                if (callBack) {
                                    callBack(res.tempFilePath);
                                }
                            }
                        }
                    });
                };
                //加载 方法
                wxTool._loadFun = function (url, callBack, fail) {
                    if (!this.wx)
                        return;
                    this.wx.request({
                        url: url,
                        data: {
                            y: 0,
                            x: 0
                        },
                        header: {
                            'content-type': 'application/json' // 默认值
                        },
                        success: function (res) {
                            if (res.statusCode === 200) {
                                if (callBack) {
                                    callBack(res);
                                }
                            }
                        },
                        fail: function (res) {
                            if (fail)
                                fail();
                        }
                    });
                };
                /** 显示用户授权按钮 */
                wxTool.showUserInfoBtn = function (callback) {
                    var _this = this;
                    if (!wxTool.wx) {
                        if (callback)
                            callback();
                        return;
                    }
                    var dPR = window.devicePixelRatio;
                    var self = this;
                    var sizeRate = 0.5;
                    var sca = window.innerWidth / 720;
                    // let _w = 273 * dPR ;
                    // let _h = 77  * dPR;
                    var _w = 160;
                    var _h = 45;
                    var _top = (window.innerHeight - _h) / 2;
                    var _left = (window.innerWidth - _w) / 2;
                    var offset_h = 160 * sca;
                    var getUInfoFun = function () {
                        wxTool.getUserInfo(callback);
                        joinTool_17.joinTool.tdcustomEvent(tdTool_14.tdTool.Clicked_login_button, tdTool_14.tdTool.Clicked_login_button); //数据埋点
                        joinTool_17.joinTool.tdcustomEvent(tdTool_14.tdTool.Clicked_approve_button, tdTool_14.tdTool.Clicked_approve_button); //数据埋点
                    };
                    if (!this.wx.createUserInfoButton) { //检测到 createUserInfoButton 有 undefined 的情况 版本过低
                        getUInfoFun(); //2.0.1 以下的库 走old 兼容接口
                        return;
                    }
                    var button = this.wx.createUserInfoButton({
                        type: 'image',
                        image: 'resource/login_bt.png',
                        style: {
                            left: _left,
                            top: _top + offset_h,
                            width: _w,
                            height: _h
                        }
                    });
                    button.onTap(function (res) {
                        console.warn("button.onTap", res);
                        _this.wx.getSetting({
                            success: function (res) {
                                console.warn("button.onTap +> getSetting", res);
                            }
                        });
                        _this.ckUserInfoScope(function (isok) {
                            if (isok) {
                                getUInfoFun();
                                button.hide();
                                button.destroy();
                                GameMgr_37.GameMgr.isNewAuth = true;
                            }
                        });
                    });
                };
                //检查 sharedCanvas 初始化
                wxTool.ckInitSCanvas = function () {
                    if (m4m["sharedCanvas"])
                        return;
                    var openDataContext = this.wx.getOpenDataContext();
                    this.sharedCanvas = m4m["sharedCanvas"] = openDataContext.canvas; //canvas
                };
                //检查 宽高设置
                wxTool.setSCanvasWH = function (w, h) {
                    this.sharedCanvas.width = w;
                    this.sharedCanvas.height = h;
                };
                /** 设置 头像Icon跟随 或者 全屏 画板模式 */
                wxTool.setHeadFollowMode = function (isHFollow) {
                    if (!this.wx)
                        return;
                    if (isHFollow == uiMgr_6.uiMgr.sCanvIconMode)
                        return;
                    uiMgr_6.uiMgr.sCanvIconMode = isHFollow;
                    if (isHFollow) {
                        this.setSCanvasWH(this.fIconSize.x, this.fIconSize.y);
                    }
                    else {
                        this.setfullMode();
                    }
                };
                wxTool.setfullMode = function () {
                    var c = uiMgr_6.uiMgr.overlay.canvas;
                    this.setSCanvasWH(c.pixelWidth, c.pixelHeight);
                };
                /** 刷新SharedCanvas */
                wxTool.refSharedCanvas = function () {
                    var sharedCanvas = this.sharedCanvas;
                    var gl = m4m.framework.sceneMgr.app.webgl;
                    var rawImg = uiMgr_6.uiMgr.shareCanvasImg;
                    if (!rawImg)
                        return;
                    //初始
                    if (!rawImg["__initTag__"]) {
                        //rawImg = window["frontPage"].handle.transform.children[5].getComponent("rawImage2D");
                        var _texture = new m4m.framework.texture("canvasTex_".concat(this.texCount));
                        this.texCount++;
                        var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                        //var t2d = new m4m.render.glTexture2D(assetMgr.webgl, _textureFormat);
                        var t2d = new m4m.render.glTexture2D(gl, _textureFormat);
                        t2d.uploadImage(sharedCanvas, false, true, false, false);
                        _texture.glTexture = t2d;
                        uiMgr_6.uiMgr.shareCanvasImg.image = _texture;
                        rawImg["__initTag__"] = true;
                    }
                    else {
                        //刷新 sharedCanvas 的图片
                        var _tex = rawImg.image.glTexture;
                        //_tex.uploadImage(sharedCanvas, false, true, false, false);
                        gl.bindTexture(gl.TEXTURE_2D, _tex.texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, sharedCanvas);
                    }
                };
                //打开
                wxTool.openMiniPrograme = function (appid, path) {
                    if (!this.wx)
                        return;
                    this.wx.navigateToMiniProgram({
                        appId: appid,
                        path: path,
                        extraDate: {
                            foo: "bar"
                        },
                        envVersion: "release",
                        success: function (res) {
                            //打开成功
                            console.warn("openMiniPrograme ok");
                        }
                    });
                };
                //微信 request
                wxTool.request = function (method, url, data, success, complete, fail) {
                    if (data === void 0) { data = null; }
                    if (success === void 0) { success = null; }
                    if (complete === void 0) { complete = null; }
                    if (fail === void 0) { fail = null; }
                    console.log("request:", url, data);
                    this.wx.request({
                        data: data,
                        method: method,
                        dataType: "json",
                        url: url,
                        success: function (e) {
                            console.log("request succ:", e);
                            if (success) {
                                success(e.data);
                            }
                        },
                        fail: function (e) {
                            console.log("request fail:", e);
                            if (fail) {
                                fail(e.data);
                            }
                        },
                        complete: function (e) {
                            if (complete) {
                                complete(e.data);
                            }
                        }
                    });
                };
                //加载 url texture 资源
                wxTool.ImgLoad = function (FilePath, backFun) {
                    var _this = this;
                    //构建 img
                    var img = new Image();
                    img.src = FilePath;
                    img.onload = function () {
                        if (img.complete) {
                            _this.loadTexIdx++;
                            var _texture = new m4m.framework.texture("loadTex_".concat(_this.loadTexIdx));
                            var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                            var t2d = new m4m.render.glTexture2D(m4m.framework.sceneMgr.app.webgl, _textureFormat);
                            t2d.uploadImage(img, false, true, false, false, false); //非2次幂 图 不能显示设置repeat
                            _texture.glTexture = t2d;
                            _texture.use();
                            if (backFun)
                                backFun(_texture);
                        }
                    };
                };
                //获取音频组件
                wxTool.overAudio = function () {
                };
                //获取 audioContext
                wxTool.createAUD = function (url, volume) {
                    var actx = this.wx.createInnerAudioContext();
                    actx.src = url;
                    actx.volume = volume;
                    actx.loop = false;
                    actx.autoplay = true;
                    return actx;
                };
                //存取个人数据
                wxTool.saveData = function (fName, data_, callBack, fial_) {
                    if (!this.wx) {
                        if (fial_) {
                            fial_();
                        }
                        return;
                    }
                    this.wx.setStorage({
                        key: fName,
                        data: data_,
                        success: callBack,
                        fail: fial_
                    });
                };
                //请求获取 保存的数据
                wxTool.reqData = function (fName, callBack, fial_) {
                    if (!this.wx) {
                        if (fial_) {
                            fial_();
                        }
                        return;
                    }
                    this.wx.getStorage({
                        key: fName,
                        success: callBack,
                        fail: fial_
                    });
                };
                //震动短
                wxTool.vibrateShort = function () {
                    if (!this.wx || !GameMgr_37.GameMgr.swVibrate)
                        return;
                    this.wx.vibrateShort();
                };
                //震动长
                wxTool.vibrateLong = function () {
                    if (!this.wx || !GameMgr_37.GameMgr.swVibrate)
                        return;
                    this.wx.vibrateLong();
                };
                wxTool.saveImageToPhotosAlbum = function (filePath) {
                    if (!this.wx || !GameMgr_37.GameMgr.swVibrate)
                        return;
                    this.wx.saveImageToPhotosAlbum({
                        filePath: filePath,
                        success: function (res) {
                            console.log("保存成功!");
                        },
                        fail: function () {
                            console.log("保存失败!");
                        }
                    });
                };
                /** 用户授权设置 */
                wxTool.userSetings = function (callback, ckEnd) {
                    if (ckEnd === void 0) { ckEnd = null; }
                    if (!this.wx) {
                        callback();
                        return;
                    }
                    this.ckUserInfoScope(function (isok) {
                        if (isok) {
                            wxTool.getUserInfo(callback);
                        }
                        else {
                            wxTool.showUserInfoBtn(callback);
                        }
                        if (ckEnd) {
                            ckEnd(isok);
                        }
                    });
                };
                //检查 用户信息获取 授权是否完成
                wxTool.ckUserInfoScope = function (callback) {
                    var self = this;
                    this.wx.getSetting({
                        success: function (res) {
                            var isad = res.authSetting[self.scopeUif];
                            console.log(" \u7528\u6237\u4FE1\u606F\u6388\u6743 : ".concat(isad, " "));
                            if (callback)
                                callback(isad);
                        }
                    });
                };
                /** 获取用户info */
                wxTool.getUserInfo = function (callback) {
                    if (!this.wx) {
                        if (callback)
                            callback();
                        return;
                    }
                    var self = this;
                    wxTool.wx.getUserInfo({
                        success: function (res) {
                            wxTool.userInfoRes = res;
                            // console.log(res);
                            self.myinfo = res.userInfo;
                            if (GameMgr_37.GameMgr.netMode) {
                                wxTool.wxLogin(callback);
                            }
                            else {
                                if (callback)
                                    callback();
                            }
                        }
                    });
                };
                wxTool.wxLogin = function (callback) {
                    if (!this.wx)
                        return;
                    GameMgr_37.GameMgr.onGameShow = this.ckReAct.bind(this);
                    //启动参数
                    var params = wxTool.wx.getLaunchOptionsSync();
                    //每日分享状态 检查
                    console.log(params);
                    console.log(params.query);
                    var onGetToken = function () {
                        wxTool.CKShareCardParams(params.query);
                        if (callback)
                            callback();
                    };
                    //检查 历史保存的自定义登录状态数据
                    //没有数据 向服务器请求
                    wxTool.reqData(this.Fname, function (obj) {
                        if (obj.data && obj.data.token) {
                            wxTool.token = obj.data.token;
                            if (onGetToken)
                                onGetToken();
                            console.log("\u83B7\u53D6 openid \u901A\u8FC7\u672C\u5730");
                        }
                        else {
                            wxTool.loginToWX(onGetToken);
                        }
                    }, function () {
                        wxTool.loginToWX(onGetToken);
                    });
                };
                //请求登录到微信
                wxTool.loginToWX = function (callback) {
                    console.log("\u83B7\u53D6 openid \u901A\u8FC7\u670D\u52A1\u5668");
                    this.login_invite = true;
                    this.wx.login({
                        success: function (res) {
                            if (wxTool.isFristLogin)
                                return; //以及处理过了
                            wxTool.loginToServer(res, callback);
                            wxTool.ckLoginTimeOut(callback); //自定义超时检测 秒后超时
                        },
                        fail: function (res) {
                            if (wxTool.isFristLogin)
                                return; //以及处理过了
                            setTimeout(function () {
                                wxTool.loginToWX(callback); //尝试重新 调用loginToWX
                            }, 500);
                            console.warn("wx.login \u5931\u8D25\uFF0C\u518D\u6B21\u5C1D\u8BD5");
                        }
                    });
                };
                //请求 登录到 服务器
                wxTool.loginToServer = function (res, callback) {
                    if (res.code) {
                        //appid=${wxTool.appid}&secret=${wxTool.appSecret}&
                        // let url = `${GameMgr.DNS_AND_PORT}/wxlogin?js_code=${res.code}&dawdata=${res.rawData}&invitationData=${wxTool.invitationData}`;
                        var tRes = wxTool.userInfoRes;
                        var rawData = tRes ? tRes.rawData : null;
                        var url = "".concat(GameMgr_37.GameMgr.DNS_AND_PORT, "/wxlogin?js_code=").concat(res.code, "&dawdata=").concat(rawData);
                        // 发起网络请求
                        console.log("\u5F00\u59CB\u8BF7\u6C42\u767B\u5F55\u3002\u3002\u3002 " + url);
                        wxTool.wx.request({
                            url: url,
                            success: function (res) {
                                if (wxTool.isFristLogin)
                                    return; //以及处理过了
                                if (res.data && res.data.openid != null) {
                                    wxTool.token = res.data.openid;
                                    wxTool.isNewPlayer = res.data.isNewPlayer;
                                }
                                wxTool.youqingcg = res.data.invite;
                                if (wxTool.token && wxTool.token != "undefined") {
                                    console.log('登录成功!' + wxTool.token);
                                    //保存数据到本地
                                    var obj = { token: wxTool.token };
                                    wxTool.saveData(wxTool.Fname, obj, null, null);
                                    wxTool.isFristLogin = true;
                                    if (callback)
                                        callback();
                                }
                                else {
                                    setTimeout(function () {
                                        wxTool.loginToWX(callback); //尝试重新 调用loginToWX
                                    }, 500);
                                }
                                if (res.data && res.data.errcode != null) {
                                    if (res.data.errcode == 40163) {
                                        console.error("\u8FD9\u4E2A\u9519\u8BEF\u662F 40163  ");
                                    }
                                    console.error("onerr : ".concat(res.data.errcode), res);
                                }
                            },
                            fail: function (res) {
                                if (wxTool.isFristLogin)
                                    return; //以及处理过了
                                console.log('登录失败！');
                                console.log(res);
                                setTimeout(function () {
                                    wxTool.loginToWX(callback); //尝试重新 调用loginToWX
                                }, 500);
                            }
                        });
                    }
                    else {
                        console.log('登录失败！' + res.errMsg);
                    }
                };
                //检查网络超时 避免卡在loading 状态
                wxTool.ckLoginTimeOut = function (callback) {
                    setTimeout(function () {
                        if (!wxTool.isFristLogin) {
                            wxTool.loginToWX(callback);
                        }
                    }, wxTool.ckTime);
                };
                // static OnInvitation(params) {
                //     // console.log("成功被邀请");
                //     params.query["formAppID"] = params.referrerInfo.appId;
                //     let str = JSON.stringify(params.query);
                //     ///  console.log(`启动参数:${str}`);
                //     let shareType = this.viaShare(params.query);
                //     if (!(shareType == 2 || shareType == 3))
                //         return;
                //     wxTool.invitationData = str;
                // }
                //卡片点击 进入 事件上传
                wxTool.viaShare = function (query) {
                    // 分享入口埋点
                    var shareType = query.shareType, subID = query.subID, abTag = query.abTag;
                    var tdpar = {};
                    if (subID == null)
                        subID = 0;
                    tdpar['shareType_' + shareType] = 'id_' + subID;
                    var label = tdTool_14.tdTool.viaShare + abTag;
                    joinTool_17.joinTool.tdcustomEvent(label, label, tdpar);
                    return shareType;
                };
                //检测  每日邀请 或 新年邀请 游戏不关闭点击, 链接 回调
                wxTool.ckReAct = function (params) {
                    if (params) {
                        wxTool.CKShareCardParams(params.query);
                        console.log("分享卡片数据 开始进库了");
                    }
                };
                //检查 每日邀请 、新年邀请 
                wxTool.CKShareCardParams = function (query) {
                    if (!query)
                        return;
                    var shareType = this.viaShare(query);
                    if (!(shareType == 2 || shareType == 3))
                        return; //过滤 非 每日分享 & 新春活动
                    var str = JSON.stringify(query);
                    if (!str || !wxTool.token || str == "{}")
                        return;
                    var url = "".concat(GameMgr_37.GameMgr.DNS_AND_PORT, "/invitationData?token=").concat(wxTool.token, "&invitationData=").concat(str, "&isNewPlayer=").concat(wxTool.isNewPlayer);
                    wxTool.wx.request({
                        url: url,
                        success: function (res) {
                            if (res.data && res.data.body && res.data.body.isC) { //我自己点击了别人的每日分享的链接 ， 获取奖励金币
                                videoPrizePage_7.videoPrizePage.shareCardParams();
                            }
                        },
                        fail: function (res) {
                            console.error(res);
                        }
                    });
                };
                wxTool.wx = m4m["__wx__"];
                wxTool.login_invite = false;
                wxTool.myinfo = null;
                wxTool.fIconSize = new m4m.math.vector2(32, 32); //跟随头像的 尺寸
                wxTool.texCount = 0;
                wxTool.loadTexIdx = 0;
                wxTool.scopeUif = "scope.userInfo";
                wxTool.appid = "wx0d8834040cfabdf5";
                wxTool.token = "";
                // static DNS_AND_PORT = "https://dev-ballrace.upaidui.com";   //育碧测试服
                // static DNS_AND_PORT = "https://wd.h5game.live:6002";    
                //内网虚拟机---144
                //static STATISTICS_DNS_AND_PORT = "http://192.168.88.144:9001";
                // static DNS_AND_PORT = "https://wq.h5game.live:9006";    //外网测试服
                //static DNS_AND_PORT = "http://192.168.88.247:9001";
                //  static DNS_AND_PORT = "https://prod-ballrace.upaidui.com"; //育碧正式服
                //是否是新用户
                wxTool.isNewPlayer = false;
                //邀请成功?
                wxTool.youqingcg = false;
                wxTool.Fname = "playerToken";
                /** 初次登录 用户 */
                wxTool.isFristLogin = false;
                wxTool.ckTime = 3000;
                return wxTool;
            }()));
        }
    };
});
System.register("Tool/saveTool", ["GameMgr", "Tool/wxTool"], function (exports_130, context_130) {
    "use strict";
    var GameMgr_38, wxTool_17, saveTool;
    var __moduleName = context_130 && context_130.id;
    return {
        setters: [
            function (GameMgr_38_1) {
                GameMgr_38 = GameMgr_38_1;
            },
            function (wxTool_17_1) {
                wxTool_17 = wxTool_17_1;
            }
        ],
        execute: function () {
            exports_130("saveTool", saveTool = /** @class */ (function () {
                //保存工具
                function saveTool() {
                }
                //示例
                //同步数据
                //   saveTool.requestData("http://192.168.88.247:9001");
                //同步服务器的数据到本地
                saveTool.requestData = function (url_, token, callBack, fial) {
                    if (!wxTool_17.wxTool.token || wxTool_17.wxTool.token == "undefined")
                        return;
                    //   fial();
                    var url = url_ + "/getattr?token=".concat(token);
                    //console.log(url);
                    wxTool_17.wxTool._loadFun(url, function (res) {
                        var data = res.data;
                        console.log(data);
                        if (data.message != "success") {
                            console.log(data.message);
                            // console.log(url);
                            //请求数据失败后 再请求一次login 流程 （客户端登录过 缓存了token ， 服务器找不到 对应token的数据）
                            setTimeout(function () {
                                wxTool_17.wxTool.loginToWX(function () {
                                    saveTool.requestData(url_, wxTool_17.wxTool.token, callBack, fial); //重新尝试
                                });
                            }, 100);
                        }
                        else {
                            var body = data.body;
                            try {
                                saveTool.diamond = body.diamond;
                                saveTool.currUseSkin = parseInt(body.currUseSkin);
                                saveTool.currUseTheme = parseInt(body.currUseTheme);
                                saveTool.unlockSkins = body.unlockSkins;
                                saveTool.unlockTheme = body.unlockTheme;
                                saveTool.currentLevel = parseInt(body.currentLevel);
                                saveTool.newRecord = parseInt(body.newRecord);
                                saveTool.shareActivity = parseInt(body.shareActivity);
                                saveTool.newYear_invite = body.newYear_invite;
                                saveTool.newYear_inviteSucceed = body.newYear_inviteSucceed;
                                saveTool.swSound = body.swSound;
                                saveTool.swHighEffect = body.swHighEffect;
                                saveTool.swVibrate = body.swVibrate;
                                saveTool.videoSkin_num = body.videoSkin_num;
                                console.log(saveTool.videoSkin_num);
                                console.log("saveTool.videoSkin_num");
                                console.log(saveTool.unlockSkins);
                                console.log("saveTool.unlockSkins");
                                saveTool.rests = body.rests;
                                saveTool.unlockSkins[0] = true;
                                saveTool.unlockTheme[0] = true;
                                console.log("同步服务器的数据到本地");
                                callBack();
                            }
                            catch (e) {
                                setTimeout(function () {
                                    saveTool.requestData(url_, token, callBack, fial); //重新尝试
                                }, 100);
                                console.log("同步服务器的数据到本地失败");
                                console.log(e);
                            }
                            //console.log(body);
                        }
                    }, function () {
                        setTimeout(function () {
                            saveTool.requestData(url_, token, callBack, fial); //重新尝试
                        }, 100);
                        // saveTool.downLoad(null, null);
                    });
                };
                //示例
                //  saveTool.syncData("http://192.168.88.247:9001");
                //同步本地的数据到服务器
                saveTool.syncData = function (url, token, callBack, fial) {
                    if (wxTool_17.wxTool.token == "" && wxTool_17.wxTool.token == undefined || wxTool_17.wxTool.token == "undefined")
                        return;
                    url = url + "/syncattr?token=".concat(token, "&diamond=").concat(this.diamond, "&currUseSkin=").concat(this.currUseSkin, "&currUseTheme=").concat(this.currUseTheme, "&unlockSkins=").concat(JSON.stringify(this.unlockSkins), "&unlockTheme=").concat(JSON.stringify(this.unlockTheme), "&newRecord=").concat(this.newRecord, "&currentLevel=").concat(this.currentLevel);
                    url = url + "&shareActivity=".concat(saveTool.shareActivity, "&newYear_invite=").concat(saveTool.newYear_invite, "&newYear_inviteSucceed=").concat(saveTool.newYear_inviteSucceed, "&swSound=").concat(saveTool.swSound, "&swHighEffect=").concat(saveTool.swHighEffect, "&swVibrate=").concat(saveTool.swVibrate, "&videoSkin_num=").concat(JSON.stringify(saveTool.videoSkin_num), "&rests=").concat(JSON.stringify(saveTool.rests));
                    wxTool_17.wxTool._loadFun(url, function (res) {
                        console.log("同步本地的数据到服务器!");
                        if (callBack)
                            callBack();
                    }, function () {
                        saveTool.save(null, null);
                    });
                };
                //清理数据
                saveTool.clearData = function () {
                    var clear = {};
                    clear["swSound"] = true;
                    clear["swHighEffect"] = false;
                    clear["swVibrate"] = true;
                    clear["diamond"] = 0;
                    clear["currentLevel"] = 0;
                    clear["unlockSkins"] = {};
                    clear["currUseSkin"] = 0;
                    clear["lastLoginTime"] = 0;
                    clear["newRecord"] = 0;
                    wxTool_17.wxTool.saveData(this.Fname, clear, function () {
                        console.error("init date to server Success");
                    }, null);
                };
                saveTool.save = function (callBack, fial) {
                    if (GameMgr_38.GameMgr.netMode) {
                        this.syncData(GameMgr_38.GameMgr.DNS_AND_PORT, wxTool_17.wxTool.token, callBack, fial);
                    }
                    else {
                        this.jsonObj["swSound"] = this.swSound;
                        this.jsonObj["swHighEffect"] = this.swHighEffect;
                        this.jsonObj["swVibrate"] = this.swVibrate;
                        this.jsonObj["diamond"] = this.diamond;
                        this.jsonObj["currentLevel"] = this.currentLevel;
                        this.jsonObj["unlockSkins"] = this.unlockSkins;
                        this.jsonObj["currUseSkin"] = this.currUseSkin;
                        this.jsonObj["lastLoginTime"] = this.lastLoginTime;
                        this.jsonObj["newRecord"] = this.newRecord;
                        wxTool_17.wxTool.saveData(this.Fname, this.jsonObj, function () {
                            if (callBack) {
                                callBack();
                            }
                            console.error("save date to server Success");
                        }, fial);
                    }
                    /*
                */
                };
                /** 下载同步数据 */
                saveTool.downLoad = function (callBack, fial) {
                    var _this = this;
                    if (GameMgr_38.GameMgr.netMode) {
                        this.requestData(GameMgr_38.GameMgr.DNS_AND_PORT, wxTool_17.wxTool.token, callBack, fial);
                    }
                    else {
                        wxTool_17.wxTool.reqData(this.Fname, function (obj) {
                            _this.setConf(obj.data);
                            console.error("downLoad date Success");
                            if (callBack) {
                                callBack();
                            }
                        }, fial);
                    }
                };
                saveTool.setConf = function (obj) {
                    for (var k in obj) {
                        saveTool[k] = obj[k];
                    }
                };
                //获取好友头像
                saveTool.headPortrait = function () {
                    var token = wxTool_17.wxTool.token;
                    if (wxTool_17.wxTool.token == "" || wxTool_17.wxTool.token == undefined || wxTool_17.wxTool.token == "undefined")
                        return;
                    var url = GameMgr_38.GameMgr.DNS_AND_PORT + "/headPortrait?token=" + token;
                    wxTool_17.wxTool._loadFun(url, function (res) {
                        saveTool.user_imgs = res.data.body;
                    }, null);
                };
                //保存到本地
                saveTool.savaToNative = function (callBack, fial) {
                    this.jsonObj["win_time"] = this.win_time;
                    wxTool_17.wxTool.saveData(this.Fname, this.jsonObj, function () {
                        if (callBack) {
                            callBack();
                        }
                        console.error("save date to server Success");
                    }, fial);
                };
                //读取本地信息
                saveTool.downLoaodNative = function (callBack, fial) {
                    wxTool_17.wxTool.reqData(this.Fname, function (obj) {
                        saveTool.setConf(obj.data);
                        console.error("downLoad date Success");
                        if (callBack) {
                            callBack();
                        }
                    }, fial);
                };
                /**
                 * 统计数据存储
                 * @info  统计内内容串
                 * @targetId  统计目标id
                 */
                saveTool.sava_statistics = function (info, targetId) {
                    //http://192.168.88.144:9001/Statistics?token=5465&info=%22info%22&targetId=1
                    /*let url = `${wxTool.STATISTICS_DNS_AND_PORT}/Statistics?token=${wxTool.token}&info=${info}&targetId=${targetId}`
                    wxTool._loadFun(url, function (res) {
                
                        let data = res.data;
                        console.log(data);
                        if (data.message != "success" || data.body != "同步失败!") {
                            console.error("统计数据保存失败!");
                        } else {
                            console.error("统计数据保存成功!");
                        }
                
                    }, function () {
                        saveTool.downLoad(null, null);
                    });*/
                };
                saveTool.Fname = "playerDate";
                saveTool.swSound = true; //声音开关
                saveTool.swHighEffect = false; //高特效
                saveTool.swVibrate = true; //震动开关
                saveTool.diamond = 0; //钻石数量
                saveTool.currentLevel = 0; // 当前关卡
                saveTool.unlockSkins = { 0: true, 23: true }; //解锁的皮肤 {1：true,2:true,3:true} （toSever ）
                saveTool.currUseSkin = 0; //当前使用的皮肤 id  （toSever ）
                saveTool.lastLoginTime = 0; //上一次登录时间
                saveTool.unlockTheme = { 0: true, 6: true }; //解锁的主题 {1：true,2:true,3:true} （toSever ）
                saveTool.currUseTheme = 0; //当前使用的主题 id  （toSever ）
                saveTool.newRecord = 0; //新纪录  历史最高分 （toSever ）xx关[bestScore >> 16] 、 xx名[bestScore & 65535] 
                saveTool.newYear_invite = false; //新年活动是否已经邀请过好友
                saveTool.newYear_inviteSucceed = false; //新年活动是否已经领取了?
                saveTool.shareActivity = 0; //每日分享领取了多少次最后的奖励
                saveTool.videoSkin_num = {}; //看视频解锁的皮肤看视频的数量
                saveTool.rests = {};
                //上一次弹窗时间--->
                saveTool.win_time = "1970-1-1";
                saveTool.jsonObj = {};
                return saveTool;
            }()));
        }
    };
});
System.register("GameMgr", ["audio/AudioMgr", "Tools/FrameMgr", "Tool/saveTool", "Tool/wxTool"], function (exports_131, context_131) {
    "use strict";
    var AudioMgr_20, FrameMgr_10, saveTool_12, wxTool_18, GameMgr;
    var __moduleName = context_131 && context_131.id;
    return {
        setters: [
            function (AudioMgr_20_1) {
                AudioMgr_20 = AudioMgr_20_1;
            },
            function (FrameMgr_10_1) {
                FrameMgr_10 = FrameMgr_10_1;
            },
            function (saveTool_12_1) {
                saveTool_12 = saveTool_12_1;
            },
            function (wxTool_18_1) {
                wxTool_18 = wxTool_18_1;
            }
        ],
        execute: function () {
            exports_131("GameMgr", GameMgr = /** @class */ (function () {
                function GameMgr() {
                }
                GameMgr.init = function (app) {
                    var _this = this;
                    // if(this.developModel){
                    //     consTool.init();
                    // }
                    this.app = app;
                    this.appUpdateFun = this.app["update"];
                    this.assetMgr = this.app.getAssetMgr();
                    this.app.markNotify = function () { }; //不需要广播
                    // this.app["updateOrientationMode"] = () => { }; //不需要方向检测 
                    this.app.isFrustumCulling = false; //剔除不需要 （会增加消耗）
                    this.inputMgr = this.app.getInputMgr();
                    this.app.addUserCode(FrameMgr_10.FrameMgr.name); //帧管理对象创建
                    this.engineReplay();
                    //wx hide & show
                    if (wxTool_18.wxTool.wx) {
                        // wxTool.wx.onHide(() => { GameMgr.app.bePlay = false; console.error(`game on wx hide`); });
                        // wxTool.wx.onShow(() => { GameMgr.app.bePlay = true; console.error(`game on wx show`); });
                        wxTool_18.wxTool.wx.onHide(function () {
                            _this.enginePause();
                            wxTool_18.wxTool.isNewPlayer = false;
                            console.error("game on wx hide");
                            if (_this.onGameHide)
                                _this.onGameHide();
                        });
                        wxTool_18.wxTool.wx.onShow(function (res) {
                            _this.engineReplay();
                            console.error("game on wx show");
                            console.log(res);
                            if (_this.onGameShow)
                                _this.onGameShow(res);
                        });
                    }
                    if (m4m["gameVersion"]) {
                        this.gameVersion = m4m["gameVersion"];
                    }
                    if (m4m["CDNURL"]) {
                        this._CDNURL = m4m["CDNURL"];
                    }
                    if (m4m["DNS_AND_PORT"]) {
                        this.DNS_AND_PORT = m4m["DNS_AND_PORT"];
                    }
                    /*    saveTool.downLoad(() => {
                            console.error("加载save 数据完成！ ");
                            //   resolve();
                        }, () => {
                            //console.error(`加载save 数据失败！ 可能初次需要先保存`);
                            //   saveTool.save(() => { }, () => { });
                            //   resolve();
                        });*/
                    //other init
                };
                /** 引擎暂停 */
                GameMgr.enginePause = function () {
                    this.app["update"] = this.nullFun;
                };
                /** 引擎恢复运行 */
                GameMgr.engineReplay = function () {
                    this.app["update"] = this.appUpdateFun;
                    if (this.raceStage === 1) // 如果在游戏中, 恢复背景音乐
                        AudioMgr_20.AudioMgr.Play("environment.mp3", true);
                };
                //获取 storge 或者 服务器上的数据
                GameMgr.downLoadData = function () {
                    // save data
                    return new m4m.threading.gdPromise(function (resolve, reject) {
                        if (!wxTool_18.wxTool.wx) {
                            resolve();
                            return;
                        }
                        ;
                        saveTool_12.saveTool.downLoad(function () {
                            console.error("加载save 数据完成！ ");
                            resolve();
                        }, function () {
                            if (!GameMgr.netMode) {
                                console.error("\u52A0\u8F7Dsave \u6570\u636E\u5931\u8D25\uFF01 \u53EF\u80FD\u521D\u6B21\u9700\u8981\u5148\u4FDD\u5B58");
                                saveTool_12.saveTool.save(function () { }, function () { });
                                resolve();
                            }
                        });
                        saveTool_12.saveTool.downLoaodNative(null, null);
                    });
                };
                Object.defineProperty(GameMgr, "swSound", {
                    //
                    //震动开关
                    get: function () { return saveTool_12.saveTool.swSound; },
                    set: function (val) { saveTool_12.saveTool.swSound = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "swVibrate", {
                    get: function () { return saveTool_12.saveTool.swVibrate; },
                    set: function (val) { saveTool_12.saveTool.swVibrate = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "diamond", {
                    get: function () { return saveTool_12.saveTool.diamond; },
                    set: function (val) { saveTool_12.saveTool.diamond = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "newRecord", {
                    get: function () { return saveTool_12.saveTool.newRecord; },
                    set: function (val) { saveTool_12.saveTool.newRecord = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "currentLevel", {
                    get: function () { return saveTool_12.saveTool.currentLevel; },
                    set: function (val) { saveTool_12.saveTool.currentLevel = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "unlockSkins", {
                    get: function () { return saveTool_12.saveTool.unlockSkins; },
                    set: function (val) { saveTool_12.saveTool.unlockSkins = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "newYear_invite", {
                    get: function () { return saveTool_12.saveTool.newYear_invite; },
                    set: function (val) { saveTool_12.saveTool.newYear_invite = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "newYear_inviteSucceed", {
                    get: function () { return saveTool_12.saveTool.newYear_inviteSucceed; },
                    set: function (val) { saveTool_12.saveTool.newYear_inviteSucceed = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "unlockTheme", {
                    get: function () { return saveTool_12.saveTool.unlockTheme; },
                    set: function (val) { saveTool_12.saveTool.unlockTheme = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "shareActivity", {
                    get: function () { return saveTool_12.saveTool.shareActivity; },
                    set: function (val) { saveTool_12.saveTool.shareActivity = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "currUseSkin", {
                    get: function () { return saveTool_12.saveTool.currUseSkin; },
                    set: function (val) { saveTool_12.saveTool.currUseSkin = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "currUseTheme", {
                    get: function () { return saveTool_12.saveTool.currUseTheme; },
                    set: function (val) { saveTool_12.saveTool.currUseTheme = val; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Object.defineProperty(GameMgr, "CDNURL", {
                    get: function () { return this._CDNURL; },
                    enumerable: false,
                    configurable: true
                });
                GameMgr.raceStage = 0; //0：停止 、1：运行 -1 :结束
                GameMgr.nullFun = function () { };
                //-----------------
                GameMgr.gameName = "ballsrace";
                GameMgr.isNewAuth = false; //是否是 新授权登录（需要点击 微信登录 按钮） 的用户
                GameMgr.developModel = false; //debuge 模式
                GameMgr.netMode = true; //数存储 走网络 或 本地
                GameMgr.maxLoadingCount = 16; //max loading progress lines count
                GameMgr.cubeLayer = 8; //cube terrain layer number
                GameMgr.limitDtime = 0.06; //dTime limit
                GameMgr.configPath = "res/config/";
                GameMgr.atlasPath = "res/art/atlas/";
                GameMgr.TexPath = "res/art/texture/";
                GameMgr.UIPath = "res/art/ui/";
                GameMgr.propsPath = "res/art/props/";
                GameMgr.bgPath = "res/art/img/bg/";
                GameMgr.iconPath = "res/art/img/icon/";
                GameMgr.fxPath = "res/art/FX/";
                GameMgr.audioPath = "res/art/audio/";
                GameMgr.fontPath = "res/art/font/";
                GameMgr.skinTexPath = "res/art/skin/textures/";
                GameMgr.skinIconPath = "res/art/skin/icon/";
                GameMgr.themeTexPath = "res/art/theme/textures/";
                GameMgr.themeIconPath = "res/art/theme/icon/";
                GameMgr.newYearIconPath = "res/art/newYear/";
                // 是否启用钱包
                GameMgr.openWalletBol = true;
                //是否钱包交互跳转loading
                GameMgr.connectWalletLoadingBool = true;
                GameMgr.DNS_AND_PORT = "";
                GameMgr._CDNURL = "";
                //----------------- tags
                GameMgr.BoostTag = "BoostTag";
                GameMgr.CoinTag = "CoinTag";
                GameMgr.RampTag = "RampTag";
                GameMgr.WayBunchLength = 100;
                return GameMgr;
            }()));
        }
    };
});
System.register("AudioMgr", ["GameMgr", "Tool/wxTool"], function (exports_132, context_132) {
    "use strict";
    var GameMgr_39, wxTool_19, AudioMgr;
    var __moduleName = context_132 && context_132.id;
    return {
        setters: [
            function (GameMgr_39_1) {
                GameMgr_39 = GameMgr_39_1;
            },
            function (wxTool_19_1) {
                wxTool_19 = wxTool_19_1;
            }
        ],
        execute: function () {
            exports_132("AudioMgr", AudioMgr = /** @class */ (function () {
                function AudioMgr() {
                }
                Object.defineProperty(AudioMgr, "IsOff", {
                    get: function () { return this._isoff; },
                    enumerable: false,
                    configurable: true
                });
                ; //是否静音
                AudioMgr.init = function () {
                    this._isoff = !GameMgr_39.GameMgr.swSound;
                    // let bgmUrl = `${GameMgr.audioPath}bgm.mp3`;
                    if (wxTool_19.wxTool.wx) {
                        // bgmUrl = m4m["CNDURL"] + bgmUrl;
                        // let innerAudioContext = wxTool.wx.createInnerAudioContext();
                        // //innerAudioContext.autoplay = true
                        // innerAudioContext.src = bgmUrl;
                        // this.wxRes[this.bgmTag] = innerAudioContext;
                    }
                    else {
                        var sce = m4m.framework.sceneMgr.scene;
                        var listener = sce.mainCamera.gameObject.addComponent("AudioListener");
                        var tr = new m4m.framework.transform();
                        sce.addChild(tr);
                        this.bgPlayer = tr.gameObject.addComponent("AudioPlayer");
                        this.bgPlayer.be3DSound = false;
                        // //注册
                        // m4m.framework.AudioEx.instance().loadAudioBuffer(bgmUrl, (buf, err) =>
                        // {
                        //     this.res[this.bgmTag] = buf;
                        // });
                    }
                };
                //添加音效
                AudioMgr.ckAddAudio = function (resName, cliecbind) {
                    var _this = this;
                    if (wxTool_19.wxTool.wx) {
                        var resUrl = "".concat(GameMgr_39.GameMgr.CDNURL).concat(GameMgr_39.GameMgr.audioPath).concat(resName);
                        if (this.wxRes[resName])
                            return;
                        var innerAudioContext = wxTool_19.wxTool.wx.createInnerAudioContext();
                        //innerAudioContext.autoplay = true
                        innerAudioContext.src = resUrl;
                        this.wxRes[resName] = innerAudioContext;
                    }
                    else {
                        if (this.res[resName]) {
                            cliecbind();
                            return;
                        }
                        var resUrl = "".concat(GameMgr_39.GameMgr.audioPath).concat(resName);
                        //注册
                        m4m.framework.AudioEx.instance().loadAudioBuffer(resUrl, function (buf, err) {
                            _this.res[resName] = buf;
                            if (cliecbind) {
                                cliecbind();
                            }
                        });
                    }
                };
                //静音操作
                AudioMgr.setMute = function (mute) {
                    this._isoff = mute;
                    var v = 0;
                    if (!mute) {
                        v = this.bgm_volume;
                    }
                    if (wxTool_19.wxTool.wx) {
                        for (var key in this.wxRes) {
                            if (this.wxRes[key]) {
                                this.wxRes[key].volume = v;
                            }
                        }
                    }
                    else {
                        if (this.bgPlayer)
                            this.bgPlayer.volume = v;
                    }
                };
                /** 播放指定音源 */
                AudioMgr.Play = function (resName, isloop) {
                    var _this = this;
                    if (resName === void 0) { resName = ""; }
                    if (isloop === void 0) { isloop = false; }
                    this.ckAddAudio(resName, function () {
                        var v = _this.IsOff ? 0 : _this.bgm_volume;
                        if (wxTool_19.wxTool.wx) { //微信模式
                            if (_this.wxRes[resName]) {
                                _this.wxRes[resName].loop = isloop;
                                _this.wxRes[resName].volume = v;
                                if (v != 0) {
                                    _this.wxRes[resName].play();
                                }
                            }
                        }
                        else {
                            if (resName == "" || !_this.res[resName])
                                return;
                            console.log(resName, isloop);
                            _this.bgPlayer.play(_this.res[resName], true, v);
                            _this.bgPlayer.beLoop = isloop;
                        }
                    });
                };
                /** 停止播放 */
                AudioMgr.Stop = function (resName) {
                    if (resName === void 0) { resName = ""; }
                    if (wxTool_19.wxTool.wx) {
                        if (this.wxRes[resName]) {
                            this.wxRes[resName].stop();
                        }
                    }
                    else {
                        // if(resName.indexOf(resName) != -1){
                        //     this.bgPlayer.stop();
                        // }
                    }
                };
                /** 跳到指定进度位置 */
                AudioMgr.Seek = function (resName, position) {
                    if (wxTool_19.wxTool.wx) {
                        if (this.wxRes[resName]) {
                            this.wxRes[resName].seek(position);
                        }
                    }
                };
                AudioMgr.stopAll = function () {
                    if (wxTool_19.wxTool.wx) {
                        console.error("wxRes", this.wxRes);
                        for (var key in this.wxRes) {
                            if (this.wxRes[key]) {
                                this.wxRes[key].stop();
                            }
                        }
                    }
                };
                AudioMgr.pause = function (resName) {
                    if (resName === void 0) { resName = ""; }
                    if (wxTool_19.wxTool.wx) {
                        if (this.wxRes[resName]) {
                            this.wxRes[resName].pause();
                        }
                    }
                    else {
                        //
                    }
                };
                AudioMgr.buttonMusic = function () {
                    this.Play(this.btMusic);
                };
                //---- 使用的资源
                AudioMgr.ball = "ball.mp3";
                AudioMgr.boost = "boost.mp3";
                AudioMgr.character = "character.mp3";
                AudioMgr.environment = "environment.mp3";
                AudioMgr.touch = "touch.mp3";
                AudioMgr.gold = "gold.mp3";
                //按钮声音
                AudioMgr.btMusic = "touch.mp3";
                //----
                AudioMgr._isoff = false;
                // static sound: boolean = true;
                // static music: boolean = true;
                AudioMgr.bgm_volume = 0.5; //背景音音量
                AudioMgr.res = {};
                AudioMgr.wxRes = {}; //wxAudioContexts
                return AudioMgr;
            }()));
        }
    };
});
System.register("Tool/consTool", [], function (exports_133, context_133) {
    "use strict";
    var consTool;
    var __moduleName = context_133 && context_133.id;
    return {
        setters: [],
        execute: function () {
            exports_133("consTool", consTool = /** @class */ (function () {
                function consTool() {
                }
                consTool.init = function () {
                    m4m[this.tag] = consTool;
                    //this.scanAllUsercode();
                    this.scan_new();
                };
                consTool.scanAllUsercode = function () {
                    var symbolkey = Reflect.ownKeys(globalThis.System.registry)[1]; //固定位置
                    var missObj = globalThis.System.registry[symbolkey];
                    for (var key in missObj) {
                        if (typeof (key) == "string") {
                            var test = this.userCode.test(key);
                            if (test) {
                                var arr = key.split("/");
                                var endStr = arr[arr.length - 1];
                                var temp = missObj[key][endStr];
                                if (temp)
                                    m4m[this.tag][temp.name] = temp;
                            }
                        }
                    }
                };
                consTool.scan_new = function () {
                    var missObj = globalThis.System.models;
                    for (var key in missObj) {
                        var arr = key.split("/");
                        var endStr = arr[arr.length - 1];
                        var classObj = missObj[key][endStr];
                        if (classObj) {
                            m4m[this.tag][endStr] = classObj;
                        }
                    }
                };
                consTool.tag = "__consTool";
                consTool.userCode = /__usercode__/;
                return consTool;
            }()));
        }
    };
});
System.register("appMain", ["PSDUI/UiManager", "Tools/ScreenshotMgr", "Core/StageMgr", "GameMgr", "Net/NetWebsocket", "Net/SDKWebsocket", "Tool/consTool", "uiMgr"], function (exports_134, context_134) {
    "use strict";
    var UiManager_8, ScreenshotMgr_2, StageMgr_4, GameMgr_40, NetWebsocket_5, SDKWebsocket_2, consTool_1, uiMgr_7, AppMain;
    var __moduleName = context_134 && context_134.id;
    return {
        setters: [
            function (UiManager_8_1) {
                UiManager_8 = UiManager_8_1;
            },
            function (ScreenshotMgr_2_1) {
                ScreenshotMgr_2 = ScreenshotMgr_2_1;
            },
            function (StageMgr_4_1) {
                StageMgr_4 = StageMgr_4_1;
            },
            function (GameMgr_40_1) {
                GameMgr_40 = GameMgr_40_1;
            },
            function (NetWebsocket_5_1) {
                NetWebsocket_5 = NetWebsocket_5_1;
            },
            function (SDKWebsocket_2_1) {
                SDKWebsocket_2 = SDKWebsocket_2_1;
            },
            function (consTool_1_1) {
                consTool_1 = consTool_1_1;
            },
            function (uiMgr_7_1) {
                uiMgr_7 = uiMgr_7_1;
            }
        ],
        execute: function () {
            /** core enter point */
            AppMain = /** @class */ (function () {
                function AppMain() {
                    UiManager_8.UiManager.InitUi("wloading");
                    consTool_1.consTool.init();
                    //init
                    //console.log(`appMain inited`);
                    // 引擎启动
                    this.initEngine();
                    var app = m4m.framework.sceneMgr.app;
                    //项目启动
                    var width = 1242;
                    var height = 2688;
                    //屏幕适配处理
                    //因会被广告位档到  iphone  5  5s   iphone 8  ui整体微调缩小
                    var isLowPix = app.canvasClientHeight <= 414;
                    var pixChange = 1;
                    pixChange = (app.canvasClientHeight * 530) / (height * (app.canvasClientHeight - 135));
                    var screenMatchRate = 0; //如果是以高度固定的 模屏 模式  要把这个值设置为1   默认为竖屏模式
                    //处理窄屏UI适配问题
                    var asp = app.width / app.height;
                    var min = 0.6;
                    var max = 1.68;
                    asp = asp < min ? min : asp;
                    if (asp < max) {
                        screenMatchRate = (asp - min) / (max - min);
                    }
                    //相机ui
                    console.log("width\uFF1A".concat(width, "height\uFF1A").concat(height));
                    UiManager_8.UiManager.init(width, height, screenMatchRate, GameMgr_40.GameMgr.UIPath, GameMgr_40.GameMgr.atlasPath);
                    UiManager_8.UiManager.dontDisposeUIList = [];
                    UiManager_8.UiManager.overlay.canvas.enableOutsideRenderClip = true; //开启2d 视窗 剔除
                    //测试下来 1024 * 64 或 1024 * 128 最优
                    m4m.framework.batcher2D["limitCount"] = 1024 * 64; //设置 UI vbo buffer 大小上限 ， 不同项目需要平衡（太大太小都不好）。
                    //
                    this.connectWebSocket();
                    this.SDKconnectWebSocket();
                    GameMgr_40.GameMgr.init(app);
                    //UI
                    uiMgr_7.uiMgr.init();
                    StageMgr_4.StageMgr.init();
                    //截屏管理器
                    ScreenshotMgr_2.ScreenshotMgr.init();
                    // //提前UI
                    //初始化资源加载
                    //  场景启动
                }
                //连接服务器
                AppMain.prototype.connectWebSocket = function () {
                    // 外网
                    //"wss://kingzet.cn"
                    m4m.io.loadText("res/server.json", function (txt, _err, isFail) {
                        if (isFail) {
                            console.error("load  server.json err : ".concat(_err));
                            return;
                        }
                        var obj = JSON.parse(txt);
                        NetWebsocket_5.NetWebscoket.Instance.connect(obj.SERVER_ID);
                        // console.error(`账号配置加载完毕!`,obj.SERVER_ID);
                    });
                };
                AppMain.prototype.SDKconnectWebSocket = function () {
                    m4m.io.loadText("res/server.json", function (txt, _err, isFail) {
                        if (isFail) {
                            console.error("load  server.json err : ".concat(_err));
                            return;
                        }
                        var obj = JSON.parse(txt);
                        SDKWebsocket_2.SDKWebsocket.Instance.connect(obj.SERVER_IDNFT);
                        // console.error(`账号配置加载完毕!`,obj.SERVER_ID);
                    });
                };
                AppMain.prototype.initEngine = function () {
                    var app = m4m.framework.sceneMgr.app;
                    if (!app) {
                        app = new m4m.framework.application();
                        // 引擎启动
                        app.bePlay = true;
                        var rootEle = document.getElementById("gamecontainer");
                        app.start(rootEle, m4m.framework.CanvasFixedType.Free);
                        app.orientation = m4m.framework.OrientationMode.PORTRAIT;
                        if (window != null) {
                            window.onorientationchange = function () {
                                app.refreshOrientationMode(); //屏幕有旋转时，刷新屏幕方向。
                            };
                        }
                    }
                };
                return AppMain;
            }());
            exports_134("AppMain", AppMain);
            setTimeout(function () {
                var a = new AppMain();
            }, 0);
        }
    };
});
System.register("network", [], function (exports_135, context_135) {
    "use strict";
    var network;
    var __moduleName = context_135 && context_135.id;
    return {
        setters: [],
        execute: function () {
            network = /** @class */ (function () {
                function network() {
                }
                network.prototype.hello = function () {
                    /*  let xmlhttp = new XMLHttpRequest();
                      xmlhttp.open("GET", "http://localhost:9001/getattr?token=123", false);
                      xmlhttp.send(null);
                      let xmlDoc = xmlhttp.responseText;
                      console.log(xmlDoc);*/
                };
                return network;
            }());
            exports_135("network", network);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/FriendConfigBuffer", ["Net/NetData"], function (exports_136, context_136) {
    "use strict";
    var NetData_29, FriendConfigBuffer;
    var __moduleName = context_136 && context_136.id;
    return {
        setters: [
            function (NetData_29_1) {
                NetData_29 = NetData_29_1;
            }
        ],
        execute: function () {
            FriendConfigBuffer = /** @class */ (function () {
                function FriendConfigBuffer() {
                }
                Object.defineProperty(FriendConfigBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new FriendConfigBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                FriendConfigBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_29.NetData.readString(br);
                    getData["quantity"] = br.readByte();
                    getData["blacklistQuantity"] = br.readByte();
                    getData["suggestFriendLev"] = br.readByte();
                    getData["suggestFriendLog"] = br.readByte();
                    getData["friendRequestTime"] = br.readByte();
                    getData["desc"] = NetData_29.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return FriendConfigBuffer;
            }());
            exports_136("FriendConfigBuffer", FriendConfigBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/FriendDataBuffer", ["Net/NetData"], function (exports_137, context_137) {
    "use strict";
    var NetData_30, FriendDataBuffer;
    var __moduleName = context_137 && context_137.id;
    return {
        setters: [
            function (NetData_30_1) {
                NetData_30 = NetData_30_1;
            }
        ],
        execute: function () {
            FriendDataBuffer = /** @class */ (function () {
                function FriendDataBuffer() {
                }
                Object.defineProperty(FriendDataBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new FriendDataBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                FriendDataBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_30.NetData.readString(br);
                    getData["playerId"] = NetData_30.NetData.readString(br);
                    getData["frinedName"] = NetData_30.NetData.readString(br);
                    getData["icon"] = NetData_30.NetData.readString(br);
                    getData["camp"] = br.readInt32();
                    getData["rank"] = br.readInt32();
                    getData["status"] = br.readByte();
                    getData["time"] = br.readULong();
                    getData["power"] = br.readInt32();
                    getData["creatTime"] = br.readULong();
                    getData["friendStatus"] = br.readByte();
                    getData["realTimeMessage"] = NetData_30.NetData.readString(br);
                    getData["historyMessage"] = NetData_30.NetData.readString(br);
                    getData["desc"] = NetData_30.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return FriendDataBuffer;
            }());
            exports_137("FriendDataBuffer", FriendDataBuffer);
        }
    };
});
System.register("AutoCode/Net/BufferDatas/RoleExpBaseBuffer", ["Net/NetData"], function (exports_138, context_138) {
    "use strict";
    var NetData_31, RoleExpBaseBuffer;
    var __moduleName = context_138 && context_138.id;
    return {
        setters: [
            function (NetData_31_1) {
                NetData_31 = NetData_31_1;
            }
        ],
        execute: function () {
            RoleExpBaseBuffer = /** @class */ (function () {
                function RoleExpBaseBuffer() {
                }
                Object.defineProperty(RoleExpBaseBuffer, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new RoleExpBaseBuffer();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                RoleExpBaseBuffer.prototype.readArrayBuffer = function (br) {
                    var getData = {};
                    var isNull = br.readBoolean();
                    if (isNull) {
                        return null;
                    }
                    var len = 0;
                    getData["id"] = NetData_31.NetData.readString(br);
                    getData["lv"] = NetData_31.NetData.readString(br);
                    getData["expmax"] = NetData_31.NetData.readString(br);
                    getData["tableID"] = br.readULong();
                    return getData;
                };
                return RoleExpBaseBuffer;
            }());
            exports_138("RoleExpBaseBuffer", RoleExpBaseBuffer);
        }
    };
});
System.register("AutoCode/Net/ClientRequest/ErrorInfoManagerRequest", ["Net/NetWebsocket", "AutoCode/Net/WebsocketTool"], function (exports_139, context_139) {
    "use strict";
    var NetWebsocket_6, WebsocketTool_5, ErrorInfoManagerRequest;
    var __moduleName = context_139 && context_139.id;
    return {
        setters: [
            function (NetWebsocket_6_1) {
                NetWebsocket_6 = NetWebsocket_6_1;
            },
            function (WebsocketTool_5_1) {
                WebsocketTool_5 = WebsocketTool_5_1;
            }
        ],
        execute: function () {
            ErrorInfoManagerRequest = /** @class */ (function () {
                function ErrorInfoManagerRequest() {
                }
                Object.defineProperty(ErrorInfoManagerRequest, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ErrorInfoManagerRequest();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /***
                 * 记录客户端异常消息
                 */
                ErrorInfoManagerRequest.prototype.CreateErrorInfo = function (message, modelType) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(message), ",\"a1\":").concat(JSON.stringify(modelType), ",");
                    var mess = WebsocketTool_5.WebsocketTool.Instance.getMsg("ErrorInfoManager", "CreateErrorInfo", "".concat(paramJsons));
                    NetWebsocket_6.NetWebscoket.Instance.sendStr(mess);
                };
                return ErrorInfoManagerRequest;
            }());
            exports_139("ErrorInfoManagerRequest", ErrorInfoManagerRequest);
        }
    };
});
System.register("AutoCode/Net/ClientRequest/ExcelManagerRequest", ["Net/NetWebsocket", "AutoCode/Net/WebsocketTool"], function (exports_140, context_140) {
    "use strict";
    var NetWebsocket_7, WebsocketTool_6, ExcelManagerRequest;
    var __moduleName = context_140 && context_140.id;
    return {
        setters: [
            function (NetWebsocket_7_1) {
                NetWebsocket_7 = NetWebsocket_7_1;
            },
            function (WebsocketTool_6_1) {
                WebsocketTool_6 = WebsocketTool_6_1;
            }
        ],
        execute: function () {
            ExcelManagerRequest = /** @class */ (function () {
                function ExcelManagerRequest() {
                }
                Object.defineProperty(ExcelManagerRequest, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ExcelManagerRequest();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /***
                 * 获取全部test数据
                 */
                ExcelManagerRequest.prototype.testDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "testDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条test数据
                 */
                ExcelManagerRequest.prototype.testDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "testDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单test数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifytestDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifytestDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个test数据
                 */
                ExcelManagerRequest.prototype.addtestData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addtestData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加test数组数据
                 */
                ExcelManagerRequest.prototype.addtestDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addtestDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条test
                 */
                ExcelManagerRequest.prototype.removetestData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removetestData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取UserDataBase数据
                 */
                ExcelManagerRequest.prototype.UserDataBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "UserDataBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部UserDataBase数据
                 */
                ExcelManagerRequest.prototype.UserDataBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "UserDataBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条UserDataBase数据
                 */
                ExcelManagerRequest.prototype.UserDataBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "UserDataBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单UserDataBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyUserDataBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyUserDataBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个UserDataBase数据
                 */
                ExcelManagerRequest.prototype.addUserDataBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addUserDataBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加UserDataBase数组数据
                 */
                ExcelManagerRequest.prototype.addUserDataBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addUserDataBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条UserDataBase
                 */
                ExcelManagerRequest.prototype.removeUserDataBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeUserDataBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取UserVarBase数据
                 */
                ExcelManagerRequest.prototype.UserVarBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "UserVarBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部UserVarBase数据
                 */
                ExcelManagerRequest.prototype.UserVarBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "UserVarBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条UserVarBase数据
                 */
                ExcelManagerRequest.prototype.UserVarBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "UserVarBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单UserVarBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyUserVarBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyUserVarBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个UserVarBase数据
                 */
                ExcelManagerRequest.prototype.addUserVarBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addUserVarBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加UserVarBase数组数据
                 */
                ExcelManagerRequest.prototype.addUserVarBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addUserVarBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条UserVarBase
                 */
                ExcelManagerRequest.prototype.removeUserVarBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeUserVarBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取WalletErrLog数据
                 */
                ExcelManagerRequest.prototype.WalletErrLogDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "WalletErrLogDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部WalletErrLog数据
                 */
                ExcelManagerRequest.prototype.WalletErrLogDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "WalletErrLogDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条WalletErrLog数据
                 */
                ExcelManagerRequest.prototype.WalletErrLogDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "WalletErrLogDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单WalletErrLog数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyWalletErrLogDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyWalletErrLogDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个WalletErrLog数据
                 */
                ExcelManagerRequest.prototype.addWalletErrLogData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addWalletErrLogData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加WalletErrLog数组数据
                 */
                ExcelManagerRequest.prototype.addWalletErrLogDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addWalletErrLogDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条WalletErrLog
                 */
                ExcelManagerRequest.prototype.removeWalletErrLogData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeWalletErrLogData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取WalletLog数据
                 */
                ExcelManagerRequest.prototype.WalletLogDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "WalletLogDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部WalletLog数据
                 */
                ExcelManagerRequest.prototype.WalletLogDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "WalletLogDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条WalletLog数据
                 */
                ExcelManagerRequest.prototype.WalletLogDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "WalletLogDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单WalletLog数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyWalletLogDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyWalletLogDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个WalletLog数据
                 */
                ExcelManagerRequest.prototype.addWalletLogData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addWalletLogData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加WalletLog数组数据
                 */
                ExcelManagerRequest.prototype.addWalletLogDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addWalletLogDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条WalletLog
                 */
                ExcelManagerRequest.prototype.removeWalletLogData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeWalletLogData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ErrorInfo数据
                 */
                ExcelManagerRequest.prototype.ErrorInfoDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ErrorInfoDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ErrorInfo数据
                 */
                ExcelManagerRequest.prototype.ErrorInfoDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ErrorInfoDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ErrorInfo数据
                 */
                ExcelManagerRequest.prototype.ErrorInfoDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ErrorInfoDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ErrorInfo数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyErrorInfoDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyErrorInfoDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ErrorInfo数据
                 */
                ExcelManagerRequest.prototype.addErrorInfoData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addErrorInfoData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ErrorInfo数组数据
                 */
                ExcelManagerRequest.prototype.addErrorInfoDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addErrorInfoDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ErrorInfo
                 */
                ExcelManagerRequest.prototype.removeErrorInfoData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeErrorInfoData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取Formulas数据
                 */
                ExcelManagerRequest.prototype.FormulasDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "FormulasDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部Formulas数据
                 */
                ExcelManagerRequest.prototype.FormulasDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "FormulasDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条Formulas数据
                 */
                ExcelManagerRequest.prototype.FormulasDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "FormulasDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单Formulas数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyFormulasDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyFormulasDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个Formulas数据
                 */
                ExcelManagerRequest.prototype.addFormulasData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addFormulasData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加Formulas数组数据
                 */
                ExcelManagerRequest.prototype.addFormulasDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addFormulasDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条Formulas
                 */
                ExcelManagerRequest.prototype.removeFormulasData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeFormulasData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ServerUserData数据
                 */
                ExcelManagerRequest.prototype.ServerUserDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ServerUserDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ServerUserData数据
                 */
                ExcelManagerRequest.prototype.ServerUserDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ServerUserDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ServerUserData数据
                 */
                ExcelManagerRequest.prototype.ServerUserDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ServerUserDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ServerUserData数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyServerUserDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyServerUserDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ServerUserData数据
                 */
                ExcelManagerRequest.prototype.addServerUserDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addServerUserDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ServerUserData数组数据
                 */
                ExcelManagerRequest.prototype.addServerUserDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addServerUserDataDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ServerUserData
                 */
                ExcelManagerRequest.prototype.removeServerUserDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeServerUserDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取SeverConfigBase数据
                 */
                ExcelManagerRequest.prototype.SeverConfigBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SeverConfigBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部SeverConfigBase数据
                 */
                ExcelManagerRequest.prototype.SeverConfigBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SeverConfigBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条SeverConfigBase数据
                 */
                ExcelManagerRequest.prototype.SeverConfigBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SeverConfigBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单SeverConfigBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifySeverConfigBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifySeverConfigBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个SeverConfigBase数据
                 */
                ExcelManagerRequest.prototype.addSeverConfigBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addSeverConfigBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加SeverConfigBase数组数据
                 */
                ExcelManagerRequest.prototype.addSeverConfigBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addSeverConfigBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条SeverConfigBase
                 */
                ExcelManagerRequest.prototype.removeSeverConfigBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeSeverConfigBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取SeverData数据
                 */
                ExcelManagerRequest.prototype.SeverDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SeverDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部SeverData数据
                 */
                ExcelManagerRequest.prototype.SeverDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SeverDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条SeverData数据
                 */
                ExcelManagerRequest.prototype.SeverDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SeverDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单SeverData数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifySeverDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifySeverDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个SeverData数据
                 */
                ExcelManagerRequest.prototype.addSeverDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addSeverDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加SeverData数组数据
                 */
                ExcelManagerRequest.prototype.addSeverDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addSeverDataDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条SeverData
                 */
                ExcelManagerRequest.prototype.removeSeverDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeSeverDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取TimeEvent数据
                 */
                ExcelManagerRequest.prototype.TimeEventDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "TimeEventDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部TimeEvent数据
                 */
                ExcelManagerRequest.prototype.TimeEventDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "TimeEventDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条TimeEvent数据
                 */
                ExcelManagerRequest.prototype.TimeEventDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "TimeEventDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单TimeEvent数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyTimeEventDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyTimeEventDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个TimeEvent数据
                 */
                ExcelManagerRequest.prototype.addTimeEventData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addTimeEventData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加TimeEvent数组数据
                 */
                ExcelManagerRequest.prototype.addTimeEventDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addTimeEventDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条TimeEvent
                 */
                ExcelManagerRequest.prototype.removeTimeEventData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeTimeEventData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ArrangementData数据
                 */
                ExcelManagerRequest.prototype.ArrangementDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ArrangementDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ArrangementData数据
                 */
                ExcelManagerRequest.prototype.ArrangementDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ArrangementDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ArrangementData数据
                 */
                ExcelManagerRequest.prototype.ArrangementDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ArrangementDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ArrangementData数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyArrangementDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyArrangementDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ArrangementData数据
                 */
                ExcelManagerRequest.prototype.addArrangementDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addArrangementDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ArrangementData数组数据
                 */
                ExcelManagerRequest.prototype.addArrangementDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addArrangementDataDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ArrangementData
                 */
                ExcelManagerRequest.prototype.removeArrangementDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeArrangementDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipBase数据
                 */
                ExcelManagerRequest.prototype.EquipBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipBase数据
                 */
                ExcelManagerRequest.prototype.EquipBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipBase数据
                 */
                ExcelManagerRequest.prototype.EquipBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyEquipBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyEquipBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipBase数据
                 */
                ExcelManagerRequest.prototype.addEquipBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipBase数组数据
                 */
                ExcelManagerRequest.prototype.addEquipBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipBase
                 */
                ExcelManagerRequest.prototype.removeEquipBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeEquipBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipDate数据
                 */
                ExcelManagerRequest.prototype.EquipDateDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipDateDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipDate数据
                 */
                ExcelManagerRequest.prototype.EquipDateDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipDateDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipDate数据
                 */
                ExcelManagerRequest.prototype.EquipDateDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipDateDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipDate数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyEquipDateDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyEquipDateDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipDate数据
                 */
                ExcelManagerRequest.prototype.addEquipDateData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipDateData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipDate数组数据
                 */
                ExcelManagerRequest.prototype.addEquipDateDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipDateDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipDate
                 */
                ExcelManagerRequest.prototype.removeEquipDateData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeEquipDateData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipEffectBase数据
                 */
                ExcelManagerRequest.prototype.EquipEffectBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipEffectBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipEffectBase数据
                 */
                ExcelManagerRequest.prototype.EquipEffectBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipEffectBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipEffectBase数据
                 */
                ExcelManagerRequest.prototype.EquipEffectBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipEffectBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipEffectBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyEquipEffectBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyEquipEffectBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipEffectBase数据
                 */
                ExcelManagerRequest.prototype.addEquipEffectBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipEffectBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipEffectBase数组数据
                 */
                ExcelManagerRequest.prototype.addEquipEffectBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipEffectBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipEffectBase
                 */
                ExcelManagerRequest.prototype.removeEquipEffectBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeEquipEffectBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取EquipExpBase数据
                 */
                ExcelManagerRequest.prototype.EquipExpBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipExpBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部EquipExpBase数据
                 */
                ExcelManagerRequest.prototype.EquipExpBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipExpBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条EquipExpBase数据
                 */
                ExcelManagerRequest.prototype.EquipExpBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "EquipExpBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单EquipExpBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyEquipExpBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyEquipExpBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个EquipExpBase数据
                 */
                ExcelManagerRequest.prototype.addEquipExpBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipExpBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加EquipExpBase数组数据
                 */
                ExcelManagerRequest.prototype.addEquipExpBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addEquipExpBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条EquipExpBase
                 */
                ExcelManagerRequest.prototype.removeEquipExpBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeEquipExpBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取GameArchiveData数据
                 */
                ExcelManagerRequest.prototype.GameArchiveDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "GameArchiveDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部GameArchiveData数据
                 */
                ExcelManagerRequest.prototype.GameArchiveDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "GameArchiveDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条GameArchiveData数据
                 */
                ExcelManagerRequest.prototype.GameArchiveDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "GameArchiveDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单GameArchiveData数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyGameArchiveDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyGameArchiveDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个GameArchiveData数据
                 */
                ExcelManagerRequest.prototype.addGameArchiveDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addGameArchiveDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加GameArchiveData数组数据
                 */
                ExcelManagerRequest.prototype.addGameArchiveDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addGameArchiveDataDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条GameArchiveData
                 */
                ExcelManagerRequest.prototype.removeGameArchiveDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeGameArchiveDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ItemBase数据
                 */
                ExcelManagerRequest.prototype.ItemBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ItemBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ItemBase数据
                 */
                ExcelManagerRequest.prototype.ItemBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ItemBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ItemBase数据
                 */
                ExcelManagerRequest.prototype.ItemBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ItemBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ItemBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyItemBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyItemBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ItemBase数据
                 */
                ExcelManagerRequest.prototype.addItemBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addItemBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ItemBase数组数据
                 */
                ExcelManagerRequest.prototype.addItemBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addItemBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ItemBase
                 */
                ExcelManagerRequest.prototype.removeItemBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeItemBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取ItemData数据
                 */
                ExcelManagerRequest.prototype.ItemDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ItemDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部ItemData数据
                 */
                ExcelManagerRequest.prototype.ItemDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ItemDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条ItemData数据
                 */
                ExcelManagerRequest.prototype.ItemDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "ItemDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单ItemData数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyItemDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyItemDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个ItemData数据
                 */
                ExcelManagerRequest.prototype.addItemDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addItemDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加ItemData数组数据
                 */
                ExcelManagerRequest.prototype.addItemDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addItemDataDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ItemData
                 */
                ExcelManagerRequest.prototype.removeItemDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeItemDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取LevelBase数据
                 */
                ExcelManagerRequest.prototype.LevelBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "LevelBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部LevelBase数据
                 */
                ExcelManagerRequest.prototype.LevelBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "LevelBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条LevelBase数据
                 */
                ExcelManagerRequest.prototype.LevelBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "LevelBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单LevelBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyLevelBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyLevelBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个LevelBase数据
                 */
                ExcelManagerRequest.prototype.addLevelBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addLevelBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加LevelBase数组数据
                 */
                ExcelManagerRequest.prototype.addLevelBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addLevelBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条LevelBase
                 */
                ExcelManagerRequest.prototype.removeLevelBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeLevelBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取RoleBase数据
                 */
                ExcelManagerRequest.prototype.RoleBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "RoleBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部RoleBase数据
                 */
                ExcelManagerRequest.prototype.RoleBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "RoleBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条RoleBase数据
                 */
                ExcelManagerRequest.prototype.RoleBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "RoleBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单RoleBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyRoleBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyRoleBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个RoleBase数据
                 */
                ExcelManagerRequest.prototype.addRoleBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addRoleBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加RoleBase数组数据
                 */
                ExcelManagerRequest.prototype.addRoleBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addRoleBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条RoleBase
                 */
                ExcelManagerRequest.prototype.removeRoleBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeRoleBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取RoleData数据
                 */
                ExcelManagerRequest.prototype.RoleDataDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "RoleDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部RoleData数据
                 */
                ExcelManagerRequest.prototype.RoleDataDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "RoleDataDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条RoleData数据
                 */
                ExcelManagerRequest.prototype.RoleDataDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "RoleDataDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单RoleData数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifyRoleDataDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifyRoleDataDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个RoleData数据
                 */
                ExcelManagerRequest.prototype.addRoleDataData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addRoleDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加RoleData数组数据
                 */
                ExcelManagerRequest.prototype.addRoleDataDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addRoleDataDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条RoleData
                 */
                ExcelManagerRequest.prototype.removeRoleDataData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeRoleDataData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取SkinBase数据
                 */
                ExcelManagerRequest.prototype.SkinBaseDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SkinBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取全部SkinBase数据
                 */
                ExcelManagerRequest.prototype.SkinBaseDataGetAll = function () {
                    var paramJsons = "";
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SkinBaseDataGetAll", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID数组获取多条SkinBase数据
                 */
                ExcelManagerRequest.prototype.SkinBaseDataByIds = function (ids) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(ids)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "SkinBaseDataByIds", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改单SkinBase数组的指定属性，propertyName：属性名，value：值
                 */
                ExcelManagerRequest.prototype.modifySkinBaseDataById = function (id, propertyName, value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(propertyName), ",\"a2\":").concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "modifySkinBaseDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加一个SkinBase数据
                 */
                ExcelManagerRequest.prototype.addSkinBaseData = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addSkinBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 添加SkinBase数组数据
                 */
                ExcelManagerRequest.prototype.addSkinBaseDatas = function (value) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(JSON.stringify(value)), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "addSkinBaseDatas", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条SkinBase
                 */
                ExcelManagerRequest.prototype.removeSkinBaseData = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "removeSkinBaseData", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过ID获取test数据
                 */
                ExcelManagerRequest.prototype.testDataById = function (id) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",");
                    var mess = WebsocketTool_6.WebsocketTool.Instance.getMsg("ExcelManager", "testDataById", "".concat(paramJsons));
                    NetWebsocket_7.NetWebscoket.Instance.sendStr(mess);
                };
                return ExcelManagerRequest;
            }());
            exports_140("ExcelManagerRequest", ExcelManagerRequest);
        }
    };
});
System.register("AutoCode/Net/ClientRequest/FrontDataManagerRequest", ["Net/NetWebsocket", "AutoCode/Net/WebsocketTool"], function (exports_141, context_141) {
    "use strict";
    var NetWebsocket_8, WebsocketTool_7, FrontDataManagerRequest;
    var __moduleName = context_141 && context_141.id;
    return {
        setters: [
            function (NetWebsocket_8_1) {
                NetWebsocket_8 = NetWebsocket_8_1;
            },
            function (WebsocketTool_7_1) {
                WebsocketTool_7 = WebsocketTool_7_1;
            }
        ],
        execute: function () {
            FrontDataManagerRequest = /** @class */ (function () {
                function FrontDataManagerRequest() {
                }
                Object.defineProperty(FrontDataManagerRequest, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new FrontDataManagerRequest();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /***
                 * callService
                 */
                FrontDataManagerRequest.prototype.callService = function (className, funcName, args) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(className), ",\"a1\":").concat(JSON.stringify(funcName), ",\"a2\":").concat(JSON.stringify(args), ",");
                    var mess = WebsocketTool_7.WebsocketTool.Instance.getMsg("FrontDataManager", "callService", "".concat(paramJsons));
                    NetWebsocket_8.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * callFunc
                 */
                FrontDataManagerRequest.prototype.callFunc = function (tableName, funcName, args) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(tableName), ",\"a1\":").concat(JSON.stringify(funcName), ",\"a2\":").concat(JSON.stringify(args), ",");
                    var mess = WebsocketTool_7.WebsocketTool.Instance.getMsg("FrontDataManager", "callFunc", "".concat(paramJsons));
                    NetWebsocket_8.NetWebscoket.Instance.sendStr(mess);
                };
                return FrontDataManagerRequest;
            }());
            exports_141("FrontDataManagerRequest", FrontDataManagerRequest);
        }
    };
});
System.register("AutoCode/Net/ClientRequest/ItemUseManagerRequest", ["Net/NetWebsocket", "AutoCode/Net/WebsocketTool"], function (exports_142, context_142) {
    "use strict";
    var NetWebsocket_9, WebsocketTool_8, ItemUseManagerRequest;
    var __moduleName = context_142 && context_142.id;
    return {
        setters: [
            function (NetWebsocket_9_1) {
                NetWebsocket_9 = NetWebsocket_9_1;
            },
            function (WebsocketTool_8_1) {
                WebsocketTool_8 = WebsocketTool_8_1;
            }
        ],
        execute: function () {
            ItemUseManagerRequest = /** @class */ (function () {
                function ItemUseManagerRequest() {
                }
                Object.defineProperty(ItemUseManagerRequest, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ItemUseManagerRequest();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /***
                 * 往指定包裹创建一组道具 currItemObj:用于兑换的道具数组 currBagType:兑换包裹 targetItemObj：兑换的道具ID数组 IsDisplay:是否显示奖励弹窗, bagType:指定包裹  forceTime:生效时间
                 */
                ItemUseManagerRequest.prototype.creatNewItemsArrToBag = function (itemInfo, buyCurrency, IsDisplay, bagType, fromWhere, forceTime) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemInfo), ",\"a1\":").concat(JSON.stringify(buyCurrency), ",\"a2\":").concat(JSON.stringify(IsDisplay), ",\"a3\":").concat(JSON.stringify(bagType), ",\"a4\":").concat(JSON.stringify(fromWhere), ",\"a5\":").concat(JSON.stringify(forceTime), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "creatNewItemsArrToBag", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 兑换道具 currItemObj:用于兑换的道具数组 currBagType:兑换包裹 targetItemObj：兑换的道具ID数组  targetBagType:目标包裹 IsDisplay:是否显示奖励弹窗 格式类型为 ItemExchangeMessageObj  ItemExchangeTargetMessageObj
                 */
                ItemUseManagerRequest.prototype.exchange = function (currItemObj, currBagType, targetItemObj, targetBagType, IsDisplay) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(currItemObj), ",\"a1\":").concat(JSON.stringify(currBagType), ",\"a2\":").concat(JSON.stringify(targetItemObj), ",\"a3\":").concat(JSON.stringify(targetBagType), ",\"a4\":").concat(JSON.stringify(IsDisplay), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "exchange", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 移除道具 itemsIds:道具uuid列表  itemId:道具baseid  count：数量  useType:通过什么方式消耗  bagType:包裹
                 */
                ItemUseManagerRequest.prototype.removeItemStatic = function (itemsIds, itemId, count, useType, bagType) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemsIds), ",\"a1\":").concat(JSON.stringify(itemId), ",\"a2\":").concat(JSON.stringify(count), ",\"a3\":").concat(JSON.stringify(useType), ",\"a4\":").concat(JSON.stringify(bagType), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "removeItemStatic", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一个道具 id：道具唯一id  ,IsReturn:是否返回数据
                 */
                ItemUseManagerRequest.prototype.DelItemdataByBag = function (id, IsReturn, bagType) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(IsReturn), ",\"a2\":").concat(JSON.stringify(bagType), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "DelItemdataByBag", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 创建新道具 itemId:道具id userId：玩家uid uint：数量，buyCurrency：买卖价格， IsDisplay:是否显示奖励弹窗, fromWhere:途径
                 */
                ItemUseManagerRequest.prototype.AddcreatNewItem = function (itemId, userId, count, buyCurrency, IsDisplay, fromWhere) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemId), ",\"a1\":").concat(JSON.stringify(userId), ",\"a2\":").concat(JSON.stringify(count), ",\"a3\":").concat(JSON.stringify(buyCurrency), ",\"a4\":").concat(JSON.stringify(IsDisplay), ",\"a5\":").concat(JSON.stringify(fromWhere), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "AddcreatNewItem", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 创建新道具到指定包裹 itemId:道具id userId：玩家uid uint：数量，buyCurrency：买卖价格， IsDisplay:是否显示奖励弹窗,bagType:包裹（1：装备 2：普通包裹 3：邮件 4建筑） fromWhere:途径
                 */
                ItemUseManagerRequest.prototype.AddcreatNewItemToBag = function (itemId, userId, count, buyCurrency, IsDisplay, bagType, fromWhere) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemId), ",\"a1\":").concat(JSON.stringify(userId), ",\"a2\":").concat(JSON.stringify(count), ",\"a3\":").concat(JSON.stringify(buyCurrency), ",\"a4\":").concat(JSON.stringify(IsDisplay), ",\"a5\":").concat(JSON.stringify(bagType), ",\"a6\":").concat(JSON.stringify(fromWhere), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "AddcreatNewItemToBag", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改道具数量 itemId:道具唯一id count：数量 , ClientData data:
                 */
                ItemUseManagerRequest.prototype.SetchangeItemNum = function (itemDataId, count) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemDataId), ",\"a1\":").concat(JSON.stringify(count), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "SetchangeItemNum", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改角色身上的道具items和itemData的数据 不返回数据  itemDataId:道具的唯一ID，count：数量
                 */
                ItemUseManagerRequest.prototype.SetRoleItemsDataNum = function (itemDataId, count) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemDataId), ",\"a1\":").concat(JSON.stringify(count), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "SetRoleItemsDataNum", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 删除一条ItemData 数据 id：道具唯一id  ,IsReturn:是否返回数据
                 */
                ItemUseManagerRequest.prototype.DelItemdata = function (id, IsReturn) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(id), ",\"a1\":").concat(JSON.stringify(IsReturn), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "DelItemdata", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 英雄道具碎片转化 RoleBaseId: token:玩家token
                 */
                ItemUseManagerRequest.prototype.AddItemListsData = function (RoleBaseId, token) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(RoleBaseId), ",\"a1\":").concat(JSON.stringify(token), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "AddItemListsData", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 宝箱道具处理 itemdataId:道具唯一id RoleBaseId:道具id，token:玩家token, count:数量
                 */
                ItemUseManagerRequest.prototype.AddBoxBagListData = function (itemdataId, itemboxId, token, count) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemdataId), ",\"a1\":").concat(JSON.stringify(itemboxId), ",\"a2\":").concat(JSON.stringify(token), ",\"a3\":").concat(JSON.stringify(count), ",");
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "AddBoxBagListData", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 领取奖励把邮件中的道具放入背包 List<string>itemuuIds:道具唯一id数组 to:玩家token
                 */
                ItemUseManagerRequest.prototype.SetEmailToBag = function (itemuuIds, token) {
                    var paramJsons = "\"a0\":".concat(JSON.stringify(itemuuIds), ",\"a1\":").concat(JSON.stringify(token));
                    var mess = WebsocketTool_8.WebsocketTool.Instance.getMsg("ItemUseManager", "SetEmailToBag", "".concat(paramJsons));
                    NetWebsocket_9.NetWebscoket.Instance.sendStr(mess);
                };
                return ItemUseManagerRequest;
            }());
            exports_142("ItemUseManagerRequest", ItemUseManagerRequest);
        }
    };
});
System.register("AutoCode/Net/DataEvents/ArrangementDataEvent", [], function (exports_143, context_143) {
    "use strict";
    var ArrangementDataEvent;
    var __moduleName = context_143 && context_143.id;
    return {
        setters: [],
        execute: function () {
            exports_143("ArrangementDataEvent", ArrangementDataEvent = /** @class */ (function () {
                function ArrangementDataEvent() {
                }
                /** 初始化全部数据*/
                ArrangementDataEvent.All = "All";
                /** 批量加载数据*/
                ArrangementDataEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                ArrangementDataEvent.TipData = "TipData";
                /** ID*/
                ArrangementDataEvent.id = "id";
                /** 玩家id*/
                ArrangementDataEvent.token = "token";
                /** 队列安排*/
                ArrangementDataEvent.Arrangement = "Arrangement";
                /** 队伍上限*/
                ArrangementDataEvent.Limit = "Limit";
                return ArrangementDataEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/AudioBaseEvent", [], function (exports_144, context_144) {
    "use strict";
    var AudioBaseEvent;
    var __moduleName = context_144 && context_144.id;
    return {
        setters: [],
        execute: function () {
            exports_144("AudioBaseEvent", AudioBaseEvent = /** @class */ (function () {
                function AudioBaseEvent() {
                }
                /** 初始化全部数据*/
                AudioBaseEvent.All = "All";
                /** 批量加载数据*/
                AudioBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                AudioBaseEvent.TipData = "TipData";
                /** 音频ID*/
                AudioBaseEvent.id = "id";
                /** 资源名*/
                AudioBaseEvent.resName = "resName";
                /** 音频key*/
                AudioBaseEvent.audioKey = "audioKey";
                /** 音量（0-1）*/
                AudioBaseEvent.volume = "volume";
                /** 是否循环播放*/
                AudioBaseEvent.isLoop = "isLoop";
                /** 备注*/
                AudioBaseEvent.desc = "desc";
                return AudioBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/EquipBaseEvent", [], function (exports_145, context_145) {
    "use strict";
    var EquipBaseEvent;
    var __moduleName = context_145 && context_145.id;
    return {
        setters: [],
        execute: function () {
            exports_145("EquipBaseEvent", EquipBaseEvent = /** @class */ (function () {
                function EquipBaseEvent() {
                }
                /** 初始化全部数据*/
                EquipBaseEvent.All = "All";
                /** 批量加载数据*/
                EquipBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                EquipBaseEvent.TipData = "TipData";
                /** 配置ID*/
                EquipBaseEvent.id = "id";
                /** 名称*/
                EquipBaseEvent.equipName = "equipName";
                /** 可预览条件*/
                EquipBaseEvent.visibl = "visibl";
                /** 打造解锁条件*/
                EquipBaseEvent.unlock = "unlock";
                /** 打造时间*/
                EquipBaseEvent.buildTime = "buildTime";
                /** 打造消耗*/
                EquipBaseEvent.PortfolioCost = "PortfolioCost";
                /** 最大词条数量*/
                EquipBaseEvent.maxEffect = "maxEffect";
                /** 随机词条效果权重*/
                EquipBaseEvent.randomEffect = "randomEffect";
                return EquipBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/EquipDateEvent", [], function (exports_146, context_146) {
    "use strict";
    var EquipDateEvent;
    var __moduleName = context_146 && context_146.id;
    return {
        setters: [],
        execute: function () {
            exports_146("EquipDateEvent", EquipDateEvent = /** @class */ (function () {
                function EquipDateEvent() {
                }
                /** 初始化全部数据*/
                EquipDateEvent.All = "All";
                /** 批量加载数据*/
                EquipDateEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                EquipDateEvent.TipData = "TipData";
                /** ID*/
                EquipDateEvent.id = "id";
                /** 装备打造id*/
                EquipDateEvent.equipData = "equipData";
                /** 打造开始时间*/
                EquipDateEvent.equipStartTime = "equipStartTime";
                /** 打造结束时间*/
                EquipDateEvent.equipEndTime = "equipEndTime";
                /** 获取的词条*/
                EquipDateEvent.equipEffect = "equipEffect";
                return EquipDateEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/EquipEffectBaseEvent", [], function (exports_147, context_147) {
    "use strict";
    var EquipEffectBaseEvent;
    var __moduleName = context_147 && context_147.id;
    return {
        setters: [],
        execute: function () {
            exports_147("EquipEffectBaseEvent", EquipEffectBaseEvent = /** @class */ (function () {
                function EquipEffectBaseEvent() {
                }
                /** 初始化全部数据*/
                EquipEffectBaseEvent.All = "All";
                /** 批量加载数据*/
                EquipEffectBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                EquipEffectBaseEvent.TipData = "TipData";
                /** 配置ID*/
                EquipEffectBaseEvent.id = "id";
                /** 词条名称*/
                EquipEffectBaseEvent.equipEffectName = "equipEffectName";
                /** 词条描述*/
                EquipEffectBaseEvent.equipEffectdesc = "equipEffectdesc";
                /** 词条图标*/
                EquipEffectBaseEvent.equipEffecticon = "equipEffecticon";
                /** 词条类型*/
                EquipEffectBaseEvent.equipEffectType = "equipEffectType";
                /** 属性*/
                EquipEffectBaseEvent.status = "status";
                /** 词条效果脚本*/
                EquipEffectBaseEvent.equipEffect = "equipEffect";
                return EquipEffectBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/EquipExpBaseEvent", [], function (exports_148, context_148) {
    "use strict";
    var EquipExpBaseEvent;
    var __moduleName = context_148 && context_148.id;
    return {
        setters: [],
        execute: function () {
            exports_148("EquipExpBaseEvent", EquipExpBaseEvent = /** @class */ (function () {
                function EquipExpBaseEvent() {
                }
                /** 初始化全部数据*/
                EquipExpBaseEvent.All = "All";
                /** 批量加载数据*/
                EquipExpBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                EquipExpBaseEvent.TipData = "TipData";
                /** 配置ID*/
                EquipExpBaseEvent.id = "id";
                /** 装备对应等级*/
                EquipExpBaseEvent.lv = "lv";
                /** 升级所需exp*/
                EquipExpBaseEvent.expMax = "expMax";
                return EquipExpBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/ErrorInfoEvent", [], function (exports_149, context_149) {
    "use strict";
    var ErrorInfoEvent;
    var __moduleName = context_149 && context_149.id;
    return {
        setters: [],
        execute: function () {
            exports_149("ErrorInfoEvent", ErrorInfoEvent = /** @class */ (function () {
                function ErrorInfoEvent() {
                }
                /** 初始化全部数据*/
                ErrorInfoEvent.All = "All";
                /** 批量加载数据*/
                ErrorInfoEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                ErrorInfoEvent.TipData = "TipData";
                /** ID*/
                ErrorInfoEvent.id = "id";
                /** 错误消息*/
                ErrorInfoEvent.message = "message";
                /** 异常类型*/
                ErrorInfoEvent.errorType = "errorType";
                /** 创建时间*/
                ErrorInfoEvent.time = "time";
                /** 机型*/
                ErrorInfoEvent.modelType = "modelType";
                /** IP地址*/
                ErrorInfoEvent.ip = "ip";
                return ErrorInfoEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/FormulasEvent", [], function (exports_150, context_150) {
    "use strict";
    var FormulasEvent;
    var __moduleName = context_150 && context_150.id;
    return {
        setters: [],
        execute: function () {
            exports_150("FormulasEvent", FormulasEvent = /** @class */ (function () {
                function FormulasEvent() {
                }
                /** 初始化全部数据*/
                FormulasEvent.All = "All";
                /** 批量加载数据*/
                FormulasEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                FormulasEvent.TipData = "TipData";
                /** 配置ID*/
                FormulasEvent.id = "id";
                /** 备注*/
                FormulasEvent.depict = "depict";
                /** 公式*/
                FormulasEvent.formulas = "formulas";
                /** 浮动范围（填0.1代表 ±0.1 即为 0.9~1.1）*/
                FormulasEvent.randomRange = "randomRange";
                return FormulasEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/ItemBaseEvent", [], function (exports_151, context_151) {
    "use strict";
    var ItemBaseEvent;
    var __moduleName = context_151 && context_151.id;
    return {
        setters: [],
        execute: function () {
            exports_151("ItemBaseEvent", ItemBaseEvent = /** @class */ (function () {
                function ItemBaseEvent() {
                }
                /** 初始化全部数据*/
                ItemBaseEvent.All = "All";
                /** 批量加载数据*/
                ItemBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                ItemBaseEvent.TipData = "TipData";
                /** 配置ID*/
                ItemBaseEvent.id = "id";
                /** 道具名字*/
                ItemBaseEvent.itemName = "itemName";
                /** 描述*/
                ItemBaseEvent.desc = "desc";
                /** 图标*/
                ItemBaseEvent.icon = "icon";
                /** 模型*/
                ItemBaseEvent.model = "model";
                /** 特效*/
                ItemBaseEvent.effect = "effect";
                /** 页签类型*/
                ItemBaseEvent.tagType = "tagType";
                /** 道具类型
            1.基础货币
            2.消耗品
            3.宝箱
            4.碎片
            5.其他物品
            6.装备*/
                ItemBaseEvent.itemType = "itemType";
                /** 品质*/
                ItemBaseEvent.quality = "quality";
                /** 叠加数量限制*/
                ItemBaseEvent.maxNum = "maxNum";
                /** 使用类型
            1.直接单个使用
            2.批量使用*/
                ItemBaseEvent.useType = "useType";
                /** 使用限制*/
                ItemBaseEvent.useLimit = "useLimit";
                /** 效果脚本*/
                ItemBaseEvent.useEffect = "useEffect";
                /** 跳转*/
                ItemBaseEvent.jump = "jump";
                /** 去使用（引导）*/
                ItemBaseEvent.use = "use";
                /** 装备类型
            1：头盔
            2：盔甲*/
                ItemBaseEvent.equipType = "equipType";
                /** 属性*/
                ItemBaseEvent.status = "status";
                /** 升级提升属性*/
                ItemBaseEvent.statusUp = "statusUp";
                /** lv上限*/
                ItemBaseEvent.lv = "lv";
                /** 稀有度*/
                ItemBaseEvent.rera = "rera";
                /** 出售价格*/
                ItemBaseEvent.sale = "sale";
                /** 购买价格*/
                ItemBaseEvent.buy = "buy";
                /** 分解获得消耗物品数量[道具id，数量区间最小值:数量区间最大值]*/
                ItemBaseEvent.decompose = "decompose";
                /** 是否立即使用*/
                ItemBaseEvent.imUse = "imUse";
                return ItemBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/ItemDataEvent", [], function (exports_152, context_152) {
    "use strict";
    var ItemDataEvent;
    var __moduleName = context_152 && context_152.id;
    return {
        setters: [],
        execute: function () {
            exports_152("ItemDataEvent", ItemDataEvent = /** @class */ (function () {
                function ItemDataEvent() {
                }
                /** 初始化全部数据*/
                ItemDataEvent.All = "All";
                /** 批量加载数据*/
                ItemDataEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                ItemDataEvent.TipData = "TipData";
                /** ID*/
                ItemDataEvent.id = "id";
                /** 道具名字*/
                ItemDataEvent.itemName = "itemName";
                /** 配置ID*/
                ItemDataEvent.baseId = "baseId";
                /** 配置数据*/
                ItemDataEvent.baseData = "baseData";
                /** 数量*/
                ItemDataEvent.count = "count";
                /** 最大数量*/
                ItemDataEvent.maxNum = "maxNum";
                /** 来源*/
                ItemDataEvent.fromWhere = "fromWhere";
                /** 获取使用货币*/
                ItemDataEvent.buyCurrency = "buyCurrency";
                /** 属性*/
                ItemDataEvent.status = "status";
                /** 等级*/
                ItemDataEvent.lv = "lv";
                /** 稀有度*/
                ItemDataEvent.rera = "rera";
                /** 品质*/
                ItemDataEvent.quality = "quality";
                /** 持有者*/
                ItemDataEvent.playerUuid = "playerUuid";
                /** 获取时间*/
                ItemDataEvent.getTime = "getTime";
                /** 物品状态：
            1.新获得
            2.暂时获得
            3.无状态
            4.锁定*/
                ItemDataEvent.statustype = "statustype";
                /** 是否满足使用限制*/
                ItemDataEvent.ifUseLimit = "ifUseLimit";
                /** 生效时间*/
                ItemDataEvent.forceTime = "forceTime";
                return ItemDataEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/RoleBaseEvent", [], function (exports_153, context_153) {
    "use strict";
    var RoleBaseEvent;
    var __moduleName = context_153 && context_153.id;
    return {
        setters: [],
        execute: function () {
            exports_153("RoleBaseEvent", RoleBaseEvent = /** @class */ (function () {
                function RoleBaseEvent() {
                }
                /** 初始化全部数据*/
                RoleBaseEvent.All = "All";
                /** 批量加载数据*/
                RoleBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                RoleBaseEvent.TipData = "TipData";
                /** id*/
                RoleBaseEvent.id = "id";
                /** 角色名*/
                RoleBaseEvent.roleName = "roleName";
                /** 职业类型
            1.战士
            2.法师
            3.游侠*/
                RoleBaseEvent.jobType = "jobType";
                /** 英雄id*/
                RoleBaseEvent.heroId = "heroId";
                /** 图标*/
                RoleBaseEvent.icon = "icon";
                /** 模型*/
                RoleBaseEvent.model = "model";
                /** 士兵模型*/
                RoleBaseEvent.soldier = "soldier";
                /** 动态立绘*/
                RoleBaseEvent.spine = "spine";
                /** 立绘背景*/
                RoleBaseEvent.backround = "backround";
                /** 描述*/
                RoleBaseEvent.desc = "desc";
                /** 等级上限*/
                RoleBaseEvent.lv = "lv";
                /** 稀有度
            1.r
            2.sr
            3.ssr*/
                RoleBaseEvent.rera = "rera";
                /** 品质
            1.绿
            2.蓝
            3.紫
            4.橙
            5.红*/
                RoleBaseEvent.originQuality = "originQuality";
                /** 属性值
            1.atk 攻击
            2.def 防御
            3.com 统率
            4.cbatk 城战攻击
            5.cbdef 城战防御
            6.fire 火元素攻击
            7 ice 冰元素攻击
            8.lighting 雷元素攻击
            9. firedef 火元素抵抗
            10.icedef 冰元素抵抗
            11.lightdef 雷元素抵抗*/
                RoleBaseEvent.attributeMax = "attributeMax";
                /** 初始成长值*/
                RoleBaseEvent.growthLim = "growthLim";
                /** 成长值上限*/
                RoleBaseEvent.growthMax = "growthMax";
                /** 突破后赠送成长点*/
                RoleBaseEvent.growthSend = "growthSend";
                /** 重复获得转化（填道具表id）*/
                RoleBaseEvent.change = "change";
                /** 突破保险值*/
                RoleBaseEvent.breakThroughMin = "breakThroughMin";
                /** 突破最大值*/
                RoleBaseEvent.breakThroughMax = "breakThroughMax";
                /** 突破后id*/
                RoleBaseEvent.breakThroughChange = "breakThroughChange";
                /** 突破次数*/
                RoleBaseEvent.breakThroughCount = "breakThroughCount";
                /** 潜力值*/
                RoleBaseEvent.Potential = "Potential";
                return RoleBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/RoleDataEvent", [], function (exports_154, context_154) {
    "use strict";
    var RoleDataEvent;
    var __moduleName = context_154 && context_154.id;
    return {
        setters: [],
        execute: function () {
            exports_154("RoleDataEvent", RoleDataEvent = /** @class */ (function () {
                function RoleDataEvent() {
                }
                /** 初始化全部数据*/
                RoleDataEvent.All = "All";
                /** 批量加载数据*/
                RoleDataEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                RoleDataEvent.TipData = "TipData";
                /** id*/
                RoleDataEvent.id = "id";
                /** 角色名*/
                RoleDataEvent.roleName = "roleName";
                /** 所属服务器*/
                RoleDataEvent.server = "server";
                /** 角色配置*/
                RoleDataEvent.baseData = "baseData";
                /** 角色类型*/
                RoleDataEvent.roleType = "roleType";
                /** 角色状态（0空闲 1 外出）*/
                RoleDataEvent.roleState = "roleState";
                /** 上次行动时间*/
                RoleDataEvent.lastTime = "lastTime";
                /** 属性值1.atk 攻击
            2.def 防御
            3.com 统率
            4.cbatk 城战攻击
            5.cbdef 城战防御
            6.fire 火元素攻击
            7 ice 冰元素攻击
            8.lighting 雷元素攻击
            9. firedef 火元素抵抗
            10.icedef 冰元素抵抗
            11.lightdef 雷元素抵抗*/
                RoleDataEvent.status = "status";
                /** 玩家id*/
                RoleDataEvent.playerId = "playerId";
                /** 当前等级*/
                RoleDataEvent.lv = "lv";
                /** 当前经验*/
                RoleDataEvent.exp = "exp";
                /** 当前稀有度*/
                RoleDataEvent.rera = "rera";
                /** 当前品质*/
                RoleDataEvent.quality = "quality";
                /** 当前成长值*/
                RoleDataEvent.currentGrowth = "currentGrowth";
                /** 当前突破值*/
                RoleDataEvent.breakThrough = "breakThrough";
                /** 当前状态*/
                RoleDataEvent.condition = "condition";
                /** 人物属性*/
                RoleDataEvent.roleStatus = "roleStatus";
                /** 持有货币*/
                RoleDataEvent.currency = "currency";
                /** 装备*/
                RoleDataEvent.equip = "equip";
                /** 当前装备库上限*/
                RoleDataEvent.equipmMaxHold = "equipmMaxHold";
                /** 持有道具*/
                RoleDataEvent.items = "items";
                /** 邮箱道具*/
                RoleDataEvent.mailItem = "mailItem";
                /** 持有建筑*/
                RoleDataEvent.building = "building";
                return RoleDataEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/RoleExpBaseEvent", [], function (exports_155, context_155) {
    "use strict";
    var RoleExpBaseEvent;
    var __moduleName = context_155 && context_155.id;
    return {
        setters: [],
        execute: function () {
            exports_155("RoleExpBaseEvent", RoleExpBaseEvent = /** @class */ (function () {
                function RoleExpBaseEvent() {
                }
                /** 初始化全部数据*/
                RoleExpBaseEvent.All = "All";
                /** 批量加载数据*/
                RoleExpBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                RoleExpBaseEvent.TipData = "TipData";
                /** 配置ID*/
                RoleExpBaseEvent.id = "id";
                /** 对应等级*/
                RoleExpBaseEvent.lv = "lv";
                /** 升级所需exp*/
                RoleExpBaseEvent.expmax = "expmax";
                return RoleExpBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/ServerUserDataEvent", [], function (exports_156, context_156) {
    "use strict";
    var ServerUserDataEvent;
    var __moduleName = context_156 && context_156.id;
    return {
        setters: [],
        execute: function () {
            exports_156("ServerUserDataEvent", ServerUserDataEvent = /** @class */ (function () {
                function ServerUserDataEvent() {
                }
                /** 初始化全部数据*/
                ServerUserDataEvent.All = "All";
                /** 批量加载数据*/
                ServerUserDataEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                ServerUserDataEvent.TipData = "TipData";
                /** ID*/
                ServerUserDataEvent.id = "id";
                /** 玩家ID数量记录*/
                ServerUserDataEvent.playerIDCount = "playerIDCount";
                /** 玩家阵营数量记录*/
                ServerUserDataEvent.userCampCount = "userCampCount";
                return ServerUserDataEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/SeverConfigBaseEvent", [], function (exports_157, context_157) {
    "use strict";
    var SeverConfigBaseEvent;
    var __moduleName = context_157 && context_157.id;
    return {
        setters: [],
        execute: function () {
            exports_157("SeverConfigBaseEvent", SeverConfigBaseEvent = /** @class */ (function () {
                function SeverConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                SeverConfigBaseEvent.All = "All";
                /** 批量加载数据*/
                SeverConfigBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                SeverConfigBaseEvent.TipData = "TipData";
                /** 配置ID*/
                SeverConfigBaseEvent.id = "id";
                /** 备注*/
                SeverConfigBaseEvent.depict = "depict";
                /** ip*/
                SeverConfigBaseEvent.ip = "ip";
                /** 网关地址*/
                SeverConfigBaseEvent.gateWay = "gateWay";
                /** 区服ID*/
                SeverConfigBaseEvent.serverID = "serverID";
                /** 区服名称*/
                SeverConfigBaseEvent.serverName = "serverName";
                /** 区服状态:
            1.爆满
            2.维护
            3.流畅*/
                SeverConfigBaseEvent.serverState = "serverState";
                /** 新区*/
                SeverConfigBaseEvent.newServer = "newServer";
                /** MAC地址*/
                SeverConfigBaseEvent.MAC = "MAC";
                /** 启动时间*/
                SeverConfigBaseEvent.setupTime = "setupTime";
                /** 状态*/
                SeverConfigBaseEvent.status = "status";
                /** 当前人数*/
                SeverConfigBaseEvent.playerSum = "playerSum";
                /** 是否为网关*/
                SeverConfigBaseEvent.isGate = "isGate";
                /** 备注IP*/
                SeverConfigBaseEvent.descIP = "descIP";
                /** 地图更新序号*/
                SeverConfigBaseEvent.mapSaveVer = "mapSaveVer";
                /** 小地图显示玩家等级下限*/
                SeverConfigBaseEvent.mapShowLevel = "mapShowLevel";
                /** 地图分割尺寸*/
                SeverConfigBaseEvent.mapSplit = "mapSplit";
                /** 心跳断开限制*/
                SeverConfigBaseEvent.heatbeatLimit = "heatbeatLimit";
                /** 每日最大野外战斗次数*/
                SeverConfigBaseEvent.battleTimes = "battleTimes";
                /** 行军速度*/
                SeverConfigBaseEvent.marchSpeed = "marchSpeed";
                /** 战役推图玩家基础最大体力*/
                SeverConfigBaseEvent.campaignMaxStamina = "campaignMaxStamina";
                /** 每日购买体力基础次数*/
                SeverConfigBaseEvent.PhysicalTime = "PhysicalTime";
                /** 上阵基础数量*/
                SeverConfigBaseEvent.arrangeNum = "arrangeNum";
                /** 战役起始关卡*/
                SeverConfigBaseEvent.campaignStartId = "campaignStartId";
                /** 扫荡模式变更*/
                SeverConfigBaseEvent.sweepModeChanged = "sweepModeChanged";
                /** 推荐阵营奖励*/
                SeverConfigBaseEvent.recomCampReward = "recomCampReward";
                /** 阵营加入等级*/
                SeverConfigBaseEvent.campJoin = "campJoin";
                /** 围攻等待时间*/
                SeverConfigBaseEvent.siegeWaitTime = "siegeWaitTime";
                /** 围攻提高消耗时间*/
                SeverConfigBaseEvent.siegeMaxTime = "siegeMaxTime";
                /** 突袭消耗*/
                SeverConfigBaseEvent.strikeCost = "strikeCost";
                /** 围攻低消耗*/
                SeverConfigBaseEvent.siegeMinCost = "siegeMinCost";
                /** 围攻高消耗*/
                SeverConfigBaseEvent.siegeMaxCost = "siegeMaxCost";
                /** 召回功能消耗道具与数量*/
                SeverConfigBaseEvent.callBack = "callBack";
                /** 快速召回消耗道具与数量*/
                SeverConfigBaseEvent.fastCallBack = "fastCallBack";
                /** 行军加速消耗道具与数量*/
                SeverConfigBaseEvent.marchSpeedUp = "marchSpeedUp";
                /** 超级行军加速消耗道具与数量*/
                SeverConfigBaseEvent.superMarchSpeedUp = "superMarchSpeedUp";
                /** 炸矿消耗*/
                SeverConfigBaseEvent.minerAttack = "minerAttack";
                /** 同阵营炸矿每日次数*/
                SeverConfigBaseEvent.sameCampMinerAttackLim = "sameCampMinerAttackLim";
                /** 领地失守后免战时间（秒）*/
                SeverConfigBaseEvent.avoidWarTime = "avoidWarTime";
                /** 免战特效*/
                SeverConfigBaseEvent.avoidWarEffect = "avoidWarEffect";
                /** 装备库最终解锁容量上限*/
                SeverConfigBaseEvent.maxEquipVolume = "maxEquipVolume";
                /** 突破解锁条件*/
                SeverConfigBaseEvent.breakOutUnlock = "breakOutUnlock";
                /** 日常任务解锁条件*/
                SeverConfigBaseEvent.dailyEventUnlock = "dailyEventUnlock";
                /** 解锁野外需要的玩家等级*/
                SeverConfigBaseEvent.unlockWildLevel = "unlockWildLevel";
                /** 军情功能解锁条件*/
                SeverConfigBaseEvent.IntelligenceUnlock = "IntelligenceUnlock";
                /** 装备自动锁定品质*/
                SeverConfigBaseEvent.equipAuutoLock = "equipAuutoLock";
                /** 普通成长恢复时间（秒）*/
                SeverConfigBaseEvent.commonGrowthRecover = "commonGrowthRecover";
                /** 普通成长恢复最大上限*/
                SeverConfigBaseEvent.commonGrowthMaxTime = "commonGrowthMaxTime";
                /** 没有使用*/
                SeverConfigBaseEvent.seniorGrowthCost = "seniorGrowthCost";
                /** 跳过战斗时间（秒）*/
                SeverConfigBaseEvent.battleJumpTime = "battleJumpTime";
                /** 狂暴开始回合*/
                SeverConfigBaseEvent.furiousRound = "furiousRound";
                /** 狂暴强化倍率*/
                SeverConfigBaseEvent.furiousStrengthen = "furiousStrengthen";
                /** 狂暴强化上限*/
                SeverConfigBaseEvent.furiousMaxStrengthen = "furiousMaxStrengthen";
                /** 据点免战时间（秒）*/
                SeverConfigBaseEvent.fortifiedAvoidWarTime = "fortifiedAvoidWarTime";
                /** 申请总督时长（秒）*/
                SeverConfigBaseEvent.applyGvernorTime = "applyGvernorTime";
                /** 据点总督撤离时间（秒）*/
                SeverConfigBaseEvent.fortifiedRetreatTime = "fortifiedRetreatTime";
                /** 玩家进攻据点限制*/
                SeverConfigBaseEvent.fortifiedAvailable = "fortifiedAvailable";
                /** 资源田收取间隔（间隔多少秒可以收取一次资源）*/
                SeverConfigBaseEvent.resourceGetInterval = "resourceGetInterval";
                /** 资源田计算时间（每隔多少秒获取一次addrescue）*/
                SeverConfigBaseEvent.resourceGetTime = "resourceGetTime";
                /** 初次引导气泡获取奖励*/
                SeverConfigBaseEvent.firstGuideReward = "firstGuideReward";
                /** 掠夺资源数量%*/
                SeverConfigBaseEvent.plunderPrecent = "plunderPrecent";
                /** 工人掠夺的数量%*/
                SeverConfigBaseEvent.HamalplunderPrecent = "HamalplunderPrecent";
                /** 工人损失数量%*/
                SeverConfigBaseEvent.HamalLostPrecent = "HamalLostPrecent";
                /** 阵营建设每日最大次数*/
                SeverConfigBaseEvent.campDevelopMaxTime = "campDevelopMaxTime";
                /** 改名卡消耗*/
                SeverConfigBaseEvent.changNameCost = "changNameCost";
                /** 改名卡消耗不足替换*/
                SeverConfigBaseEvent.changNameExchange = "changNameExchange";
                /** 喇叭消耗*/
                SeverConfigBaseEvent.hornCost = "hornCost";
                /** 喇叭消耗不足替换*/
                SeverConfigBaseEvent.hornCostExchange = "hornCostExchange";
                /** 聊天间隔cd*/
                SeverConfigBaseEvent.chatCd = "chatCd";
                /** 解锁队列1介绍*/
                SeverConfigBaseEvent.Arrangement1UnlockDesc = "Arrangement1UnlockDesc";
                /** 解锁队列2介绍*/
                SeverConfigBaseEvent.Arrangement2UnlockDesc = "Arrangement2UnlockDesc";
                /** 邮件分享CD*/
                SeverConfigBaseEvent.mailShareCd = "mailShareCd";
                /** 邮件默认保存时间*/
                SeverConfigBaseEvent.mailSaveTime = "mailSaveTime";
                /** 邮件最大持有数量*/
                SeverConfigBaseEvent.mailMaxKeep = "mailMaxKeep";
                /** 免费附魔恢复间隔时间*/
                SeverConfigBaseEvent.enchantingFreeRefreshInterval = "enchantingFreeRefreshInterval";
                /** 普通附魔消耗*/
                SeverConfigBaseEvent.commonGrowthCost = "commonGrowthCost";
                /** 高级附魔每次消耗*/
                SeverConfigBaseEvent.seniorEnchantingCost = "seniorEnchantingCost";
                /** 终极附魔消耗*/
                SeverConfigBaseEvent.ultimateEnchantingCost = "ultimateEnchantingCost";
                /** 免费附魔最大次数*/
                SeverConfigBaseEvent.enchantingFreeTimesLimit = "enchantingFreeTimesLimit";
                /** 附魔气泡出现免费次数*/
                SeverConfigBaseEvent.EnchantingBubble = "EnchantingBubble";
                /** 祭坛出现条件，（消耗n倍时出现）*/
                SeverConfigBaseEvent.altarBubble = "altarBubble";
                /** 活动按钮出现条件*/
                SeverConfigBaseEvent.activityIconAvailable = "activityIconAvailable";
                /** 福利按钮出现条件*/
                SeverConfigBaseEvent.welfareIconAvailable = "welfareIconAvailable";
                /** 特惠按钮出现条件*/
                SeverConfigBaseEvent.preferentialIconAvailable = "preferentialIconAvailable";
                return SeverConfigBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/SeverDataEvent", [], function (exports_158, context_158) {
    "use strict";
    var SeverDataEvent;
    var __moduleName = context_158 && context_158.id;
    return {
        setters: [],
        execute: function () {
            exports_158("SeverDataEvent", SeverDataEvent = /** @class */ (function () {
                function SeverDataEvent() {
                }
                /** 初始化全部数据*/
                SeverDataEvent.All = "All";
                /** 批量加载数据*/
                SeverDataEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                SeverDataEvent.TipData = "TipData";
                /** 配置ID*/
                SeverDataEvent.id = "id";
                /** 区服状态:
            1.爆满
            2.维护
            3.流畅*/
                SeverDataEvent.serverState = "serverState";
                /** 新区*/
                SeverDataEvent.newServer = "newServer";
                /** 启动时间*/
                SeverDataEvent.setupTime = "setupTime";
                /** 状态*/
                SeverDataEvent.status = "status";
                /** 当前人数*/
                SeverDataEvent.playerSum = "playerSum";
                /** 地图更新序号*/
                SeverDataEvent.mapSaveVer = "mapSaveVer";
                /** 开服时间*/
                SeverDataEvent.openTime = "openTime";
                /** 服务器偏移时间*/
                SeverDataEvent.addTime = "addTime";
                return SeverDataEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/TimeEventEvent", [], function (exports_159, context_159) {
    "use strict";
    var TimeEventEvent;
    var __moduleName = context_159 && context_159.id;
    return {
        setters: [],
        execute: function () {
            exports_159("TimeEventEvent", TimeEventEvent = /** @class */ (function () {
                function TimeEventEvent() {
                }
                /** 初始化全部数据*/
                TimeEventEvent.All = "All";
                /** 批量加载数据*/
                TimeEventEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                TimeEventEvent.TipData = "TipData";
                /** 配置ID*/
                TimeEventEvent.id = "id";
                /** 任务名称*/
                TimeEventEvent.eventName = "eventName";
                /** 任务实际开始时间*/
                TimeEventEvent.taskstartTime = "taskstartTime";
                /** 任务结束时间*/
                TimeEventEvent.taskEndTime = "taskEndTime";
                /** 上次开始时间*/
                TimeEventEvent.lastStartTime = "lastStartTime";
                /** 上次结束时间*/
                TimeEventEvent.lastEndTime = "lastEndTime";
                /** 默认时间是0也就是utc时间*/
                TimeEventEvent.serverTimeZone = "serverTimeZone";
                /** 重复循环次数，0就是无限次循环*/
                TimeEventEvent.LoopCount = "LoopCount";
                /** 已经重复的次数*/
                TimeEventEvent.LoopTimers = "LoopTimers";
                /** 第一次是否有cd*/
                TimeEventEvent.isFristNoCD = "isFristNoCD";
                /** 任务间隔执行时间*/
                TimeEventEvent.taskLoopTime = "taskLoopTime";
                /** 循环类型
            1.日循环
            2.周循环
            3.月循环*/
                TimeEventEvent.timeType = "timeType";
                /** 每天任务开始的时间，和loopTime共同执行*/
                TimeEventEvent.startTime = "startTime";
                /** 每天任务开始的时间的结束时间*/
                TimeEventEvent.startLimitTime = "startLimitTime";
                /** 前置任务id，可以组成任务集合*/
                TimeEventEvent.predecessorTaskID = "predecessorTaskID";
                /** 任务的回调事件名字*/
                TimeEventEvent.taskEventString = "taskEventString";
                /** 任务执行日志列表*/
                TimeEventEvent.taskEventLog = "taskEventLog";
                /** 任务目前状态，0等待执行，1正在执行，2执行错误，3执行成功*/
                TimeEventEvent.taskState = "taskState";
                /** 任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
                TimeEventEvent.taskPreviousState = "taskPreviousState";
                return TimeEventEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/UserVarBaseEvent", [], function (exports_160, context_160) {
    "use strict";
    var UserVarBaseEvent;
    var __moduleName = context_160 && context_160.id;
    return {
        setters: [],
        execute: function () {
            exports_160("UserVarBaseEvent", UserVarBaseEvent = /** @class */ (function () {
                function UserVarBaseEvent() {
                }
                /** 初始化全部数据*/
                UserVarBaseEvent.All = "All";
                /** 批量加载数据*/
                UserVarBaseEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                UserVarBaseEvent.TipData = "TipData";
                /** 用户uid*/
                UserVarBaseEvent.id = "id";
                /** 游戏中账号状态*/
                UserVarBaseEvent.inGameStatus = "inGameStatus";
                /** 持有货币*/
                UserVarBaseEvent.currency = "currency";
                /** 小人图标*/
                UserVarBaseEvent.littleManIcon = "littleManIcon";
                /** 玩家角色*/
                UserVarBaseEvent.PlayerAccount = "PlayerAccount";
                /** 英雄列表*/
                UserVarBaseEvent.listOfFigures = "listOfFigures";
                /** 布阵信息*/
                UserVarBaseEvent.Arrangement = "Arrangement";
                /** 创角时间*/
                UserVarBaseEvent.creatTime = "creatTime";
                return UserVarBaseEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/WalletErrLogEvent", [], function (exports_161, context_161) {
    "use strict";
    var WalletErrLogEvent;
    var __moduleName = context_161 && context_161.id;
    return {
        setters: [],
        execute: function () {
            exports_161("WalletErrLogEvent", WalletErrLogEvent = /** @class */ (function () {
                function WalletErrLogEvent() {
                }
                /** 初始化全部数据*/
                WalletErrLogEvent.All = "All";
                /** 批量加载数据*/
                WalletErrLogEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                WalletErrLogEvent.TipData = "TipData";
                /** 记录ID*/
                WalletErrLogEvent.id = "id";
                /** 类名*/
                WalletErrLogEvent.className = "className";
                /** 方法名*/
                WalletErrLogEvent.methodName = "methodName";
                /** 玩家ID*/
                WalletErrLogEvent.userToken = "userToken";
                /** log信息*/
                WalletErrLogEvent.logMessage = "logMessage";
                /** 记录时间*/
                WalletErrLogEvent.resultTime = "resultTime";
                return WalletErrLogEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/WalletLogEvent", [], function (exports_162, context_162) {
    "use strict";
    var WalletLogEvent;
    var __moduleName = context_162 && context_162.id;
    return {
        setters: [],
        execute: function () {
            exports_162("WalletLogEvent", WalletLogEvent = /** @class */ (function () {
                function WalletLogEvent() {
                }
                /** 初始化全部数据*/
                WalletLogEvent.All = "All";
                /** 批量加载数据*/
                WalletLogEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                WalletLogEvent.TipData = "TipData";
                /** 记录ID*/
                WalletLogEvent.id = "id";
                /** 类名*/
                WalletLogEvent.className = "className";
                /** 方法名*/
                WalletLogEvent.methodName = "methodName";
                /** 玩家ID*/
                WalletLogEvent.userToken = "userToken";
                /** log信息*/
                WalletLogEvent.logMessage = "logMessage";
                /** 记录时间*/
                WalletLogEvent.resultTime = "resultTime";
                return WalletLogEvent;
            }()));
        }
    };
});
System.register("AutoCode/Net/DataEvents/testEvent", [], function (exports_163, context_163) {
    "use strict";
    var testEvent;
    var __moduleName = context_163 && context_163.id;
    return {
        setters: [],
        execute: function () {
            exports_163("testEvent", testEvent = /** @class */ (function () {
                function testEvent() {
                }
                /** 初始化全部数据*/
                testEvent.All = "All";
                /** 批量加载数据*/
                testEvent.ChangeList = "ChangeList";
                /** 提示数据*/
                testEvent.TipData = "TipData";
                /** 配置ID*/
                testEvent.id = "id";
                /** 道具名字*/
                testEvent.itemName = "itemName";
                /** test1*/
                testEvent.test1 = "test1";
                /** test2*/
                testEvent.test2 = "test2";
                /** test3*/
                testEvent.test3 = "test3";
                /** test4*/
                testEvent.test4 = "test4";
                /** test5*/
                testEvent.test5 = "test5";
                /** test6*/
                testEvent.test6 = "test6";
                return testEvent;
            }()));
        }
    };
});
System.register("Common/CommonCell", ["Data/Cell"], function (exports_164, context_164) {
    "use strict";
    var Cell_1, CommonCell;
    var __moduleName = context_164 && context_164.id;
    return {
        setters: [
            function (Cell_1_1) {
                Cell_1 = Cell_1_1;
            }
        ],
        execute: function () {
            exports_164("CommonCell", CommonCell = /** @class */ (function (_super) {
                __extends(CommonCell, _super);
                function CommonCell() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CommonCell.prototype.pointerDownFun = function () {
                    // console.error(this.cellData.data);
                    if (this.cellData.showTip) { //如果需要显示
                        var worldPos = this.transform.getWorldTranslate();
                        // TipsToolManager.Instance.pos = worldPos;
                        // TipsToolManager.Instance.cellWidth = this.cellData.width;
                        // TipsToolManager.Instance.cellHeight = this.cellData.height;
                        // // console.error("如果需要显示Tips");
                        // TipsToolManager.Instance.ShowItemTips(this.cellData.data);
                    }
                };
                CommonCell = __decorate([
                    m4m.reflect.node2DComponent
                ], CommonCell);
                return CommonCell;
            }(Cell_1.Cell)));
        }
    };
});
System.register("Manager/InputManager", ["PSDUI/UiDataManager", "Data/BindKeyName", "GameMgr"], function (exports_165, context_165) {
    "use strict";
    var UiDataManager_4, BindKeyName_3, GameMgr_41, InputManager;
    var __moduleName = context_165 && context_165.id;
    return {
        setters: [
            function (UiDataManager_4_1) {
                UiDataManager_4 = UiDataManager_4_1;
            },
            function (BindKeyName_3_1) {
                BindKeyName_3 = BindKeyName_3_1;
            },
            function (GameMgr_41_1) {
                GameMgr_41 = GameMgr_41_1;
            }
        ],
        execute: function () {
            exports_165("InputManager", InputManager = /** @class */ (function () {
                function InputManager() {
                }
                InputManager.init = function () {
                    GameMgr_41.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this.onMove, this);
                    GameMgr_41.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointDown, this.onDown, this);
                    GameMgr_41.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointUp, this.onUp, this);
                };
                InputManager.addUpCallBackFun = function (callBackFun) {
                    this.CallBackList.push(callBackFun);
                };
                InputManager.removeUpCallBackFun = function (callBackFun) {
                    var index = this.CallBackList.indexOf(callBackFun);
                    if (index != -1) {
                        this.CallBackList.splice(index, 1);
                    }
                };
                InputManager.addMoveCallBackFun = function (callBackFun) {
                    this.moveCallBackList.push(callBackFun);
                };
                InputManager.removeMoveCallBackFun = function (callBackFun) {
                    var index = this.moveCallBackList.indexOf(callBackFun);
                    if (index != -1) {
                        this.moveCallBackList.splice(index, 1);
                    }
                };
                InputManager.onDown = function (_a) {
                    var x = _a[0], y = _a[1];
                    this.isDonw = true;
                    this.lastPoint_x = x;
                    this.lastPoint_y = y;
                    this.downPointX = x;
                    this.downPointY = y;
                    this.lastPos.x = x;
                    this.lastPos.y = y;
                };
                InputManager.onUp = function (_a) {
                    var x = _a[0], y = _a[1];
                    this.isDonw = false;
                    this.upPointX = x;
                    this.upPointY = y;
                    // console.error("弹起坐标", x, y);
                    this.onHorizTouch = null;
                    this.onDragTouch = null;
                    UiDataManager_4.UiDataManager.changeFunctionData(BindKeyName_3.BindKeyName.clickSlide, { upPointX: this.upPointX, upPointY: this.upPointY, downPointX: this.downPointX, downPointY: this.downPointY });
                    this.CallBackList.forEach(function (callBackFun) {
                        if (callBackFun) {
                            callBackFun();
                        }
                    });
                };
                InputManager.onMove = function (_a) {
                    var x = _a[0], y = _a[1];
                    // // console.error("移动--- ", x, y)
                    this.moveCallBackList.forEach(function (callBackFun) {
                        if (callBackFun) {
                            callBackFun(x, y);
                        }
                    });
                    if (!this.isDonw) {
                        return;
                    }
                    if (this.onHorizTouch) { //横向滑动
                        var len = Math.abs(this.lastPoint_x - x);
                        if (len > 0.1) {
                            var dir = Math.sign(this.lastPoint_x - x);
                            this.onHorizTouch(dir * len);
                            // console.error("滑动 ", dir * len);
                        }
                    }
                    if (this.onDragTouch) { //竖向滑动
                        var foo = this.lastPoint_y - y;
                        if (Math.abs(foo) > 0.1) {
                            this.onDragTouch(foo);
                        }
                    }
                    this.lastPoint_x = x;
                    this.lastPoint_y = y;
                };
                // tslint:disable-next-line: variable-name
                InputManager.lastPoint_x = -1;
                // tslint:disable-next-line: variable-name
                InputManager.lastPoint_y = 0;
                //按下的起点
                InputManager.downPointX = -1;
                InputManager.downPointY = 0;
                //弹起的坐标点
                InputManager.upPointX = -1;
                InputManager.upPointY = 0;
                InputManager.CallBackList = new Array();
                InputManager.isDonw = false;
                InputManager.lastPos = new m4m.math.vector3();
                InputManager.moveCallBackList = new Array();
                return InputManager;
            }()));
        }
    };
});
System.register("Common/SliderComponentExted", ["Data/SliderComponent", "Manager/InputManager"], function (exports_166, context_166) {
    "use strict";
    var SliderComponent_1, InputManager_1, SliderComponentExtend;
    var __moduleName = context_166 && context_166.id;
    return {
        setters: [
            function (SliderComponent_1_1) {
                SliderComponent_1 = SliderComponent_1_1;
            },
            function (InputManager_1_1) {
                InputManager_1 = InputManager_1_1;
            }
        ],
        execute: function () {
            exports_166("SliderComponentExtend", SliderComponentExtend = /** @class */ (function (_super) {
                __extends(SliderComponentExtend, _super);
                function SliderComponentExtend() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.offsetPercent = 0.6;
                    _this.offsetWidth = 0;
                    //最大阶段值
                    _this.maxNum = -1;
                    return _this;
                }
                Object.defineProperty(SliderComponentExtend.prototype, "transWidth", {
                    get: function () {
                        if (this._transWidth == null) {
                            this._transWidth = this.progressbar.transform.width - this.btn.transform.width + this.offsetWidth;
                        }
                        return this._transWidth;
                    },
                    enumerable: false,
                    configurable: true
                });
                //按钮 按下
                SliderComponentExtend.prototype.btnDown_event = function () {
                    // console.error("按钮 按下");
                    InputManager_1.InputManager.onHorizTouch = this.onHorizTouchFun.bind(this);
                };
                /****设置值
                 * maxNum 如果有设置值 需传入小于等于maxNum的值
                 * maxNum 默认值 -1   需传入百分比值 0.x
                */
                SliderComponentExtend.prototype.setValue = function (value) {
                    var percentValue;
                    if (this.maxNum == -1) {
                        if (value > 1) {
                            console.error("SliderComponentExtend 当前需设置百分比值 " + value);
                            return;
                        }
                        percentValue = value;
                    }
                    else {
                        percentValue = value / this.maxNum;
                    }
                    if (percentValue < 0) {
                        percentValue = 0;
                    }
                    else if (percentValue > 1) {
                        percentValue = 1;
                    }
                    var setX = percentValue * this.transWidth;
                    this.reshPosFun(setX);
                };
                SliderComponentExtend.prototype.reshPosFun = function (setX) {
                    this.btn.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, setX);
                    var sliderVale = setX / this.transWidth;
                    // console.error("滑动 ", sliderVale);
                    this.progressbar.value = sliderVale;
                    if (this.callBackFun) {
                        this.callBackFun(sliderVale);
                    }
                };
                SliderComponentExtend.prototype.onHorizTouchFun = function (moveX) {
                    // console.error("滑动 ", moveX);
                    var xx = this.btn.transform.getLayoutValue(m4m.framework.layoutOption.LEFT);
                    var setX = xx - moveX * this.offsetPercent;
                    if (setX < 0) {
                        setX = 0;
                    }
                    else if (setX > this.transWidth) {
                        setX = this.transWidth;
                    }
                    this.reshPosFun(setX);
                };
                SliderComponentExtend = __decorate([
                    m4m.reflect.node2DComponent
                ], SliderComponentExtend);
                return SliderComponentExtend;
            }(SliderComponent_1.SliderComponent)));
        }
    };
});
System.register("Data/CommonUIUtils", ["Tools/commTool", "GameMgr"], function (exports_167, context_167) {
    "use strict";
    var commTool_14, GameMgr_42, CommonUIUtils;
    var __moduleName = context_167 && context_167.id;
    return {
        setters: [
            function (commTool_14_1) {
                commTool_14 = commTool_14_1;
            },
            function (GameMgr_42_1) {
                GameMgr_42 = GameMgr_42_1;
            }
        ],
        execute: function () {
            exports_167("CommonUIUtils", CommonUIUtils = /** @class */ (function () {
                function CommonUIUtils() {
                }
                CommonUIUtils.replaceUIUrl = function (icon) {
                    var trueIcon = icon;
                    if (icon.indexOf(CommonUIUtils.uiRepUrl) != -1) {
                        trueIcon = icon.replace(CommonUIUtils.uiRepUrl, "res/art/");
                    }
                    return trueIcon;
                };
                CommonUIUtils.getSprite = function (spriteStr) {
                    var spriteIcon = GameMgr_42.GameMgr.assetMgr.getAssetByName(spriteStr);
                    return spriteIcon;
                };
                /** 快速创建一个 imgSpriteArrange 对象 */
                CommonUIUtils.getImgSpriteArrange = function (img, hlayout, vlayout) {
                    if (hlayout === void 0) { hlayout = m4m.framework.layoutOption.LEFT; }
                    if (vlayout === void 0) { vlayout = m4m.framework.layoutOption.V_CENTER; }
                    var imgNum = commTool_14.commTool.makeImgSpriteArrange(img);
                    img.transform.visible = false;
                    var initX = img.transform.getLayoutValue(hlayout);
                    imgNum.transform.layoutState = vlayout | hlayout;
                    imgNum.transform.setLayoutValue(hlayout, initX);
                    return imgNum;
                };
                CommonUIUtils.uiRepUrl = "ui://";
                CommonUIUtils.showAmounts = [];
                CommonUIUtils.skinAmounts = [];
                return CommonUIUtils;
            }()));
        }
    };
});
System.register("Data/LinkedList", [], function (exports_168, context_168) {
    "use strict";
    var LNode, LinkedList;
    var __moduleName = context_168 && context_168.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 链表节点类
             */
            LNode = /** @class */ (function () {
                function LNode(element) {
                    this.element = element;
                    this.next = null;
                }
                return LNode;
            }());
            exports_168("LNode", LNode);
            /**
             * 单链表:一些列由指针链接的元素节点组成的存储结构
             */
            LinkedList = /** @class */ (function () {
                function LinkedList() {
                    this.length = 0;
                    this._head = null;
                }
                /**
                 * 向列表尾部添加一个新的节点元素。
                 * @param element 指定节点元素
                 */
                LinkedList.prototype.append = function (element) {
                    var node = new LNode(element);
                    var current;
                    if (this._head === null) {
                        this._head = node;
                    }
                    else {
                        current = this._head;
                        while (current.next) {
                            current = current.next;
                        }
                        current.next = node;
                    }
                    this.length++;
                };
                /**
                 * 向列表的特定位置插入一个新的节点元素。
                 * @param position  指定位置
                 * @param element  指定节点元素
                 */
                LinkedList.prototype.insert = function (position, element) {
                    if (position >= 0 && position <= this.length) {
                        var node = new LNode(element), current = this._head, previous, index = 0;
                        if (position === 0) {
                            node.next = current;
                            this._head = node;
                        }
                        else {
                            while (index++ < position) {
                                previous = current;
                                current = current.next;
                            }
                            node.next = current;
                            previous.next = node;
                        }
                        this.length++;
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                /**
                 * 从列表中移除指定节点元素。
                 * @param element  指定节点元素
                 */
                LinkedList.prototype.remove = function (element) {
                    var index = this.indexOf(element);
                    return this.removeAt(index);
                };
                /**
                 * 返回元素在列表中的索引。如果列表中没有该元素则返回-1。
                 * @param element  指定节点元素
                 */
                LinkedList.prototype.indexOf = function (element) {
                    var current = this._head, index = 0;
                    while (current) {
                        if (element === current.element) {
                            return index;
                        }
                        index++;
                        current = current.next;
                    }
                    return -1;
                };
                /**
                 * 从列表的特定位置移除一节点元素
                 * @param position  指定节点元素
                 */
                LinkedList.prototype.removeAt = function (position) {
                    if (position > -1 && position < this.length) {
                        var current = this._head;
                        var previous;
                        var index = 0;
                        if (position === 0) {
                            this._head = current.next;
                        }
                        else {
                            while (index++ < position) {
                                previous = current;
                                current = current.next;
                            }
                            previous.next = current.next;
                        }
                        this.length--;
                        return current.element;
                    }
                    else {
                        return null;
                    }
                };
                Object.defineProperty(LinkedList.prototype, "isEmpty", {
                    /**是否为空*/
                    get: function () {
                        return this.length === 0;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(LinkedList.prototype, "size", {
                    /**返回链表包含的元素个数*/
                    get: function () {
                        return this.length;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(LinkedList.prototype, "head", {
                    /**链表的第一个节点元素*/
                    get: function () {
                        return this._head;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**所有元素值输出为字符串*/
                LinkedList.prototype.toString = function () {
                    var current = this._head, str = "";
                    while (current) {
                        str += String(current.element);
                        current = current.next;
                    }
                    return str;
                };
                return LinkedList;
            }());
            exports_168("LinkedList", LinkedList);
        }
    };
});
System.register("Event/EventList", [], function (exports_169, context_169) {
    "use strict";
    var EventList;
    var __moduleName = context_169 && context_169.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 事件定义 列表类
             *
             */
            EventList = /** @class */ (function () {
                function EventList() {
                }
                return EventList;
            }());
            exports_169("EventList", EventList);
        }
    };
});
System.register("Net/HeartBeatManager", ["Time/CTimer", "Time/TimeUtil"], function (exports_170, context_170) {
    "use strict";
    var CTimer_2, TimeUtil_2, HeartBeatManager;
    var __moduleName = context_170 && context_170.id;
    return {
        setters: [
            function (CTimer_2_1) {
                CTimer_2 = CTimer_2_1;
            },
            function (TimeUtil_2_1) {
                TimeUtil_2 = TimeUtil_2_1;
            }
        ],
        execute: function () {
            //心跳管理
            HeartBeatManager = /** @class */ (function () {
                function HeartBeatManager() {
                    //每10秒
                    CTimer_2.CTimer.Instance.loopTimeUpdate(10000, this.updateFun.bind(this));
                }
                Object.defineProperty(HeartBeatManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new HeartBeatManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //心跳  同步服务器时间
                HeartBeatManager.prototype.SyncServerTime = function () {
                    var gameTime = Math.floor(TimeUtil_2.TimeUtil.realtimeSinceStartup / 1000);
                    console.error("当前游戏启动时间秒 " + gameTime);
                };
                HeartBeatManager.prototype.updateFun = function () {
                    // 
                    this.SyncServerTime();
                };
                return HeartBeatManager;
            }());
            exports_170("HeartBeatManager", HeartBeatManager);
        }
    };
});
System.register("lab/New3dCompScript", ["Tool/mixMesh"], function (exports_171, context_171) {
    "use strict";
    var mixMesh_4, New3dCompScript;
    var __moduleName = context_171 && context_171.id;
    return {
        setters: [
            function (mixMesh_4_1) {
                mixMesh_4 = mixMesh_4_1;
            }
        ],
        execute: function () {
            exports_171("New3dCompScript", New3dCompScript = /** @class */ (function (_super) {
                __extends(New3dCompScript, _super);
                //mesh 合并测试 组件
                function New3dCompScript() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                New3dCompScript.prototype.onPlay = function () {
                    var _a, _b;
                    var wbgl = this.gameObject.getScene().app.webgl;
                    this.meshCompressor = new mixMesh_4.mixMesh(wbgl);
                    // this.gameObject.getScene().update(0);
                    var meshRenders = this.gameObject.getComponentsInChildren("meshRenderer");
                    var obsRoot = new m4m.framework.transform();
                    this.gameObject.transform.addChild(obsRoot);
                    var picker = meshRenders.filter(function (mr) { return mr.gameObject.transform.name != "boxcollider"; }).map(function (mr) { return mr.gameObject.transform; });
                    debugger;
                    if (picker.length > 1) {
                        var mixed = new m4m.framework.transform();
                        obsRoot.addChild(mixed);
                        // obsCollect.localTranslate.y = 5;
                        // this.gameObject.visible = false;
                        // mixed.localTranslate.z = 20 +style * 5;
                        // mixed.localTranslate.y = style * 5;
                        // mixed.localTranslate.z = 50;
                        this.meshCompressor.resetDic();
                        var nobatch = (_a = this.meshCompressor.mixMesh(picker), _a.nobatch), batch = _a.batch, mixMeshId = _a.mixMeshId;
                        // // Built
                        for (var _i = 0, mixMeshId_4 = mixMeshId; _i < mixMeshId_4.length; _i++) {
                            var id = mixMeshId_4[_i];
                            var mesh = (_b = this.meshCompressor.mixmeshDic[id], _b.mesh), mat = _b.mat;
                            var trans = new m4m.framework.transform();
                            var mf = trans.gameObject.addComponent("meshFilter");
                            mf.mesh = mesh;
                            var meshRender = trans.gameObject.addComponent("meshRenderer");
                            meshRender.materials = [mat];
                            mixed.addChild(trans);
                        }
                    }
                };
                New3dCompScript.prototype.update = function (delta) {
                };
                New3dCompScript.prototype.remove = function () {
                };
                New3dCompScript = __decorate([
                    m4m.reflect.nodeComponent
                    //mesh 合并测试 组件
                ], New3dCompScript);
                return New3dCompScript;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/dropAndRotate", [], function (exports_172, context_172) {
    "use strict";
    var dropAndRotate;
    var __moduleName = context_172 && context_172.id;
    return {
        setters: [],
        execute: function () {
            exports_172("dropAndRotate", dropAndRotate = /** @class */ (function (_super) {
                __extends(dropAndRotate, _super);
                function dropAndRotate() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.baseValue = 0;
                    _this.vCenterOffset = 0;
                    _this.timeRange = [500, 2000];
                    _this.lastCircle = null;
                    _this.isFalling = false;
                    _this.g = 10000;
                    _this.maxV = 10000;
                    _this.v = 0;
                    _this.isRotating = false;
                    _this.rotateTimer = 0;
                    _this.rotationSpeed = 30;
                    _this.isScale = false;
                    _this.scaleTimer = 0;
                    return _this;
                }
                dropAndRotate.prototype.onPlay = function () {
                    // 获取初始值
                    this.baseValue = this.coin.transform.getLayoutValue(m4m.framework.layoutOption.V_CENTER);
                    this.play();
                };
                dropAndRotate.prototype.update = function (delta) {
                    this.falling(delta);
                    this.rotate(delta);
                    this.scale(delta);
                };
                dropAndRotate.prototype.remove = function () {
                };
                dropAndRotate.prototype.play = function () {
                    this.isFalling = true;
                    this.v = 0;
                    this.vCenterOffset = 0;
                };
                dropAndRotate.prototype.falling = function (delta) {
                    if (!this.isFalling)
                        return;
                    this.v += this.g * delta;
                    // this.v = Math.min(this.v, this.maxV);
                    var coin = this.coin.transform;
                    this.vCenterOffset += this.v * delta;
                    if (this.baseValue + this.vCenterOffset > 0) {
                        // 下落结束
                        this.isFalling = false;
                        this.vCenterOffset = -this.baseValue;
                        this.isRotating = true;
                        this.isScale = true;
                    }
                    coin.setLayoutValue(m4m.framework.layoutOption.V_CENTER, this.baseValue + this.vCenterOffset);
                };
                dropAndRotate.prototype.rotate = function (delta) {
                    var _this = this;
                    if (!this.isRotating)
                        return;
                    this.rotateTimer += delta * this.rotationSpeed;
                    if (this.rotateTimer > Math.PI * 3) {
                        // 旋转结束
                        this.isRotating = false;
                        this.rotateTimer = 0;
                        if (this.lastCircle) {
                            clearTimeout(this.lastCircle);
                        }
                        this.lastCircle = setTimeout(function () {
                            _this.play();
                        }, this.timeRange[0] + Math.random() * (this.timeRange[1] - this.timeRange[0]));
                    }
                    this.transform.localRotate = Math.sin(this.rotateTimer) * 0.5;
                    this.transform.markDirty();
                };
                dropAndRotate.prototype.scale = function (delta) {
                    if (!this.isScale)
                        return;
                    this.scaleTimer += delta * 10;
                    this.transform.localScale.x = this.transform.localScale.y = Math.sin(this.scaleTimer) * 0.2 + 1;
                    if (this.scaleTimer > Math.PI) {
                        this.isScale = false;
                        this.scaleTimer = 0;
                    }
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "image2D")
                ], dropAndRotate.prototype, "coin", void 0);
                dropAndRotate = __decorate([
                    m4m.reflect.node2DComponent
                ], dropAndRotate);
                return dropAndRotate;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("lab/effectPlayer", [], function (exports_173, context_173) {
    "use strict";
    var effectPlayer;
    var __moduleName = context_173 && context_173.id;
    return {
        setters: [],
        execute: function () {
            exports_173("effectPlayer", effectPlayer = /** @class */ (function (_super) {
                __extends(effectPlayer, _super);
                function effectPlayer() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                effectPlayer.prototype.onPlay = function () {
                    var effect = this.gameObject.getComponent(m4m.framework.f14EffectSystem.name);
                    if (effect) {
                        effect.play();
                        console.error("beloop : ".concat(effect.data.beloop, " "));
                        effect.data.beloop = true;
                    }
                };
                effectPlayer.prototype.update = function (delta) {
                };
                effectPlayer.prototype.remove = function () {
                };
                effectPlayer = __decorate([
                    m4m.reflect.nodeComponent
                ], effectPlayer);
                return effectPlayer;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/jump", [], function (exports_174, context_174) {
    "use strict";
    var jump;
    var __moduleName = context_174 && context_174.id;
    return {
        setters: [],
        execute: function () {
            exports_174("jump", jump = /** @class */ (function (_super) {
                __extends(jump, _super);
                function jump() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.g = -9.8;
                    _this.v = 0;
                    _this.baseHeight = 0;
                    return _this;
                }
                jump.prototype.onPlay = function () {
                    this.baseHeight = this.gameObject.transform.localTranslate.y;
                    this.v = 2;
                };
                jump.prototype.update = function (delta) {
                    this.v += this.g * delta;
                    var tran = this.gameObject.transform;
                    var cur = tran.localTranslate.y + this.v;
                    if (cur > this.baseHeight) {
                        tran.localTranslate.y += this.v;
                        tran.localTranslate = tran.localTranslate;
                    }
                    else {
                        this.v = -this.v * 0.5;
                        if (this.v < 0.1) {
                            this.v = 0;
                            this.g = 0;
                        }
                        tran.localTranslate.y = this.baseHeight;
                    }
                };
                jump.prototype.jump = function (v) {
                    this.g = -9.8;
                    this.v = v;
                };
                jump.prototype.remove = function () {
                };
                jump = __decorate([
                    m4m.reflect.nodeComponent
                ], jump);
                return jump;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/testCgVerColor", [], function (exports_175, context_175) {
    "use strict";
    var testCgVerColor;
    var __moduleName = context_175 && context_175.id;
    return {
        setters: [],
        execute: function () {
            exports_175("testCgVerColor", testCgVerColor = /** @class */ (function (_super) {
                __extends(testCgVerColor, _super);
                function testCgVerColor() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                testCgVerColor.prototype.onPlay = function () {
                    var mf = this.gameObject.getComponent("meshFilter");
                    var mesh = mf.mesh;
                    var len = 78;
                    mesh.data.color = [];
                    for (var i = 0; i < len; i++) {
                        mesh.data.color.push(new m4m.math.color(1, 1, 1, 1));
                    }
                    mesh.defaultAsset = true;
                    debugger;
                    var webgl = this.gameObject.getScene().app.webgl;
                    var vf = mesh.glMesh.vertexFormat | m4m.render.VertexFormatMask.Color;
                    var v32 = mf.mesh.data.genVertexDataArray(vf);
                    var i16 = mesh.data.genIndexDataArray();
                    mesh.glMesh = new m4m.render.glMesh();
                    mesh.glMesh.initBuffer(webgl, vf, mesh.data.pos.length);
                    mesh.glMesh.uploadVertexData(webgl, v32);
                    mesh.glMesh.addIndex(webgl, i16.length);
                    mesh.glMesh.uploadIndexData(webgl, 0, i16);
                };
                testCgVerColor.prototype.update = function (delta) {
                };
                testCgVerColor.prototype.remove = function () {
                };
                testCgVerColor = __decorate([
                    m4m.reflect.nodeComponent
                ], testCgVerColor);
                return testCgVerColor;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/testObs", ["obsCreateMgr"], function (exports_176, context_176) {
    "use strict";
    var obsCreateMgr_5, testObs;
    var __moduleName = context_176 && context_176.id;
    return {
        setters: [
            function (obsCreateMgr_5_1) {
                obsCreateMgr_5 = obsCreateMgr_5_1;
            }
        ],
        execute: function () {
            exports_176("testObs", testObs = /** @class */ (function (_super) {
                __extends(testObs, _super);
                function testObs() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                testObs.prototype.onPlay = function () {
                    obsCreateMgr_5.obsCreateMgr.init(this.transform1, this.transform2);
                    for (var i = 0; i < 25; i++) {
                        var t = obsCreateMgr_5.obsCreateMgr.getObs(i);
                        this.gameObject.transform.scene.addChild(t);
                    }
                };
                testObs.prototype.update = function (delta) {
                };
                testObs.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field('reference', null, "transform")
                ], testObs.prototype, "transform1", void 0);
                __decorate([
                    m4m.reflect.Field('reference', null, "transform")
                ], testObs.prototype, "transform2", void 0);
                testObs = __decorate([
                    m4m.reflect.nodeComponent
                ], testObs);
                return testObs;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/testShowBoxc", [], function (exports_177, context_177) {
    "use strict";
    var testShowBoxc;
    var __moduleName = context_177 && context_177.id;
    return {
        setters: [],
        execute: function () {
            exports_177("testShowBoxc", testShowBoxc = /** @class */ (function (_super) {
                __extends(testShowBoxc, _super);
                function testShowBoxc() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                testShowBoxc.prototype.start = function () {
                    this.bc = this.gameObject.getComponent("boxcollider");
                    if (this.bc) {
                        this.bc.colliderVisible = true;
                    }
                };
                testShowBoxc.prototype.onPlay = function () {
                };
                testShowBoxc.prototype.update = function (delta) {
                };
                testShowBoxc.prototype.remove = function () {
                    if (this.bc) {
                        this.bc.colliderVisible = false;
                    }
                };
                testShowBoxc = __decorate([
                    m4m.reflect.nodeComponent
                ], testShowBoxc);
                return testShowBoxc;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/testcollider", [], function (exports_178, context_178) {
    "use strict";
    var testcollider;
    var __moduleName = context_178 && context_178.id;
    return {
        setters: [],
        execute: function () {
            exports_178("testcollider", testcollider = /** @class */ (function (_super) {
                __extends(testcollider, _super);
                function testcollider() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.isstrat = false;
                    return _this;
                }
                testcollider.prototype.start = function () {
                    this.isstrat = true;
                };
                testcollider.prototype.onPlay = function () {
                    this.isstrat;
                    debugger;
                    var c = this.gameObject.getComponent("boxcollider");
                    if (!c) {
                        this.gameObject.addComponent("boxcollider");
                    }
                    this.MyC = c;
                    if (this.MyC && this.collider) {
                        this.MyC.colliderVisible = true;
                        this.collider.colliderVisible = true;
                        // console.error(`collider ${this.collider.size.toString()}  MyC ${this.MyC.size.toString()}`)
                    }
                };
                testcollider.prototype.update = function (delta) {
                    if (!this.collider || !this.MyC)
                        return;
                    if (this.collider.intersectsTransform(this.gameObject.transform)) {
                        console.error(" \u78B0\u5230\u4E86 ".concat(this.collider.gameObject.transform.name, " !!!"));
                    }
                };
                testcollider.prototype.remove = function () {
                };
                __decorate([
                    m4m.reflect.Field("reference", null, "boxcollider")
                ], testcollider.prototype, "collider", void 0);
                testcollider = __decorate([
                    m4m.reflect.nodeComponent
                ], testcollider);
                return testcollider;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("lab/tweenTest", [], function (exports_179, context_179) {
    "use strict";
    var tweenTest;
    var __moduleName = context_179 && context_179.id;
    return {
        setters: [],
        execute: function () {
            exports_179("tweenTest", tweenTest = /** @class */ (function (_super) {
                __extends(tweenTest, _super);
                function tweenTest() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.count = 0;
                    _this.dis = -10;
                    _this.over = false;
                    return _this;
                }
                tweenTest.prototype.onPlay = function () {
                };
                tweenTest.prototype.update = function (delta) {
                    if (this.over)
                        return;
                    this.count += delta * 0.3;
                    this.count = m4m.math.floatClamp(this.count, 0, 1);
                    if (this.count > 1)
                        this.over = true;
                    var tran = this.gameObject.transform;
                    // if(this.count <= 0.5){
                    //     let mth = m4m.framework.tweenMethod.CubicEaseIn;
                    //     tran.localTranslate.x = m4m.framework.tweenUtil.GetEaseProgress(mth,this.count *2) * this.dis/2;
                    // }else{
                    //     let mth = m4m.framework.tweenMethod.CubicEaseOut;
                    //     tran.localTranslate.x = m4m.framework.tweenUtil.GetEaseProgress(mth, (this.count * 2) - 1 ) * this.dis/2 + this.dis/2;
                    // }
                    tran.localTranslate.x = this.tween(this.count, this.dis);
                    tran.localTranslate = tran.localTranslate;
                };
                tweenTest.prototype.tween = function (p, dis) {
                    var mth, tp, len;
                    if (p <= 0.5) {
                        mth = m4m.framework.tweenMethod.CubicEaseIn;
                        tp = p * 2;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2;
                    }
                    else {
                        mth = m4m.framework.tweenMethod.CubicEaseOut;
                        tp = p * 2 - 1;
                        return m4m.framework.tweenUtil.GetEaseProgress(mth, tp) * dis / 2 + dis / 2;
                    }
                };
                tweenTest.prototype.remove = function () {
                };
                tweenTest = __decorate([
                    m4m.reflect.nodeComponent
                ], tweenTest);
                return tweenTest;
            }(m4m.framework.behaviour)));
        }
    };
});
System.register("ui/uiScaleAnimation", [], function (exports_180, context_180) {
    "use strict";
    var uiScaleAnimation;
    var __moduleName = context_180 && context_180.id;
    return {
        setters: [],
        execute: function () {
            exports_180("uiScaleAnimation", uiScaleAnimation = /** @class */ (function (_super) {
                __extends(uiScaleAnimation, _super);
                function uiScaleAnimation() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 是否循环播放 */
                    _this.isLoop = false;
                    /** 播放速度 f/s (帧每秒)*/
                    _this.playSpeed = 5;
                    _this.sps = [];
                    _this.isStop = true;
                    _this.inited = false;
                    _this.time = 0;
                    _this.coutTime = 2;
                    _this.scale = 0;
                    return _this;
                }
                uiScaleAnimation.prototype.onPlay = function () {
                    this.init();
                };
                uiScaleAnimation.prototype.init = function () {
                    if (this.inited)
                        return;
                    this.transform.visible = true;
                    this.scale = 0;
                    this.resTransform();
                    this.inited = true;
                };
                uiScaleAnimation.prototype.resTransform = function () {
                    this.transform.localScale.x = this.scale;
                    this.transform.localScale.y = this.scale;
                    this.transform.markDirty();
                };
                uiScaleAnimation.prototype.play = function () {
                    if (!this.isStop)
                        return;
                    this.scale = 0;
                    this.time = 0;
                    this.isStop = false;
                };
                uiScaleAnimation.prototype.stop = function () {
                    if (this.isStop)
                        return;
                    this.isStop = true;
                    this.scale = 1;
                };
                uiScaleAnimation.prototype.update = function (delta) {
                    if (this.isStop)
                        return;
                    this.init();
                    if (!this.inited)
                        return;
                    var num = delta * this.playSpeed;
                    this.time += num;
                    var p = this.time / this.coutTime;
                    //计算欢动
                    var mth = m4m.framework.tweenMethod.BackEaseOut;
                    var tp = m4m.framework.tweenUtil.GetEaseProgress(mth, p);
                    this.scale = tp;
                    //  console.error("this.scale   "+this.scale+"  num  "+num);
                    if (this.time > this.coutTime) {
                        this.stop();
                    }
                    this.resTransform();
                };
                uiScaleAnimation.prototype.remove = function () {
                };
                uiScaleAnimation = __decorate([
                    m4m.reflect.node2DComponent
                ], uiScaleAnimation);
                return uiScaleAnimation;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("ui/base/sequenceFrame", [], function (exports_181, context_181) {
    "use strict";
    var sequenceFrame;
    var __moduleName = context_181 && context_181.id;
    return {
        setters: [],
        execute: function () {
            exports_181("sequenceFrame", sequenceFrame = /** @class */ (function (_super) {
                __extends(sequenceFrame, _super);
                function sequenceFrame() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 是否循环播放 */
                    _this.isLoop = false;
                    /** 播放速度 f/s (帧每秒)*/
                    _this.playSpeed = 24;
                    _this.sps = [];
                    _this.isStop = true;
                    _this.currF = 0;
                    _this.inited = false;
                    _this.allCount = 0;
                    _this.Fcount = 1;
                    return _this;
                }
                sequenceFrame.prototype.onPlay = function () {
                    this.init();
                };
                sequenceFrame.prototype.init = function () {
                    if (this.inited)
                        return;
                    var img = this.transform.getComponent("image2D");
                    if (!img || !img.sprite)
                        return;
                    var assetmgr = this.transform.canvas.assetmgr;
                    if (!assetmgr)
                        return;
                    var atles_ = assetmgr.getAssetByName(img.sprite.atlas);
                    for (var key in atles_.sprites) {
                        var sp = atles_.sprites[key];
                        if (sp)
                            this.sps.push(sp);
                    }
                    this.img = img;
                    this.inited = true;
                };
                sequenceFrame.prototype.play = function () {
                    if (!this.isStop)
                        return;
                    this.transform.visible = true;
                    this.isStop = false;
                };
                sequenceFrame.prototype.stop = function () {
                    if (this.isStop)
                        return;
                    this.transform.visible = false;
                    this.isStop = true;
                    this.currF = 0;
                    this.Fcount = 1;
                    this.allCount = 0;
                };
                sequenceFrame.prototype.update = function (delta) {
                    if (this.isStop)
                        return;
                    this.init();
                    if (!this.inited)
                        return;
                    var num = this.playSpeed * delta;
                    this.Fcount += num;
                    this.allCount += num;
                    if (this.Fcount < 1)
                        return;
                    this.Fcount = this.Fcount - 1;
                    var sp = this.sps[this.currF % this.sps.length];
                    this.img.sprite = sp;
                    //检查 是否循环了一轮
                    var loopNum = Math.floor(this.allCount / this.sps.length);
                    if (!this.isLoop && loopNum >= 1) {
                        this.stop();
                    }
                    this.currF++;
                };
                sequenceFrame.prototype.remove = function () {
                };
                sequenceFrame = __decorate([
                    m4m.reflect.node2DComponent
                ], sequenceFrame);
                return sequenceFrame;
            }(m4m.framework.behaviour2d)));
        }
    };
});
System.register("ui/base/uiScaleAnimation", [], function (exports_182, context_182) {
    "use strict";
    var uiScaleAnimation;
    var __moduleName = context_182 && context_182.id;
    return {
        setters: [],
        execute: function () {
            exports_182("uiScaleAnimation", uiScaleAnimation = /** @class */ (function (_super) {
                __extends(uiScaleAnimation, _super);
                function uiScaleAnimation() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    /** 是否循环播放 */
                    _this.isLoop = false;
                    /** 播放速度 f/s (帧每秒)*/
                    _this.playSpeed = 5;
                    _this.sps = [];
                    _this.isStop = true;
                    _this.inited = false;
                    _this.time = 0;
                    _this.coutTime = 2;
                    _this.scale = 0;
                    return _this;
                }
                uiScaleAnimation.prototype.onPlay = function () {
                    this.init();
                };
                uiScaleAnimation.prototype.init = function () {
                    if (this.inited)
                        return;
                    this.transform.visible = true;
                    this.scale = 0;
                    this.resTransform();
                    this.inited = true;
                };
                uiScaleAnimation.prototype.resTransform = function () {
                    this.transform.localScale.x = this.scale;
                    this.transform.localScale.y = this.scale;
                    this.transform.markDirty();
                };
                uiScaleAnimation.prototype.play = function () {
                    if (!this.isStop)
                        return;
                    this.scale = 0;
                    this.time = 0;
                    this.isStop = false;
                };
                uiScaleAnimation.prototype.stop = function () {
                    if (this.isStop)
                        return;
                    this.isStop = true;
                    this.scale = 1;
                };
                uiScaleAnimation.prototype.update = function (delta) {
                    if (this.isStop)
                        return;
                    this.init();
                    if (!this.inited)
                        return;
                    var num = delta * this.playSpeed;
                    this.time += num;
                    var p = this.time / this.coutTime;
                    //计算欢动
                    var mth = m4m.framework.tweenMethod.BackEaseOut;
                    var tp = m4m.framework.tweenUtil.GetEaseProgress(mth, p);
                    this.scale = tp;
                    //  console.error("this.scale   "+this.scale+"  num  "+num);
                    if (this.time > this.coutTime) {
                        this.stop();
                    }
                    this.resTransform();
                };
                uiScaleAnimation.prototype.remove = function () {
                };
                uiScaleAnimation = __decorate([
                    m4m.reflect.node2DComponent
                ], uiScaleAnimation);
                return uiScaleAnimation;
            }(m4m.framework.behaviour2d)));
        }
    };
});
