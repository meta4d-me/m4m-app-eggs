import Web3 from 'web3';

import IProviderOptions from './interfaces/IProviderOptions';
import IWeb3Provider from './interfaces/IWeb3Provider';
import ProxiedProperty from './ProxiedProperty';


const defaultProviderOptions :IProviderOptions = {
    retriesOnError: 2,
    retryOnNullResponse: false
};

export default class Web3Provider implements IWeb3Provider {
    options :IProviderOptions;
    instances :Web3[];
    currentInstanceIndex :number;

    constructor(web3Endpoints :string[], options :IProviderOptions) {
        this.instances = web3Endpoints.map(p => new Web3(p));
        this.currentInstanceIndex = 0;
        this.options = { ...defaultProviderOptions, ...options };

        return new Proxy(this, { get: this.get });
    }

    get(target :Web3Provider, prop :string) {
        if (target.hasOwnProperty(prop))
            return target[prop];

        target.currentInstanceIndex = (target.currentInstanceIndex + 1) % target.instances.length;
        const currentInstance :Web3 = target.instances[target.currentInstanceIndex];

        if (currentInstance[prop] === undefined)
            return undefined;

        return new ProxiedProperty(currentInstance[prop], target, [{ name: prop }]);
    }

    nextInstance() :Web3 {
        this.currentInstanceIndex = (this.currentInstanceIndex + 1) % this.instances.length;
        const currentInstance :Web3 = this.instances[this.currentInstanceIndex];

        return currentInstance;
    }
}
