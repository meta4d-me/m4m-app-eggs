{"bend_a.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _Tex;\r\nuniform lowp vec4 _Colr;\r\n\r\n//in-----------------------------\r\nin mediump vec2 _Tex_uv_TEXCOORD0;\r\n\r\n//------------------------------------\r\n\r\n\r\n\r\n//textureEtC1Mark\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n\r\nout vec4 color;\r\nvoid main() \r\n{\r\n    lowp vec4 emission = vec4(.0,.0,.0,.0);\r\n\r\n    //----------------------------------------------------------\r\n    lowp vec4 tex = texture(_Tex, _Tex_uv_TEXCOORD0);\r\n    lowp vec3 finalColor = _Colr.a * (_Colr.rgb * tex.rgb * 2.0 );\r\n    emission = vec4(finalColor.rgb , (tex.a * _Colr.a));\r\n\r\n    #ifdef FOG\r\n        emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    color = emission;\r\n}","bend_a.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"queue\":  0,\r\n    \"properties\": [\r\n          \"_Tex('MainTex',Texture)='white'{}\",\r\n          \"_Colr ('Tint Color', Color) = (0.5,0.5,0.5,1.0)\"\r\n      ],\r\n      \"passes\": {\r\n          \"base\": [\r\n            {\r\n              \"blendmode\": \"blend\",\r\n              \"showface\": \"all\",\r\n              \"zwrite\": \"off\",\r\n              \"vs\": \"bend_a\",\r\n              \"fs\": \"bend_a\"\r\n            }\r\n          ],\r\n          \"shadowgen\": [],  \r\n          \"bone\": [],\r\n          \"shadowuse\": []\r\n      }\r\n  }","bend_a.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Tex_ST;\r\n\r\n#ifdef FOG\r\n// #define glstate_fog_end\t\t150.\r\n// #define glstate_fog_start\t1.\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nout mediump vec2 _Tex_uv_TEXCOORD0;\r\n\r\nvoid main()\r\n{\r\n    _Tex_uv_TEXCOORD0 = _glesMultiTexCoord0.xy * _Tex_ST.xy + _Tex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","body3fluxzy1.fs.glsl":"#version 300 es\r\n\r\n#define FLUXAY_COLOR_SWITCH\r\n\r\nprecision lowp float;\r\n// uniform highp mat4 glstate_matrix_it_modelview;\r\nuniform highp mat4 glstate_matrix_view;\r\n\r\nuniform float glstate_timer;\r\nuniform highp sampler2D _MainTex;\r\nuniform highp sampler2D _BumpMap;\r\nuniform highp sampler2D _MaskTex;\r\nuniform highp sampler2D _MatCap;\r\nuniform highp sampler2D _MatCap2;\r\nuniform highp sampler2D _MatCap3;\r\nuniform highp sampler2D _FluxayTex;\r\nuniform highp sampler2D _FluxayTex2;\r\n\r\nuniform lowp vec4 _MatCapColor;\r\nuniform lowp vec4 _MatCap2Color;\r\nuniform lowp vec4 _MatCap3Color;\r\n\r\nuniform lowp float _Strength;\r\nuniform lowp float _Strength2;\r\nuniform lowp float _Strength3;\r\n\r\nuniform lowp vec4 _FluxayColor;\r\nuniform lowp vec4 _FluxayColor2;\r\n\r\n// uniform lowp vec4 _MainColor;\r\n// uniform lowp float _AlphaCut;\r\n\r\n//light\r\n\r\n//in--------------------------\r\nin mediump vec2 uv_TEXCOORD0;\r\nin mediump vec2 uv_FluxayTex_TEXCOORD2;\r\nin mediump vec2 uv_FluxayTex2_TEXCOORD3;\r\n\r\nin highp vec3 v_N;\r\nin highp mat3 TBNmat;\r\n\r\n// in highp vec3 tSpace0;\r\n// in highp vec3 tSpace1;\r\n// in highp vec3 tSpace2;\r\n\r\nin highp vec3 t;\r\n\r\n\r\n//---------------------------------\r\n\r\n//textureEtC1Mark\r\n\r\n//UnpackNormal----------------------\r\nvec3 UnpackNormal(vec4 normalPixel){\r\n    return normalPixel.xyz *2.0 -1.0;\r\n}\r\n//----------------------------------\r\n\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    lowp vec4 basecolor = texture(_MainTex, uv_TEXCOORD0);\r\n    lowp vec4 tex = basecolor;\r\n    // if(basecolor.a < _AlphaCut)\r\n    //     discard;\r\n    // lowp vec4 fristColor=basecolor*_MainColor;\r\n    // lowp vec4 fristColor = basecolor;\r\n    // lowp vec4 emission = fristColor;\r\n    lowp vec4 emission = basecolor;\r\n\r\n    //材质 mask 纹理\r\n    lowp vec4 masktex = texture(_MaskTex , uv_TEXCOORD0);\r\n    //获得 normal 从 切线空间\r\n    lowp vec3 worldNorm = UnpackNormal(texture(_BumpMap, uv_TEXCOORD0));\r\n    //worldNorm 到 world 空间\r\n    worldNorm = normalize(TBNmat * worldNorm);\r\n    //emission = vec4(worldNorm , 1.0);\r\n    // emission = vec4(uv_TEXCOORD0,0,1.0);\r\n    // emission = vec4(t,1.0);\r\n\r\n\r\n    // mediump vec3 worldNorm;\r\n    // worldNorm.x = dot(tSpace0.xyz, normals);\r\n    // worldNorm.y = dot(tSpace1.xyz, normals);\r\n    // worldNorm.z = dot(tSpace2.xyz, normals);\r\n    // emission = vec4(worldNorm,1);\r\n\r\n    //normals 到 view 空间\r\n    worldNorm = (mat3(glstate_matrix_view) * worldNorm);\r\n    // worldNorm = (mat3(glstate_matrix_view) * v_N);\r\n    // emission = vec4(worldNorm,1);\r\n\r\n    mediump vec2 capCoord = worldNorm.xy;\r\n    lowp vec4 matcap1 = texture(_MatCap,  capCoord * 0.5 + 0.5)  * _MatCapColor  * _Strength;//* tex * _Strength;\r\n    lowp vec4 matcap2 = texture(_MatCap2, capCoord * 0.5 + 0.5)  * _MatCap2Color * _Strength2;\r\n    lowp vec4 matcap3 = texture(_MatCap3, capCoord * 0.5 + 0.5)  * _MatCap3Color * _Strength3;\r\n    \r\n    lowp vec4 mc = (matcap1 * (masktex.r * masktex.g) + matcap2 * (1.0 - masktex.r) + matcap3 * (1.0 - masktex.g)) * tex;\r\n\r\n    #ifdef FLUXAY_COLOR_SWITCH\r\n        //SetDunamicTime();\r\n\r\n        mediump vec4 fluax1 = vec4(.0,.0,.0,.0);\r\n        highp vec2 moveadd = (uv_TEXCOORD0 + glstate_timer * 2.0 * vec2(1.0,1.0));\r\n        mediump vec4 fluaytex = texture(_FluxayTex , uv_FluxayTex_TEXCOORD2);\r\n        mediump vec3 emissive = (fluaytex.rgb * _FluxayColor.rgb * 2.0 * (fluaytex.a * (1.0 - masktex.b) * _FluxayColor.a));\r\n        fluax1 = vec4(emissive,.0) * fluaytex.a * _FluxayColor.a;\r\n\r\n        mediump vec4 fluay2tex = texture(_FluxayTex2 , uv_FluxayTex2_TEXCOORD3);\r\n        mediump vec3 emissive2 = (fluay2tex.rgb * _FluxayColor2.rgb * 2.0 * (fluay2tex.a * (1.0 - masktex.g) * _FluxayColor2.a));\r\n        fluax1 += (vec4(emissive2,.0) * fluay2tex.a * _FluxayColor2.a);\r\n        fluax1.rgb = fluax1.rgb * mc.rgb;\r\n        mc = mc + fluax1;\r\n    #endif\r\n\r\n    emission = mc; \r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    color = emission;\r\n}","body3fluxzy1.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n\r\n    \"properties\": [\r\n        \"_MatCapColor('Main Color', Color) = (1.0, 1.0, 1.0, 1.0)\",\r\n        \"_MatCap2Color('Main Color 2', Color) = (1.0, 1.0, 1.0, 1.0)\",\r\n        \"_MatCap3Color('Main Color 3', Color) = (1.0, 1.0, 1.0, 1.0)\",\r\n        \"_Strength('Strength_1', Range(0.0, 10.0)) = 3.0\",\r\n        \"_Strength2('Strength_2', Range(0.0, 10.0)) = 3.0\",\r\n        \"_Strength3('Strength_3', Range(0.0, 10.0)) = 3.0\",\r\n\r\n        \"_MainTex ('Base (RGB)', Texture) = 'white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_BumpMap ('Normal Map', Texture) = 'white'{}\",\t\t\t\r\n        \"_MaskTex ('Mask (RGB)', Texture) = 'white'{}\",\r\n\r\n        \"_MatCap ('MatCap (RGB)', Texture) = 'white'{}\",\r\n        \"_MatCap2 ('MatCap2 (RGB)', Texture) = 'white'{}\",\r\n        \"_MatCap3 ('MatCap3 (RGB)', Texture) = 'white'{}\",\r\n\r\n        \"_FluxayTex ('FluxayTex(流光纹理g)', Texture) = 'white'{}\",\r\n        \"_FluxayTex_ST('FluxayTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_FluxayColor ('FluxayColor(流光颜色g)', Color) = (1,0,0,1)\",\r\n        \"_FluxayTex2('FluxayTex2(流光纹理b)', Texture) = 'white'{}\",\r\n        \"_FluxayTex2_ST('FluxayTex2_ST',Vector) = (1,1,0,0)\",\r\n        \"_FluxayColor2 ('FluxayColor2(流光颜色b)', Color) = (0.5,0.5,0.5,1)\"\r\n\r\n\r\n\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"body3fluxzy1\",\r\n                \"fs\": \"body3fluxzy1\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"body3fluxzy1\",\r\n                \"fs\": \"body3fluxzy1\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"body3fluxzy1\",\r\n                \"fs\": \"body3fluxzy1\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"body3fluxzy1\",\r\n                \"fs\": \"body3fluxzy1\"\r\n            }\r\n        ]\r\n    }\r\n}","body3fluxzy1.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\n// layout(location = 5) in mediump vec4 _glesMultiTexCoord1;\r\nlayout(location = 2) in highp vec3 _glesTangent;\t//w 被乘到了分量里 x = x*w , y = y*w , z = z*w , 且 w 被做了 +2 的偏移映射。\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform mediump vec4 _FluxayTex_ST;\r\nuniform mediump vec4 _FluxayTex2_ST;\r\n//light\r\nlowp mat4 blendMat ;\r\nlayout(location = 1) in highp vec3 _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4 glstate_matrix_it_modelview;\r\nuniform highp mat4 glstate_matrix_modelview;\r\n\r\n\r\n//out--------------------------\r\nout mediump vec2 uv_TEXCOORD0;\r\nout mediump vec2 uv_FluxayTex_TEXCOORD2;\r\nout mediump vec2 uv_FluxayTex2_TEXCOORD3;\r\n\r\nout highp vec3 v_N;\r\nout highp mat3 TBNmat;\r\n\r\n// out highp vec3 tSpace0;\r\n// out highp vec3 tSpace1;\r\n// out highp vec3 tSpace2;\r\n\r\nout highp vec3 t;\r\n\r\n//获取 tangent 的 W 值\r\nlowp float tangentW(lowp vec3 _tangent){\r\n\treturn sqrt(_tangent.x * _tangent.x + _tangent.y * _tangent.y + _tangent.z * _tangent.z) - 2.0;\r\n}\r\n\r\n//---------------------------------\r\n\r\n//计算 TBN 矩阵-----------------\r\nmediump mat3 calTBNMatrix(highp mat4 _m_mat,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n\r\n    lowp vec3 normal = normalize(mat3(_m_mat) * normalize(_normal));\r\n    lowp vec3 tangent = normalize(mat3(_m_mat) * normalize(_tangent));\r\n    lowp vec3 binormal = cross( normal , tangent) * tangentW(_tangent);\r\n  \treturn mat3(tangent,binormal,normal);\r\n}\r\n//-----------------------------\r\n\r\nmediump vec3 UnityObjectToWorldNormal(mediump mat3 _m_mat,mediump vec3 _normal){\r\n\t return normalize(_m_mat * _normal);\r\n}\r\n\r\n#ifdef FOG\r\n// #define glstate_fog_end\t\t150.\r\n// #define glstate_fog_start\t1.\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4 _glesBlendIndex4;\r\nlayout(location = 7) in lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n\thighp vec3 _n = vec3(.0,.0,.0);\r\n    //求世界空间法线\r\n    #ifdef SKIN\r\n    _n = normalize(mat3(blendMat) * _glesNormal);\r\n    #else\r\n    _n = _glesNormal;\r\n    #endif\r\n    lowp mat3 normalmat = mat3(glstate_matrix_model);\r\n\r\n\tTBNmat = calTBNMatrix(glstate_matrix_model , _n , _glesTangent);\r\n\r\n\tv_N = normalmat * _n;\r\n}\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n    uv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    uv_FluxayTex_TEXCOORD2 = _glesMultiTexCoord0.xy * _FluxayTex_ST.xy + _FluxayTex_ST.zw;\r\n    uv_FluxayTex2_TEXCOORD3 = _glesMultiTexCoord0.xy * _FluxayTex2_ST.xy + _FluxayTex2_ST.zw;\r\n\r\n    //----------------------------------------------------------\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\t//light\r\n    calcNormal(position);\r\n\r\n\t//t = normalize(_glesTangent);\r\n\r\n\t//mediump mat3 rotation = calTANGENT_SPACE_ROTATION(_glesNormal , _glesTangent);\r\n\t\r\n\r\n\t// highp mat4 itMat = glstate_matrix_it_modelview;\r\n\r\n\t// c0 = rotation * normalize(glstate_matrix_modelview[0].xyz);\r\n\t// c1 = rotation * normalize(glstate_matrix_modelview[1].xyz);\r\n\t// c0 = TBNmat * normalize(glstate_matrix_it_modelview[0].xyz);\r\n\t// c1 = TBNmat * normalize(glstate_matrix_it_modelview[1].xyz);\r\n\r\n\t\r\n\t// highp mat3 wMat = mat3(glstate_matrix_model);\r\n\t// highp vec3 worldNormal = UnityObjectToWorldNormal(wMat , _glesNormal);\r\n\t// highp vec3 worldTangent = wMat * _glesTangent;\r\n\t// highp vec3 worldBinormal = cross(worldNormal, worldTangent) ;\r\n\t// tSpace0 = vec3(worldTangent.x, worldBinormal.x, worldNormal.x);\r\n\t// tSpace1 = vec3(worldTangent.y, worldBinormal.y, worldNormal.y);\r\n\t// tSpace2 = vec3(worldTangent.z, worldBinormal.z, worldNormal.z);\r\n\r\n\r\n    \r\n\tposition = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","bodyfluxzy2.fs.glsl":"#version 300 es\r\n\r\n#define FLUXAY_COLOR_SWITCH\r\n\r\nprecision lowp float;\r\n// uniform highp mat4 glstate_matrix_it_modelview;\r\nuniform highp mat4 glstate_matrix_view;\r\n\r\nuniform float glstate_timer;\r\nuniform highp sampler2D _MainTex;\r\nuniform highp sampler2D _BumpMap;\r\nuniform highp sampler2D _MaskTex;\r\nuniform highp sampler2D _MatCap;\r\nuniform highp sampler2D _MatCap2;\r\nuniform highp sampler2D _FluxayTex;\r\nuniform highp sampler2D _FluxayTex2;\r\n\r\nuniform lowp vec4 _MatCapColor;\r\nuniform lowp vec4 _MatCap2Color;\r\n\r\nuniform lowp float _Strength;\r\nuniform lowp float _Strength2;\r\n\r\nuniform lowp vec4 _FluxayColor;\r\nuniform lowp vec4 _FluxayColor2;\r\n\r\n// uniform lowp vec4 _MainColor;\r\n// uniform lowp float _AlphaCut;\r\n\r\n//light\r\n\r\n//in--------------------------\r\nin mediump vec2 uv_TEXCOORD0;\r\nin mediump vec2 uv_FluxayTex_TEXCOORD2;\r\nin mediump vec2 uv_FluxayTex2_TEXCOORD3;\r\n\r\nin highp mat3 TBNmat;\r\n\r\n// in highp vec3 tSpace0;\r\n// in highp vec3 tSpace1;\r\n// in highp vec3 tSpace2;\r\n\r\nin highp vec3 t;\r\n\r\n\r\n//---------------------------------\r\n\r\n//textureEtC1Mark\r\n\r\n//UnpackNormal----------------------\r\nvec3 UnpackNormal(vec4 normalPixel){\r\n    return normalPixel.xyz *2.0 -1.0;\r\n}\r\n//----------------------------------\r\n\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    lowp vec4 basecolor = texture(_MainTex, uv_TEXCOORD0);\r\n    lowp vec4 tex = basecolor;\r\n    // if(basecolor.a < _AlphaCut)\r\n    //     discard;\r\n    // lowp vec4 fristColor=basecolor*_MainColor;\r\n    lowp vec4 fristColor = basecolor;\r\n    lowp vec4 emission = fristColor;\r\n\r\n    //材质 mask 纹理\r\n    lowp vec4 masktex = texture(_MaskTex , uv_TEXCOORD0);\r\n    //获得 normal 从 切线空间\r\n    lowp vec3 worldNorm = UnpackNormal(texture(_BumpMap, uv_TEXCOORD0));\r\n    //worldNorm 到 world 空间\r\n    worldNorm = normalize(TBNmat * worldNorm);\r\n    // emission = vec4(worldNorm , 1.0);\r\n    // emission = vec4(uv_TEXCOORD0,0,1.0);\r\n    // emission = vec4(t,1.0);\r\n\r\n\r\n    // mediump vec3 worldNorm;\r\n    // worldNorm.x = dot(tSpace0.xyz, normals);\r\n    // worldNorm.y = dot(tSpace1.xyz, normals);\r\n    // worldNorm.z = dot(tSpace2.xyz, normals);\r\n    // emission = vec4(worldNorm,1);\r\n\r\n    //normals 到 view 空间\r\n    worldNorm = (mat3(glstate_matrix_view) * worldNorm);\r\n    // emission = vec4(worldNorm,1);\r\n\r\n    mediump vec2 capCoord = worldNorm.xy;\r\n    lowp vec4 matcap1 = texture(_MatCap, capCoord * 0.5 + 0.5) * _MatCapColor * _Strength;//* tex * _Strength;\r\n    lowp vec4 matcap2 = texture(_MatCap2, capCoord * 0.5 + 0.5) * _MatCap2Color * _Strength2;\r\n    \r\n    lowp vec4 mc = (matcap1 * masktex.r + matcap2 * (1.0 - masktex.r)) * tex;\r\n\r\n    #ifdef FLUXAY_COLOR_SWITCH\r\n        //SetDunamicTime();\r\n\r\n        mediump vec4 fluax1 = vec4(.0,.0,.0,.0);\r\n        highp vec2 moveadd = (uv_TEXCOORD0 + glstate_timer * 2.0 * vec2(1.0,1.0));\r\n        mediump vec4 fluaytex = texture(_FluxayTex , uv_FluxayTex_TEXCOORD2);\r\n        mediump vec3 emissive = (fluaytex.rgb * _FluxayColor.rgb * 2.0 * (fluaytex.a * (1.0 - masktex.b) * _FluxayColor.a));\r\n        fluax1 = vec4(emissive,.0) * fluaytex.a * _FluxayColor.a;\r\n\r\n        mediump vec4 fluay2tex = texture(_FluxayTex2 , uv_FluxayTex2_TEXCOORD3);\r\n        mediump vec3 emissive2 = (fluay2tex.rgb * _FluxayColor2.rgb * 2.0 * (fluay2tex.a * (1.0 - masktex.g) * _FluxayColor2.a));\r\n        fluax1 += (vec4(emissive2,.0) * fluay2tex.a * _FluxayColor2.a);\r\n        fluax1.rgb = fluax1.rgb * mc.rgb;\r\n        mc = mc + fluax1;\r\n    #endif\r\n\r\n    emission = mc; \r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    color = emission;\r\n}","bodyfluxzy2.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n\r\n    \"properties\": [\r\n        \"_MatCapColor('Main Color', Color) = (1.0, 1.0, 1.0, 1.0)\",\r\n        \"_MatCap2Color('Main Color 2', Color) = (1.0, 1.0, 1.0, 1.0)\",\r\n        \"_Strength('Strength_1', Range(0.0, 10.0)) = 3.0\",\r\n        \"_Strength2('Strength_2', Range(0.0, 10.0)) = 3.0\",\r\n\r\n        \"_MainTex ('Base (RGB)', Texture) = 'white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_BumpMap ('Normal Map', Texture) = 'white'{}\",\t\t\t\r\n        \"_MaskTex ('Mask (RGB)', Texture) = 'white'{}\",\r\n        \"_MatCap ('MatCap (RGB)', Texture) = 'white'{}\",\r\n        \"_MatCap2 ('MatCap2 (RGB)', Texture) = 'white'{}\",\r\n\r\n        \"_FluxayTex ('FluxayTex(流光纹理g)', Texture) = 'white'{}\",\r\n        \"_FluxayTex_ST('FluxayTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_FluxayColor ('FluxayColor(流光颜色g)', Color) = (1,0,0,1)\",\r\n        \"_FluxayTex2('FluxayTex2(流光纹理b)', Texture) = 'white'{}\",\r\n        \"_FluxayTex2_ST('FluxayTex2_ST',Vector) = (1,1,0,0)\",\r\n        \"_FluxayColor2 ('FluxayColor2(流光颜色b)', Color) = (0.5,0.5,0.5,1)\"\r\n\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"bodyfluxzy2\",\r\n                \"fs\": \"bodyfluxzy2\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"bodyfluxzy2\",\r\n                \"fs\": \"bodyfluxzy2\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"bodyfluxzy2\",\r\n                \"fs\": \"bodyfluxzy2\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"bodyfluxzy2\",\r\n                \"fs\": \"bodyfluxzy2\"\r\n            }\r\n        ]\r\n    }\r\n}","bodyfluxzy2.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\n// layout(location = 5) in mediump vec4 _glesMultiTexCoord1;\r\nlayout(location = 2) in highp vec3 _glesTangent;\t//w 被乘到了分量里 x = x*w , y = y*w , z = z*w , 且 w 被做了 +2 的偏移映射。\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform mediump vec4 _FluxayTex_ST;\r\nuniform mediump vec4 _FluxayTex2_ST;\r\n//light\r\nlowp mat4 blendMat ;\r\nlayout(location = 1) in highp vec3 _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform highp mat4 glstate_matrix_it_modelview;\r\nuniform highp mat4 glstate_matrix_modelview;\r\n\r\n\r\n//out--------------------------\r\nout mediump vec2 uv_TEXCOORD0;\r\nout mediump vec2 uv_FluxayTex_TEXCOORD2;\r\nout mediump vec2 uv_FluxayTex2_TEXCOORD3;\r\n\r\nout highp mat3 TBNmat;\r\n\r\n// out highp vec3 tSpace0;\r\n// out highp vec3 tSpace1;\r\n// out highp vec3 tSpace2;\r\n\r\nout highp vec3 t;\r\n\r\n//获取 tangent 的 W 值\r\nlowp float tangentW(lowp vec3 _tangent){\r\n\treturn sqrt(_tangent.x * _tangent.x + _tangent.y * _tangent.y + _tangent.z * _tangent.z) - 2.0;\r\n}\r\n\r\n//---------------------------------\r\n\r\n//计算 TBN 矩阵-----------------\r\nmediump mat3 calTBNMatrix(highp mat4 _m_mat,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n    lowp vec3 normal = normalize(mat3(_m_mat) * normalize(_normal) );\r\n    lowp vec3 tangent = normalize(mat3(_m_mat) * normalize(_tangent));\r\n    lowp vec3 binormal = cross( normal , tangent) * tangentW(_tangent);\r\n  \treturn mat3(tangent,binormal,normal);\r\n}\r\n//-----------------------------\r\n\r\nmediump vec3 UnityObjectToWorldNormal(mediump mat3 _m_mat,mediump vec3 _normal){\r\n\t return normalize(_m_mat * _normal);\r\n}\r\n\r\n#ifdef FOG\r\n// #define glstate_fog_end\t\t150.\r\n// #define glstate_fog_start\t1.\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4 _glesBlendIndex4;\r\nlayout(location = 7) in lowp vec4 _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0 * quat.x * quat.x;\r\n\tfloat yy = 2.0 * quat.y * quat.y;\r\n\tfloat zz = 2.0 * quat.z * quat.z;\r\n\tfloat ww = 2.0 * quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n\thighp vec3 _n = vec3(.0,.0,.0);\r\n    //求世界空间法线\r\n    #ifdef SKIN\r\n    _n = normalize(mat3(blendMat) * _glesNormal);\r\n    #else\r\n    _n = _glesNormal;\r\n    #endif\r\n    lowp mat3 normalmat = mat3(glstate_matrix_model);\r\n\r\n\tTBNmat = calTBNMatrix(glstate_matrix_model , _n , _glesTangent);\r\n\r\n}\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n    uv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    uv_FluxayTex_TEXCOORD2 = _glesMultiTexCoord0.xy * _FluxayTex_ST.xy + _FluxayTex_ST.zw;\r\n    uv_FluxayTex2_TEXCOORD3 = _glesMultiTexCoord0.xy * _FluxayTex2_ST.xy + _FluxayTex2_ST.zw;\r\n\r\n    //----------------------------------------------------------\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\t//light\r\n    calcNormal(position);\r\n\r\n\t// t = normalize(_glesTangent);\r\n\t\r\n\r\n\t//mediump mat3 rotation = calTANGENT_SPACE_ROTATION(_glesNormal , _glesTangent);\r\n\t\r\n\r\n\t// highp mat4 itMat = glstate_matrix_it_modelview;\r\n\r\n\t// c0 = rotation * normalize(glstate_matrix_modelview[0].xyz);\r\n\t// c1 = rotation * normalize(glstate_matrix_modelview[1].xyz);\r\n\t// c0 = TBNmat * normalize(glstate_matrix_it_modelview[0].xyz);\r\n\t// c1 = TBNmat * normalize(glstate_matrix_it_modelview[1].xyz);\r\n\r\n\t\r\n\t// highp mat3 wMat = mat3(glstate_matrix_model);\r\n\t// highp vec3 worldNormal = UnityObjectToWorldNormal(wMat , _glesNormal);\r\n\t// highp vec3 worldTangent = wMat * _glesTangent;\r\n\t// highp vec3 worldBinormal = cross(worldNormal, worldTangent) ;\r\n\t// tSpace0 = vec3(worldTangent.x, worldBinormal.x, worldNormal.x);\r\n\t// tSpace1 = vec3(worldTangent.y, worldBinormal.y, worldNormal.y);\r\n\t// tSpace2 = vec3(worldTangent.z, worldBinormal.z, worldNormal.z);\r\n\r\n\r\n    \r\n\tposition = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","diffuse.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform lowp float _AlphaCut;\r\nin mediump vec2 xlv_TEXCOORD0;\r\n\r\n//light\r\nlowp vec4 xlv_COLOR = vec4(0.0,0.0,0.0,1.0); \r\nbool hasLight = false;\r\nlowp vec3 fixedAmbient = vec3(0.6,0.6,0.6);\r\nuniform lowp float glstate_lightcount;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp vec4 glstate_vec4_lightcolors[8];\r\nuniform lowp float glstate_float_lightrange[8];\r\nuniform lowp float glstate_float_lightintensity[8];\r\n\r\nin lowp vec3 v_N;\r\nin lowp vec3 v_Mpos;\r\n\r\n//texture2DEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp float glstate_lightmapRGBAF16;\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//calcDiffuse 计算漫反射强度函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlowp float calcDiffuse(lowp vec3 N,lowp vec3 worldpos,lowp vec4 lightPos,lowp vec4 lightDir,lowp float cosspot,lowp float range )\r\n{\r\n    lowp vec3 v3 = lightPos.xyz - worldpos;\r\n    lowp float len = length(v3);\r\n    len = len > range ? range : len;\r\n    //求入射角，点光源&聚光灯\r\n    lowp vec3 L = normalize(v3); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    lowp vec3 L2 = -lightDir.xyz;\r\n    lowp float dotSpot = dot(L,L2);\r\n    //漫反射强度\r\n    lowp float diffuse =clamp(dot(N.xyz,L.xyz),0.0,1.0) * pow(1.0 - len/range,2.0); \r\n    lowp float diffuseD =clamp(dot(N.xyz,L2.xyz),0.0,1.0); \r\n    //pos.w 和 dir.w 至少有一个1，刚好组合出三种光源\r\n    diffuse= mix(diffuse,diffuse*smoothstep(cosspot,1.0,dotSpot),lightDir.w);\r\n    diffuse= mix(diffuseD,diffuse,lightPos.w);\r\n    return diffuse;\r\n}\r\n\r\nvoid calcCOLOR(){\r\n    int c =int(glstate_lightcount);\r\n\tif(c>0){\r\n        hasLight = true;\r\n        lowp float diff=0.0;\r\n\t\t//calcDiffuse(N,worldpos,glstate_vec4_lightposs[0],glstate_vec4_lightdirs[0],0.8);\r\n\t\tfor(int i=0;i<8;i++)\r\n\t\t{\r\n\t\t\tif(i>=c)break;\r\n\t\t\t//diff += calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n\t\t\tdiff = calcDiffuse(v_N,v_Mpos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n            xlv_COLOR += glstate_float_lightintensity[i] * glstate_vec4_lightcolors[i] * diff;\r\n\t\t}\r\n\t\txlv_COLOR.w = 1.0;  \r\n    }\r\n}\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < _AlphaCut)\r\n        discard;\r\n    lowp vec4 fristColor=basecolor*_MainColor;\r\n    lowp vec4 emission = fristColor;\r\n\r\n    //----------------------------------------------------------\r\n    //light\r\n    calcCOLOR();\r\n    \r\n#ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    if(glstate_lightmapRGBAF16 == 1.0){\r\n        emission.xyz *= lightmap.xyz;\r\n    }else{\r\n        emission.xyz *= decode_hdr(lightmap);\r\n    }\r\n    if(hasLight){ // have light\r\n        fristColor = fristColor * xlv_COLOR ;\r\n        emission = emission + mix(vec4(1.0, 1.0, 1.0, 1.0), fristColor, fristColor.wwww);\r\n    }\r\n#else\r\n\tif(hasLight){ // have light\r\n        emission = (fristColor * xlv_COLOR) + (fristColor * vec4(fixedAmbient,1.0));\r\n    }\r\n#endif\r\n\r\n#ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n#endif\r\n    \r\n    color = emission;\r\n}","diffuse.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"instance\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"instance_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ]\r\n    }\r\n}","diffuse.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n//light\r\nlowp mat4 blendMat ;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\nuniform lowp float glstate_lightcount;\r\n\r\nout highp vec3 v_N;\r\nout highp vec3 v_Mpos;\r\n\r\n#ifdef INSTANCE\r\n//instance_matrix 固定地址\r\nlayout(location = 12) in highp mat4 instance_matrix;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec2 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\nuniform lowp float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n\tint c =int(glstate_lightcount);\r\n\tif(c>0){\r\n\t\t//求世界空间法线\r\n\t\t#ifdef SKIN\r\n\t\tv_N = normalize(mat3(blendMat) * _glesNormal);\r\n\t\t#else\r\n\t\tv_N = _glesNormal;\r\n\t\t#endif\r\n\t\tlowp mat3 normalmat = mat3(glstate_matrix_model);\r\n\t\tv_N =normalize(normalmat*v_N);\r\n\t\tv_Mpos =(glstate_matrix_model * pos).xyz;\r\n\t}\r\n}\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = (1.0 - glstate_lightmapUV) * _glesMultiTexCoord0  + glstate_lightmapUV * _glesMultiTexCoord1;\t//unity lightMap UV ,优先使用UV1,次之UV0 \r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\t//light\r\n    calcNormal(position);\r\n\r\n\t#ifdef INSTANCE\r\n        position = instance_matrix * position;\r\n    #endif\r\n\t\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","diffuse_bothside.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.5\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"diffuse\",\r\n                \"fs\": \"diffuse\"\r\n            }\r\n        ]\r\n    }\r\n}","distortion.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\n\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin highp vec4 v_color;\r\n\r\nin lowp vec3 v_N;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\n#define fixedAmbient    vec4(0.6, 0.6, 0.6, 1.0)\r\n#define LIGHT_COLOR     vec4(1)\r\n#define LIGHT_DIRECTION vec3(0, 1, 0)\r\n#define DIFFUSE_CTB     dot(normalize(v_N.xyz), normalize(LIGHT_DIRECTION))\r\n#define DIFFUSE         max(DIFFUSE_CTB, 0.0) * LIGHT_COLOR\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    //gl_FragData[0] = v_color;\r\n\r\n    lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < 0.1)\r\n        discard;\r\n    lowp vec4 fristColor=basecolor*_MainColor * vec4(v_color.rgb, 1);\r\n    lowp vec4 emission = fristColor;\r\n\r\n    // Diffuse\r\n    emission = (fristColor * DIFFUSE) + (fristColor * fixedAmbient);\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, v_color.a);\r\n    #endif\r\n\r\n   color = emission;\r\n}","distortion.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"OFFSET ('OFFSET', Vector) = (0,0,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortion\",\r\n                \"fs\": \"distortion\"\r\n            }\r\n        ],\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortion\",\r\n                \"fs\": \"distortion\"\r\n            }\r\n        ]\r\n    }\r\n}","distortion.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\nlayout(location = 1) in lowp vec3 _glesNormal;\r\n\r\nout highp vec3 v_N;\r\n\r\n#ifdef FOG\r\nout lowp float factor;\r\n#endif\r\n\r\nuniform highp vec4 OFFSET;\r\n\r\nlayout(location = 3) in vec4 _glesColor;\r\nout highp vec4 v_color;\r\n\r\n#define DIST\t20.0\r\n#define FOG_far\t100.0\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n\tv_N = _glesNormal;\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n\thighp float zOff = position.z / DIST;\r\n\tposition += OFFSET * zOff * zOff;\r\n\r\n    #ifdef FOG\r\n    highp float x = position.z;\r\n    x = clamp(x,0.0,FOG_far);\r\n    highp float a = 2.0*FOG_far/x -1.0;\r\n    factor = 1.0 - 1.0/a;\r\n    #endif\r\n\tv_color = _glesColor;\r\n    gl_Position =position;\r\n}","distortionBall.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\n\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin highp vec4 v_color;\r\n\r\nin lowp vec3 v_N;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\n#define fixedAmbient    vec4(1, 1, 1, 1.0)\r\n#define LIGHT_COLOR     vec4(1)\r\n#define LIGHT_DIRECTION vec3(0, 1, 0)\r\n#define DIFFUSE_CTB     dot(normalize(v_N.xyz), normalize(LIGHT_DIRECTION))\r\n#define DIFFUSE         (DIFFUSE_CTB * 0.5) * LIGHT_COLOR\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    //gl_FragData[0] = v_color;\r\n\r\n    lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < 0.1)\r\n        discard;\r\n    lowp vec4 fristColor=basecolor*_MainColor * vec4(v_color.rgb, 1);\r\n    lowp vec4 emission = fristColor;\r\n\r\n    // Diffuse\r\n    emission = (fristColor * DIFFUSE) + (fristColor * fixedAmbient);\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, v_color.a);\r\n    #endif\r\n\r\n    color = emission;\r\n}","distortionBall.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"OFFSET ('OFFSET', Vector) = (0,0,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortionBall\",\r\n                \"fs\": \"distortionBall\"\r\n            }\r\n        ],\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortionBall\",\r\n                \"fs\": \"distortionBall\"\r\n            }\r\n        ]\r\n    }\r\n}","distortionBall.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\nlayout(location = 1) in lowp vec3 _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\n\r\nout highp vec3 v_N;\r\n\r\n#ifdef FOG\r\nout lowp float factor;\r\n#endif\r\n\r\nuniform highp vec4 OFFSET;\r\n\r\nlayout(location = 3) in vec4 _glesColor;\r\nout highp vec4 v_color;\r\n\r\n#define DIST\t20.0\r\n#define FOG_far\t100.0\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    lowp mat3 normalmat = mat3(glstate_matrix_model);\r\n    v_N = _glesNormal;\r\n    v_N =normalize(normalmat*v_N);\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n\thighp float zOff = position.z / DIST;\r\n\tposition += OFFSET * zOff * zOff;\r\n\r\n    #ifdef FOG\r\n    highp float x = position.z;\r\n    x = clamp(x,0.0,FOG_far);\r\n    highp float a = 2.0*FOG_far/x -1.0;\r\n    factor = 1.0 - 1.0/a;\r\n    #endif\r\n\tv_color = _glesColor;\r\n    gl_Position =position;\r\n}","distortionFont.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\nuniform sampler2D _MainTex;\r\n\r\nuniform lowp vec4 glstate_fog_color;\r\nuniform highp float _outlineWidth; // 描边宽度\r\n\r\n// #ifdef FOG\r\nin lowp float factor;\r\n// #endif\r\n\r\nin lowp vec4 xlv_COLOR;\r\nin lowp vec4 xlv_COLOREx;\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\nout vec4 color;\r\n\r\nvoid main()\r\n{\r\n    // 在m4m中使用的sdf字体做了最大值为2像素的有向距离运算且保存到位图上。\r\n    // 颜色值[0,255]对于区间[-2,2]。\r\n    // 颜色值v表示距离字符边缘有 (v/255*4-2) 单位距离。单位距离为正表示在字符内，否则在字符外。\r\n    \r\n    float _DistanceMark = 0.0; // 距离为 0 处是字符边缘\r\n    float _SmoothDelta = 0.5; // 在字符边缘 0.5 像素进行插值 \r\n\r\n    float _OutlineDistanceMark = -_outlineWidth; // 描边位置\r\n\r\n    vec4 col = texture(_MainTex, xlv_TEXCOORD0);\r\n    float distance = col.r * 4.0 - 2.0;\r\n\r\n    // 平滑字体边缘\r\n    col.a = smoothstep(_DistanceMark - _SmoothDelta, _DistanceMark + _SmoothDelta, distance);\r\n    col.rgb = xlv_COLOR.rgb;\r\n    \r\n    // Outlining 描边\r\n    vec4 outlineCol = vec4(1.0,1.0,1.0,1.0);\r\n\r\n    outlineCol.a = smoothstep(_OutlineDistanceMark - _outlineWidth, _OutlineDistanceMark + _outlineWidth, distance);\r\n    outlineCol.rgb = xlv_COLOREx.rgb;\r\n    outlineCol.a = outlineCol.a * xlv_COLOREx.a;\r\n    \r\n    // 混合字体与描边颜色\r\n    col = mix(outlineCol, col, col.a);\r\n\r\n    col.a = col.a * xlv_COLOR.a;\r\n\r\n    color.a = col.a;\r\n    color.xyz = mix(glstate_fog_color.rgb, col.rgb, factor);\r\n}","distortionFont.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"queue\": 100,\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"OFFSET ('OFFSET', Vector) = (0,0,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"ztest\":\"false\",\r\n\t\t\t\t\"zwrite\":\"false\",\r\n                \"vs\": \"distortionFont\",\r\n                \"fs\": \"distortionFont\"\r\n            }\r\n        ]\r\n        ,\r\n\t\t\"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n\t\t\t\t\"ztest\":\"false\",\r\n\t\t\t\t\"zwrite\":\"false\",\r\n\t\t\t\t\r\n                \"vs\": \"distortionFont\",\r\n                \"fs\": \"distortionFont\"\r\n            }\r\n        ]\r\n    }\r\n}","distortionFont.vs.glsl":"#version 300 es\r\nprecision mediump float;\r\nlayout(location = 0) in vec4 _glesVertex;\r\nlayout(location = 3) in vec4 _glesColor;\r\nlayout(location = 8) in vec4 _glesColorEx;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\n\r\n//因为front 逻辑不会走fog 通道 所以强行开启\r\n// #ifdef FOG\r\nout lowp float factor;\r\n// #endif\r\n\r\nuniform highp vec4 OFFSET;\r\n\r\nuniform highp mat4 glstate_matrix_mvp; \r\nout lowp vec4 xlv_COLOR;     \r\nout lowp vec4 xlv_COLOREx;   \r\nout highp vec2 xlv_TEXCOORD0;\r\n\r\n#define DIST 20.0\r\n#define FOG_far\t100.0\r\n\r\nvoid main(){\r\n    highp vec4 position = vec4(_glesVertex.xyz,1.0);    \r\n    position = (glstate_matrix_mvp * position);\r\n\thighp float zOff = position.z / DIST;\r\n\tposition += OFFSET * zOff * zOff;     \r\n\r\n    // #ifdef FOG\r\n    highp float x = position.z;\r\n    x = clamp(x,0.0,FOG_far);\r\n    highp float a = 2.0*FOG_far/x -1.0;\r\n    factor = 1.0 - 1.0/a;\r\n    // #endif\r\n\r\n    xlv_COLOR = _glesColor;       \r\n    xlv_COLOREx = _glesColorEx;\r\n    xlv_TEXCOORD0 = vec2(_glesMultiTexCoord0.x,1.0-_glesMultiTexCoord0.y);  \r\n    gl_Position = position;\r\n}","distortionMatBall.fs.glsl":"#version 300 es\r\n\r\nprecision mediump  float;\r\n\r\n#define PI 3.14159265358979\r\n#define GAMMA 2.2\r\n\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp sampler2D _NormalTex;\r\nuniform sampler2D brdfLUT;\r\nuniform samplerCube envTex;\r\nuniform lowp vec4 _MainColor;\r\nuniform vec4 glstate_eyepos;\r\n\r\nin vec3 v_pos;\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin highp vec4 v_color;\r\n\r\nin vec3 v_N;\r\nin mat3 TBN;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\n#define fixedAmbient    vec4(1, 1, 1, 1.0)\r\n#define LIGHT_COLOR     vec4(1)\r\n#define LIGHT_DIRECTION vec3(0, 1, 0)\r\n#define DIFFUSE_CTB     dot(normalize(v_N.xyz), normalize(LIGHT_DIRECTION))\r\n#define DIFFUSE         (DIFFUSE_CTB * 0.5) * LIGHT_COLOR\r\n\r\n#define METALLIC    0.1\r\n#define ROUGHNESS   0.7\r\n\r\n// uniform float ROUGHNESS;\r\n// uniform float METALLIC;\r\n\r\nvec4 sRGBtoLINEAR(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(GAMMA)), color.a);\r\n}\r\nvec4 LINEARtoSRGB(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(1.0/GAMMA)), color.a);\r\n}\r\n\r\n\r\n// Fresnel - F0 = Metalness\r\nvec3 F_Schlick(float VoH, vec3 F0) {\r\n    return F0 + (vec3(1) - F0) * pow(1.0 - VoH, 5.0);\r\n}\r\n// vec3 Fresnel_CookTorrance(float VoH, vec3 F0) {\r\n// }\r\nvec3 F_UE4(float VoH, vec3 F0) {\r\n    return F0 + (vec3(1.0) - F0) * pow(2.0, (-5.55473 * VoH - 6.98316) * VoH);\r\n}\r\n\r\n\r\n// Geometric\r\nfloat G_CookTorrance(float NoV, float NoH, float VoH, float NoL) {\r\n    return min(min(2.0 * NoV * NoH / VoH, 2.0 * NoL * NoH / VoH), 1.0);\r\n}\r\n// >    Schlick with k = α/2 matches Smith very closely\r\nfloat G_UE4(float NoV, float NoH, float VoH, float NoL, float roughness) {\r\n    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\r\n    float l = NoL / (NoL * (1.0 - k) + k);  // There are another version which use NoH & LoH\r\n    float v = NoV / (NoV * (1.0 - k) + k);\r\n    return l * v;\r\n}\r\n\r\n\r\n// a (alphaRoughness) = Roughness\r\n// Distribution AKA normal distribution function (NDF)\r\n// Trowbridge-Reitz\r\nfloat D_GGX(float a, float NoH) {\r\n    a = a * a;\r\n    // float f = (NoH * a - NoH) * NoH + 1.0;  // NoH * NoH * (a - 1.0) + 1.0;\r\n    float f = NoH * NoH * (a - 1.0) + 1.0;\r\n    return a / (PI * f * f);\r\n}\r\n\r\nout vec4 color_out; \r\nvoid main()\r\n{\r\n    //gl_FragData[0] = v_color;\r\n\r\n    vec4 base = sRGBtoLINEAR(texture(_MainTex, xlv_TEXCOORD0));\r\n    // vec4 base = sRGBtoLINEAR(vec4(0.8, 0.69, 0.13,1));\r\n    // if(base.a < 0.1)\r\n    //     discard;\r\n\r\n\r\n\r\n    vec4 fristColor = vec4(v_color.rgb, 1);\r\n    vec3 normalAddation = texture(_NormalTex, xlv_TEXCOORD0).rgb * 2.0 - 1.0;\r\n\r\n    vec3 L = normalize(LIGHT_DIRECTION);\r\n    vec3 N = normalize(TBN * normalAddation);\r\n    // vec3 N = normalize(v_N);\r\n    vec3 V = normalize(glstate_eyepos.xyz - v_pos);\r\n    vec3 H = normalize(V + L);\r\n    vec3 R = -normalize(reflect(V, N));\r\n\r\n    float NoL = clamp(dot(N, L), 0.001, 1.0);\r\n    float NoV = clamp(abs(dot(N, V)), 0.001, 1.0);\r\n    float NoH = clamp(dot(N, H), 0.0, 1.0);\r\n    float LoH = clamp(dot(L, H), 0.0, 1.0);\r\n    float VoH = clamp(dot(V, H), 0.0, 1.0);\r\n\r\n    float roughness = clamp(ROUGHNESS, 0.04, 1.0);\r\n    float alphaRoughness = roughness * roughness;\r\n    float metallic = clamp(METALLIC, 0.0, 1.0);\r\n\r\n    vec3 f0 = vec3(0.04);\r\n    f0 = mix(f0, base.rgb, metallic);\r\n\r\n    vec3 diffuse = base.rgb * (vec3(1) - f0);\r\n    diffuse *= 1.0 - metallic;\r\n    // diffuse /= PI;\r\n\r\n    vec3 F = F_Schlick(VoH, f0);\r\n    float G = G_UE4(NoV, NoH, VoH, NoL, roughness);\r\n    // float G = G_CookTorrance(NoV, NoH, VoH, NoL);\r\n    float D = D_GGX(alphaRoughness, NoH);\r\n\r\n    vec3 specContrib = F * G * D / (4.0 * NoL * NoV);\r\n    vec3 diffuseContrib = (1.0 - F) * diffuse * (1.0 - metallic);\r\n    vec3 color = NoL * LIGHT_COLOR.xyz * (diffuseContrib + specContrib * 10.0);\r\n    // color += fixedAmbient.rgb * 0.3;\r\n\r\n\r\n    // IBL\r\n    vec3 brdf = sRGBtoLINEAR(texture(brdfLUT, vec2(NoV, 1.0 - alphaRoughness))).rgb;\r\n    // vec3 IBLcolor = vec3(1);\r\n    vec3 IBLcolor = vec3(1, 0.6, 0);\r\n    // vec3 IBLcolor = sRGBtoLINEAR(textureCube(envTex, R)).rgb + vec3(0.5);\r\n\r\n    vec3 IBLspecular = 1.0 * IBLcolor * (f0 * brdf.x + brdf.y);\r\n    color += IBLspecular;\r\n    color += IBLspecular;\r\n    color += IBLspecular;\r\n    color += IBLspecular;\r\n    // color += IBLspecular;\r\n    // color += IBLspecular;\r\n    // color += IBLspecular;\r\n\r\n\r\n    // Diffuse\r\n    vec4 emission = (fristColor * vec4(color, 1)) + (fristColor * fixedAmbient);\r\n\r\n\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, v_color.a);\r\n    #endif\r\n\r\n    color_out = LINEARtoSRGB(emission);\r\n    color_out = LINEARtoSRGB(vec4(V, 1));\r\n    color_out = LINEARtoSRGB(vec4(color, 1));\r\n    // gl_FragData[0] = LINEARtoSRGB(vec4(IBLspecular * 2.0, 1));\r\n    // gl_FragData[0] = LINEARtoSRGB(vec4(pow(1.0 - NoV, 5.0)));\r\n    // gl_FragData[0] = LINEARtoSRGB(vec4(G));\r\n    // gl_FragData[0] = LINEARtoSRGB(vec4(G));\r\n    // gl_FragData[0] = LINEARtoSRGB(vec4(D));\r\n}","distortionMatBall.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"_NormalTex('NormalTex', Texture) = 'white'{}\",\r\n        \"OFFSET ('OFFSET', Vector) = (0,0,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortionMatBall\",\r\n                \"fs\": \"distortionMatBall\"\r\n            }\r\n        ],\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortionMatBall\",\r\n                \"fs\": \"distortionMatBall\"\r\n            }\r\n        ]\r\n    }\r\n}","distortionMatBall.vs.glsl":"#version 300 es\r\nprecision mediump float;\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\n\r\nuniform mediump vec4 _MainTex_ST;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\nlayout(location = 1) in lowp vec3 _glesNormal;\r\nlayout(location = 2) in lowp vec3 _glesTangent;\r\n\r\nuniform highp mat4      glstate_matrix_mvp;\r\nuniform highp mat4      glstate_matrix_model;\r\nuniform highp mat4      glstate_matrix_world2object;\r\n\r\nout highp vec3 v_N;\r\nout mat3 TBN;\r\n\r\n#ifdef FOG\r\nout lowp float factor;\r\n#endif\r\n\r\nuniform highp vec4 OFFSET;\r\n\r\nlayout(location = 3) in vec4 _glesColor;\r\nout highp vec4 v_color;\r\n\r\nout vec3 v_pos;\r\n\r\n#define DIST\t20.0\r\n#define FOG_far\t100.0\r\n\r\n\r\nlowp mat3 calBTNMatrix(lowp mat3 NormalMatToWorld,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n    lowp vec3 normal=normalize(NormalMatToWorld*_normal);\r\n    lowp vec3 tangent=normalize(NormalMatToWorld*_tangent);\r\n    lowp vec3 binormal=cross(normal,tangent);\r\n  \treturn (mat3(tangent,binormal,normal));\r\n\r\n}\r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    mat3 normalmat = mat3(glstate_matrix_model);\r\n   \tTBN=calBTNMatrix(normalmat,_glesNormal,_glesTangent);\r\n\r\n\r\n    v_N = _glesNormal;\r\n    // // v_N = normalize(glstate_matrix_world2object*vec4(v_N, 1)).xyz;\r\n    // v_N = normalize(glstate_matrix_model*vec4(v_N, 1)).xyz;\r\n\r\n    // vec3 tangent = normalize(vec3(glstate_matrix_model * vec4(_glesTangent.xyz, 0)));\r\n    // vec3 bitangent = cross(v_N, tangent) * 1.0;\r\n    // TBN = mat3(tangent, bitangent, v_N);\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n\thighp float zOff = position.z / DIST;\r\n\tposition += OFFSET * zOff * zOff;\r\n\r\n    v_pos = (glstate_matrix_model * vec4(_glesVertex.xyz,1.0)).xyz;\r\n    // v_pos = _glesVertex.xyz;\r\n\r\n    #ifdef FOG\r\n    highp float x = position.z;\r\n    x = clamp(x,0.0,FOG_far);\r\n    highp float a = 2.0*FOG_far/x -1.0;\r\n    factor = 1.0 - 1.0/a;\r\n    #endif\r\n\tv_color = _glesColor;\r\n    gl_Position =position;\r\n}","distortionTrail.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\n\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin highp vec4 v_color;\r\n\r\nin lowp vec3 v_N;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    //gl_FragData[0] = v_color;\r\n\r\n    lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < 0.01)\r\n        discard;\r\n    //lowp vec4 fristColor=basecolor*_MainColor * vec4(v_color.rgb, 1);\r\n    //lowp vec4 emission = fristColor;\r\n    // lowp vec4 emission =  v_color * basecolor;\r\n    lowp vec4 emission =  basecolor * vec4(1.0,1.0,1.0,v_color.a);\r\n\r\n    // Diffuse\r\n    //emission = (fristColor * DIFFUSE) + (fristColor * fixedAmbient);\r\n    //emission = (fristColor * DIFFUSE) + (fristColor * fixedAmbient);\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, v_color.a);\r\n    #endif\r\n\r\n    color = emission;\r\n}","distortionTrail.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"queue\": 0,\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"OFFSET ('OFFSET', Vector) = (0,0,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"distortion\",\r\n                \"fs\": \"distortionTrail\"\r\n            }\r\n        ],\r\n\t\t\"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"distortion\",\r\n                \"fs\": \"distortionTrail\"\r\n            }\r\n        ]\r\n    }\r\n}","distortionUnlight.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _MainTex;\r\nuniform lowp vec4 _MainColor;\r\n\r\nin mediump vec2 xlv_TEXCOORD0;\r\nin highp vec4 v_color;\r\n\r\nin lowp vec3 v_N;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    //gl_FragData[0] = v_color;\r\n\r\n    lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    if(basecolor.a < 0.8)\r\n        discard;\r\n    lowp vec4 fristColor = basecolor*_MainColor;\r\n    lowp vec4 emission = fristColor;\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, v_color.a);\r\n    #endif\r\n\r\n    color = emission;\r\n}","distortionUnlight.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\",\r\n        \"OFFSET ('OFFSET', Vector) = (0,0,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortion\",\r\n                \"fs\": \"distortionUnlight\"\r\n            }\r\n        ],\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"distortion\",\r\n                \"fs\": \"distortionUnlight\"\r\n            }\r\n        ]\r\n    }\r\n}","f14trans.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform mediump sampler2D _Main_Tex;\r\n\r\nin lowp vec4 xlv_COLOR;\r\nin mediump vec2 xlv_TEXCOORD0;       \r\n//texture2DEtC1Mark\r\n   \r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 basecolor = texture(_Main_Tex, xlv_TEXCOORD0);\r\n    color =basecolor*xlv_COLOR;\r\n    //color =vec4(1,0,0,1);\r\n}","f14trans.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;   \r\nlayout(location = 3) in highp vec4    _glesColor;\r\n\r\nuniform lowp vec4 _Main_Color;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Main_Tex_ST;\r\n\r\n\r\nout lowp vec4 xlv_COLOR;\r\nout mediump vec2 xlv_TEXCOORD0;                \r\nvoid main()                                     \r\n{                                               \r\n    highp vec4 tmpvar_1=vec4(_glesVertex.xyz,1.0);\r\n    xlv_COLOR = _Main_Color*_glesColor;\r\n\txlv_TEXCOORD0 =_glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n                \r\n    gl_Position = (glstate_matrix_mvp *tmpvar_1);  \r\n}","f14transDistortion.vs.glsl":"#version 300 es\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nlayout(location = 1) in lowp vec3 _glesNormal;\r\n\r\nuniform lowp vec4 _Main_Color;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Main_Tex_ST;\r\n\r\nuniform highp vec4 OFFSET;\r\n\r\n\r\n\r\n// #ifdef FOG\r\nout lowp float factor;\r\n// #endif\r\n\r\nout highp vec4 xlv_COLOR;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\n\r\n#define DIST\t20.0\r\n#define FOG_far\t100.0  \r\n\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n\thighp float zOff = position.z / DIST;\r\n\tposition += OFFSET * zOff * zOff;\r\n\r\n    // #ifdef FOG\r\n\thighp float x = position.z;\r\n    x = clamp(x,0.0,FOG_far);\r\n    highp float a = 2.0*FOG_far/x -1.0;\r\n    factor = 1.0 - 1.0/a;\r\n    // #endif\r\n\r\n\txlv_COLOR = _glesColor * _Main_Color;\r\n    gl_Position =position;\r\n}","f14transDistortion_add.vs.glsl":"#version 300 es\r\nprecision mediump float;\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nuniform lowp vec4 _Main_Color;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Main_Tex_ST;\r\n\r\nuniform highp vec4 OFFSET;\r\n\r\nout highp vec4 v_color;\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\n#define DIST\t20.0\r\nvoid main()\r\n{\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n\thighp float zOff = position.z / DIST;\r\n\tposition += OFFSET * zOff * zOff;\r\n\r\n\tv_color = _glesColor * _Main_Color;\r\n    gl_Position =position;\r\n}","f14trans_add.fs.glsl":"#version 300 es\r\nprecision mediump float;\r\nuniform mediump sampler2D _Main_Tex;\r\nin lowp vec4 v_color;\r\nin mediump vec2 xlv_TEXCOORD0;\r\n\r\nout vec4 color; \r\nvoid main()\r\n{\r\n    lowp vec4 basecolor = texture(_Main_Tex, xlv_TEXCOORD0);\r\n    // if(basecolor.a < 0.6)\r\n    //     discard;\r\n    lowp vec4 emission = basecolor * v_color;\r\n\r\n    color = emission;\r\n}","grey_mask_ui.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform highp vec4 _maskRect;\r\n\r\nin lowp float xlv_Alpha;\r\nin highp vec2 xlv_TEXCOORD0;\r\nin highp vec2 mask_TEXCOORD;\r\n\r\nbool CalcuCut(){    \r\n    highp float l; \r\n    highp float t; \r\n    highp float r; \r\n    highp float b; \r\n    highp vec2 texc1; \r\n    bool beCut; \r\n    l = _maskRect.x; \r\n    t = _maskRect.y; \r\n    r = _maskRect.z + l; \r\n    b = _maskRect.w + t; \r\n    texc1 = mask_TEXCOORD; \r\n    if(texc1.x >(1.0 - l) || texc1.x <(1.0 - r) || texc1.y <t || texc1.y>b){  \r\n        beCut = true;  \r\n    }else{ \r\n        beCut = false; \r\n    } \r\n    return beCut; \r\n} \r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    if(CalcuCut()) discard;\r\n    lowp vec4 final = texture(_MainTex, xlv_TEXCOORD0);\r\n    lowp float lum = (final.x + final.y + final.z) *  0.3333; \r\n    final = vec4(lum,lum,lum,xlv_Alpha * final.a);\r\n\r\n    color = final ;\r\n}","grey_mask_ui.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"queue\": 100,\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_maskRect('MaskRect',Vector) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"ztest\":\"false\",\r\n\t\t\t\t\"zwrite\":\"false\",\r\n                \"vs\": \"grey_mask_ui\",\r\n                \"fs\": \"grey_mask_ui\"\r\n            }\r\n        ]\r\n    }\r\n}","grey_mask_ui.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in vec4 _glesVertex;\r\nlayout(location = 3) in vec4 _glesColor;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp; \r\n\r\nout lowp float xlv_Alpha;\r\nout highp vec2 xlv_TEXCOORD0;\r\nout highp vec2 mask_TEXCOORD;\r\n\r\nvoid main(){\r\n    highp vec4 position = vec4(_glesVertex.xyz,1.0);    \r\n    xlv_Alpha = _glesColor.a;\r\n    xlv_TEXCOORD0 = vec2(_glesMultiTexCoord0.x,1.0-_glesMultiTexCoord0.y);  \r\n    mask_TEXCOORD.x = (_glesVertex.x - 1.0)/-2.0; \r\n    mask_TEXCOORD.y = (_glesVertex.y - 1.0)/-2.0; \r\n    position = (glstate_matrix_mvp * position);\r\n    gl_Position = position;\r\n}","grey_ui.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\n\r\nin lowp float xlv_Alpha;\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    lowp vec4 final = texture(_MainTex, xlv_TEXCOORD0);\r\n    lowp float lum = (final.x + final.y + final.z) *  0.3333; \r\n    final = vec4(lum,lum,lum,xlv_Alpha * final.a);\r\n\r\n    color = final ;\r\n}","grey_ui.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"queue\": 100,\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"ztest\":\"false\",\r\n\t\t\t\t\"zwrite\":\"false\",\r\n                \"vs\": \"grey_ui\",\r\n                \"fs\": \"grey_ui\"\r\n            }\r\n        ]\r\n    }\r\n}","grey_ui.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in vec4 _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nuniform highp mat4 glstate_matrix_mvp; \r\n\r\nout lowp float xlv_Alpha;\r\nout highp vec2 xlv_TEXCOORD0;\r\n\r\nvoid main(){\r\n    highp vec4 position = vec4(_glesVertex.xyz,1.0);    \r\n    position = (glstate_matrix_mvp * position);\r\n    xlv_Alpha = _glesColor.a;\r\n    xlv_TEXCOORD0 = vec2(_glesMultiTexCoord0.x,1.0-_glesMultiTexCoord0.y);  \r\n    gl_Position = position;\r\n}","mask_add_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_add_tint_uvroll.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\r\n        \"_speedu('speedu',Float) = -1\",\r\n        \"_speedv('speedv',Float) = 0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_blend_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_blend_tint_uvroll.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_MainTex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,0,1)\",\r\n        \"_speedu('speedu',Float) = -1\",\r\n        \"_speedv('speedv',Float) = 0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"mask_trans_tint\",\r\n                \"fs\": \"mask_trans_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","mask_trans_tint.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex; \r\nuniform sampler2D _Mask; \r\nuniform mediump vec4 _Main_Color;\r\n\r\nin mediump vec2 _maintex_uv;\r\nin mediump vec2 _mask_uv;\r\n\r\nuniform lowp float _mixColorRate;\r\nuniform lowp float _mixAlphaRate;\r\n\r\n//texture2DEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\nout vec4 color; \r\nvoid main()    \r\n{\r\n    highp vec4 basecolor=texture(_MainTex,_maintex_uv);\r\n    highp vec4 maskcolor=texture(_Mask,_mask_uv);\r\n\r\n    lowp vec3 tempcolor=_Main_Color.rgb*basecolor.rgb*maskcolor.rgb*_mixColorRate;\r\n    lowp float tempAlpha=_Main_Color.a*basecolor.a*maskcolor.a*_mixAlphaRate;\r\n    lowp vec4 emission=vec4(tempcolor,tempAlpha);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n    emission= mix(vec4(0,0,0,0), emission, factor);\r\n\r\n    //emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    color = emission;\r\n\r\n\r\n}\r\n","mask_trans_tint.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform mediump vec4 _MainTex_ST;\r\nuniform mediump vec4 _Mask_ST;\r\nout mediump vec2 _maintex_uv;\r\nout mediump vec2 _mask_uv;\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec4    _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    _maintex_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    #ifdef SKIN\r\n    position=calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n    position =glstate_matrix_mvp * position;\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\tgl_Position = position;\r\n}","mul_color_flow_font.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform highp vec4 _maskRect;\r\nuniform float glstate_timer;\r\nuniform highp float _outlineWidth; // 描边宽度\r\n\r\n\r\nin highp float xlv_X;\r\nin lowp float xlv_Alpha;\r\nin lowp vec4 xlv_COLOR;                 \r\nin lowp vec4 xlv_COLOREx;\r\nin highp vec2 xlv_TEXCOORD0;\r\n\r\n#define lerp(a, b, v)   (a) * (1.0 - (v)) + (b) * (v) \r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    vec4 texColor = texture(_MainTex, xlv_TEXCOORD0);\r\n\r\n    // 在gd3d中使用的sdf字体做了最大值为2像素的有向距离运算且保存到位图上。\r\n    // 颜色值[0,255]对于区间[-2,2]。\r\n    // 颜色值v表示距离字符边缘有 (v/255*4-2) 单位距离。单位距离为正表示在字符内，否则在字符外。\r\n    \r\n    float _DistanceMark = 0.0; // 距离为 0 处是字符边缘\r\n    float _SmoothDelta = 0.5; // 在字符边缘 0.5 像素进行插值 \r\n\r\n    float _OutlineDistanceMark = -_outlineWidth; // 描边位置\r\n\r\n    vec4 col = texColor;\r\n    float distance = col.r * 4.0 - 2.0;\r\n\r\n    // 平滑字体边缘\r\n    col.a = smoothstep(_DistanceMark - _SmoothDelta, _DistanceMark + _SmoothDelta, distance);\r\n    \r\n    // //填充色\r\n    // col.rgb = xlv_COLOR.rgb;\r\n\r\n    //填充色 渐变色\r\n    mediump float changeVal = sin(glstate_timer * 0.5 - xlv_X * 4.0) * 2.0;\r\n    changeVal *= changeVal;\r\n    mediump vec3 col1 = lerp(vec3(0.44, 1.0, 0.54),vec3(0.97,0.54,1.0),clamp(changeVal,0.0,1.0));\r\n    col1 = lerp(col1, vec3(1.0, 1.0, 0.44), clamp(changeVal - 1.5,0.0,1.0));\r\n    col1 = lerp(col1, vec3(0.44, 1.0, 0.54), clamp(changeVal - 3.0,0.0,1.0));\r\n    col.rgb = col1;\r\n\r\n    // Outlining 描边\r\n    vec4 outlineCol = vec4(1.0,1.0,1.0,1.0);\r\n    outlineCol.a = smoothstep(_OutlineDistanceMark - _outlineWidth, _OutlineDistanceMark + _outlineWidth, distance);\r\n    outlineCol.rgb = xlv_COLOREx.rgb;\r\n    outlineCol.a = outlineCol.a * xlv_COLOREx.a;\r\n\r\n    // 混合字体与描边颜色\r\n    col = mix(outlineCol, col, col.a);\r\n    col.a = col.a * xlv_COLOR.a;\r\n\r\n\r\n    color = col ;\r\n}","mul_color_flow_font.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"queue\": 100,\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"ztest\":\"false\",\r\n\t\t\t\t\"zwrite\":\"false\",\r\n                \"vs\": \"mul_color_flow_font\",\r\n                \"fs\": \"mul_color_flow_font\"\r\n            }\r\n        ]\r\n    }\r\n}","mul_color_flow_font.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in vec4 _glesVertex;\r\nlayout(location = 3) in vec4 _glesColor;\r\nlayout(location = 8) in vec4 _glesColorEx;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp; \r\n\r\nout highp float xlv_X;\r\nout lowp float xlv_Alpha;\r\nout lowp vec4 xlv_COLOR;                 \r\nout lowp vec4 xlv_COLOREx;\r\nout highp vec2 xlv_TEXCOORD0;\r\n\r\nvoid main(){\r\n    highp vec4 position = vec4(_glesVertex.xyz,1.0);    \r\n    position = (glstate_matrix_mvp * position);\r\n    xlv_X = position.x;\r\n    xlv_Alpha = _glesColor.a;\r\n    xlv_COLOR = _glesColor;                      \r\n    xlv_COLOREx = _glesColorEx;   \r\n    xlv_TEXCOORD0 = vec2(_glesMultiTexCoord0.x,1.0-_glesMultiTexCoord0.y);  \r\n    gl_Position = position;\r\n}","particlesystem.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nin vec2 v_uv;\r\n\r\nuniform vec4 _TintColor;\r\nuniform sampler2D _MainTex;\r\n\r\nin vec4 v_color;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    vec4 _color = 2.0 * v_color * _TintColor * texture(_MainTex, v_uv);\r\n\r\n    #ifdef FOG\r\n        _color.xyz = mix(glstate_fog_color.rgb, _color.rgb, factor);\r\n    #endif\r\n    \r\n    color = color;\r\n}","particlesystem.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;  \r\n\r\n//坐标属性\r\nlayout(location = 0) in vec3 _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform float _UVSpeedX;\r\nuniform float _UVSpeedY;\r\nuniform float glstate_timer;\r\n\r\nout vec4 v_color;\r\nout vec2 v_uv;\r\n\r\n#ifdef INSTANCE\r\n    in vec4 a_particle_position;\r\n    in vec4 a_particle_scale;\r\n    in vec4 a_particle_rotation;\r\n    in vec4 a_particle_color;\r\n    in vec4 a_particle_tilingOffset;\r\n    in vec4 a_particle_flipUV;\r\n#else\r\n    uniform vec4 a_particle_position;\r\n    uniform vec4 a_particle_scale;\r\n    uniform vec4 a_particle_rotation;\r\n    uniform vec4 a_particle_color;\r\n    uniform vec4 a_particle_tilingOffset;\r\n    uniform vec4 a_particle_flipUV;\r\n#endif\r\n\r\nuniform mat4 u_particle_billboardMatrix;\r\nuniform vec4 u_particle_pivotOffset;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nmat3 makeParticleRotationMatrix(vec3 rotation)\r\n{\r\n    float DEG2RAD = 3.1415926 / 180.0;\r\n    \r\n    float rx = rotation.x * DEG2RAD;\r\n    float ry = rotation.y * DEG2RAD;\r\n    float rz = rotation.z * DEG2RAD;\r\n\r\n    float sinX = sin(rx);\r\n    float cosX = cos(rx);\r\n    float sinY = sin(ry);\r\n    float cosY = cos(ry);\r\n    float sinZ = sin(rz);\r\n    float cosZ = cos(rz);\r\n\r\n    mat3 tmp;\r\n    float ce = cosY * cosZ;\r\n    float cf = cosY * sinZ;\r\n    float de = sinY * cosZ;\r\n    float df = sinY * sinZ;\r\n\r\n    float te0 = ce + df * sinX;\r\n    float te4 = de * sinX - cf;\r\n    float te8 = cosX * sinY;\r\n\r\n    float te1 = cosX * sinZ;\r\n    float te5 = cosX * cosZ;\r\n    float te9 = - sinX;\r\n\r\n    float te2 = cf * sinX - de;\r\n    float te6 = df + ce * sinX;\r\n    float te10 = cosX * cosY;\r\n\r\n    tmp[0] = vec3(te0, te1, te2);\r\n    tmp[1] = vec3(te4, te5, te6);\r\n    tmp[2] = vec3(te8, te9, te10);\r\n            \r\n    return tmp;\r\n}\r\n\r\nvec4 particleAnimation(vec4 position) \r\n{\r\n    mat3 billboardMatrix = mat3(u_particle_billboardMatrix[0].xyz,u_particle_billboardMatrix[1].xyz,u_particle_billboardMatrix[2].xyz);\r\n    \r\n    position.xyz = position.xyz + u_particle_pivotOffset.xyz;\r\n    \r\n    // 计算缩放\r\n    position.xyz = position.xyz * a_particle_scale.xyz;\r\n\r\n    // 计算旋转\r\n    mat3 rMat = makeParticleRotationMatrix(a_particle_rotation.xyz);\r\n    position.xyz = rMat * position.xyz;\r\n    position.xyz = billboardMatrix * position.xyz;\r\n\r\n    // 位移\r\n    position.xyz = position.xyz + a_particle_position.xyz;\r\n\r\n    // 颜色\r\n    v_color = a_particle_color;\r\n\r\n    if(a_particle_flipUV.x > 0.5) v_uv.x = 1.0 - v_uv.x;\r\n    if(a_particle_flipUV.y > 0.5) v_uv.y = 1.0 - v_uv.y;\r\n    v_uv = v_uv * a_particle_tilingOffset.xy + a_particle_tilingOffset.zw;\r\n    \r\n    return position;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\r\n    //输出uv\r\n    v_uv = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    position = particleAnimation(position);\r\n\r\n    v_uv = v_uv + vec2(_UVSpeedX,_UVSpeedY) * glstate_timer;\r\n\r\n    //计算投影坐标\r\n    position = glstate_matrix_mvp * position;\r\n\r\n    #ifdef FOG\r\n        factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n        factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","particlesystem_additive.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ]\r\n  }\r\n}","particlesystem_additive_transparent_particles_standard.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_BasicColor('Basic Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_SaturatedColor('Saturated Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n\r\n    \"_MainTex('Particle Texture',Texture)='white'{}\",\r\n    \"_ColorRamp('Color Ramp', Texture) = 'white' {}\",\r\n    \"_NoiseTex('Noise Texture', Texture) = 'white' {}\",\r\n\r\n    \"_EmissionSaturation('Emission saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_OpacitySaturation('Opacity saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ColorMultiplier('Color multiplier', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ABOffset('Alpha blend offset', Range(0.0, 8.0)) = 0.0\",\r\n    \r\n    \"_DissolveStep('DissolveStep.xy', Vector) = (0.0, 1.0, 0.0, 0.0)\",\r\n    \r\n    \"_Panning('Automatic Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_GlobalAlpha('Global alpha', float) = 1.0\",\r\n    \r\n    \"_EmissivePower('Emissive Power', Range(1.0, 4.0)) = 1.0\",\r\n    \"_NoisePanning('Noise Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n    \r\n    \"COLOR_RAMP('COLOR_RAMP', float) = 0.0\",\r\n    \"COLOR_TINT('COLOR_TINT', float) = 0.0\",\r\n    \"APPLY_RGB_COLOR_VERTEX('APPLY_RGB_COLOR_VERTEX', float) = 0.0\",\r\n    \"DISSOLVE_ENABLED('DISSOLVE_ENABLED', float) = 0.0\",\r\n    \"AUTOMATICPANNING('AUTOMATICPANNING', float) = 0.0\",\r\n    \"EMISSIVEPOWER('EMISSIVEPOWER', float) = 0.0\",\r\n    \"EXTENDED_PARTICLES('EXTENDED_PARTICLES', float) = 0.0\",\r\n    \"NOISE_TEXTURE('NOISE_TEXTURE', float) = 0.0\",\r\n    \"NOISE_TEXTURE_EMISSION('NOISE_TEXTURE_EMISSION', float) = 0.0\",\r\n    \"NOISE_TEXTURE_ALPHA('NOISE_TEXTURE_ALPHA', float) = 0.0\",\r\n    \"NOISE_TEXTURE_DISSOLVE('NOISE_TEXTURE_DISSOLVE', float) = 0.0\",\r\n    \"NOISEUV('NOISEUV', float) = 0.0\",\r\n    \"FLOWMAP('FLOWMAP', float) = 0.0\",\r\n    \"BlendMode('BlendMode', float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","particlesystem_alphablended.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_MainTex('MainTex',Texture)='white'{}\",\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_UVSpeedX('UV SpeedX',float) = 0.0\",\r\n    \"_UVSpeedY('UV SpeedY',float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ],\r\n    \"instance_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem\",\r\n        \"fs\": \"particlesystem\"\r\n      }\r\n    ]\r\n  }\r\n}","particlesystem_alphablended_transparent_particles_standard.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_BasicColor('Basic Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_SaturatedColor('Saturated Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n\r\n    \"_MainTex('Particle Texture',Texture)='white'{}\",\r\n    \"_ColorRamp('Color Ramp', Texture) = 'white' {}\",\r\n    \"_NoiseTex('Noise Texture', Texture) = 'white' {}\",\r\n\r\n    \"_EmissionSaturation('Emission saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_OpacitySaturation('Opacity saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ColorMultiplier('Color multiplier', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ABOffset('Alpha blend offset', Range(0.0, 8.0)) = 0.0\",\r\n    \r\n    \"_DissolveStep('DissolveStep.xy', Vector) = (0.0, 1.0, 0.0, 0.0)\",\r\n    \r\n    \"_Panning('Automatic Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_GlobalAlpha('Global alpha', float) = 1.0\",\r\n    \r\n    \"_EmissivePower('Emissive Power', Range(1.0, 4.0)) = 1.0\",\r\n    \"_NoisePanning('Noise Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n    \r\n    \"COLOR_RAMP('COLOR_RAMP', float) = 0.0\",\r\n    \"COLOR_TINT('COLOR_TINT', float) = 0.0\",\r\n    \"APPLY_RGB_COLOR_VERTEX('APPLY_RGB_COLOR_VERTEX', float) = 0.0\",\r\n    \"DISSOLVE_ENABLED('DISSOLVE_ENABLED', float) = 0.0\",\r\n    \"AUTOMATICPANNING('AUTOMATICPANNING', float) = 0.0\",\r\n    \"EMISSIVEPOWER('EMISSIVEPOWER', float) = 0.0\",\r\n    \"EXTENDED_PARTICLES('EXTENDED_PARTICLES', float) = 0.0\",\r\n    \"NOISE_TEXTURE('NOISE_TEXTURE', float) = 0.0\",\r\n    \"NOISE_TEXTURE_EMISSION('NOISE_TEXTURE_EMISSION', float) = 0.0\",\r\n    \"NOISE_TEXTURE_ALPHA('NOISE_TEXTURE_ALPHA', float) = 0.0\",\r\n    \"NOISE_TEXTURE_DISSOLVE('NOISE_TEXTURE_DISSOLVE', float) = 0.0\",\r\n    \"NOISEUV('NOISEUV', float) = 0.0\",\r\n    \"FLOWMAP('FLOWMAP', float) = 0.0\",\r\n    \"BlendMode('BlendMode', float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"blend\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"particlesystem_transparent_particles_standard\",\r\n        \"fs\": \"particlesystem_transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","particlesystem_transparent_particles_standard.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\n\r\nuniform vec4 u_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nuniform float _EmissionSaturation;\r\nuniform float _OpacitySaturation;\r\nuniform float _ColorMultiplier;\r\n\r\nuniform float COLOR_RAMP;\r\nuniform sampler2D _ColorRamp;\r\nuniform vec4 _ColorRamp_ST;\r\nuniform float COLOR_TINT;\r\nuniform vec4 _BasicColor;\r\nuniform vec4 _SaturatedColor;\r\n\r\nuniform float DISSOLVE_ENABLED;\r\nuniform vec4 _DissolveStep;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform sampler2D _NoiseTex;\r\nuniform vec4 _TintColor;\r\n\r\nuniform float EMISSIVEPOWER;\r\nuniform float _EmissivePower;\r\n\r\nuniform float _ABOffset;\r\n\r\nuniform float _GlobalAlpha;\r\n\r\nin vec2 v_uv;\r\nin vec4 v_color;\r\n\r\nin vec2 v_particledata;\r\nin vec2 v_noiseuv;\r\n\r\nuniform float APPLY_RGB_COLOR_VERTEX;\r\nuniform float NOISE_TEXTURE_EMISSION;\r\nuniform float NOISE_TEXTURE_ALPHA;\r\nuniform float NOISE_TEXTURE_DISSOLVE;\r\n\r\nuniform float BlendMode;\r\n\r\nout vec4 color;\r\nvoid main() \r\n{\r\n    vec4 tex = texture(_MainTex, v_uv);\r\n\r\n    vec4 col = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    vec4 vcolor = vec4(1.0, 1.0, 1.0, v_color.w);\r\n\r\n    if( EXTENDED_PARTICLES > 0.5 )\r\n    {\r\n        if( APPLY_RGB_COLOR_VERTEX > 0.5)\r\n        {\r\n            vcolor = v_color;\r\n        }\r\n\r\n        float nEmission = 1.0;\r\n        float nAlpha = 1.0;\r\n        float nDissolve = 1.0;\r\n        \r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            vec3 noise = texture(_NoiseTex, v_noiseuv).xyz;\r\n        \r\n            if( NOISE_TEXTURE_EMISSION > 0.5)\r\n            {\r\n                nEmission = noise.x;\r\n            }\r\n            else\r\n            {\r\n                nEmission = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_ALPHA > 0.5)\r\n            {\r\n                nAlpha = noise.y;\r\n            }\r\n            else\r\n            {\r\n                nAlpha = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_DISSOLVE > 0.5)\r\n            {\r\n                nDissolve = noise.z;\r\n            }\r\n            else\r\n            {\r\n                nDissolve = 1.0;\r\n            }\r\n        }\r\n    \r\n        if( DISSOLVE_ENABLED > 0.5)\r\n        {\r\n            float ramp = -1.0 + (v_particledata.x * 2.0);\r\n            col.a = clamp(tex.g * smoothstep(_DissolveStep.x, _DissolveStep.y, (tex.b + ramp) * nDissolve) * _OpacitySaturation * vcolor.w * nAlpha, 0.0, 1.0);\r\n        }\r\n        else\r\n        {\r\n            col.a = clamp(tex.g * _OpacitySaturation * vcolor.w, 0.0, 1.0) * nAlpha;\r\n        }\r\n    \r\n        float lerpValue = 0.0;\r\n        if(COLOR_TINT < 0.5)\r\n        {\r\n            lerpValue = clamp(tex.r * v_particledata.y * _ColorMultiplier * nEmission, 0.0, 1.0);\r\n        }\r\n    \r\n        if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5)\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * _EmissionSaturation;\r\n                }\r\n            }\r\n            col.a *= _GlobalAlpha;\r\n        }\r\n        else\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * col.a * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5 )\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation * col.a;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * col.a * _EmissionSaturation;\r\n                }\r\n            }\r\n            col *= _GlobalAlpha;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if( 3.5 < BlendMode && BlendMode < 4.5 ) //4\r\n        {\r\n            tex *= _TintColor;\r\n            float luminance = clamp(dot(tex, vec4(0.2126, 0.7152, 0.0722, 0.0)) * tex.a * _ABOffset, 0.0, 1.0);\r\n            vec4 one = vec4(1, 1, 1, 1);\r\n            col = mix(2.0 * (v_color * tex), one - 2.0 * (one - v_color) * (one - tex), luminance);\r\n        }\r\n        else\r\n        {\r\n            col = v_color * tex;\r\n            col *= _TintColor;\r\n        \r\n            if( EMISSIVEPOWER > 0.5)\r\n            {\r\n                col *= _EmissivePower;\r\n            }\r\n            \r\n            if( 0.5 < BlendMode && BlendMode < 1.5 ) //1\r\n            {\r\n                col.rgb *= col.a;\r\n            }\r\n            else\r\n            {\r\n                if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n                {\r\n                    col *= 2.0;\r\n                }\r\n                else\r\n                {\r\n                    if( 1.5 < BlendMode && BlendMode < 2.5 ) //2\r\n                    {\r\n                        col *= 4.0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        col *= _GlobalAlpha;\r\n\r\n    }\r\n\r\n    color = col;\r\n}","particlesystem_transparent_particles_standard.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in vec3 _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform vec4 _Panning;\r\nuniform float glstate_timer;\r\n\r\nuniform vec4 _NoiseTex_ST;\r\nuniform vec4 _NoisePanning;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nout vec2 v_uv;\r\nout vec4 v_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nout vec2 v_particledata;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform float NOISEUV;\r\nout vec2 v_noiseuv;\r\n\r\n\r\n\r\nin vec3 a_particle_position;\r\nin vec3 a_particle_scale;\r\nin vec3 a_particle_rotation;\r\nin vec4 a_particle_color;\r\nin vec4 a_particle_tilingOffset;\r\nin vec2 a_particle_flipUV;\r\n\r\nuniform mat4 u_particle_billboardMatrix;\r\n\r\n\r\nmat3 makeParticleRotationMatrix(vec3 rotation)\r\n{\r\n    float DEG2RAD = 3.1415926 / 180.0;\r\n    \r\n    float rx = rotation.x * DEG2RAD;\r\n    float ry = rotation.y * DEG2RAD;\r\n    float rz = rotation.z * DEG2RAD;\r\n\r\n    float sinX = sin(rx);\r\n    float cosX = cos(rx);\r\n    float sinY = sin(ry);\r\n    float cosY = cos(ry);\r\n    float sinZ = sin(rz);\r\n    float cosZ = cos(rz);\r\n\r\n    mat3 tmp;\r\n    float ce = cosY * cosZ;\r\n    float cf = cosY * sinZ;\r\n    float de = sinY * cosZ;\r\n    float df = sinY * sinZ;\r\n\r\n    float te0 = ce + df * sinX;\r\n    float te4 = de * sinX - cf;\r\n    float te8 = cosX * sinY;\r\n\r\n    float te1 = cosX * sinZ;\r\n    float te5 = cosX * cosZ;\r\n    float te9 = - sinX;\r\n\r\n    float te2 = cf * sinX - de;\r\n    float te6 = df + ce * sinX;\r\n    float te10 = cosX * cosY;\r\n\r\n    tmp[0] = vec3(te0, te1, te2);\r\n    tmp[1] = vec3(te4, te5, te6);\r\n    tmp[2] = vec3(te8, te9, te10);\r\n            \r\n    return tmp;\r\n}\r\n\r\nvec4 particleAnimation(vec4 position) \r\n{\r\n    mat3 billboardMatrix = mat3(u_particle_billboardMatrix[0].xyz,u_particle_billboardMatrix[1].xyz,u_particle_billboardMatrix[2].xyz);\r\n    \r\n    // 计算缩放\r\n    position.xyz = position.xyz * a_particle_scale.xyz;\r\n\r\n    // 计算旋转\r\n    mat3 rMat = makeParticleRotationMatrix(a_particle_rotation.xyz);\r\n    position.xyz = rMat * position.xyz;\r\n    position.xyz = billboardMatrix * position.xyz;\r\n\r\n    // 位移\r\n    position.xyz = position.xyz + a_particle_position.xyz;\r\n\r\n    // 颜色\r\n    v_color = a_particle_color * _glesColor;\r\n\r\n    if(a_particle_flipUV.x > 0.5) v_uv.x = 1.0 - v_uv.x;\r\n    if(a_particle_flipUV.y > 0.5) v_uv.y = 1.0 - v_uv.y;\r\n    v_uv = v_uv * a_particle_tilingOffset.xy + a_particle_tilingOffset.zw;\r\n    \r\n    return position;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec4 position = vec4(_glesVertex.xyz, 1.0);\r\n\r\n    position = particleAnimation(position);\r\n    \r\n    gl_Position = glstate_matrix_mvp * position;\r\n    v_uv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_Panning.xy * glstate_timer);\r\n    // v_color = _glesColor;\r\n    // v_color = vec4(1.0,1.0,1.0,1.0);\r\n\r\n    if(EXTENDED_PARTICLES > 0.5)\r\n    {\r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            if( NOISEUV > 0.5)\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _NoiseTex_ST.xy + _NoiseTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n            else\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // v_particledata = _glesMultiTexCoord0.zw;\r\n        v_particledata = _glesMultiTexCoord0;\r\n    }\r\n}","particles_add.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"add\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14transDistortion_add\",\r\n            \"fs\": \"f14trans_add\"\r\n          }\r\n        ],\"base_fog\": [\r\n\t\t\t{\r\n            \"blendmode\": \"add\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14transDistortion_add\",\r\n            \"fs\": \"f14trans_add\"\r\n          }\r\n\t\t],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_add_multiply.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"addpremult\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_add_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"add\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_blend.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14transDistortion\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\"base_fog\": [\r\n\t\t\t{\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14transDistortion\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n\t\t],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_blend_multiply.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blendpremult\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_blend_notest.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"blendmode\": \"blend\",\r\n            \"showface\": \"all\",\r\n            \"zwrite\": \"off\",\r\n            \"ztest\":\"off\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particles_diffuse.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\":  0,\r\n  \"properties\": [\r\n\t\t\"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Main_Color ('Tint Color', Color) = (1.0,1.0,1.0,1.0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n          {\r\n            \"showface\": \"ccw\",\r\n            \"vs\": \"f14trans\",\r\n            \"fs\": \"f14trans\"\r\n          }\r\n        ],\r\n        \"shadowgen\": [],  \r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particle_mask_add_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"add\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"par_mask_tint\",\r\n                \"fs\": \"par_mask_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","particle_mask_blend_tint.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_Main_Tex('MainTex',Texture)='white'{}\",\r\n        \"_Mask('Mask',Texture)='white'{}\",\r\n        \"_Main_Tex_ST('MainTex_ST',Vector)=(1,1,0,0)\",\r\n        \"_Mask_ST('Mask_ST',Vector)=(1,1,0,0)\",\r\n        \"_Main_Color('Main_Color', Color) = (1,1,1,1)\",\r\n        \"_mixAlphaRate('mixAlphaRate',Float) = 1\",\r\n        \"_mixColorRate('mixColorRate',Float) = 1\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"vs\": \"par_mask_tint\",\r\n                \"fs\": \"par_mask_tint\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","par_mask_tint.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _Main_Tex; \r\nuniform sampler2D _Mask; \r\n\r\nin mediump vec2 _maintex_uv;\r\nin mediump vec2 _mask_uv;\r\n\r\nin mediump vec4 v_color;\r\n\r\n//textureEtC1Mark\r\nout vec4 color;\r\nvoid main()    \r\n{\r\n    highp vec4 basecolor=texture(_Main_Tex,_maintex_uv);\r\n    highp vec4 maskcolor=texture(_Mask,_mask_uv);\r\n\r\n    mediump vec3 tempcolor=v_color.rgb*basecolor.rgb*maskcolor.rgb;\r\n    mediump float tempAlpha=v_color.a*basecolor.a*maskcolor.a;\r\n    mediump vec4 emission=vec4(tempcolor,tempAlpha);\r\n    \r\n    color = emission;\r\n}\r\n","par_mask_tint.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3 _glesVertex;\r\nlayout(location = 3) in highp vec4 _glesColor;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\n\r\nuniform mediump vec4 _Main_Tex_ST;\r\nuniform mediump vec4 _Mask_ST;\r\nout mediump vec2 _maintex_uv;\r\nout mediump vec2 _mask_uv;\r\n\r\nuniform mediump vec4 _Main_Color;\r\nuniform mediump float _mixColorRate;\r\nuniform mediump float _mixAlphaRate;\r\n\r\nout mediump vec4 v_color;\r\n\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\tposition =glstate_matrix_mvp * position;\r\n\t \r\n    _maintex_uv = _glesMultiTexCoord0.xy * _Main_Tex_ST.xy + _Main_Tex_ST.zw;\r\n    _mask_uv = _glesMultiTexCoord0.xy * _Mask_ST.xy + _Mask_ST.zw;\r\n\tv_color=_glesColor*_Main_Color;\r\n\tv_color.rgb=v_color.rgb*_mixColorRate;\r\n\tv_color.a=v_color.a*_mixAlphaRate;\r\n\r\n\tgl_Position = position;\r\n}","pbr.fs.glsl":"#version 300 es\r\n\r\n// #ifdef TEXTURE_LOD\r\n// #extension GL_EXT_shader_texture_lod : enable\r\n// #endif\r\n\r\n#define TEXTURE_LOD\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI          3.141592653589\r\n#define GAMMA 2.2\r\n\r\n// uniform vec4 light_1;\r\n// uniform vec4 light_2;\r\n\r\nuniform float diffuseIntensity;\r\nuniform float specularIntensity;\r\nuniform float uvRepeat;\r\nuniform float alphaCutoff;      //alphaCutoff\r\n\r\nuniform lowp float glstate_lightcount;\r\nuniform lowp vec4 glstate_vec4_lightposs[8];\r\nuniform lowp vec4 glstate_vec4_lightdirs[8];\r\nuniform lowp float glstate_float_spotangelcoss[8];\r\nuniform lowp vec4 glstate_vec4_lightcolors[8];\r\nuniform lowp float glstate_float_lightrange[8];\r\nuniform lowp float glstate_float_lightintensity[8];\r\n\r\nuniform samplerCube u_env;      // IBL\r\nuniform samplerCube u_diffuse;  // diffuse\r\nuniform float u_Exposure;\r\n// uniform sampler2D brdf;       // BRDF LUT\r\nuniform vec4 glstate_eyepos;\r\n\r\n// PBR 材质贴图\r\nuniform sampler2D uv_Normal;\r\nuniform sampler2D uv_Basecolor;\r\nuniform sampler2D uv_MetallicRoughness;\r\nuniform sampler2D uv_AO;\r\nuniform sampler2D uv_Emissive;\r\n\r\n// Customize value\r\nuniform vec4 CustomBasecolor;\r\nuniform float CustomMetallic;\r\nuniform float CustomRoughness;\r\nuniform vec4 CustomEmissiveColor;\r\n\r\n#define TEX_FORMAT_METALLIC     rgb\r\n#define TEX_FORMAT_ROUGHNESS    a\r\n\r\nin vec3 v_pos;\r\nin vec2 xlv_TEXCOORD0;\r\nin mat3 TBN;\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp float glstate_lightmapRGBAF16;\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nvec4 sRGBtoLINEAR(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(GAMMA)), color.a);\r\n}\r\nvec4 LINEARtoSRGB(vec4 color) {\r\n    return vec4(pow(color.rgb, vec3(1.0 / GAMMA)), color.a);\r\n}\r\n\r\nvec3 toneMapACES(vec3 color) {\r\n    const float A = 2.51;\r\n    const float B = 0.03;\r\n    const float C = 2.43;\r\n    const float D = 0.59;\r\n    const float E = 0.14;\r\n    return pow(clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0), vec3(1.0 / GAMMA));\r\n}\r\n\r\nvec2 DFGApprox(float NoV, float roughness) {\r\n    float dotNV = clamp(NoV, 0., 1.);\r\n    vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\r\n    vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\r\n    vec4 r = roughness * c0 + c1;\r\n    float a004 = min(r.x * r.x, exp2(-9.28 * dotNV)) * r.x + r.y;\r\n    return vec2(-1.04, 1.04) * a004 + r.zw;\r\n}\r\n\r\n// Fresnel - F0 = Metalness\r\nvec3 F_Schlick(float VoH, vec3 F0) {\r\n    return F0 + (vec3(1.0) - F0) * pow(1.0 - VoH, 5.0);\r\n}\r\n\r\n// Geometric\r\n// >    Schlick with k = α/2 matches Smith very closely\r\nfloat G_UE4(float NoV, float NoH, float VoH, float NoL, float roughness) {\r\n    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\r\n    float l = NoL / (NoL * (1.0 - k) + k);  // There are another version which use NoH & LoH\r\n    float v = NoV / (NoV * (1.0 - k) + k);\r\n    return l * v;\r\n}\r\n\r\n// a (alphaRoughness) = Roughness\r\n// Distribution AKA normal distribution function (NDF)\r\n// Trowbridge-Reitz\r\nfloat D_GGX(float a, float NoH) {\r\n    a = a * a;\r\n    // float f = (NoH * a - NoH) * NoH + 1.0;  // NoH * NoH * (a - 1.0) + 1.0;\r\n    float f = NoH * NoH * (a - 1.0) + 1.0;\r\n    return a / (PI * f * f);\r\n}\r\n\r\n// mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv){\r\n//     // get edge vectors of the pixel triangle\r\n//     vec3 dp1 = dFdx( p );\r\n//     vec3 dp2 = dFdy( p );\r\n//     vec2 duv1 = dFdx( uv );\r\n//     vec2 duv2 = dFdy( uv );\r\n\r\n//     // solve the linear system\r\n//     vec3 dp2perp = cross( dp2, N );\r\n//     vec3 dp1perp = cross( N, dp1 );\r\n//     vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\r\n//     vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n//     // construct a scale-invariant frame\r\n//     float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );\r\n//     return mat3( T * invmax, B * invmax, N );\r\n// }\r\n\r\n// decode RGBE data after LOD due to RGB32F mipmap issue\r\n vec3 decoRGBE(vec4 r) {\r\n    if(r.a != 0. && r.a <= 0.7372549019607844) {    //判读 0.7372 避免 expVal > 60 后出现问题。 \r\n        float expVal = r.a * 255. - 128.;\r\n        float e = exp2(expVal);\r\n        return vec3(r.r * e, r.g * e, r.b * e);\r\n    }\r\n    return  vec3(0.0);\r\n}\r\n\r\nstruct st_core {\r\n    vec4 diffuse;\r\n    vec3 f0;\r\n    vec3 N;\r\n    vec3 V;\r\n    vec3 R;\r\n    float NoV;\r\n    float metallic;\r\n    float roughness;\r\n    float alphaRoughness;\r\n};\r\n\r\nstruct lightData{\r\n    vec3 L;\r\n    float rVal;\r\n};\r\n\r\nst_core init() {\r\n    st_core temp;\r\n\r\n    // PBR Material\r\n    temp.diffuse = (sRGBtoLINEAR(texture(uv_Basecolor, xlv_TEXCOORD0 * uvRepeat)) * CustomBasecolor);\r\n\r\n    vec3 rm = texture(uv_MetallicRoughness, xlv_TEXCOORD0 * uvRepeat).rgb;\r\n    temp.roughness = clamp(rm.g, 0.04, 1.0) * CustomRoughness;\r\n    temp.alphaRoughness = temp.roughness * temp.roughness;\r\n    temp.metallic = clamp(rm.b, 0.0, 1.0) * CustomMetallic;\r\n\r\n    // vec4 AO = sRGBtoLINEAR(texture(uv_AO, xlv_TEXCOORD0 * uvRepeat));\r\n\r\n    vec3 f0 = vec3(0.04);\r\n    temp.f0 = mix(f0, temp.diffuse.xyz, temp.metallic);\r\n\r\n    temp.diffuse.rgb = temp.diffuse.rgb * (vec3(1.) - f0) * (1. - temp.metallic);\r\n    // temp.diffuse/=PI;\r\n\r\n    temp.V = normalize(glstate_eyepos.xyz - v_pos);\r\n    // mat3 TBN = cotangent_frame(temp.N, temp.V, xlv_TEXCOORD0 * uvRepeat);\r\n    vec3 normalAddation = texture(uv_Normal, xlv_TEXCOORD0 * uvRepeat).rgb * 2. - 1.;\r\n    temp.N = normalize(TBN * normalAddation);\r\n\r\n    temp.NoV = clamp(abs(dot(temp.N, temp.V)), 0.001, 1.0);\r\n    temp.R = -normalize(reflect(temp.V, temp.N));\r\n\r\n    return temp;\r\n}\r\n\r\nvec3 lightBRDF(lightData ld, st_core core) {\r\n    vec3 L = normalize(ld.L);\r\n    vec3 H = normalize(core.V + L);\r\n\r\n    float NoL = clamp(dot(core.N, L), 0.001, 1.0);\r\n    float NoH = clamp(dot(core.N, H), 0.0, 1.0);\r\n    // float LoH = clamp(dot(L, H), 0.0, 1.0);\r\n    float VoH = clamp(dot(core.V, H), 0.0, 1.0);\r\n\r\n    // vec3 diffuse = core.Basecolor.rgb * NoL / PI;\r\n\r\n    vec3 F = F_Schlick(VoH, core.f0);\r\n    float G = G_UE4(core.NoV, NoH, VoH, NoL, core.roughness);\r\n    float D = D_GGX(core.alphaRoughness, NoH);\r\n    \r\n    //直接光照(镜面反射)\r\n    vec3 specContrib = F * G * D / (4.0 * NoL * core.NoV);\r\n    //间接光照(漫反射)\r\n    vec3 diffuseContrib = (1.0 - F) * core.diffuse.rgb / PI;\r\n\r\n    // vec3 color = NoL * (diffuseContrib + specContrib);\r\n    vec3 color = ld.rVal * (diffuseContrib + specContrib);\r\n\r\n    return color;\r\n}\r\n\r\n//calcLight 计算灯光数据函数\r\n//统一三种光源的传参方式，在函数内混合，方便就不高效\r\n//只需要方向光时另写\r\n//N 世界空间法线\r\n//worldpos 世界空间pos\r\n//lightPos 光源位置,w=0 表示方向光\r\n//lightDir 光源方向，W=0 表示点光源，和楼上的w一起为1 表示 探照灯 spot\r\n//cosspot cos(a) a为spot的半径 a取值0到90度，算好cos再传进来\r\nlightData calcLight(vec3 N,vec3 worldpos,vec4 lightPos,vec4 lightDir,float cosspot,float range)\r\n{\r\n    lightData ld;\r\n\r\n    vec3 v3 = lightPos.xyz - worldpos;\r\n    float len = length(v3);\r\n    len = len > range ? range : len;\r\n    //求入射角，点光源&聚光灯\r\n    vec3 L = normalize(v3); \r\n    //求张角 聚光灯 也是方向光入射角\r\n    vec3 L2 = -lightDir.xyz;\r\n    float dotSpot = dot(L,L2);\r\n    float spotVal = smoothstep(cosspot , 1.0 , dotSpot);\r\n    float atten = pow(1.0 - len/range , 3.0);\r\n\r\n    //光方向\r\n    ld.L = mix(L2 , L , lightPos.w);\r\n    float NoL = clamp(dot(N , ld.L) , 0.0 , 1.0);\r\n\r\n    //反射度\r\n    float r = NoL * atten;                       //点光 和 射灯\r\n    r *= mix(1.0 , spotVal , lightDir.w);        // lightDir.w = 0 点光, w = 1 射灯 (有角度约束)\r\n    float rDir = NoL;                            //方向光\r\n    ld.rVal = mix(rDir , r , lightPos.w);        //lightPos.w = 0 方向光 ，w = 1 点光 和 射灯\r\n\r\n    return ld;\r\n}\r\n\r\nout vec4 color; \r\nvoid main() {\r\n    //alpha Test\r\n    vec4 baseTex = texture(uv_Basecolor, xlv_TEXCOORD0 * uvRepeat);\r\n    if(baseTex.a < alphaCutoff){\r\n        discard;\r\n    }\r\n\r\n    st_core c = init();\r\n    float lod = clamp(c.roughness * 10.0, 0.0, 11.0);\r\n    vec3 directL;\r\n\r\n    //实时灯光 直接光照 照明贡献计算----------------------------\r\n    // vec2 envBRDF    = texture(brdf, vec2(clamp(c.NoV, 0.0, 0.9999999), clamp(1.0-c.Roughness, 0.0, 0.9999999))).rg;\r\n    // int lightCount = int(min(3., glstate_lightcount));\r\n    int lightCount = int(glstate_lightcount);\r\n    if (lightCount > 0) {\r\n        for (int i = 0; i < 8; i++) {\r\n            if (i >= lightCount) break;\r\n            lightData ld = calcLight(c.N,v_pos,glstate_vec4_lightposs[i],glstate_vec4_lightdirs[i],glstate_float_spotangelcoss[i],glstate_float_lightrange[i]);\r\n            directL += lightBRDF(ld , c) * glstate_vec4_lightcolors[i].rgb * glstate_float_lightintensity[i];\r\n        }\r\n    }\r\n\r\n    //环境 间接光照 照明贡献计算----------------------------\r\n    vec2 brdf = DFGApprox(c.NoV, c.roughness);\r\n    //镜面反射\r\n    #ifdef TEXTURE_LOD\r\n        // vec3 IBLColor = decoRGBE(textureCubeLodEXT(u_env, c.R, lod));\r\n        vec3 IBLColor = decoRGBE(textureLod(u_env, c.R, lod));\r\n    #else\r\n        vec3 IBLColor = decoRGBE(texture(u_env, c.R));\r\n    #endif\r\n    vec3 IBLspecular = 1.0 * IBLColor * (c.f0 * brdf.x + brdf.y);\r\n    vec3 indirectSpec = IBLspecular * specularIntensity;\r\n\r\n    //漫反射\r\n    #ifdef TEXTURE_LOD\r\n        // vec3 indirectDiff = c.diffuse.rgb * decoRGBE(textureCubeLodEXT(u_diffuse, c.R, lod)) * diffuseIntensity;\r\n        vec3 indirectDiff = c.diffuse.rgb * decoRGBE(textureLod(u_diffuse, c.R, lod)) * diffuseIntensity;\r\n    #else\r\n        vec3 indirectDiff = c.diffuse.rgb * decoRGBE(texture(u_diffuse, c.R)) * diffuseIntensity;\r\n    #endif\r\n\r\n    //照明合并\r\n    vec3 finalColor = directL + indirectSpec + indirectDiff;\r\n    // vec3 finalColor = c.N;\r\n\r\n#ifdef LIGHTMAP\r\n    //有lightMap 时，用lightmap 贡献一部分 间接光照\r\n    vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n    vec3 lightMapColor;\r\n    if(glstate_lightmapRGBAF16 == 1.0){\r\n        // finalColor.xyz *= lightmap.xyz;\r\n        lightMapColor = sRGBtoLINEAR(lightmap).rgb;\r\n    }else{\r\n        // finalColor.xyz *= decode_hdr(lightmap);\r\n        lightMapColor = decode_hdr(lightmap);\r\n    }\r\n\r\n    // finalColor += c.diffuse.rgb * lightMapColor;\r\n    finalColor += c.diffuse.rgb * lightMapColor * diffuseIntensity;\r\n#endif\r\n\r\n    //emission\r\n    finalColor += sRGBtoLINEAR(texture(uv_Emissive, xlv_TEXCOORD0 * uvRepeat)).rgb * CustomEmissiveColor.rgb;\r\n    \r\n    //AO + Exposure\r\n    finalColor *= u_Exposure * texture(uv_AO, xlv_TEXCOORD0 * uvRepeat).r;\r\n\r\n\r\n    //色调映射 （HDR -> LDR）\r\n    finalColor = toneMapACES(finalColor);\r\n\r\n#ifdef FOG\r\n    finalColor.xyz = mix(glstate_fog_color.rgb, finalColor.rgb, factor);\r\n#endif\r\n\r\n    // color = vec4(finalColor, c.diffuse.a);\r\n    color = vec4(finalColor, c.diffuse.a);\r\n}","pbr.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr.vs.glsl":"#version    300 es\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 1) in highp vec3    _glesNormal;\r\nlayout(location = 2) in highp vec3    _glesTangent;\t//w 被乘到了分量里 x = x*w , y = y*w , z = z*w , 且 w 被做了 +2 的偏移映射。\r\nlayout(location = 3) in highp vec3    _glesColor;\r\n\r\nuniform highp mat4      glstate_matrix_mvp;\r\nuniform highp mat4      glstate_matrix_model;\r\nuniform highp mat4      glstate_matrix_it_modelview;\r\n\r\nout highp vec3      v_pos;\r\nout highp vec2      xlv_TEXCOORD0;\r\nout highp mat3\t\tTBN;\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec2 _glesMultiTexCoord1;\r\nuniform lowp float glstate_lightmapUV;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nmat4 blendMat ;\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat* srcVertex;\r\n}\r\n#endif\r\n\r\n//获取 tangent 的 W 值\r\nlowp float tangentW(lowp vec3 _tangent){\r\n\treturn sqrt(_tangent.x * _tangent.x + _tangent.y * _tangent.y + _tangent.z * _tangent.z) - 2.0;\r\n}\r\n\r\n//计算 TBN 矩阵-----------------\r\nmat3 calTBNMatrix(highp mat4 _m_mat,lowp vec3 _normal,lowp vec3 _tangent)\r\n{\r\n\r\n    vec3 normal = normalize(mat3(_m_mat) * normalize(_normal));\r\n    vec3 tangent = normalize(mat3(_m_mat) * normalize(_tangent));\r\n    vec3 binormal = cross( normal , tangent) * tangentW(_tangent);\r\n  \treturn mat3(tangent,binormal,normal);\r\n}\r\n//-----------------------------\r\n\r\nvoid calcNormal(highp vec4 pos){\r\n    //求世界空间法线\r\n#ifdef SKIN\r\n    vec3 _n = normalize(mat3(blendMat) * _glesNormal);\r\n#else\r\n    vec3 _n = _glesNormal;\r\n#endif\r\n\tTBN = calTBNMatrix(glstate_matrix_it_modelview , _n , _glesTangent);\r\n}\r\n\r\nvoid main () {\r\n    highp vec4 position = vec4(_glesVertex,1.0);\r\n\r\n#ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = (1.0 - glstate_lightmapUV) * _glesMultiTexCoord0  + glstate_lightmapUV * _glesMultiTexCoord1;\t//unity lightMap UV ,优先使用UV1,次之UV0 \r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n#endif\r\n\r\n#ifdef SKIN\r\n    position = calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n#endif\r\n\t//normal\r\n\tcalcNormal(position);\r\n\t//world pos\r\n    vec4 wpos\t\t= (glstate_matrix_model * position);\r\n\tv_pos\t\t\t= wpos.xyz / wpos.w;\r\n    //texcoord\r\n\txlv_TEXCOORD0   = _glesMultiTexCoord0;\r\n\r\n\t// // TBN\r\n    // vec3 N        \t= normalize((glstate_matrix_it_modelview * vec4(_glesNormal, 0.0)).xyz);\r\n\t// vec3 tangent \t= normalize((glstate_matrix_it_modelview * vec4(_glesTangent, 0.0)).xyz);\r\n\t// vec3 bitangent \t= cross(N, tangent) * tangentW(_glesTangent);// * _glesTangent.w;\r\n\t// TBN = mat3(tangent, bitangent, N);\r\n\t// TBN = calTBNMatrix(glstate_matrix_it_modelview , _glesNormal , _glesTangent);\r\n\r\n\tposition = glstate_matrix_mvp * position;\r\n\r\n#ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n#endif\r\n\r\n    gl_Position\t= position;\r\n}","pbr_2sided.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"all\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr_blend.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","pbr_blend_2sided.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"uv_Basecolor('albedo',Texture)='white'{}\",\r\n        \"alphaCutoff('alphaCutoff',Range(0.0,1.0))= 0.0\",\r\n        \"uv_MetallicRoughness('MetallicRoughness',Texture)='white'{}\",\r\n        \"uv_AO('AO',Texture)='white'{}\",\r\n        \"uv_Normal('Normal',Texture)='normal'{}\",\r\n        \"uv_Emissive('Emissive',Texture)='white'{}\",\r\n        \"CustomBasecolor ('Color', Color) = (1,1,1,1)\",\r\n        \"CustomMetallic('Metallic',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomRoughness('Roughness',Range(0.0,1.0)) = 1.0\",\r\n        \"CustomEmissiveColor ('EmissiveColor', Color) = (0,0,0,1)\",\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\": \"off\",\r\n                \"vs\": \"pbr\",\r\n                \"fs\": \"pbr\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","sence01pubu.fs.glsl":"#version 300 es\r\n\r\nprecision lowp float;\r\nuniform lowp sampler2D _R;\r\nuniform lowp sampler2D _G;\r\nuniform lowp sampler2D _B;\r\n\r\nuniform lowp float _RClose;\r\nuniform lowp float _GClose;\r\nuniform lowp float _BClose;\r\n\r\nuniform lowp vec4 _Rcolor;\r\nuniform lowp vec4 _Gcolor;\r\nuniform lowp vec4 _Bcolor;\r\n\r\n\r\n//in-------------------------\r\nin mediump vec2 uv_R_TEXCOORD;\r\nin mediump vec2 uv_G_TEXCOORD;\r\nin mediump vec2 uv_B_TEXCOORD;\r\nin mediump float v_color_a;\r\n\r\n//--------------------------------\r\n\r\n//textureEtC1Mark\r\n\r\n#define lerp(a, b, v)   (a) * (1.0 - (v)) + (b) * (v) \r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    lowp float _tempf = 2.0;\r\n    highp float _RClose_var = lerp( texture( _R , uv_R_TEXCOORD).r, 0.0, _RClose );\r\n    highp float _GClose_var = lerp( texture( _G , uv_G_TEXCOORD).g, 0.0, _GClose );\r\n    highp float _BClose_var = lerp( texture( _B , uv_B_TEXCOORD).b, 0.0, _BClose );\r\n    lowp vec3 finalColor = ((_RClose_var*_Rcolor.rgb*_Rcolor.a*_tempf)+(_GClose_var*_Gcolor.rgb*_Gcolor.a*_tempf)+(_BClose_var*_Bcolor.rgb*_Bcolor.a*_tempf));\r\n    lowp vec4 emission = vec4(finalColor , ((_RClose_var + _GClose_var + _BClose_var) * v_color_a));\r\n\r\n    #ifdef FOG\r\n    emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    color = emission;\r\n}","sence01pubu.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"_RS ('RS', Range(0, 1)) = 0\",\r\n        \"_GS ('GS', Range(0, 1)) = 0\",\r\n        \"_BS ('BS', Range(0, 1)) = 0\",\r\n        \"_RClose ('RClose', Float ) = 0\",\r\n        \"_Gclose ('Gclose', Float ) = 0\",\r\n        \"_Bclose ('Bclose', Float ) = 0\",\r\n        \"_Rcolor ('Rcolor', Color) = (0.5,0.5,0.5,1)\",\r\n        \"_Gcolor ('Gcolor', Color) = (0.5,0.5,0.5,1)\",\r\n        \"_Bcolor ('Bcolor', Color) = (0.5,0.5,0.5,1)\",\r\n        \"_R ('R', Texture) = 'white' {}\",\r\n        \"_G ('G', Texture) = 'white' {}\",\r\n        \"_B ('B', Texture) = 'white' {}\",\r\n        \"_R_ST('_R_ST',Vector) = (1,1,0,0)\",\r\n        \"_G_ST('_G_ST',Vector) = (1,1,0,0)\",\r\n        \"_B_ST('_B_ST',Vector) = (1,1,0,0)\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"sence01pubu\",\r\n                \"fs\": \"sence01pubu\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"zwrite\": \"off\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"sence01pubu\",\r\n                \"fs\": \"sence01pubu\"\r\n            }\r\n        ]\r\n    }\r\n}","sence01pubu.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in lowp vec4 _glesColor;\r\n\r\nuniform float glstate_timer;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _R_ST;\r\nuniform mediump vec4 _G_ST;\r\nuniform mediump vec4 _B_ST;\r\n\r\nuniform mediump float _RS;\r\nuniform mediump float _GS;\r\nuniform mediump float _BS;\r\n\r\n//varing ---------\r\nout mediump vec2 uv_R_TEXCOORD;\r\nout mediump vec2 uv_G_TEXCOORD;\r\nout mediump vec2 uv_B_TEXCOORD;\r\nout mediump float v_color_a;\r\n\r\n//----------------\r\n\r\n#ifdef FOG\r\n// #define glstate_fog_end\t\t150.\r\n// #define glstate_fog_start\t1.\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n\r\nvoid main()\r\n{\r\n\tlowp float timeScale = 1.0;\r\n\tv_color_a = _glesColor.a;\r\n    uv_R_TEXCOORD = (_glesMultiTexCoord0 + (timeScale * glstate_timer * _RS) * vec2(0.0,-1.0)) * _R_ST.xy + _R_ST.zw;\r\n    uv_G_TEXCOORD = (_glesMultiTexCoord0 + (timeScale * glstate_timer * _GS) * vec2(0.0,-1.0)) * _G_ST.xy + _G_ST.zw;\r\n    uv_B_TEXCOORD = (_glesMultiTexCoord0 + (timeScale * glstate_timer * _BS) * vec2(0.0,-1.0)) * _B_ST.xy + _B_ST.zw;\r\n\r\n    highp vec4 position = vec4(_glesVertex.xyz,1.0);\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","simple.fs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform float _AlphaCut;\r\nuniform vec4 _MainColor;\r\n\r\nin vec2 xlv_TEXCOORD0;    \r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n\r\n    if(basecolor.a < _AlphaCut)\r\n        discard;\r\n\r\n    basecolor = basecolor * _MainColor;\r\n\r\n    #ifdef FOG\r\n    basecolor.xyz = mix(glstate_fog_color.rgb, basecolor.rgb, factor);\r\n    #endif\r\n        \r\n    color = basecolor;\r\n}","simple.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.1\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ]\r\n    }\r\n}","simple.vs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec4 _glesMultiTexCoord0;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\nuniform vec4 _MainTex_ST;\r\n\r\nout lowp vec2 xlv_TEXCOORD0;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlowp mat4 blendMat ;\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    blendMat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn blendMat * srcVertex;\r\n}\r\n\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    vec4 position = vec4(_glesVertex.xyz,1.0);\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\r\n    position = glstate_matrix_mvp * position;\r\n\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n    \r\n    gl_Position = position;\r\n}","simple_over.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_AlphaCut('AlphaCut',Range(0.0,1.0)) = 0.1\",\r\n        \"_MainTex_ST('MainTex_ST',Vector) = (1,1,0,0)\",\r\n        \"_MainColor ('MainColor', Color) = (1,1,1,1)\"\r\n    ],\r\n    \"passes\": {\r\n\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"ztest\":\"off\",\r\n\t\t\t\t\"zwrite\":\"off\",\r\n                \"vs\": \"simple\",\r\n                \"fs\": \"simple\"\r\n            }\r\n        ]\r\n    }\r\n}","skybox.fs.glsl":"#version 300 es\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI          3.141592653589\r\n\r\nuniform samplerCube u_sky;\r\nuniform vec4        glstate_eyepos;\r\nuniform float       u_Exposure;\r\n\r\nin vec3        TexCoords;\r\n\r\nvec3 decoRGBE(vec4 r) {\r\n    if(r.a != 0.) {\r\n        float e = exp2(r.a * 255. - 128.);\r\n        return vec3(r.r * e, r.g * e, r.b * e);\r\n    }\r\n    return vec3(0);\r\n}\r\n\r\nvec3 toneMapACES(vec3 color) {\r\n    const float A = 2.51;\r\n    const float B = 0.03;\r\n    const float C = 2.43;\r\n    const float D = 0.59;\r\n    const float E = 0.14;\r\n    return pow(clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0), vec3(1.0 / 2.2));\r\n}\r\n\r\nout vec4 color; \r\nvoid main () {\r\n    color = vec4(toneMapACES(u_Exposure * decoRGBE(texture(u_sky, TexCoords))), 1.0);\r\n}","skybox.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"u_Exposure('Exposure',Range(0.0,100.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"showface\": \"all\",\r\n                \"vs\": \"skybox\",\r\n                \"fs\": \"skybox\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"zwrite\": \"off\",\r\n                \"ztest\":\"on\",\r\n                \"showface\": \"all\",\r\n                \"vs\": \"skybox\",\r\n                \"fs\": \"skybox\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","skybox.vs.glsl":"#version 300 es\r\n\r\n//参考 https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/06%20Cubemaps/\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\n\r\nuniform highp mat4      glstate_matrix_view;\r\nuniform highp mat4      glstate_matrix_project;\r\n\r\nout highp vec3      TexCoords;\r\n\r\nvoid main () {\r\n    vec3 cubePos = _glesVertex * -2.0;  //因我们的 默认box mesh size为1, 需要加系数 -2.0\r\n    TexCoords   = cubePos;\r\n    vec4 pos =  glstate_matrix_project * mat4(mat3(glstate_matrix_view))  * vec4(cubePos, 1.0);\r\n    gl_Position = pos.xyww;\r\n}","sprite_bg.fs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform vec4 _Color;\r\nuniform vec4 _ChangeColor;\r\nuniform float _ChangeSize;\r\n\r\nin lowp vec2 uv;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color;\r\nin lowp float factor;\r\n#endif\r\n\r\nout vec4 color;\r\nvoid main() \r\n{\r\n    float Diff = clamp((uv.y - _ChangeSize) * (uv.y - _ChangeSize) , 0.0 , 1.0) + clamp((1.0 - _ChangeSize) - uv.y , 0.0 , 1.0) * ((1.0 - _ChangeSize) - uv.y);\r\n    vec4 basecolor = _ChangeColor * Diff + (1.0 - Diff) * _Color;\r\n\r\n    #ifdef FOG\r\n    basecolor.xyz = mix(glstate_fog_color.rgb, basecolor.rgb, factor);\r\n    #endif\r\n        \r\n    color = basecolor;\r\n}","sprite_bg.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n    \"properties\": [\r\n        \"_Color ('Tint', Color) = (1,1,1,1)\",\r\n        \"_ChangeColor ('ChangeColor', Color) = (1,1,1,1)\",\r\n        \"_ChangeSize('ChangeSize',float) = 0.2\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\" : \"off\",\r\n                \"vs\": \"sprite_bg\",\r\n                \"fs\": \"sprite_bg\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"all\",\r\n                \"zwrite\" : \"off\",\r\n                \"vs\": \"sprite_bg\",\r\n                \"fs\": \"sprite_bg\"\r\n            }\r\n        ]\r\n    }\r\n}","sprite_bg.vs.glsl":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nlayout(location = 0) in vec4 _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nout lowp vec2 uv;\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    vec4 position = vec4(_glesVertex.xyz,1.0);\r\n\r\n    position = glstate_matrix_mvp * position;\r\n\r\n    uv = _glesMultiTexCoord0.xy;\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n    \r\n    gl_Position = position;\r\n}","t4diffuse.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _Splat0;\r\nuniform lowp sampler2D _Splat1;\r\nuniform lowp sampler2D _Splat2;\r\nuniform lowp sampler2D _Splat3;\r\nuniform lowp sampler2D _Control;\r\n\r\n//in-----------------------------\r\nin mediump vec2 s0_uv_TEXCOORD0;\r\nin mediump vec2 s1_uv_TEXCOORD1;\r\nin mediump vec2 s2_uv_TEXCOORD2;\r\nin mediump vec2 s3_uv_TEXCOORD3;\r\nin mediump vec2 c_uv_TEXCOORD4;\r\n\r\n//------------------------------------\r\n\r\n//textureEtC1Mark\r\n\r\n#ifdef LIGHTMAP\r\nuniform lowp sampler2D _LightmapTex;\r\nin mediump vec2 lightmap_TEXCOORD;\r\nlowp vec3 decode_hdr(lowp vec4 data)\r\n{\r\n    lowp float power =pow( 2.0 ,data.a * 255.0 - 128.0);\r\n    return data.rgb * power * 2.0 ;\r\n}\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n\r\nout vec4 color;\r\nvoid main()\r\n{\r\n    // lowp vec4 basecolor = texture(_MainTex, xlv_TEXCOORD0);\r\n    // if(basecolor.a < _AlphaCut)\r\n    //     discard;\r\n    // lowp vec4 fristColor = basecolor;\r\n    // lowp vec4 emission = fristColor;\r\n    lowp vec4 emission = vec4(.0,.0,.0,.0);\r\n\r\n    //----------------------------------------------------------\r\n    lowp vec4 splat_control = texture(_Control, c_uv_TEXCOORD4);\r\n    lowp float weight = dot(splat_control, vec4(1.0, 1.0, 1.0, 1.0));\r\n    splat_control /= (weight + 0.001);\r\n\r\n    lowp vec4 mixedDiffuse = vec4(.0,.0,.0,.0);\r\n    mixedDiffuse += splat_control.r * texture(_Splat0, s0_uv_TEXCOORD0);\r\n    mixedDiffuse += splat_control.g * texture(_Splat1, s1_uv_TEXCOORD1);\r\n    mixedDiffuse += splat_control.b * texture(_Splat2, s2_uv_TEXCOORD2);\r\n    mixedDiffuse += splat_control.a * texture(_Splat3, s3_uv_TEXCOORD3);\r\n    emission = vec4(mixedDiffuse.xyz , weight);\r\n\r\n    #ifdef LIGHTMAP\r\n        lowp vec4 lightmap = texture(_LightmapTex, lightmap_TEXCOORD);\r\n        emission.xyz *= decode_hdr(lightmap);\r\n    #endif\r\n\r\n    #ifdef FOG\r\n        emission.xyz = mix(glstate_fog_color.rgb, emission.rgb, factor);\r\n    #endif\r\n    \r\n    color = emission;\r\n}","t4diffuse.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_Control ('Control (RGBA)', Texture) = 'white' {}\",\r\n\t\t\"_Splat0 ('Layer 1', Texture) = 'white' {}\",\r\n\t\t\"_Splat1 ('Layer 2', Texture) = 'white' {}\",\r\n\t\t\"_Splat2 ('Layer 3', Texture) = 'white' {}\",\r\n        \"_Splat3 ('Layer 4', Texture) = 'white' {}\",\r\n\r\n        \"_Splat0_ST('Splat0_ST',Vector) = (1,1,0,0)\",\r\n        \"_Splat1_ST('Splat1_ST',Vector) = (1,1,0,0)\",\r\n        \"_Splat2_ST('Splat2_ST',Vector) = (1,1,0,0)\",\r\n        \"_Splat3_ST('Splat3_ST',Vector) = (1,1,0,0)\",\r\n        \"_Control_ST('Control_ST',Vector) = (1,1,0,0)\"\r\n        \r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ]\r\n    }\r\n}","t4diffuse.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec4 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Splat0_ST;\r\nuniform mediump vec4 _Splat1_ST;\r\nuniform mediump vec4 _Splat2_ST;\r\nuniform mediump vec4 _Splat3_ST;\r\nuniform mediump vec4 _Control_ST;\r\n\r\n//light\r\nlowp mat4 blendMat ;\r\nlayout(location = 1) in lowp vec3 _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\n\r\n//varing--------------\r\nout mediump vec2 s0_uv_TEXCOORD0;\r\nout mediump vec2 s1_uv_TEXCOORD1;\r\nout mediump vec2 s2_uv_TEXCOORD2;\r\nout mediump vec2 s3_uv_TEXCOORD3;\r\nout mediump vec2 c_uv_TEXCOORD4;\r\n//---------------------\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec4 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\n// #define glstate_fog_end\t\t150.\r\n// #define glstate_fog_start\t1.\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    s0_uv_TEXCOORD0 = _glesMultiTexCoord0.xy * _Splat0_ST.xy + _Splat0_ST.zw;\r\n    s1_uv_TEXCOORD1 = _glesMultiTexCoord0.xy * _Splat1_ST.xy + _Splat1_ST.zw;\r\n    s2_uv_TEXCOORD2 = _glesMultiTexCoord0.xy * _Splat2_ST.xy + _Splat2_ST.zw;\r\n    s3_uv_TEXCOORD3 = _glesMultiTexCoord0.xy * _Splat3_ST.xy + _Splat3_ST.zw;\r\n    c_uv_TEXCOORD4  = _glesMultiTexCoord0.xy * _Control_ST.xy + _Control_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord1.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","t4diffuse_use_uv1.shader.json":"{\r\n    \"layer\": \"geometry\",\r\n    \"properties\": [\r\n        \"_Control ('Control (RGBA)', Texture) = 'white' {}\",\r\n\t\t\"_Splat0 ('Layer 1', Texture) = 'white' {}\",\r\n\t\t\"_Splat1 ('Layer 2', Texture) = 'white' {}\",\r\n\t\t\"_Splat2 ('Layer 3', Texture) = 'white' {}\",\r\n        \"_Splat3 ('Layer 4', Texture) = 'white' {}\",\r\n\r\n        \"_Splat0_ST('Splat0_ST',Vector) = (1,1,0,0)\",\r\n        \"_Splat1_ST('Splat1_ST',Vector) = (1,1,0,0)\",\r\n        \"_Splat2_ST('Splat2_ST',Vector) = (1,1,0,0)\",\r\n        \"_Splat3_ST('Splat3_ST',Vector) = (1,1,0,0)\",\r\n        \"_Control_ST('Control_ST',Vector) = (1,1,0,0)\"\r\n        \r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse_use_uv1\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse_use_uv1\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse_use_uv1\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ],\r\n        \"lightmap_fog\": [\r\n            {\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"t4diffuse_use_uv1\",\r\n                \"fs\": \"t4diffuse\"\r\n            }\r\n        ]\r\n    }\r\n}","t4diffuse_use_uv1.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec4 _glesVertex;\r\nlayout(location = 4) in mediump vec2 _glesMultiTexCoord0;\r\n\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _Splat0_ST;\r\nuniform mediump vec4 _Splat1_ST;\r\nuniform mediump vec4 _Splat2_ST;\r\nuniform mediump vec4 _Splat3_ST;\r\nuniform mediump vec4 _Control_ST;\r\n\r\n//light\r\nlowp mat4 blendMat ;\r\nlayout(location = 1) in lowp vec3 _glesNormal;\r\nuniform highp mat4 glstate_matrix_model;\r\n\r\n//varing--------------\r\nout mediump vec2 s0_uv_TEXCOORD0;\r\nout mediump vec2 s1_uv_TEXCOORD1;\r\nout mediump vec2 s2_uv_TEXCOORD2;\r\nout mediump vec2 s3_uv_TEXCOORD3;\r\nout mediump vec2 c_uv_TEXCOORD4;\r\n//---------------------\r\n\r\n#ifdef LIGHTMAP\r\nlayout(location = 5) in mediump vec4 _glesMultiTexCoord1;\r\nuniform mediump vec4 glstate_lightmapOffset;\r\n// uniform mediump float glstate_lightmapUV;\r\nout mediump vec2 lightmap_TEXCOORD;\r\n#endif\r\n\r\n#ifdef FOG\r\n// #define glstate_fog_end\t\t150.\r\n// #define glstate_fog_start\t1.\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    s0_uv_TEXCOORD0 = _glesMultiTexCoord0.xy * _Splat0_ST.xy + _Splat0_ST.zw;\r\n    s1_uv_TEXCOORD1 = _glesMultiTexCoord0.xy * _Splat1_ST.xy + _Splat1_ST.zw;\r\n    s2_uv_TEXCOORD2 = _glesMultiTexCoord0.xy * _Splat2_ST.xy + _Splat2_ST.zw;\r\n    s3_uv_TEXCOORD3 = _glesMultiTexCoord0.xy * _Splat3_ST.xy + _Splat3_ST.zw;\r\n    c_uv_TEXCOORD4  = _glesMultiTexCoord0.xy * _Control_ST.xy + _Control_ST.zw;\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef LIGHTMAP\r\n    mediump vec2 beforelightUV = _glesMultiTexCoord0.xy;\r\n    lowp float u = beforelightUV.x * glstate_lightmapOffset.x + glstate_lightmapOffset.z;\r\n    lowp float v = beforelightUV.y * glstate_lightmapOffset.y + glstate_lightmapOffset.w;\r\n    lightmap_TEXCOORD = vec2(u,v);\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n\r\n    gl_Position =position;\r\n}","transparent.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform lowp sampler2D _MainTex;                                                                                                \r\nin highp vec2 xlv_TEXCOORD0;\r\nuniform lowp float _Alpha;\r\nuniform lowp float _Superimposition;\r\n\r\n#ifdef FOG\r\nuniform lowp vec4 glstate_fog_color; \r\nin lowp float factor;\r\n#endif\r\n\r\n//texture2DEtC1Mark\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    lowp vec4 emission = texture(_MainTex, xlv_TEXCOORD0);\r\n    emission.a=emission.a*_Alpha;\r\n    emission.xyz *= _Superimposition;\r\n    //----------------------------------------------------------\r\n    #ifdef FOG\r\n    emission.xyz= mix(glstate_fog_color.xyz, emission.xyz, factor);\r\n    #endif\r\n    color = emission;\r\n\r\n}","transparent.shader.json":"{\r\n    \"layer\": \"transparent\",\r\n\t\"properties\": [\r\n        \"_MainTex('MainTex',Texture)='white'{}\",\r\n        \"_Alpha('Alpha', Range(0.0, 1.0)) = 1.0\",\r\n        \"_Superimposition('Superimposition', Range(0.0, 7.0)) = 1.0\"\r\n    ],\r\n    \"passes\": {\r\n        \"base\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"base_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"skin\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"skin_fog\": [\r\n            {\r\n                \"blendmode\": \"blend\",\r\n                \"showface\": \"ccw\",\r\n                \"vs\": \"transparent\",\r\n                \"fs\": \"transparent\"\r\n            }\r\n        ],\r\n        \"shadowgen\": [],\r\n        \"bone\": [],\r\n        \"shadowuse\": []\r\n    }\r\n}","transparent.vs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in mediump vec4    _glesMultiTexCoord0;\r\nuniform highp mat4 glstate_matrix_mvp;\r\nuniform mediump vec4 _MainTex_ST;\r\n\r\nout mediump vec2 xlv_TEXCOORD0;\r\n\r\n#ifdef INSTANCE\r\n//instance_matrix 固定地址\r\nlayout(location = 12) in highp mat4 instance_matrix;\r\n#endif\r\n\r\n#ifdef FOG\r\nuniform lowp float glstate_fog_start;\r\nuniform lowp float glstate_fog_end;\r\nout lowp float factor;\r\n#endif\r\n\r\n#ifdef SKIN\r\nlayout(location = 6) in lowp vec4    _glesBlendIndex4;\r\nlayout(location = 7) in mediump vec4    _glesBlendWeight4;\r\nuniform highp vec4 glstate_vec4_bones[110];\r\nmat4 buildMat4(int index)\r\n{\r\n\tvec4 quat = glstate_vec4_bones[index * 2 + 0];\r\n\tvec4 translation = glstate_vec4_bones[index * 2 + 1];\r\n\tfloat xy = 2.0 * quat.x * quat.y;\r\n\tfloat xz = 2.0 * quat.x * quat.z;\r\n\tfloat xw = 2.0 * quat.x * quat.w;\r\n\tfloat yz = 2.0 * quat.y * quat.z;\r\n\tfloat yw = 2.0 * quat.y * quat.w;\r\n\tfloat zw = 2.0 * quat.z * quat.w;\r\n\tfloat xx = 2.0*quat.x * quat.x;\r\n\tfloat yy = 2.0*quat.y * quat.y;\r\n\tfloat zz = 2.0*quat.z * quat.z;\r\n\tfloat ww = 2.0*quat.w * quat.w;\r\n\tfloat s = translation.w;\r\n\tmat4 matrix = mat4(\r\n\t(1.0-yy-zz)*s, (xy+zw)*s, (xz-yw)*s, 0,\r\n\t(xy-zw)*s, (1.0-xx-zz)*s, (yz + xw)*s, 0,\r\n\t(xz + yw)*s, (yz - xw)*s, (1.0-xx-yy)*s, 0,\r\n\ttranslation.x, translation.y, translation.z, 1);\r\n\treturn matrix;\r\n}\r\n\r\nhighp vec4 calcVertex(highp vec4 srcVertex,lowp vec4 blendIndex,lowp vec4 blendWeight)\r\n{\r\n\tint i = int(blendIndex.x);\r\n    int i2 =int(blendIndex.y);\r\n\tint i3 =int(blendIndex.z);\r\n\tint i4 =int(blendIndex.w);\r\n\r\n    mat4 mat = buildMat4(i)*blendWeight.x\r\n\t\t\t + buildMat4(i2)*blendWeight.y\r\n\t\t\t + buildMat4(i3)*blendWeight.z\r\n\t\t\t + buildMat4(i4)*blendWeight.w;\r\n\treturn mat* srcVertex;\r\n}\r\n#endif\r\nvoid main()\r\n{\r\n    highp vec4 position=vec4(_glesVertex.xyz,1.0);\r\n    xlv_TEXCOORD0 = _glesMultiTexCoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\r\n\r\n    //----------------------------------------------------------\r\n    #ifdef SKIN\r\n    position =calcVertex(position,_glesBlendIndex4,_glesBlendWeight4);\r\n    #endif\r\n\r\n\t#ifdef INSTANCE\r\n        position = instance_matrix * position;\r\n    #endif\r\n\r\n    position = (glstate_matrix_mvp * position);\r\n\r\n    #ifdef FOG\r\n    factor = (glstate_fog_end - abs(position.z))/(glstate_fog_end - glstate_fog_start);\r\n    factor = clamp(factor, 0.0, 1.0);\r\n    #endif\r\n\r\n    gl_Position = position;\r\n}","transparent_particles_standard.fs.glsl":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D _MainTex;\r\n\r\nuniform vec4 u_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nuniform float _EmissionSaturation;\r\nuniform float _OpacitySaturation;\r\nuniform float _ColorMultiplier;\r\n\r\nuniform float COLOR_RAMP;\r\nuniform sampler2D _ColorRamp;\r\nuniform vec4 _ColorRamp_ST;\r\nuniform float COLOR_TINT;\r\nuniform vec4 _BasicColor;\r\nuniform vec4 _SaturatedColor;\r\n\r\nuniform float DISSOLVE_ENABLED;\r\nuniform vec4 _DissolveStep;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform sampler2D _NoiseTex;\r\nuniform vec4 _TintColor;\r\n\r\nuniform float EMISSIVEPOWER;\r\nuniform float _EmissivePower;\r\n\r\nuniform float _ABOffset;\r\n\r\nuniform float _GlobalAlpha;\r\n\r\nin vec2 v_uv;\r\nin vec4 v_color;\r\n\r\nin vec2 v_particledata;\r\nin vec2 v_noiseuv;\r\n\r\nuniform float APPLY_RGB_COLOR_VERTEX;\r\nuniform float NOISE_TEXTURE_EMISSION;\r\nuniform float NOISE_TEXTURE_ALPHA;\r\nuniform float NOISE_TEXTURE_DISSOLVE;\r\n\r\nuniform float BlendMode;\r\n\r\nout vec4 color; \r\nvoid main() \r\n{\r\n    vec4 tex = texture(_MainTex, v_uv);\r\n\r\n    vec4 col = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    vec4 vcolor = vec4(1.0, 1.0, 1.0, v_color.w);\r\n\r\n    if( EXTENDED_PARTICLES > 0.5 )\r\n    {\r\n        if( APPLY_RGB_COLOR_VERTEX > 0.5)\r\n        {\r\n            vcolor = v_color;\r\n        }\r\n\r\n        float nEmission = 1.0;\r\n        float nAlpha = 1.0;\r\n        float nDissolve = 1.0;\r\n        \r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            vec3 noise = texture(_NoiseTex, v_noiseuv).xyz;\r\n        \r\n            if( NOISE_TEXTURE_EMISSION > 0.5)\r\n            {\r\n                nEmission = noise.x;\r\n            }\r\n            else\r\n            {\r\n                nEmission = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_ALPHA > 0.5)\r\n            {\r\n                nAlpha = noise.y;\r\n            }\r\n            else\r\n            {\r\n                nAlpha = 1.0;\r\n            }\r\n            \r\n            if( NOISE_TEXTURE_DISSOLVE > 0.5)\r\n            {\r\n                nDissolve = noise.z;\r\n            }\r\n            else\r\n            {\r\n                nDissolve = 1.0;\r\n            }\r\n        }\r\n    \r\n        if( DISSOLVE_ENABLED > 0.5)\r\n        {\r\n            float ramp = -1.0 + (v_particledata.x * 2.0);\r\n            col.a = clamp(tex.g * smoothstep(_DissolveStep.x, _DissolveStep.y, (tex.b + ramp) * nDissolve) * _OpacitySaturation * vcolor.w * nAlpha, 0.0, 1.0);\r\n        }\r\n        else\r\n        {\r\n            col.a = clamp(tex.g * _OpacitySaturation * vcolor.w, 0.0, 1.0) * nAlpha;\r\n        }\r\n    \r\n        float lerpValue = 0.0;\r\n        if(COLOR_TINT < 0.5)\r\n        {\r\n            lerpValue = clamp(tex.r * v_particledata.y * _ColorMultiplier * nEmission, 0.0, 1.0);\r\n        }\r\n    \r\n        if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5)\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * _EmissionSaturation;\r\n                }\r\n            }\r\n            col.a *= _GlobalAlpha;\r\n        }\r\n        else\r\n        {\r\n            if( COLOR_RAMP > 0.5)\r\n            {\r\n                col.xyz = texture(_ColorRamp, vec2((1.0 - lerpValue), 0.0)).xyz * vcolor.xyz * col.a * _EmissionSaturation;\r\n            }\r\n            else\r\n            {\r\n                if( COLOR_TINT > 0.5 )\r\n                {\r\n                    col.xyz = tex.x * _BasicColor.xyz * vcolor.xyz * nEmission * _EmissionSaturation * col.a;\r\n                }\r\n                else\r\n                {\r\n                    col.xyz = mix(_BasicColor.xyz * vcolor.xyz, _SaturatedColor.xyz, lerpValue) * col.a * _EmissionSaturation;\r\n                }\r\n            }\r\n            col *= _GlobalAlpha;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if( 3.5 < BlendMode && BlendMode < 4.5 ) //4\r\n        {\r\n            tex *= _TintColor;\r\n            float luminance = clamp(dot(tex, vec4(0.2126, 0.7152, 0.0722, 0.0)) * tex.a * _ABOffset, 0.0, 1.0);\r\n            vec4 one = vec4(1, 1, 1, 1);\r\n            col = mix(2.0 * (v_color * tex), one - 2.0 * (one - v_color) * (one - tex), luminance);\r\n        }\r\n        else\r\n        {\r\n            col = v_color * tex;\r\n            col *= _TintColor;\r\n        \r\n            if( EMISSIVEPOWER > 0.5)\r\n            {\r\n                col *= _EmissivePower;\r\n            }\r\n            \r\n            if( 0.5 < BlendMode && BlendMode < 1.5 ) //1\r\n            {\r\n                col.rgb *= col.a;\r\n            }\r\n            else\r\n            {\r\n                if( 2.5 < BlendMode && BlendMode < 3.5 ) //3\r\n                {\r\n                    col *= 2.0;\r\n                }\r\n                else\r\n                {\r\n                    if( 1.5 < BlendMode && BlendMode < 2.5 ) //2\r\n                    {\r\n                        col *= 4.0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        col *= _GlobalAlpha;\r\n\r\n    }\r\n\r\n    color = col;\r\n}","transparent_particles_standard.shader.json":"{\r\n  \"layer\": \"transparent\",\r\n  \"queue\": 0,\r\n  \"properties\": [\r\n    \"_BasicColor('Basic Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_SaturatedColor('Saturated Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n\r\n    \"_MainTex('Particle Texture',Texture)='white'{}\",\r\n    \"_ColorRamp('Color Ramp', Texture) = 'white' {}\",\r\n    \"_NoiseTex('Noise Texture', Texture) = 'white' {}\",\r\n\r\n    \"_EmissionSaturation('Emission saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_OpacitySaturation('Opacity saturation', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ColorMultiplier('Color multiplier', Range(0.0, 8.0)) = 1.0\",\r\n    \"_ABOffset('Alpha blend offset', Range(0.0, 8.0)) = 0.0\",\r\n    \r\n    \"_DissolveStep('DissolveStep.xy', Vector) = (0.0, 1.0, 0.0, 0.0)\",\r\n    \r\n    \"_Panning('Automatic Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n\r\n    \"_TintColor ('Tint Color', Color) = (0.5,0.5,0.5,0.5)\",\r\n    \"_GlobalAlpha('Global alpha', float) = 1.0\",\r\n    \r\n    \"_EmissivePower('Emissive Power', Range(1.0, 4.0)) = 1.0\",\r\n    \"_NoisePanning('Noise Panning', Vector) = (0.0, 0.0, 0.0, 0.0)\",\r\n    \r\n    \"COLOR_RAMP('COLOR_RAMP', float) = 0.0\",\r\n    \"COLOR_TINT('COLOR_TINT', float) = 0.0\",\r\n    \"APPLY_RGB_COLOR_VERTEX('APPLY_RGB_COLOR_VERTEX', float) = 0.0\",\r\n    \"DISSOLVE_ENABLED('DISSOLVE_ENABLED', float) = 0.0\",\r\n    \"AUTOMATICPANNING('AUTOMATICPANNING', float) = 0.0\",\r\n    \"EMISSIVEPOWER('EMISSIVEPOWER', float) = 0.0\",\r\n    \"EXTENDED_PARTICLES('EXTENDED_PARTICLES', float) = 0.0\",\r\n    \"NOISE_TEXTURE('NOISE_TEXTURE', float) = 0.0\",\r\n    \"NOISE_TEXTURE_EMISSION('NOISE_TEXTURE_EMISSION', float) = 0.0\",\r\n    \"NOISE_TEXTURE_ALPHA('NOISE_TEXTURE_ALPHA', float) = 0.0\",\r\n    \"NOISE_TEXTURE_DISSOLVE('NOISE_TEXTURE_DISSOLVE', float) = 0.0\",\r\n    \"NOISEUV('NOISEUV', float) = 0.0\",\r\n    \"FLOWMAP('FLOWMAP', float) = 0.0\",\r\n    \"BlendMode('BlendMode', float) = 0.0\"\r\n  ],\r\n  \"passes\": {\r\n    \"base\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"transparent_particles_standard\",\r\n        \"fs\": \"transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"base_fog\": [\r\n      {\r\n        \"blendmode\": \"add\",\r\n        \"showface\": \"all\",\r\n        \"zwrite\": \"off\",\r\n        \"vs\": \"transparent_particles_standard\",\r\n        \"fs\": \"transparent_particles_standard\"\r\n      }\r\n    ],\r\n    \"shadowgen\": [],\r\n    \"bone\": [],\r\n    \"shadowuse\": []\r\n  }\r\n}","transparent_particles_standard.vs.glsl":"#version 300 es\r\n\r\n\r\nprecision mediump float;\r\n\r\nlayout(location = 0) in highp vec3    _glesVertex;\r\nlayout(location = 4) in vec2 _glesMultiTexCoord0;\r\nlayout(location = 3) in vec4 _glesColor;\r\n\r\nuniform vec4 _MainTex_ST;\r\n\r\nuniform vec4 _Panning;\r\nuniform float glstate_timer;\r\n\r\nuniform vec4 _NoiseTex_ST;\r\nuniform vec4 _NoisePanning;\r\n\r\nuniform mat4 glstate_matrix_mvp;\r\n\r\nout vec2 v_uv;\r\nout vec4 v_color;\r\n\r\nuniform float EXTENDED_PARTICLES;\r\nout vec2 v_particledata;\r\n\r\nuniform float NOISE_TEXTURE;\r\nuniform float NOISEUV;\r\nout vec2 v_noiseuv;\r\n\r\nvoid main() \r\n{\r\n    vec3 position = _glesVertex;\r\n    gl_Position = glstate_matrix_mvp * vec4(position, 1.0);\r\n    v_uv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_Panning.xy * glstate_timer);\r\n    v_color = _glesColor;\r\n    // v_color = vec4(1.0,1.0,1.0,1.0);\r\n\r\n    if(EXTENDED_PARTICLES > 0.5)\r\n    {\r\n        if( NOISE_TEXTURE > 0.5)\r\n        {\r\n            if( NOISEUV > 0.5)\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _NoiseTex_ST.xy + _NoiseTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n            else\r\n            {\r\n                v_noiseuv = _glesMultiTexCoord0 * _MainTex_ST.xy + _MainTex_ST.zw + (_NoisePanning.xy * glstate_timer);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // v_particledata = _glesMultiTexCoord0.zw;\r\n        v_particledata = _glesMultiTexCoord0;\r\n    }\r\n}"}